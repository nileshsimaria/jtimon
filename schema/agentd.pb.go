// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: agentd.proto

package schema

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TelemetrySystem struct {
	Subscriptions        *TelemetrySystemSubscriptionsType `protobuf:"bytes,151,opt,name=subscriptions" json:"subscriptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *TelemetrySystem) Reset()         { *m = TelemetrySystem{} }
func (m *TelemetrySystem) String() string { return proto.CompactTextString(m) }
func (*TelemetrySystem) ProtoMessage()    {}
func (*TelemetrySystem) Descriptor() ([]byte, []int) {
	return fileDescriptor_f929025cc6d20165, []int{0}
}
func (m *TelemetrySystem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TelemetrySystem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TelemetrySystem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TelemetrySystem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetrySystem.Merge(m, src)
}
func (m *TelemetrySystem) XXX_Size() int {
	return m.Size()
}
func (m *TelemetrySystem) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetrySystem.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetrySystem proto.InternalMessageInfo

func (m *TelemetrySystem) GetSubscriptions() *TelemetrySystemSubscriptionsType {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

type TelemetrySystemSubscriptionsType struct {
	Dynamic              *TelemetrySystemSubscriptionsTypeDynamicType `protobuf:"bytes,151,opt,name=dynamic" json:"dynamic,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *TelemetrySystemSubscriptionsType) Reset()         { *m = TelemetrySystemSubscriptionsType{} }
func (m *TelemetrySystemSubscriptionsType) String() string { return proto.CompactTextString(m) }
func (*TelemetrySystemSubscriptionsType) ProtoMessage()    {}
func (*TelemetrySystemSubscriptionsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f929025cc6d20165, []int{0, 0}
}
func (m *TelemetrySystemSubscriptionsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TelemetrySystemSubscriptionsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TelemetrySystemSubscriptionsType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TelemetrySystemSubscriptionsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetrySystemSubscriptionsType.Merge(m, src)
}
func (m *TelemetrySystemSubscriptionsType) XXX_Size() int {
	return m.Size()
}
func (m *TelemetrySystemSubscriptionsType) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetrySystemSubscriptionsType.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetrySystemSubscriptionsType proto.InternalMessageInfo

func (m *TelemetrySystemSubscriptionsType) GetDynamic() *TelemetrySystemSubscriptionsTypeDynamicType {
	if m != nil {
		return m.Dynamic
	}
	return nil
}

type TelemetrySystemSubscriptionsTypeDynamicType struct {
	Subscription         []*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList `protobuf:"bytes,151,rep,name=subscription" json:"subscription,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                       `json:"-"`
	XXX_unrecognized     []byte                                                         `json:"-"`
	XXX_sizecache        int32                                                          `json:"-"`
}

func (m *TelemetrySystemSubscriptionsTypeDynamicType) Reset() {
	*m = TelemetrySystemSubscriptionsTypeDynamicType{}
}
func (m *TelemetrySystemSubscriptionsTypeDynamicType) String() string {
	return proto.CompactTextString(m)
}
func (*TelemetrySystemSubscriptionsTypeDynamicType) ProtoMessage() {}
func (*TelemetrySystemSubscriptionsTypeDynamicType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f929025cc6d20165, []int{0, 0, 0}
}
func (m *TelemetrySystemSubscriptionsTypeDynamicType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TelemetrySystemSubscriptionsTypeDynamicType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TelemetrySystemSubscriptionsTypeDynamicType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TelemetrySystemSubscriptionsTypeDynamicType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetrySystemSubscriptionsTypeDynamicType.Merge(m, src)
}
func (m *TelemetrySystemSubscriptionsTypeDynamicType) XXX_Size() int {
	return m.Size()
}
func (m *TelemetrySystemSubscriptionsTypeDynamicType) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetrySystemSubscriptionsTypeDynamicType.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetrySystemSubscriptionsTypeDynamicType proto.InternalMessageInfo

func (m *TelemetrySystemSubscriptionsTypeDynamicType) GetSubscription() []*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList {
	if m != nil {
		return m.Subscription
	}
	return nil
}

type TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList struct {
	SubscriptionId       *uint64                                                                     `protobuf:"varint,51,opt,name=subscription_id,json=subscriptionId" json:"subscription_id,omitempty"`
	State                *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType       `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	SensorPaths          *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsType `protobuf:"bytes,152,opt,name=sensor_paths,json=sensorPaths" json:"sensor_paths,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                    `json:"-"`
	XXX_unrecognized     []byte                                                                      `json:"-"`
	XXX_sizecache        int32                                                                       `json:"-"`
}

func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList) Reset() {
	*m = TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList{}
}
func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList) String() string {
	return proto.CompactTextString(m)
}
func (*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList) ProtoMessage() {}
func (*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_f929025cc6d20165, []int{0, 0, 0, 0}
}
func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList.Merge(m, src)
}
func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList) XXX_Size() int {
	return m.Size()
}
func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList proto.InternalMessageInfo

func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList) GetSubscriptionId() uint64 {
	if m != nil && m.SubscriptionId != nil {
		return *m.SubscriptionId
	}
	return 0
}

func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList) GetState() *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList) GetSensorPaths() *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsType {
	if m != nil {
		return m.SensorPaths
	}
	return nil
}

type TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType struct {
	SubscriptionId       *uint64  `protobuf:"varint,51,opt,name=subscription_id,json=subscriptionId" json:"subscription_id,omitempty"`
	SampleInterval       *uint64  `protobuf:"varint,52,opt,name=sample_interval,json=sampleInterval" json:"sample_interval,omitempty"`
	HeartbeatInterval    *uint64  `protobuf:"varint,53,opt,name=heartbeat_interval,json=heartbeatInterval" json:"heartbeat_interval,omitempty"`
	SuppressRedundant    *bool    `protobuf:"varint,54,opt,name=suppress_redundant,json=suppressRedundant" json:"suppress_redundant,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType) Reset() {
	*m = TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType{}
}
func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType) String() string {
	return proto.CompactTextString(m)
}
func (*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType) ProtoMessage() {}
func (*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f929025cc6d20165, []int{0, 0, 0, 0, 0}
}
func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType.Merge(m, src)
}
func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType) XXX_Size() int {
	return m.Size()
}
func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType proto.InternalMessageInfo

func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType) GetSubscriptionId() uint64 {
	if m != nil && m.SubscriptionId != nil {
		return *m.SubscriptionId
	}
	return 0
}

func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType) GetSampleInterval() uint64 {
	if m != nil && m.SampleInterval != nil {
		return *m.SampleInterval
	}
	return 0
}

func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType) GetHeartbeatInterval() uint64 {
	if m != nil && m.HeartbeatInterval != nil {
		return *m.HeartbeatInterval
	}
	return 0
}

func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType) GetSuppressRedundant() bool {
	if m != nil && m.SuppressRedundant != nil {
		return *m.SuppressRedundant
	}
	return false
}

type TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsType struct {
	SensorPath           []*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList `protobuf:"bytes,151,rep,name=sensor_path,json=sensorPath" json:"sensor_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                                    `json:"-"`
	XXX_unrecognized     []byte                                                                                      `json:"-"`
	XXX_sizecache        int32                                                                                       `json:"-"`
}

func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsType) Reset() {
	*m = TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsType{}
}
func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsType) String() string {
	return proto.CompactTextString(m)
}
func (*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsType) ProtoMessage() {}
func (*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f929025cc6d20165, []int{0, 0, 0, 0, 1}
}
func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsType.Merge(m, src)
}
func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsType) XXX_Size() int {
	return m.Size()
}
func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsType) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsType.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsType proto.InternalMessageInfo

func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsType) GetSensorPath() []*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList {
	if m != nil {
		return m.SensorPath
	}
	return nil
}

type TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList struct {
	Path                 *string                                                                                            `protobuf:"bytes,51,opt,name=path" json:"path,omitempty"`
	State                *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                                           `json:"-"`
	XXX_unrecognized     []byte                                                                                             `json:"-"`
	XXX_sizecache        int32                                                                                              `json:"-"`
}

func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList) Reset() {
	*m = TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList{}
}
func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList) String() string {
	return proto.CompactTextString(m)
}
func (*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList) ProtoMessage() {
}
func (*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList) Descriptor() ([]byte, []int) {
	return fileDescriptor_f929025cc6d20165, []int{0, 0, 0, 0, 1, 0}
}
func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList.Merge(m, src)
}
func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList) XXX_Size() int {
	return m.Size()
}
func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList proto.InternalMessageInfo

func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return ""
}

func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList) GetState() *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType {
	if m != nil {
		return m.State
	}
	return nil
}

type TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType struct {
	Path                 *string  `protobuf:"bytes,51,opt,name=path" json:"path,omitempty"`
	ExcludeFilter        *string  `protobuf:"bytes,52,opt,name=exclude_filter,json=excludeFilter" json:"exclude_filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType) Reset() {
	*m = TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType{}
}
func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType) String() string {
	return proto.CompactTextString(m)
}
func (*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType) ProtoMessage() {
}
func (*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f929025cc6d20165, []int{0, 0, 0, 0, 1, 0, 0}
}
func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType.Merge(m, src)
}
func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType) XXX_Size() int {
	return m.Size()
}
func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType proto.InternalMessageInfo

func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return ""
}

func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType) GetExcludeFilter() string {
	if m != nil && m.ExcludeFilter != nil {
		return *m.ExcludeFilter
	}
	return ""
}

var E_JnprTelemetrySystemExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*TelemetrySystem)(nil),
	Field:         31,
	Name:          "jnpr_telemetry_system_ext",
	Tag:           "bytes,31,opt,name=jnpr_telemetry_system_ext",
	Filename:      "agentd.proto",
}

func init() {
	proto.RegisterType((*TelemetrySystem)(nil), "telemetry_system")
	proto.RegisterType((*TelemetrySystemSubscriptionsType)(nil), "telemetry_system.subscriptions_type")
	proto.RegisterType((*TelemetrySystemSubscriptionsTypeDynamicType)(nil), "telemetry_system.subscriptions_type.dynamic_type")
	proto.RegisterType((*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList)(nil), "telemetry_system.subscriptions_type.dynamic_type.subscription_list")
	proto.RegisterType((*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType)(nil), "telemetry_system.subscriptions_type.dynamic_type.subscription_list.state_type")
	proto.RegisterType((*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsType)(nil), "telemetry_system.subscriptions_type.dynamic_type.subscription_list.sensor_paths_type")
	proto.RegisterType((*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList)(nil), "telemetry_system.subscriptions_type.dynamic_type.subscription_list.sensor_paths_type.sensor_path_list")
	proto.RegisterType((*TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType)(nil), "telemetry_system.subscriptions_type.dynamic_type.subscription_list.sensor_paths_type.sensor_path_list.state_type")
	proto.RegisterExtension(E_JnprTelemetrySystemExt)
}

func init() { proto.RegisterFile("agentd.proto", fileDescriptor_f929025cc6d20165) }

var fileDescriptor_f929025cc6d20165 = []byte{
	// 565 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x92, 0xcd, 0x6e, 0xd3, 0x40,
	0x14, 0x85, 0xe5, 0xfe, 0xa8, 0xc9, 0x24, 0x2d, 0xcd, 0x20, 0x81, 0xeb, 0x45, 0x88, 0x10, 0x88,
	0x6c, 0x62, 0x8b, 0xf2, 0xb3, 0x60, 0x85, 0x8a, 0x00, 0x15, 0x50, 0x85, 0x5c, 0xd8, 0xb0, 0x31,
	0x93, 0xf8, 0x36, 0x9e, 0xd4, 0x19, 0x0f, 0x33, 0xd7, 0x25, 0x59, 0x82, 0x58, 0xc0, 0x13, 0xc0,
	0x9a, 0xe7, 0xe0, 0x01, 0x90, 0xd8, 0xf0, 0x08, 0x28, 0x3b, 0xde, 0x02, 0xd9, 0x8e, 0x89, 0x1d,
	0x0b, 0x09, 0xa4, 0xd2, 0xed, 0x77, 0xcf, 0x9c, 0x7b, 0xe6, 0xea, 0x90, 0x26, 0x1b, 0x82, 0x40,
	0xdf, 0x96, 0x2a, 0xc2, 0xc8, 0x3a, 0x8f, 0x10, 0xc2, 0x18, 0x50, 0x4d, 0x3d, 0x8c, 0x64, 0x06,
	0x2f, 0x7f, 0xab, 0x93, 0xed, 0x05, 0xd7, 0x53, 0x8d, 0x30, 0xa6, 0x8f, 0xc9, 0xa6, 0x8e, 0xfb,
	0x7a, 0xa0, 0xb8, 0x44, 0x1e, 0x09, 0x6d, 0x7e, 0x34, 0x3a, 0x46, 0xb7, 0xb1, 0x7b, 0xc5, 0x5e,
	0x96, 0xda, 0x25, 0x9d, 0x87, 0x53, 0x09, 0x6e, 0xf9, 0xad, 0xf5, 0xb3, 0x46, 0x68, 0x55, 0x45,
	0x9f, 0x90, 0x0d, 0x7f, 0x2a, 0xd8, 0x98, 0x0f, 0x72, 0xf7, 0xeb, 0x7f, 0xe3, 0x6e, 0xcf, 0x1f,
	0x65, 0xab, 0x72, 0x0b, 0xeb, 0x5d, 0x8d, 0x34, 0x8b, 0x13, 0x1a, 0x90, 0x66, 0xf1, 0x71, 0xb2,
	0x63, 0xb5, 0xdb, 0xd8, 0xbd, 0xf7, 0xcf, 0x3b, 0x4a, 0x73, 0x2f, 0xe4, 0x1a, 0xdd, 0x92, 0xb3,
	0xf5, 0x61, 0x83, 0xb4, 0x2a, 0x1a, 0x6a, 0x93, 0x73, 0x25, 0xc8, 0x7d, 0xf3, 0x46, 0xc7, 0xe8,
	0xae, 0xed, 0xad, 0xbf, 0xbd, 0xbb, 0x52, 0x33, 0xdc, 0xad, 0xe2, 0x74, 0xdf, 0xa7, 0x40, 0xd6,
	0x35, 0x32, 0x84, 0xfc, 0x18, 0x07, 0xa7, 0x10, 0xd4, 0x4e, 0x1d, 0xb3, 0x4b, 0x65, 0xee, 0x74,
	0x4a, 0x9a, 0x1a, 0x84, 0x8e, 0x94, 0x27, 0x19, 0x06, 0xda, 0xfc, 0x94, 0x6d, 0x7b, 0x7e, 0x2a,
	0xdb, 0x0a, 0xc6, 0xd9, 0xd2, 0x46, 0x86, 0x9e, 0x26, 0xc4, 0xfa, 0x62, 0x10, 0xb2, 0x08, 0x44,
	0xaf, 0xfd, 0xe1, 0x40, 0x95, 0xcb, 0x24, 0x42, 0x36, 0x96, 0x21, 0x78, 0x5c, 0x20, 0xa8, 0x13,
	0x16, 0x9a, 0x37, 0xe7, 0xc2, 0x14, 0xef, 0xcf, 0x29, 0xed, 0x11, 0x1a, 0x00, 0x53, 0xd8, 0x07,
	0x86, 0x0b, 0xed, 0xad, 0x54, 0xdb, 0xfa, 0x3d, 0x29, 0xca, 0x75, 0x2c, 0xa5, 0x02, 0xad, 0x3d,
	0x05, 0x7e, 0x2c, 0x7c, 0x26, 0xd0, 0xbc, 0xdd, 0x31, 0xba, 0x35, 0xb7, 0x95, 0x4f, 0xdc, 0x7c,
	0x60, 0x7d, 0x5e, 0x25, 0xad, 0xca, 0x0f, 0xe9, 0x7b, 0x83, 0x34, 0x0a, 0x34, 0xaf, 0xd9, 0xd1,
	0x7f, 0xb9, 0x67, 0x91, 0x64, 0x4d, 0x24, 0x8b, 0x03, 0x5b, 0x6f, 0x56, 0xc8, 0xf6, 0xb2, 0x80,
	0xee, 0x90, 0xb5, 0x34, 0x57, 0x72, 0xda, 0x7a, 0xde, 0xbd, 0x14, 0x25, 0xd1, 0xcb, 0x95, 0x7b,
	0x75, 0x36, 0xa1, 0xab, 0xad, 0xb4, 0x1e, 0x96, 0x9a, 0x41, 0x8b, 0x99, 0xe7, 0x61, 0xaf, 0x92,
	0x2d, 0x98, 0x0c, 0xc2, 0xd8, 0x07, 0xef, 0x88, 0x87, 0x08, 0x2a, 0xed, 0x40, 0xdd, 0xdd, 0x9c,
	0xd3, 0x07, 0x29, 0xbc, 0x03, 0x64, 0x67, 0x24, 0xa4, 0xf2, 0x96, 0x3f, 0xe2, 0xc1, 0x04, 0xe9,
	0x45, 0xfb, 0x51, 0x2c, 0xb8, 0x04, 0x75, 0x00, 0xf8, 0x3a, 0x52, 0xc7, 0xfa, 0x30, 0x4d, 0xa6,
	0xcd, 0x4b, 0xe9, 0xf7, 0x5b, 0x95, 0xef, 0xbb, 0x17, 0x12, 0xb3, 0x67, 0x39, 0x3d, 0x4c, 0xe1,
	0xfd, 0x09, 0xee, 0xbd, 0xfc, 0x3a, 0x6b, 0x1b, 0xdf, 0x67, 0x6d, 0xe3, 0xc7, 0xac, 0x6d, 0xbc,
	0x70, 0x87, 0x1c, 0xed, 0x51, 0x66, 0x6d, 0x0b, 0x40, 0x87, 0x0f, 0xa0, 0x0f, 0x6a, 0xe8, 0x04,
	0xc0, 0x42, 0x0c, 0xfa, 0x11, 0xf6, 0xb8, 0x18, 0x82, 0xc6, 0xde, 0x08, 0x79, 0x4f, 0x30, 0xe4,
	0x27, 0xe0, 0xc8, 0xe3, 0xa1, 0x33, 0x42, 0xee, 0x30, 0x9f, 0x49, 0x04, 0xa5, 0x1d, 0x6f, 0x14,
	0x8b, 0x48, 0x3b, 0x7a, 0x10, 0xc0, 0x98, 0xfd, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x6a, 0xbe,
	0xfa, 0xba, 0x05, 0x00, 0x00,
}

func (m *TelemetrySystem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TelemetrySystem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TelemetrySystem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Subscriptions != nil {
		{
			size, err := m.Subscriptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgentd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *TelemetrySystemSubscriptionsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TelemetrySystemSubscriptionsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TelemetrySystemSubscriptionsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Dynamic != nil {
		{
			size, err := m.Dynamic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgentd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *TelemetrySystemSubscriptionsTypeDynamicType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TelemetrySystemSubscriptionsTypeDynamicType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TelemetrySystemSubscriptionsTypeDynamicType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Subscription) > 0 {
		for iNdEx := len(m.Subscription) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subscription[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgentd(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SensorPaths != nil {
		{
			size, err := m.SensorPaths.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgentd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xc2
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgentd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	if m.SubscriptionId != nil {
		i = encodeVarintAgentd(dAtA, i, uint64(*m.SubscriptionId))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SuppressRedundant != nil {
		i--
		if *m.SuppressRedundant {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.HeartbeatInterval != nil {
		i = encodeVarintAgentd(dAtA, i, uint64(*m.HeartbeatInterval))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.SampleInterval != nil {
		i = encodeVarintAgentd(dAtA, i, uint64(*m.SampleInterval))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.SubscriptionId != nil {
		i = encodeVarintAgentd(dAtA, i, uint64(*m.SubscriptionId))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SensorPath) > 0 {
		for iNdEx := len(m.SensorPath) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SensorPath[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgentd(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgentd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	if m.Path != nil {
		i -= len(*m.Path)
		copy(dAtA[i:], *m.Path)
		i = encodeVarintAgentd(dAtA, i, uint64(len(*m.Path)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExcludeFilter != nil {
		i -= len(*m.ExcludeFilter)
		copy(dAtA[i:], *m.ExcludeFilter)
		i = encodeVarintAgentd(dAtA, i, uint64(len(*m.ExcludeFilter)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	if m.Path != nil {
		i -= len(*m.Path)
		copy(dAtA[i:], *m.Path)
		i = encodeVarintAgentd(dAtA, i, uint64(len(*m.Path)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func encodeVarintAgentd(dAtA []byte, offset int, v uint64) int {
	offset -= sovAgentd(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TelemetrySystem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Subscriptions != nil {
		l = m.Subscriptions.Size()
		n += 2 + l + sovAgentd(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TelemetrySystemSubscriptionsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dynamic != nil {
		l = m.Dynamic.Size()
		n += 2 + l + sovAgentd(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TelemetrySystemSubscriptionsTypeDynamicType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Subscription) > 0 {
		for _, e := range m.Subscription {
			l = e.Size()
			n += 2 + l + sovAgentd(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubscriptionId != nil {
		n += 2 + sovAgentd(uint64(*m.SubscriptionId))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 2 + l + sovAgentd(uint64(l))
	}
	if m.SensorPaths != nil {
		l = m.SensorPaths.Size()
		n += 2 + l + sovAgentd(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubscriptionId != nil {
		n += 2 + sovAgentd(uint64(*m.SubscriptionId))
	}
	if m.SampleInterval != nil {
		n += 2 + sovAgentd(uint64(*m.SampleInterval))
	}
	if m.HeartbeatInterval != nil {
		n += 2 + sovAgentd(uint64(*m.HeartbeatInterval))
	}
	if m.SuppressRedundant != nil {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SensorPath) > 0 {
		for _, e := range m.SensorPath {
			l = e.Size()
			n += 2 + l + sovAgentd(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Path != nil {
		l = len(*m.Path)
		n += 2 + l + sovAgentd(uint64(l))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 2 + l + sovAgentd(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Path != nil {
		l = len(*m.Path)
		n += 2 + l + sovAgentd(uint64(l))
	}
	if m.ExcludeFilter != nil {
		l = len(*m.ExcludeFilter)
		n += 2 + l + sovAgentd(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAgentd(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAgentd(x uint64) (n int) {
	return sovAgentd(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TelemetrySystem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: telemetry_system: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: telemetry_system: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgentd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subscriptions == nil {
				m.Subscriptions = &TelemetrySystemSubscriptionsType{}
			}
			if err := m.Subscriptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgentd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TelemetrySystemSubscriptionsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: subscriptions_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: subscriptions_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dynamic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgentd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dynamic == nil {
				m.Dynamic = &TelemetrySystemSubscriptionsTypeDynamicType{}
			}
			if err := m.Dynamic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgentd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TelemetrySystemSubscriptionsTypeDynamicType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: dynamic_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: dynamic_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscription", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgentd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscription = append(m.Subscription, &TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList{})
			if err := m.Subscription[len(m.Subscription)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgentd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: subscription_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: subscription_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SubscriptionId = &v
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgentd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 152:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensorPaths", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgentd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SensorPaths == nil {
				m.SensorPaths = &TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsType{}
			}
			if err := m.SensorPaths.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgentd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListStateType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: state_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: state_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SubscriptionId = &v
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SampleInterval", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SampleInterval = &v
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatInterval", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HeartbeatInterval = &v
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuppressRedundant", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.SuppressRedundant = &b
		default:
			iNdEx = preIndex
			skippy, err := skipAgentd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgentd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: sensor_paths_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: sensor_paths_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensorPath", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgentd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SensorPath = append(m.SensorPath, &TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList{})
			if err := m.SensorPath[len(m.SensorPath)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgentd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: sensor_path_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: sensor_path_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Path = &s
			iNdEx = postIndex
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgentd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgentd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TelemetrySystemSubscriptionsTypeDynamicTypeSubscriptionListSensorPathsTypeSensorPathListStateType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: state_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: state_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Path = &s
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeFilter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ExcludeFilter = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgentd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAgentd(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAgentd
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAgentd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAgentd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAgentd
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAgentd
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAgentd
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAgentd        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAgentd          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAgentd = fmt.Errorf("proto: unexpected end of group")
)
