// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: alarmd_oc.proto

package schema

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SystemAlarm struct {
	Alarms               *SystemAlarmAlarmsType `protobuf:"bytes,150,opt,name=alarms" json:"alarms,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *SystemAlarm) Reset()         { *m = SystemAlarm{} }
func (m *SystemAlarm) String() string { return proto.CompactTextString(m) }
func (*SystemAlarm) ProtoMessage()    {}
func (*SystemAlarm) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb073604d2df3a66, []int{0}
}
func (m *SystemAlarm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemAlarm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemAlarm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemAlarm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemAlarm.Merge(m, src)
}
func (m *SystemAlarm) XXX_Size() int {
	return m.Size()
}
func (m *SystemAlarm) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemAlarm.DiscardUnknown(m)
}

var xxx_messageInfo_SystemAlarm proto.InternalMessageInfo

func (m *SystemAlarm) GetAlarms() *SystemAlarmAlarmsType {
	if m != nil {
		return m.Alarms
	}
	return nil
}

type SystemAlarmAlarmsType struct {
	Alarm                []*SystemAlarmAlarmsTypeAlarmList `protobuf:"bytes,151,rep,name=alarm" json:"alarm,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *SystemAlarmAlarmsType) Reset()         { *m = SystemAlarmAlarmsType{} }
func (m *SystemAlarmAlarmsType) String() string { return proto.CompactTextString(m) }
func (*SystemAlarmAlarmsType) ProtoMessage()    {}
func (*SystemAlarmAlarmsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb073604d2df3a66, []int{0, 0}
}
func (m *SystemAlarmAlarmsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemAlarmAlarmsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemAlarmAlarmsType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemAlarmAlarmsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemAlarmAlarmsType.Merge(m, src)
}
func (m *SystemAlarmAlarmsType) XXX_Size() int {
	return m.Size()
}
func (m *SystemAlarmAlarmsType) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemAlarmAlarmsType.DiscardUnknown(m)
}

var xxx_messageInfo_SystemAlarmAlarmsType proto.InternalMessageInfo

func (m *SystemAlarmAlarmsType) GetAlarm() []*SystemAlarmAlarmsTypeAlarmList {
	if m != nil {
		return m.Alarm
	}
	return nil
}

type SystemAlarmAlarmsTypeAlarmList struct {
	Id                   *string                                  `protobuf:"bytes,51,opt,name=id" json:"id,omitempty"`
	State                *SystemAlarmAlarmsTypeAlarmListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *SystemAlarmAlarmsTypeAlarmList) Reset()         { *m = SystemAlarmAlarmsTypeAlarmList{} }
func (m *SystemAlarmAlarmsTypeAlarmList) String() string { return proto.CompactTextString(m) }
func (*SystemAlarmAlarmsTypeAlarmList) ProtoMessage()    {}
func (*SystemAlarmAlarmsTypeAlarmList) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb073604d2df3a66, []int{0, 0, 0}
}
func (m *SystemAlarmAlarmsTypeAlarmList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemAlarmAlarmsTypeAlarmList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemAlarmAlarmsTypeAlarmList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemAlarmAlarmsTypeAlarmList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemAlarmAlarmsTypeAlarmList.Merge(m, src)
}
func (m *SystemAlarmAlarmsTypeAlarmList) XXX_Size() int {
	return m.Size()
}
func (m *SystemAlarmAlarmsTypeAlarmList) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemAlarmAlarmsTypeAlarmList.DiscardUnknown(m)
}

var xxx_messageInfo_SystemAlarmAlarmsTypeAlarmList proto.InternalMessageInfo

func (m *SystemAlarmAlarmsTypeAlarmList) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *SystemAlarmAlarmsTypeAlarmList) GetState() *SystemAlarmAlarmsTypeAlarmListStateType {
	if m != nil {
		return m.State
	}
	return nil
}

type SystemAlarmAlarmsTypeAlarmListStateType struct {
	Id                   *string  `protobuf:"bytes,51,opt,name=id" json:"id,omitempty"`
	Resource             *string  `protobuf:"bytes,53,opt,name=resource" json:"resource,omitempty"`
	Text                 *string  `protobuf:"bytes,52,opt,name=text" json:"text,omitempty"`
	TimeCreated          *uint64  `protobuf:"varint,54,opt,name=time_created,json=timeCreated" json:"time_created,omitempty"`
	Severity             *string  `protobuf:"bytes,55,opt,name=severity" json:"severity,omitempty"`
	TypeId               *string  `protobuf:"bytes,56,opt,name=type_id,json=typeId" json:"type_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SystemAlarmAlarmsTypeAlarmListStateType) Reset() {
	*m = SystemAlarmAlarmsTypeAlarmListStateType{}
}
func (m *SystemAlarmAlarmsTypeAlarmListStateType) String() string { return proto.CompactTextString(m) }
func (*SystemAlarmAlarmsTypeAlarmListStateType) ProtoMessage()    {}
func (*SystemAlarmAlarmsTypeAlarmListStateType) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb073604d2df3a66, []int{0, 0, 0, 0}
}
func (m *SystemAlarmAlarmsTypeAlarmListStateType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemAlarmAlarmsTypeAlarmListStateType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemAlarmAlarmsTypeAlarmListStateType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemAlarmAlarmsTypeAlarmListStateType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemAlarmAlarmsTypeAlarmListStateType.Merge(m, src)
}
func (m *SystemAlarmAlarmsTypeAlarmListStateType) XXX_Size() int {
	return m.Size()
}
func (m *SystemAlarmAlarmsTypeAlarmListStateType) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemAlarmAlarmsTypeAlarmListStateType.DiscardUnknown(m)
}

var xxx_messageInfo_SystemAlarmAlarmsTypeAlarmListStateType proto.InternalMessageInfo

func (m *SystemAlarmAlarmsTypeAlarmListStateType) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *SystemAlarmAlarmsTypeAlarmListStateType) GetResource() string {
	if m != nil && m.Resource != nil {
		return *m.Resource
	}
	return ""
}

func (m *SystemAlarmAlarmsTypeAlarmListStateType) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

func (m *SystemAlarmAlarmsTypeAlarmListStateType) GetTimeCreated() uint64 {
	if m != nil && m.TimeCreated != nil {
		return *m.TimeCreated
	}
	return 0
}

func (m *SystemAlarmAlarmsTypeAlarmListStateType) GetSeverity() string {
	if m != nil && m.Severity != nil {
		return *m.Severity
	}
	return ""
}

func (m *SystemAlarmAlarmsTypeAlarmListStateType) GetTypeId() string {
	if m != nil && m.TypeId != nil {
		return *m.TypeId
	}
	return ""
}

var E_JnprSystemAlarmExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*SystemAlarm)(nil),
	Field:         111,
	Name:          "jnpr_system_alarm_ext",
	Tag:           "bytes,111,opt,name=jnpr_system_alarm_ext",
	Filename:      "alarmd_oc.proto",
}

func init() {
	proto.RegisterType((*SystemAlarm)(nil), "system_alarm")
	proto.RegisterType((*SystemAlarmAlarmsType)(nil), "system_alarm.alarms_type")
	proto.RegisterType((*SystemAlarmAlarmsTypeAlarmList)(nil), "system_alarm.alarms_type.alarm_list")
	proto.RegisterType((*SystemAlarmAlarmsTypeAlarmListStateType)(nil), "system_alarm.alarms_type.alarm_list.state_type")
	proto.RegisterExtension(E_JnprSystemAlarmExt)
}

func init() { proto.RegisterFile("alarmd_oc.proto", fileDescriptor_bb073604d2df3a66) }

var fileDescriptor_bb073604d2df3a66 = []byte{
	// 420 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xcf, 0x6e, 0x13, 0x31,
	0x10, 0xc6, 0xe5, 0x6d, 0x53, 0xca, 0xa4, 0x80, 0x64, 0x54, 0xd5, 0xec, 0x21, 0x0a, 0x88, 0x43,
	0x2e, 0xd9, 0x95, 0xc2, 0x5f, 0xc1, 0x05, 0x8a, 0x40, 0x82, 0x03, 0x87, 0xed, 0x09, 0x2e, 0xc6,
	0xdd, 0x1d, 0x25, 0xde, 0x66, 0xd7, 0x2b, 0x7b, 0x52, 0x9a, 0x2b, 0x8f, 0xc0, 0x01, 0x5e, 0x20,
	0x0f, 0xc3, 0x91, 0x37, 0x00, 0xe5, 0x49, 0x90, 0x6d, 0x20, 0xe1, 0x80, 0xd4, 0xdb, 0x7c, 0xbf,
	0xf1, 0x7c, 0xdf, 0x78, 0xe0, 0x86, 0x9a, 0x2b, 0xdb, 0x54, 0xd2, 0x94, 0x59, 0x67, 0x0d, 0x99,
	0xf4, 0x26, 0xe1, 0x1c, 0x1b, 0x24, 0xbb, 0x94, 0x64, 0xba, 0x08, 0xef, 0xac, 0x76, 0xe0, 0xc0,
	0x2d, 0x1d, 0x61, 0x23, 0xc3, 0x7b, 0x3e, 0x81, 0xbd, 0x50, 0x38, 0xf1, 0x85, 0x0d, 0xd9, 0xa8,
	0x3f, 0xb9, 0x95, 0x6d, 0xf7, 0xb3, 0xd8, 0x94, 0xb4, 0xec, 0xb0, 0xf8, 0xfd, 0x32, 0xfd, 0x91,
	0x40, 0x7f, 0x8b, 0xf3, 0xa7, 0xd0, 0x0b, 0x52, 0x7c, 0x65, 0xc3, 0x9d, 0x51, 0x7f, 0x72, 0xf7,
	0xbf, 0x16, 0xb1, 0x96, 0x73, 0xed, 0xa8, 0x88, 0x33, 0xe9, 0xe7, 0x04, 0x60, 0x43, 0xf9, 0x21,
	0x24, 0xba, 0x12, 0xf7, 0x86, 0x6c, 0x74, 0xf5, 0xb8, 0xf7, 0xe9, 0x59, 0xb2, 0xcf, 0x8a, 0x44,
	0x57, 0xfc, 0x15, 0xf4, 0x1c, 0x29, 0x42, 0x1f, 0xe1, 0xb7, 0xcc, 0x2f, 0x13, 0x91, 0x85, 0x91,
	0xb8, 0x7b, 0x1c, 0x4f, 0x57, 0x0c, 0x60, 0x43, 0xf9, 0xf5, 0x4d, 0x5a, 0x88, 0x49, 0x61, 0xdf,
	0xa2, 0x33, 0x0b, 0x5b, 0xa2, 0x78, 0x10, 0xe8, 0x5f, 0xcd, 0x39, 0xec, 0x12, 0x5e, 0x90, 0xb8,
	0x1f, 0x78, 0xa8, 0xf9, 0x6d, 0x38, 0x20, 0xdd, 0xa0, 0x2c, 0x2d, 0x2a, 0xc2, 0x4a, 0x3c, 0x1c,
	0xb2, 0xd1, 0x6e, 0xd1, 0xf7, 0xec, 0x45, 0x44, 0xde, 0xd2, 0xe1, 0x39, 0x5a, 0x4d, 0x4b, 0xf1,
	0x28, 0x5a, 0xfe, 0xd1, 0xfc, 0x08, 0xae, 0xf8, 0x35, 0xa4, 0xae, 0xc4, 0xe3, 0xd0, 0xda, 0xf3,
	0xf2, 0x75, 0xf5, 0xe4, 0x1d, 0x1c, 0xd6, 0x6d, 0x67, 0xe5, 0xf6, 0x27, 0xa5, 0x0f, 0x3c, 0xca,
	0xde, 0x2c, 0x5a, 0xdd, 0xa1, 0x7d, 0x8b, 0xf4, 0xd1, 0xd8, 0x33, 0x77, 0x82, 0xad, 0x33, 0xd6,
	0x09, 0x13, 0xce, 0x72, 0xed, 0x9f, 0xb3, 0x14, 0xdc, 0x9b, 0x9c, 0x04, 0xf2, 0xdc, 0x83, 0x97,
	0x17, 0x74, 0xfc, 0xe1, 0xdb, 0x7a, 0xc0, 0xbe, 0xaf, 0x07, 0xec, 0xe7, 0x7a, 0xc0, 0xde, 0x17,
	0x53, 0x4d, 0x59, 0x1d, 0x2d, 0xb3, 0x16, 0x29, 0xd7, 0x25, 0x9e, 0xa2, 0x9d, 0xe6, 0x33, 0x54,
	0x73, 0x9a, 0x9d, 0x1a, 0x1a, 0xeb, 0x76, 0x8a, 0x8e, 0xc6, 0x35, 0xe9, 0x71, 0xab, 0x48, 0x9f,
	0x63, 0xde, 0x9d, 0x4d, 0xf3, 0x9a, 0x74, 0xae, 0x2a, 0xd5, 0x11, 0x5a, 0x97, 0xcb, 0x7a, 0xd1,
	0x1a, 0x97, 0xbb, 0x72, 0x86, 0x8d, 0xfa, 0x15, 0x00, 0x00, 0xff, 0xff, 0xaf, 0x4b, 0x90, 0x46,
	0x8a, 0x02, 0x00, 0x00,
}

func (m *SystemAlarm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemAlarm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemAlarm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Alarms != nil {
		{
			size, err := m.Alarms.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAlarmdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}

func (m *SystemAlarmAlarmsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemAlarmAlarmsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemAlarmAlarmsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Alarm) > 0 {
		for iNdEx := len(m.Alarm) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Alarm[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAlarmdOc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *SystemAlarmAlarmsTypeAlarmList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemAlarmAlarmsTypeAlarmList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemAlarmAlarmsTypeAlarmList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAlarmdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	if m.Id != nil {
		i -= len(*m.Id)
		copy(dAtA[i:], *m.Id)
		i = encodeVarintAlarmdOc(dAtA, i, uint64(len(*m.Id)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *SystemAlarmAlarmsTypeAlarmListStateType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemAlarmAlarmsTypeAlarmListStateType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemAlarmAlarmsTypeAlarmListStateType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TypeId != nil {
		i -= len(*m.TypeId)
		copy(dAtA[i:], *m.TypeId)
		i = encodeVarintAlarmdOc(dAtA, i, uint64(len(*m.TypeId)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc2
	}
	if m.Severity != nil {
		i -= len(*m.Severity)
		copy(dAtA[i:], *m.Severity)
		i = encodeVarintAlarmdOc(dAtA, i, uint64(len(*m.Severity)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	if m.TimeCreated != nil {
		i = encodeVarintAlarmdOc(dAtA, i, uint64(*m.TimeCreated))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.Resource != nil {
		i -= len(*m.Resource)
		copy(dAtA[i:], *m.Resource)
		i = encodeVarintAlarmdOc(dAtA, i, uint64(len(*m.Resource)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	if m.Text != nil {
		i -= len(*m.Text)
		copy(dAtA[i:], *m.Text)
		i = encodeVarintAlarmdOc(dAtA, i, uint64(len(*m.Text)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	if m.Id != nil {
		i -= len(*m.Id)
		copy(dAtA[i:], *m.Id)
		i = encodeVarintAlarmdOc(dAtA, i, uint64(len(*m.Id)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func encodeVarintAlarmdOc(dAtA []byte, offset int, v uint64) int {
	offset -= sovAlarmdOc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SystemAlarm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Alarms != nil {
		l = m.Alarms.Size()
		n += 2 + l + sovAlarmdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SystemAlarmAlarmsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Alarm) > 0 {
		for _, e := range m.Alarm {
			l = e.Size()
			n += 2 + l + sovAlarmdOc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SystemAlarmAlarmsTypeAlarmList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 2 + l + sovAlarmdOc(uint64(l))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 2 + l + sovAlarmdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SystemAlarmAlarmsTypeAlarmListStateType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 2 + l + sovAlarmdOc(uint64(l))
	}
	if m.Text != nil {
		l = len(*m.Text)
		n += 2 + l + sovAlarmdOc(uint64(l))
	}
	if m.Resource != nil {
		l = len(*m.Resource)
		n += 2 + l + sovAlarmdOc(uint64(l))
	}
	if m.TimeCreated != nil {
		n += 2 + sovAlarmdOc(uint64(*m.TimeCreated))
	}
	if m.Severity != nil {
		l = len(*m.Severity)
		n += 2 + l + sovAlarmdOc(uint64(l))
	}
	if m.TypeId != nil {
		l = len(*m.TypeId)
		n += 2 + l + sovAlarmdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAlarmdOc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAlarmdOc(x uint64) (n int) {
	return sovAlarmdOc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SystemAlarm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlarmdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: system_alarm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: system_alarm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 150:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alarms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlarmdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlarmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Alarms == nil {
				m.Alarms = &SystemAlarmAlarmsType{}
			}
			if err := m.Alarms.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlarmdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlarmdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAlarmdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemAlarmAlarmsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlarmdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: alarms_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: alarms_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alarm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlarmdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlarmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alarm = append(m.Alarm, &SystemAlarmAlarmsTypeAlarmList{})
			if err := m.Alarm[len(m.Alarm)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlarmdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlarmdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAlarmdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemAlarmAlarmsTypeAlarmList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlarmdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: alarm_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: alarm_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlarmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlarmdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlarmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &SystemAlarmAlarmsTypeAlarmListStateType{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlarmdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlarmdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAlarmdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemAlarmAlarmsTypeAlarmListStateType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlarmdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: state_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: state_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlarmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlarmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Text = &s
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlarmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Resource = &s
			iNdEx = postIndex
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeCreated", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimeCreated = &v
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Severity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlarmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Severity = &s
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlarmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlarmdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlarmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TypeId = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlarmdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlarmdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAlarmdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAlarmdOc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAlarmdOc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlarmdOc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlarmdOc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAlarmdOc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAlarmdOc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAlarmdOc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAlarmdOc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAlarmdOc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAlarmdOc = fmt.Errorf("proto: unexpected end of group")
)
