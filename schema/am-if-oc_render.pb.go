// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: am-if-oc_render.proto

package schema

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InterfacesIpCounters struct {
	Interface            []*InterfacesIpCountersInterfaceList `protobuf:"bytes,151,rep,name=interface" json:"interface,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *InterfacesIpCounters) Reset()         { *m = InterfacesIpCounters{} }
func (m *InterfacesIpCounters) String() string { return proto.CompactTextString(m) }
func (*InterfacesIpCounters) ProtoMessage()    {}
func (*InterfacesIpCounters) Descriptor() ([]byte, []int) {
	return fileDescriptor_c710b3a3b914432f, []int{0}
}
func (m *InterfacesIpCounters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesIpCounters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesIpCounters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesIpCounters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesIpCounters.Merge(m, src)
}
func (m *InterfacesIpCounters) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesIpCounters) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesIpCounters.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesIpCounters proto.InternalMessageInfo

func (m *InterfacesIpCounters) GetInterface() []*InterfacesIpCountersInterfaceList {
	if m != nil {
		return m.Interface
	}
	return nil
}

type InterfacesIpCountersInterfaceList struct {
	Name                 *string                                               `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	InitTime             *uint64                                               `protobuf:"varint,52,opt,name=init_time,json=initTime" json:"init_time,omitempty"`
	State                []*InterfacesIpCountersInterfaceListStateList         `protobuf:"bytes,151,rep,name=state" json:"state,omitempty"`
	Subinterfaces        []*InterfacesIpCountersInterfaceListSubinterfacesList `protobuf:"bytes,152,rep,name=subinterfaces" json:"subinterfaces,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                              `json:"-"`
	XXX_unrecognized     []byte                                                `json:"-"`
	XXX_sizecache        int32                                                 `json:"-"`
}

func (m *InterfacesIpCountersInterfaceList) Reset()         { *m = InterfacesIpCountersInterfaceList{} }
func (m *InterfacesIpCountersInterfaceList) String() string { return proto.CompactTextString(m) }
func (*InterfacesIpCountersInterfaceList) ProtoMessage()    {}
func (*InterfacesIpCountersInterfaceList) Descriptor() ([]byte, []int) {
	return fileDescriptor_c710b3a3b914432f, []int{0, 0}
}
func (m *InterfacesIpCountersInterfaceList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesIpCountersInterfaceList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesIpCountersInterfaceList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesIpCountersInterfaceList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesIpCountersInterfaceList.Merge(m, src)
}
func (m *InterfacesIpCountersInterfaceList) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesIpCountersInterfaceList) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesIpCountersInterfaceList.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesIpCountersInterfaceList proto.InternalMessageInfo

func (m *InterfacesIpCountersInterfaceList) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *InterfacesIpCountersInterfaceList) GetInitTime() uint64 {
	if m != nil && m.InitTime != nil {
		return *m.InitTime
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceList) GetState() []*InterfacesIpCountersInterfaceListStateList {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *InterfacesIpCountersInterfaceList) GetSubinterfaces() []*InterfacesIpCountersInterfaceListSubinterfacesList {
	if m != nil {
		return m.Subinterfaces
	}
	return nil
}

type InterfacesIpCountersInterfaceListStateList struct {
	ParentAeName         *string                                                   `protobuf:"bytes,51,opt,name=parent_ae_name,json=parentAeName" json:"parent_ae_name,omitempty"`
	OperStatus           *string                                                   `protobuf:"bytes,52,opt,name=oper_status,json=operStatus" json:"oper_status,omitempty"`
	HighSpeed            *uint32                                                   `protobuf:"varint,53,opt,name=high_speed,json=highSpeed" json:"high_speed,omitempty"`
	Counters             []*InterfacesIpCountersInterfaceListStateListCountersList `protobuf:"bytes,151,rep,name=counters" json:"counters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                  `json:"-"`
	XXX_unrecognized     []byte                                                    `json:"-"`
	XXX_sizecache        int32                                                     `json:"-"`
}

func (m *InterfacesIpCountersInterfaceListStateList) Reset() {
	*m = InterfacesIpCountersInterfaceListStateList{}
}
func (m *InterfacesIpCountersInterfaceListStateList) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesIpCountersInterfaceListStateList) ProtoMessage() {}
func (*InterfacesIpCountersInterfaceListStateList) Descriptor() ([]byte, []int) {
	return fileDescriptor_c710b3a3b914432f, []int{0, 0, 0}
}
func (m *InterfacesIpCountersInterfaceListStateList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesIpCountersInterfaceListStateList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesIpCountersInterfaceListStateList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesIpCountersInterfaceListStateList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesIpCountersInterfaceListStateList.Merge(m, src)
}
func (m *InterfacesIpCountersInterfaceListStateList) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesIpCountersInterfaceListStateList) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesIpCountersInterfaceListStateList.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesIpCountersInterfaceListStateList proto.InternalMessageInfo

func (m *InterfacesIpCountersInterfaceListStateList) GetParentAeName() string {
	if m != nil && m.ParentAeName != nil {
		return *m.ParentAeName
	}
	return ""
}

func (m *InterfacesIpCountersInterfaceListStateList) GetOperStatus() string {
	if m != nil && m.OperStatus != nil {
		return *m.OperStatus
	}
	return ""
}

func (m *InterfacesIpCountersInterfaceListStateList) GetHighSpeed() uint32 {
	if m != nil && m.HighSpeed != nil {
		return *m.HighSpeed
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListStateList) GetCounters() []*InterfacesIpCountersInterfaceListStateListCountersList {
	if m != nil {
		return m.Counters
	}
	return nil
}

type InterfacesIpCountersInterfaceListStateListCountersList struct {
	InPkts               *uint64  `protobuf:"varint,51,opt,name=in_pkts,json=inPkts" json:"in_pkts,omitempty"`
	InOctets             *uint64  `protobuf:"varint,52,opt,name=in_octets,json=inOctets" json:"in_octets,omitempty"`
	InUnicastPkts        *uint64  `protobuf:"varint,53,opt,name=in_unicast_pkts,json=inUnicastPkts" json:"in_unicast_pkts,omitempty"`
	InMulticastPkts      *uint64  `protobuf:"varint,54,opt,name=in_multicast_pkts,json=inMulticastPkts" json:"in_multicast_pkts,omitempty"`
	InBroadcastPkts      *uint64  `protobuf:"varint,55,opt,name=in_broadcast_pkts,json=inBroadcastPkts" json:"in_broadcast_pkts,omitempty"`
	InPausePkts          *uint64  `protobuf:"varint,56,opt,name=in_pause_pkts,json=inPausePkts" json:"in_pause_pkts,omitempty"`
	OutPkts              *uint64  `protobuf:"varint,57,opt,name=out_pkts,json=outPkts" json:"out_pkts,omitempty"`
	OutOctets            *uint64  `protobuf:"varint,58,opt,name=out_octets,json=outOctets" json:"out_octets,omitempty"`
	OutUnicastPkts       *uint64  `protobuf:"varint,59,opt,name=out_unicast_pkts,json=outUnicastPkts" json:"out_unicast_pkts,omitempty"`
	OutMulticastPkts     *uint64  `protobuf:"varint,60,opt,name=out_multicast_pkts,json=outMulticastPkts" json:"out_multicast_pkts,omitempty"`
	OutBroadcastPkts     *uint64  `protobuf:"varint,61,opt,name=out_broadcast_pkts,json=outBroadcastPkts" json:"out_broadcast_pkts,omitempty"`
	OutPausePkts         *uint64  `protobuf:"varint,62,opt,name=out_pause_pkts,json=outPausePkts" json:"out_pause_pkts,omitempty"`
	InErrors             *uint64  `protobuf:"varint,63,opt,name=in_errors,json=inErrors" json:"in_errors,omitempty"`
	InDiscards           *uint64  `protobuf:"varint,64,opt,name=in_discards,json=inDiscards" json:"in_discards,omitempty"`
	InUnknownProtoPkts   *uint64  `protobuf:"varint,65,opt,name=in_unknown_proto_pkts,json=inUnknownProtoPkts" json:"in_unknown_proto_pkts,omitempty"`
	CarrierTransitions   *uint64  `protobuf:"varint,66,opt,name=carrier_transitions,json=carrierTransitions" json:"carrier_transitions,omitempty"`
	OutErrors            *uint64  `protobuf:"varint,67,opt,name=out_errors,json=outErrors" json:"out_errors,omitempty"`
	OutDiscards          *uint64  `protobuf:"varint,68,opt,name=out_discards,json=outDiscards" json:"out_discards,omitempty"`
	OutUnknownProtoPkts  *uint64  `protobuf:"varint,69,opt,name=out_unknown_proto_pkts,json=outUnknownProtoPkts" json:"out_unknown_proto_pkts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InterfacesIpCountersInterfaceListStateListCountersList) Reset() {
	*m = InterfacesIpCountersInterfaceListStateListCountersList{}
}
func (m *InterfacesIpCountersInterfaceListStateListCountersList) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesIpCountersInterfaceListStateListCountersList) ProtoMessage() {}
func (*InterfacesIpCountersInterfaceListStateListCountersList) Descriptor() ([]byte, []int) {
	return fileDescriptor_c710b3a3b914432f, []int{0, 0, 0, 0}
}
func (m *InterfacesIpCountersInterfaceListStateListCountersList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesIpCountersInterfaceListStateListCountersList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesIpCountersInterfaceListStateListCountersList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesIpCountersInterfaceListStateListCountersList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesIpCountersInterfaceListStateListCountersList.Merge(m, src)
}
func (m *InterfacesIpCountersInterfaceListStateListCountersList) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesIpCountersInterfaceListStateListCountersList) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesIpCountersInterfaceListStateListCountersList.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesIpCountersInterfaceListStateListCountersList proto.InternalMessageInfo

func (m *InterfacesIpCountersInterfaceListStateListCountersList) GetInPkts() uint64 {
	if m != nil && m.InPkts != nil {
		return *m.InPkts
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListStateListCountersList) GetInOctets() uint64 {
	if m != nil && m.InOctets != nil {
		return *m.InOctets
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListStateListCountersList) GetInUnicastPkts() uint64 {
	if m != nil && m.InUnicastPkts != nil {
		return *m.InUnicastPkts
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListStateListCountersList) GetInMulticastPkts() uint64 {
	if m != nil && m.InMulticastPkts != nil {
		return *m.InMulticastPkts
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListStateListCountersList) GetInBroadcastPkts() uint64 {
	if m != nil && m.InBroadcastPkts != nil {
		return *m.InBroadcastPkts
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListStateListCountersList) GetInPausePkts() uint64 {
	if m != nil && m.InPausePkts != nil {
		return *m.InPausePkts
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListStateListCountersList) GetOutPkts() uint64 {
	if m != nil && m.OutPkts != nil {
		return *m.OutPkts
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListStateListCountersList) GetOutOctets() uint64 {
	if m != nil && m.OutOctets != nil {
		return *m.OutOctets
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListStateListCountersList) GetOutUnicastPkts() uint64 {
	if m != nil && m.OutUnicastPkts != nil {
		return *m.OutUnicastPkts
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListStateListCountersList) GetOutMulticastPkts() uint64 {
	if m != nil && m.OutMulticastPkts != nil {
		return *m.OutMulticastPkts
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListStateListCountersList) GetOutBroadcastPkts() uint64 {
	if m != nil && m.OutBroadcastPkts != nil {
		return *m.OutBroadcastPkts
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListStateListCountersList) GetOutPausePkts() uint64 {
	if m != nil && m.OutPausePkts != nil {
		return *m.OutPausePkts
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListStateListCountersList) GetInErrors() uint64 {
	if m != nil && m.InErrors != nil {
		return *m.InErrors
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListStateListCountersList) GetInDiscards() uint64 {
	if m != nil && m.InDiscards != nil {
		return *m.InDiscards
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListStateListCountersList) GetInUnknownProtoPkts() uint64 {
	if m != nil && m.InUnknownProtoPkts != nil {
		return *m.InUnknownProtoPkts
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListStateListCountersList) GetCarrierTransitions() uint64 {
	if m != nil && m.CarrierTransitions != nil {
		return *m.CarrierTransitions
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListStateListCountersList) GetOutErrors() uint64 {
	if m != nil && m.OutErrors != nil {
		return *m.OutErrors
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListStateListCountersList) GetOutDiscards() uint64 {
	if m != nil && m.OutDiscards != nil {
		return *m.OutDiscards
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListStateListCountersList) GetOutUnknownProtoPkts() uint64 {
	if m != nil && m.OutUnknownProtoPkts != nil {
		return *m.OutUnknownProtoPkts
	}
	return 0
}

type InterfacesIpCountersInterfaceListSubinterfacesList struct {
	Subinterface         []*InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceList `protobuf:"bytes,151,rep,name=subinterface" json:"subinterface,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                              `json:"-"`
	XXX_unrecognized     []byte                                                                `json:"-"`
	XXX_sizecache        int32                                                                 `json:"-"`
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesList) Reset() {
	*m = InterfacesIpCountersInterfaceListSubinterfacesList{}
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesList) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesIpCountersInterfaceListSubinterfacesList) ProtoMessage() {}
func (*InterfacesIpCountersInterfaceListSubinterfacesList) Descriptor() ([]byte, []int) {
	return fileDescriptor_c710b3a3b914432f, []int{0, 0, 1}
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesList.Merge(m, src)
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesList) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesList) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesList.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesList proto.InternalMessageInfo

func (m *InterfacesIpCountersInterfaceListSubinterfacesList) GetSubinterface() []*InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceList {
	if m != nil {
		return m.Subinterface
	}
	return nil
}

type InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceList struct {
	Index                *uint32                                                                        `protobuf:"varint,51,opt,name=index" json:"index,omitempty"`
	InitTime             *uint64                                                                        `protobuf:"varint,52,opt,name=init_time,json=initTime" json:"init_time,omitempty"`
	State                []*InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateList `protobuf:"bytes,151,rep,name=state" json:"state,omitempty"`
	Ipv4                 *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4Type    `protobuf:"bytes,153,opt,name=ipv4" json:"ipv4,omitempty"`
	Ipv6                 *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6Type    `protobuf:"bytes,154,opt,name=ipv6" json:"ipv6,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                       `json:"-"`
	XXX_unrecognized     []byte                                                                         `json:"-"`
	XXX_sizecache        int32                                                                          `json:"-"`
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceList) Reset() {
	*m = InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceList{}
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceList) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceList) ProtoMessage() {}
func (*InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceList) Descriptor() ([]byte, []int) {
	return fileDescriptor_c710b3a3b914432f, []int{0, 0, 1, 0}
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceList.Merge(m, src)
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceList) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceList) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceList.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceList proto.InternalMessageInfo

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceList) GetIndex() uint32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceList) GetInitTime() uint64 {
	if m != nil && m.InitTime != nil {
		return *m.InitTime
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceList) GetState() []*InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateList {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceList) GetIpv4() *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4Type {
	if m != nil {
		return m.Ipv4
	}
	return nil
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceList) GetIpv6() *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6Type {
	if m != nil {
		return m.Ipv6
	}
	return nil
}

type InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateList struct {
	ParentAeName         *string                                                                                    `protobuf:"bytes,51,opt,name=parent_ae_name,json=parentAeName" json:"parent_ae_name,omitempty"`
	OperStatus           *string                                                                                    `protobuf:"bytes,52,opt,name=oper_status,json=operStatus" json:"oper_status,omitempty"`
	Counters             []*InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateListCountersList `protobuf:"bytes,151,rep,name=counters" json:"counters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                                   `json:"-"`
	XXX_unrecognized     []byte                                                                                     `json:"-"`
	XXX_sizecache        int32                                                                                      `json:"-"`
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateList) Reset() {
	*m = InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateList{}
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateList) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateList) ProtoMessage() {}
func (*InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateList) Descriptor() ([]byte, []int) {
	return fileDescriptor_c710b3a3b914432f, []int{0, 0, 1, 0, 0}
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateList.Merge(m, src)
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateList) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateList) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateList.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateList proto.InternalMessageInfo

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateList) GetParentAeName() string {
	if m != nil && m.ParentAeName != nil {
		return *m.ParentAeName
	}
	return ""
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateList) GetOperStatus() string {
	if m != nil && m.OperStatus != nil {
		return *m.OperStatus
	}
	return ""
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateList) GetCounters() []*InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateListCountersList {
	if m != nil {
		return m.Counters
	}
	return nil
}

type InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateListCountersList struct {
	InPkts               *uint64  `protobuf:"varint,51,opt,name=in_pkts,json=inPkts" json:"in_pkts,omitempty"`
	InOctets             *uint64  `protobuf:"varint,52,opt,name=in_octets,json=inOctets" json:"in_octets,omitempty"`
	OutPkts              *uint64  `protobuf:"varint,53,opt,name=out_pkts,json=outPkts" json:"out_pkts,omitempty"`
	OutOctets            *uint64  `protobuf:"varint,54,opt,name=out_octets,json=outOctets" json:"out_octets,omitempty"`
	InUnicastPkts        *uint64  `protobuf:"varint,55,opt,name=in_unicast_pkts,json=inUnicastPkts" json:"in_unicast_pkts,omitempty"`
	InMulticastPkts      *uint64  `protobuf:"varint,56,opt,name=in_multicast_pkts,json=inMulticastPkts" json:"in_multicast_pkts,omitempty"`
	OutUnicastPkts       *uint64  `protobuf:"varint,57,opt,name=out_unicast_pkts,json=outUnicastPkts" json:"out_unicast_pkts,omitempty"`
	OutMulticastPkts     *uint64  `protobuf:"varint,58,opt,name=out_multicast_pkts,json=outMulticastPkts" json:"out_multicast_pkts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateListCountersList) Reset() {
	*m = InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateListCountersList{}
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateListCountersList) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateListCountersList) ProtoMessage() {
}
func (*InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateListCountersList) Descriptor() ([]byte, []int) {
	return fileDescriptor_c710b3a3b914432f, []int{0, 0, 1, 0, 0, 0}
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateListCountersList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateListCountersList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateListCountersList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateListCountersList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateListCountersList.Merge(m, src)
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateListCountersList) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateListCountersList) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateListCountersList.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateListCountersList proto.InternalMessageInfo

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateListCountersList) GetInPkts() uint64 {
	if m != nil && m.InPkts != nil {
		return *m.InPkts
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateListCountersList) GetInOctets() uint64 {
	if m != nil && m.InOctets != nil {
		return *m.InOctets
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateListCountersList) GetOutPkts() uint64 {
	if m != nil && m.OutPkts != nil {
		return *m.OutPkts
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateListCountersList) GetOutOctets() uint64 {
	if m != nil && m.OutOctets != nil {
		return *m.OutOctets
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateListCountersList) GetInUnicastPkts() uint64 {
	if m != nil && m.InUnicastPkts != nil {
		return *m.InUnicastPkts
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateListCountersList) GetInMulticastPkts() uint64 {
	if m != nil && m.InMulticastPkts != nil {
		return *m.InMulticastPkts
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateListCountersList) GetOutUnicastPkts() uint64 {
	if m != nil && m.OutUnicastPkts != nil {
		return *m.OutUnicastPkts
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateListCountersList) GetOutMulticastPkts() uint64 {
	if m != nil && m.OutMulticastPkts != nil {
		return *m.OutMulticastPkts
	}
	return 0
}

type InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4Type struct {
	State                *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateType `protobuf:"bytes,153,opt,name=state" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                             `json:"-"`
	XXX_unrecognized     []byte                                                                               `json:"-"`
	XXX_sizecache        int32                                                                                `json:"-"`
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4Type) Reset() {
	*m = InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4Type{}
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4Type) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4Type) ProtoMessage() {}
func (*InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4Type) Descriptor() ([]byte, []int) {
	return fileDescriptor_c710b3a3b914432f, []int{0, 0, 1, 0, 1}
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4Type) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4Type) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4Type.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4Type) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4Type.Merge(m, src)
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4Type) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4Type) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4Type.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4Type proto.InternalMessageInfo

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4Type) GetState() *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateType {
	if m != nil {
		return m.State
	}
	return nil
}

type InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateType struct {
	Counters             []*InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateTypeCountersList `protobuf:"bytes,153,rep,name=counters" json:"counters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                                           `json:"-"`
	XXX_unrecognized     []byte                                                                                             `json:"-"`
	XXX_sizecache        int32                                                                                              `json:"-"`
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateType) Reset() {
	*m = InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateType{}
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateType) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateType) ProtoMessage() {
}
func (*InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateType) Descriptor() ([]byte, []int) {
	return fileDescriptor_c710b3a3b914432f, []int{0, 0, 1, 0, 1, 0}
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateType.Merge(m, src)
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateType) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateType proto.InternalMessageInfo

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateType) GetCounters() []*InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateTypeCountersList {
	if m != nil {
		return m.Counters
	}
	return nil
}

type InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateTypeCountersList struct {
	InPkts               *uint64  `protobuf:"varint,51,opt,name=in_pkts,json=inPkts" json:"in_pkts,omitempty"`
	InOctets             *uint64  `protobuf:"varint,52,opt,name=in_octets,json=inOctets" json:"in_octets,omitempty"`
	InMulticastPkts      *uint64  `protobuf:"varint,53,opt,name=in_multicast_pkts,json=inMulticastPkts" json:"in_multicast_pkts,omitempty"`
	InMulticastOctets    *uint64  `protobuf:"varint,54,opt,name=in_multicast_octets,json=inMulticastOctets" json:"in_multicast_octets,omitempty"`
	OutPkts              *uint64  `protobuf:"varint,55,opt,name=out_pkts,json=outPkts" json:"out_pkts,omitempty"`
	OutOctets            *uint64  `protobuf:"varint,56,opt,name=out_octets,json=outOctets" json:"out_octets,omitempty"`
	OutMulticastPkts     *uint64  `protobuf:"varint,57,opt,name=out_multicast_pkts,json=outMulticastPkts" json:"out_multicast_pkts,omitempty"`
	OutMulticastOctets   *uint64  `protobuf:"varint,58,opt,name=out_multicast_octets,json=outMulticastOctets" json:"out_multicast_octets,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateTypeCountersList) Reset() {
	*m = InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateTypeCountersList{}
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateTypeCountersList) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateTypeCountersList) ProtoMessage() {
}
func (*InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateTypeCountersList) Descriptor() ([]byte, []int) {
	return fileDescriptor_c710b3a3b914432f, []int{0, 0, 1, 0, 1, 0, 0}
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateTypeCountersList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateTypeCountersList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateTypeCountersList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateTypeCountersList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateTypeCountersList.Merge(m, src)
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateTypeCountersList) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateTypeCountersList) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateTypeCountersList.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateTypeCountersList proto.InternalMessageInfo

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateTypeCountersList) GetInPkts() uint64 {
	if m != nil && m.InPkts != nil {
		return *m.InPkts
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateTypeCountersList) GetInOctets() uint64 {
	if m != nil && m.InOctets != nil {
		return *m.InOctets
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateTypeCountersList) GetInMulticastPkts() uint64 {
	if m != nil && m.InMulticastPkts != nil {
		return *m.InMulticastPkts
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateTypeCountersList) GetInMulticastOctets() uint64 {
	if m != nil && m.InMulticastOctets != nil {
		return *m.InMulticastOctets
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateTypeCountersList) GetOutPkts() uint64 {
	if m != nil && m.OutPkts != nil {
		return *m.OutPkts
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateTypeCountersList) GetOutOctets() uint64 {
	if m != nil && m.OutOctets != nil {
		return *m.OutOctets
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateTypeCountersList) GetOutMulticastPkts() uint64 {
	if m != nil && m.OutMulticastPkts != nil {
		return *m.OutMulticastPkts
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateTypeCountersList) GetOutMulticastOctets() uint64 {
	if m != nil && m.OutMulticastOctets != nil {
		return *m.OutMulticastOctets
	}
	return 0
}

type InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6Type struct {
	State                *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateType `protobuf:"bytes,154,opt,name=state" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                             `json:"-"`
	XXX_unrecognized     []byte                                                                               `json:"-"`
	XXX_sizecache        int32                                                                                `json:"-"`
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6Type) Reset() {
	*m = InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6Type{}
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6Type) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6Type) ProtoMessage() {}
func (*InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6Type) Descriptor() ([]byte, []int) {
	return fileDescriptor_c710b3a3b914432f, []int{0, 0, 1, 0, 2}
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6Type) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6Type) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6Type.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6Type) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6Type.Merge(m, src)
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6Type) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6Type) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6Type.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6Type proto.InternalMessageInfo

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6Type) GetState() *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateType {
	if m != nil {
		return m.State
	}
	return nil
}

type InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateType struct {
	Counters             []*InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateTypeCountersList `protobuf:"bytes,154,rep,name=counters" json:"counters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                                           `json:"-"`
	XXX_unrecognized     []byte                                                                                             `json:"-"`
	XXX_sizecache        int32                                                                                              `json:"-"`
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateType) Reset() {
	*m = InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateType{}
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateType) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateType) ProtoMessage() {
}
func (*InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateType) Descriptor() ([]byte, []int) {
	return fileDescriptor_c710b3a3b914432f, []int{0, 0, 1, 0, 2, 0}
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateType.Merge(m, src)
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateType) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateType proto.InternalMessageInfo

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateType) GetCounters() []*InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateTypeCountersList {
	if m != nil {
		return m.Counters
	}
	return nil
}

type InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateTypeCountersList struct {
	InPkts               *uint64  `protobuf:"varint,51,opt,name=in_pkts,json=inPkts" json:"in_pkts,omitempty"`
	InOctets             *uint64  `protobuf:"varint,52,opt,name=in_octets,json=inOctets" json:"in_octets,omitempty"`
	InMulticastPkts      *uint64  `protobuf:"varint,53,opt,name=in_multicast_pkts,json=inMulticastPkts" json:"in_multicast_pkts,omitempty"`
	InMulticastOctets    *uint64  `protobuf:"varint,54,opt,name=in_multicast_octets,json=inMulticastOctets" json:"in_multicast_octets,omitempty"`
	OutPkts              *uint64  `protobuf:"varint,55,opt,name=out_pkts,json=outPkts" json:"out_pkts,omitempty"`
	OutOctets            *uint64  `protobuf:"varint,56,opt,name=out_octets,json=outOctets" json:"out_octets,omitempty"`
	OutMulticastPkts     *uint64  `protobuf:"varint,57,opt,name=out_multicast_pkts,json=outMulticastPkts" json:"out_multicast_pkts,omitempty"`
	OutMulticastOctets   *uint64  `protobuf:"varint,58,opt,name=out_multicast_octets,json=outMulticastOctets" json:"out_multicast_octets,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateTypeCountersList) Reset() {
	*m = InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateTypeCountersList{}
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateTypeCountersList) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateTypeCountersList) ProtoMessage() {
}
func (*InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateTypeCountersList) Descriptor() ([]byte, []int) {
	return fileDescriptor_c710b3a3b914432f, []int{0, 0, 1, 0, 2, 0, 0}
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateTypeCountersList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateTypeCountersList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateTypeCountersList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateTypeCountersList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateTypeCountersList.Merge(m, src)
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateTypeCountersList) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateTypeCountersList) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateTypeCountersList.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateTypeCountersList proto.InternalMessageInfo

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateTypeCountersList) GetInPkts() uint64 {
	if m != nil && m.InPkts != nil {
		return *m.InPkts
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateTypeCountersList) GetInOctets() uint64 {
	if m != nil && m.InOctets != nil {
		return *m.InOctets
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateTypeCountersList) GetInMulticastPkts() uint64 {
	if m != nil && m.InMulticastPkts != nil {
		return *m.InMulticastPkts
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateTypeCountersList) GetInMulticastOctets() uint64 {
	if m != nil && m.InMulticastOctets != nil {
		return *m.InMulticastOctets
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateTypeCountersList) GetOutPkts() uint64 {
	if m != nil && m.OutPkts != nil {
		return *m.OutPkts
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateTypeCountersList) GetOutOctets() uint64 {
	if m != nil && m.OutOctets != nil {
		return *m.OutOctets
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateTypeCountersList) GetOutMulticastPkts() uint64 {
	if m != nil && m.OutMulticastPkts != nil {
		return *m.OutMulticastPkts
	}
	return 0
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateTypeCountersList) GetOutMulticastOctets() uint64 {
	if m != nil && m.OutMulticastOctets != nil {
		return *m.OutMulticastOctets
	}
	return 0
}

var E_JnprInterfacesIpCountersExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*InterfacesIpCounters)(nil),
	Field:         163,
	Name:          "jnpr_interfaces_ip_counters_ext",
	Tag:           "bytes,163,opt,name=jnpr_interfaces_ip_counters_ext",
	Filename:      "am-if-oc_render.proto",
}

func init() {
	proto.RegisterType((*InterfacesIpCounters)(nil), "interfaces_ip_counters")
	proto.RegisterType((*InterfacesIpCountersInterfaceList)(nil), "interfaces_ip_counters.interface_list")
	proto.RegisterType((*InterfacesIpCountersInterfaceListStateList)(nil), "interfaces_ip_counters.interface_list.state_list")
	proto.RegisterType((*InterfacesIpCountersInterfaceListStateListCountersList)(nil), "interfaces_ip_counters.interface_list.state_list.counters_list")
	proto.RegisterType((*InterfacesIpCountersInterfaceListSubinterfacesList)(nil), "interfaces_ip_counters.interface_list.subinterfaces_list")
	proto.RegisterType((*InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceList)(nil), "interfaces_ip_counters.interface_list.subinterfaces_list.subinterface_list")
	proto.RegisterType((*InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateList)(nil), "interfaces_ip_counters.interface_list.subinterfaces_list.subinterface_list.state_list")
	proto.RegisterType((*InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateListCountersList)(nil), "interfaces_ip_counters.interface_list.subinterfaces_list.subinterface_list.state_list.counters_list")
	proto.RegisterType((*InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4Type)(nil), "interfaces_ip_counters.interface_list.subinterfaces_list.subinterface_list.ipv4_type")
	proto.RegisterType((*InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateType)(nil), "interfaces_ip_counters.interface_list.subinterfaces_list.subinterface_list.ipv4_type.state_type")
	proto.RegisterType((*InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateTypeCountersList)(nil), "interfaces_ip_counters.interface_list.subinterfaces_list.subinterface_list.ipv4_type.state_type.counters_list")
	proto.RegisterType((*InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6Type)(nil), "interfaces_ip_counters.interface_list.subinterfaces_list.subinterface_list.ipv6_type")
	proto.RegisterType((*InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateType)(nil), "interfaces_ip_counters.interface_list.subinterfaces_list.subinterface_list.ipv6_type.state_type")
	proto.RegisterType((*InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateTypeCountersList)(nil), "interfaces_ip_counters.interface_list.subinterfaces_list.subinterface_list.ipv6_type.state_type.counters_list")
	proto.RegisterExtension(E_JnprInterfacesIpCountersExt)
}

func init() { proto.RegisterFile("am-if-oc_render.proto", fileDescriptor_c710b3a3b914432f) }

var fileDescriptor_c710b3a3b914432f = []byte{
	// 1038 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xd7, 0xb6, 0x0e, 0x89, 0x5f, 0xe2, 0xb4, 0x99, 0xd0, 0x66, 0xeb, 0xd0, 0xd4, 0x54, 0x55,
	0x65, 0x21, 0x6c, 0xd3, 0x3f, 0x71, 0xfe, 0xf0, 0xa7, 0x6d, 0xda, 0x48, 0x14, 0x44, 0x89, 0x36,
	0x2d, 0x07, 0x84, 0x34, 0xd9, 0xd8, 0x53, 0x7b, 0xec, 0x78, 0x66, 0x35, 0x33, 0xdb, 0xa4, 0x37,
	0x40, 0xe2, 0xc4, 0x07, 0x80, 0xe6, 0xc0, 0x85, 0x23, 0x1f, 0xa1, 0x5f, 0x80, 0x23, 0x47, 0x6e,
	0x54, 0x39, 0xc1, 0xb7, 0x40, 0x33, 0xb3, 0xeb, 0xf5, 0x3a, 0x9b, 0x28, 0xad, 0x62, 0x4e, 0x1c,
	0xf7, 0xf7, 0x7e, 0xf3, 0xde, 0xfb, 0xed, 0xfb, 0xcd, 0xdb, 0x85, 0x0b, 0x7e, 0xaf, 0x42, 0x9f,
	0x56, 0x78, 0x03, 0x0b, 0xc2, 0x9a, 0x44, 0x54, 0x03, 0xc1, 0x15, 0x2f, 0xce, 0x2a, 0xb2, 0x43,
	0x7a, 0x44, 0x89, 0xe7, 0x58, 0xf1, 0xc0, 0x82, 0x57, 0xbf, 0x7d, 0x07, 0x2e, 0x52, 0xa6, 0x88,
	0x78, 0xea, 0x37, 0x88, 0xc4, 0x34, 0xc0, 0x0d, 0x1e, 0xea, 0x67, 0x89, 0xd6, 0x21, 0xdf, 0x8f,
	0xb8, 0x3f, 0x39, 0xa5, 0xb3, 0xe5, 0xc9, 0x9b, 0xd7, 0xab, 0xd9, 0xe4, 0x04, 0xc6, 0x3b, 0x54,
	0x2a, 0x2f, 0x39, 0x59, 0xfc, 0x65, 0x1e, 0xa6, 0xd3, 0x51, 0x74, 0x09, 0x72, 0xcc, 0xef, 0x11,
	0xf7, 0x56, 0xc9, 0x29, 0xe7, 0xd7, 0xc6, 0xbe, 0xbf, 0x7b, 0x66, 0xc2, 0xf1, 0x0c, 0x84, 0xe6,
	0x75, 0x51, 0xaa, 0xb0, 0xa2, 0x3d, 0xe2, 0xde, 0x2e, 0x39, 0xe5, 0x9c, 0x37, 0xa1, 0x81, 0xc7,
	0xb4, 0x47, 0xd0, 0xa7, 0x30, 0x26, 0x95, 0xaf, 0xfa, 0xdd, 0xdc, 0x38, 0x59, 0x37, 0x55, 0x73,
	0xc8, 0x36, 0x66, 0x13, 0xa0, 0x2d, 0x28, 0xc8, 0x70, 0x3b, 0x39, 0xed, 0xfe, 0x6c, 0x33, 0xae,
	0x9c, 0x34, 0xe3, 0xe0, 0x61, 0x9b, 0x39, 0x9d, 0xb0, 0xf8, 0x72, 0x1c, 0x20, 0xa9, 0x8b, 0xae,
	0xc1, 0x74, 0xe0, 0x0b, 0xc2, 0x14, 0xf6, 0x09, 0x4e, 0xc4, 0x7b, 0x53, 0x16, 0xbd, 0x47, 0x1e,
	0x69, 0xf5, 0x57, 0x60, 0x92, 0x07, 0x44, 0x60, 0x7d, 0x30, 0x94, 0x46, 0x7f, 0xde, 0x03, 0x0d,
	0x6d, 0x1a, 0x04, 0x5d, 0x06, 0x68, 0xd3, 0x56, 0x1b, 0xcb, 0x80, 0x90, 0xa6, 0xbb, 0x58, 0x72,
	0xca, 0x05, 0x2f, 0xaf, 0x91, 0x4d, 0x0d, 0xa0, 0x6f, 0x60, 0x22, 0xee, 0x38, 0x7e, 0x47, 0x77,
	0x5e, 0xfb, 0x1d, 0x55, 0x63, 0x8a, 0xd5, 0xd5, 0xcf, 0x58, 0xfc, 0x7b, 0x0c, 0x0a, 0xa9, 0x18,
	0x9a, 0x83, 0x71, 0xca, 0x70, 0xd0, 0x55, 0xd2, 0xc8, 0xc9, 0x79, 0x6f, 0x51, 0xb6, 0xd1, 0x55,
	0xd2, 0x8e, 0x11, 0xf3, 0x86, 0x22, 0x4a, 0x26, 0x63, 0xfc, 0xd2, 0x3c, 0xa3, 0xeb, 0x70, 0x8e,
	0x32, 0x1c, 0x32, 0xda, 0xf0, 0xa5, 0xb2, 0xa7, 0x17, 0x0d, 0xa5, 0x40, 0xd9, 0x13, 0x8b, 0x9a,
	0x24, 0xef, 0xc1, 0x0c, 0x65, 0xb8, 0x17, 0xee, 0xa8, 0x01, 0x66, 0xdd, 0x30, 0xcf, 0x51, 0xf6,
	0x45, 0x8c, 0x0f, 0x70, 0xb7, 0x05, 0xf7, 0x9b, 0x09, 0x77, 0x29, 0xe6, 0xae, 0xc5, 0xb8, 0xe1,
	0x5e, 0x85, 0x82, 0xee, 0xda, 0x0f, 0x25, 0xb1, 0xbc, 0x65, 0xc3, 0x9b, 0xa4, 0x6c, 0x43, 0x63,
	0x86, 0x73, 0x09, 0x26, 0x78, 0x18, 0xa5, 0x59, 0x31, 0xe1, 0x71, 0x1e, 0xda, 0xe3, 0x97, 0x01,
	0x74, 0x28, 0x12, 0xb7, 0x6a, 0x82, 0x79, 0x1e, 0xaa, 0x48, 0x5d, 0x19, 0xce, 0xeb, 0x70, 0x4a,
	0xde, 0x87, 0x86, 0x34, 0xcd, 0x43, 0x35, 0xa8, 0xef, 0x7d, 0x40, 0x9a, 0x39, 0x24, 0xf0, 0x23,
	0xc3, 0xd5, 0x39, 0xd2, 0x0a, 0x23, 0xf6, 0x90, 0xc4, 0x8f, 0xfb, 0xec, 0xb4, 0xc6, 0x6b, 0x30,
	0x6d, 0xfa, 0x4f, 0x44, 0x7e, 0x62, 0x98, 0x53, 0x5a, 0x45, 0x5f, 0xa5, 0x1d, 0x13, 0x11, 0x82,
	0x0b, 0xe9, 0xde, 0x89, 0xc7, 0xb4, 0x6e, 0x9e, 0xb5, 0x19, 0x29, 0xc3, 0x4d, 0x2a, 0x1b, 0xbe,
	0x68, 0x4a, 0xf7, 0xae, 0x09, 0x03, 0x65, 0x0f, 0x22, 0x04, 0xdd, 0x80, 0x0b, 0x66, 0x8e, 0x5d,
	0xc6, 0x77, 0x19, 0x36, 0xfb, 0xc4, 0x96, 0xba, 0x67, 0xa8, 0x48, 0x4f, 0xd3, 0xc4, 0x36, 0x74,
	0xc8, 0x14, 0xac, 0xc1, 0x6c, 0xc3, 0x17, 0x82, 0x12, 0x81, 0x95, 0xf0, 0x99, 0xa4, 0x8a, 0x72,
	0x26, 0xdd, 0x35, 0x7b, 0x20, 0x0a, 0x3d, 0x4e, 0x22, 0xf1, 0xcb, 0x8e, 0x5a, 0xbc, 0xdf, 0x7f,
	0xd9, 0x51, 0x8f, 0xef, 0x82, 0x16, 0x94, 0x34, 0xf9, 0xc0, 0x4e, 0x92, 0x87, 0xaa, 0xdf, 0xe5,
	0x2d, 0xb8, 0x68, 0xe7, 0x71, 0xa8, 0xcd, 0x75, 0x43, 0x9e, 0x35, 0x53, 0x49, 0xf7, 0x59, 0xfc,
	0x67, 0x06, 0xd0, 0xe1, 0x3b, 0x8e, 0x02, 0x98, 0x1a, 0x44, 0xe3, 0x3b, 0xf6, 0xf9, 0x1b, 0x6f,
	0x8d, 0x14, 0x64, 0xef, 0x5b, 0xaa, 0x42, 0xf1, 0xd5, 0x79, 0x98, 0x39, 0xc4, 0x41, 0xf3, 0x30,
	0x46, 0x59, 0x93, 0xec, 0x99, 0x5b, 0x57, 0x88, 0x37, 0xa8, 0xc5, 0x8e, 0x5f, 0xa1, 0xbd, 0xa1,
	0x15, 0xfa, 0xd5, 0x29, 0xb6, 0x9e, 0xb1, 0x67, 0x3b, 0x90, 0xa3, 0xc1, 0xb3, 0xdb, 0xee, 0x0b,
	0xa7, 0xe4, 0x94, 0x27, 0x6f, 0x3e, 0x39, 0xcd, 0x6a, 0x3a, 0x31, 0x56, 0xcf, 0x03, 0xe2, 0x99,
	0x1a, 0x51, 0xad, 0xba, 0xbb, 0x3f, 0x9a, 0x5a, 0xf5, 0xa4, 0x56, 0xbd, 0xf8, 0x43, 0x6e, 0x14,
	0xdb, 0xfd, 0x3b, 0xe7, 0xf0, 0xfe, 0x6e, 0x8e, 0x66, 0x40, 0x47, 0x2e, 0xf9, 0xdf, 0xce, 0x9c,
	0xce, 0x92, 0x1f, 0x5c, 0xa0, 0x8b, 0xc7, 0x2d, 0xd0, 0xfa, 0xf0, 0x02, 0xcd, 0xf8, 0x3c, 0x2c,
	0x9d, 0xf8, 0xf3, 0xb0, 0x9c, 0xfd, 0x79, 0xc8, 0x5a, 0xca, 0x2b, 0xaf, 0xb1, 0x94, 0x57, 0xb3,
	0x97, 0x72, 0xf1, 0xaf, 0x1c, 0xe4, 0xfb, 0x3e, 0x44, 0xbb, 0xf1, 0xe5, 0x8a, 0xec, 0xbe, 0x35,
	0x12, 0xbb, 0x47, 0x53, 0x34, 0x6e, 0xb4, 0xf5, 0x8a, 0x7f, 0x9e, 0x8d, 0xed, 0x68, 0xfa, 0xf8,
	0x71, 0xd0, 0x47, 0x2f, 0xac, 0x8f, 0xd8, 0xa8, 0x7b, 0x39, 0xd2, 0x51, 0x2f, 0x4f, 0xc9, 0x51,
	0x99, 0xf3, 0x5e, 0xcc, 0x9e, 0x77, 0x15, 0x66, 0x53, 0xdc, 0x94, 0xd7, 0x66, 0x06, 0xd8, 0x19,
	0x6e, 0x5d, 0x3a, 0xce, 0xad, 0xcb, 0xc3, 0x6e, 0xcd, 0xf6, 0xcb, 0xca, 0x11, 0x1f, 0xf1, 0x0f,
	0xe0, 0xed, 0x34, 0x3b, 0xf5, 0x17, 0x81, 0x06, 0xf9, 0x36, 0x7f, 0xec, 0xb0, 0xfa, 0x90, 0xc3,
	0xf6, 0x47, 0xe3, 0xb0, 0xfa, 0x9b, 0x38, 0x6c, 0x7f, 0x34, 0x0e, 0xab, 0xff, 0xef, 0xb0, 0xff,
	0xc2, 0x61, 0xab, 0xbb, 0x70, 0xa5, 0xc3, 0x02, 0x81, 0xb3, 0xa7, 0x87, 0xc9, 0x9e, 0x42, 0x73,
	0xd5, 0xcf, 0x42, 0x46, 0x03, 0x22, 0x1e, 0x11, 0xb5, 0xcb, 0x45, 0x57, 0x6e, 0x12, 0x26, 0xf5,
	0x0f, 0xd9, 0xaf, 0xd6, 0x86, 0x73, 0x47, 0x8c, 0xde, 0x9b, 0xd7, 0x99, 0x1f, 0xf6, 0x63, 0x0f,
	0x83, 0xfb, 0x51, 0x64, 0x7d, 0x4f, 0xad, 0x6d, 0xfd, 0x7e, 0xb0, 0xe0, 0xfc, 0x71, 0xb0, 0xe0,
	0xbc, 0x3a, 0x58, 0x70, 0xbe, 0xf6, 0x5a, 0x54, 0x55, 0x3b, 0xb6, 0x4c, 0x95, 0x11, 0x55, 0xa3,
	0x0d, 0xb2, 0x4d, 0x44, 0xab, 0xd6, 0x26, 0xfe, 0x8e, 0x6a, 0x6f, 0x73, 0x55, 0xa1, 0xac, 0x45,
	0xa4, 0xaa, 0x74, 0x14, 0xad, 0x30, 0x5f, 0xd1, 0x67, 0xa4, 0x16, 0x74, 0x5b, 0xb5, 0x8e, 0xa2,
	0x35, 0xbf, 0xe9, 0x07, 0x3a, 0x6d, 0x0d, 0x77, 0x42, 0xc6, 0x65, 0x4d, 0x36, 0xda, 0xa4, 0xe7,
	0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xc8, 0x64, 0x0b, 0xad, 0x0a, 0x0f, 0x00, 0x00,
}

func (m *InterfacesIpCounters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesIpCounters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesIpCounters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Interface) > 0 {
		for iNdEx := len(m.Interface) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Interface[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAmIfOcRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesIpCountersInterfaceList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesIpCountersInterfaceList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesIpCountersInterfaceList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Subinterfaces) > 0 {
		for iNdEx := len(m.Subinterfaces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subinterfaces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAmIfOcRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.State) > 0 {
		for iNdEx := len(m.State) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.State[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAmIfOcRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	if m.InitTime != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.InitTime))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesIpCountersInterfaceListStateList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesIpCountersInterfaceListStateList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesIpCountersInterfaceListStateList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Counters) > 0 {
		for iNdEx := len(m.Counters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Counters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAmIfOcRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	if m.HighSpeed != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.HighSpeed))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.OperStatus != nil {
		i -= len(*m.OperStatus)
		copy(dAtA[i:], *m.OperStatus)
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(len(*m.OperStatus)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	if m.ParentAeName != nil {
		i -= len(*m.ParentAeName)
		copy(dAtA[i:], *m.ParentAeName)
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(len(*m.ParentAeName)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesIpCountersInterfaceListStateListCountersList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesIpCountersInterfaceListStateListCountersList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesIpCountersInterfaceListStateListCountersList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OutUnknownProtoPkts != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.OutUnknownProtoPkts))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xa8
	}
	if m.OutDiscards != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.OutDiscards))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xa0
	}
	if m.OutErrors != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.OutErrors))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x98
	}
	if m.CarrierTransitions != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.CarrierTransitions))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x90
	}
	if m.InUnknownProtoPkts != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.InUnknownProtoPkts))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x88
	}
	if m.InDiscards != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.InDiscards))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x80
	}
	if m.InErrors != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.InErrors))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf8
	}
	if m.OutPausePkts != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.OutPausePkts))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf0
	}
	if m.OutBroadcastPkts != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.OutBroadcastPkts))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe8
	}
	if m.OutMulticastPkts != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.OutMulticastPkts))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe0
	}
	if m.OutUnicastPkts != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.OutUnicastPkts))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd8
	}
	if m.OutOctets != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.OutOctets))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd0
	}
	if m.OutPkts != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.OutPkts))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc8
	}
	if m.InPausePkts != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.InPausePkts))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc0
	}
	if m.InBroadcastPkts != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.InBroadcastPkts))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.InMulticastPkts != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.InMulticastPkts))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.InUnicastPkts != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.InUnicastPkts))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.InOctets != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.InOctets))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.InPkts != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.InPkts))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Subinterface) > 0 {
		for iNdEx := len(m.Subinterface) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subinterface[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAmIfOcRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ipv6 != nil {
		{
			size, err := m.Ipv6.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAmIfOcRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xd2
	}
	if m.Ipv4 != nil {
		{
			size, err := m.Ipv4.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAmIfOcRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xca
	}
	if len(m.State) > 0 {
		for iNdEx := len(m.State) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.State[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAmIfOcRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	if m.InitTime != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.InitTime))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.Index != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.Index))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Counters) > 0 {
		for iNdEx := len(m.Counters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Counters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAmIfOcRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	if m.OperStatus != nil {
		i -= len(*m.OperStatus)
		copy(dAtA[i:], *m.OperStatus)
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(len(*m.OperStatus)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	if m.ParentAeName != nil {
		i -= len(*m.ParentAeName)
		copy(dAtA[i:], *m.ParentAeName)
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(len(*m.ParentAeName)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateListCountersList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateListCountersList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateListCountersList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OutMulticastPkts != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.OutMulticastPkts))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd0
	}
	if m.OutUnicastPkts != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.OutUnicastPkts))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc8
	}
	if m.InMulticastPkts != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.InMulticastPkts))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc0
	}
	if m.InUnicastPkts != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.InUnicastPkts))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.OutOctets != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.OutOctets))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.OutPkts != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.OutPkts))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.InOctets != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.InOctets))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.InPkts != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.InPkts))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4Type) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4Type) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4Type) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAmIfOcRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Counters) > 0 {
		for iNdEx := len(m.Counters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Counters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAmIfOcRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xca
		}
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateTypeCountersList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateTypeCountersList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateTypeCountersList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OutMulticastOctets != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.OutMulticastOctets))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd0
	}
	if m.OutMulticastPkts != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.OutMulticastPkts))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc8
	}
	if m.OutOctets != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.OutOctets))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc0
	}
	if m.OutPkts != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.OutPkts))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.InMulticastOctets != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.InMulticastOctets))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.InMulticastPkts != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.InMulticastPkts))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.InOctets != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.InOctets))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.InPkts != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.InPkts))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6Type) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6Type) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6Type) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAmIfOcRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Counters) > 0 {
		for iNdEx := len(m.Counters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Counters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAmIfOcRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xd2
		}
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateTypeCountersList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateTypeCountersList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateTypeCountersList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OutMulticastOctets != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.OutMulticastOctets))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd0
	}
	if m.OutMulticastPkts != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.OutMulticastPkts))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc8
	}
	if m.OutOctets != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.OutOctets))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc0
	}
	if m.OutPkts != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.OutPkts))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.InMulticastOctets != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.InMulticastOctets))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.InMulticastPkts != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.InMulticastPkts))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.InOctets != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.InOctets))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.InPkts != nil {
		i = encodeVarintAmIfOcRender(dAtA, i, uint64(*m.InPkts))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func encodeVarintAmIfOcRender(dAtA []byte, offset int, v uint64) int {
	offset -= sovAmIfOcRender(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InterfacesIpCounters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Interface) > 0 {
		for _, e := range m.Interface {
			l = e.Size()
			n += 2 + l + sovAmIfOcRender(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesIpCountersInterfaceList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 2 + l + sovAmIfOcRender(uint64(l))
	}
	if m.InitTime != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.InitTime))
	}
	if len(m.State) > 0 {
		for _, e := range m.State {
			l = e.Size()
			n += 2 + l + sovAmIfOcRender(uint64(l))
		}
	}
	if len(m.Subinterfaces) > 0 {
		for _, e := range m.Subinterfaces {
			l = e.Size()
			n += 2 + l + sovAmIfOcRender(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesIpCountersInterfaceListStateList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ParentAeName != nil {
		l = len(*m.ParentAeName)
		n += 2 + l + sovAmIfOcRender(uint64(l))
	}
	if m.OperStatus != nil {
		l = len(*m.OperStatus)
		n += 2 + l + sovAmIfOcRender(uint64(l))
	}
	if m.HighSpeed != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.HighSpeed))
	}
	if len(m.Counters) > 0 {
		for _, e := range m.Counters {
			l = e.Size()
			n += 2 + l + sovAmIfOcRender(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesIpCountersInterfaceListStateListCountersList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InPkts != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.InPkts))
	}
	if m.InOctets != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.InOctets))
	}
	if m.InUnicastPkts != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.InUnicastPkts))
	}
	if m.InMulticastPkts != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.InMulticastPkts))
	}
	if m.InBroadcastPkts != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.InBroadcastPkts))
	}
	if m.InPausePkts != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.InPausePkts))
	}
	if m.OutPkts != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.OutPkts))
	}
	if m.OutOctets != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.OutOctets))
	}
	if m.OutUnicastPkts != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.OutUnicastPkts))
	}
	if m.OutMulticastPkts != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.OutMulticastPkts))
	}
	if m.OutBroadcastPkts != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.OutBroadcastPkts))
	}
	if m.OutPausePkts != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.OutPausePkts))
	}
	if m.InErrors != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.InErrors))
	}
	if m.InDiscards != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.InDiscards))
	}
	if m.InUnknownProtoPkts != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.InUnknownProtoPkts))
	}
	if m.CarrierTransitions != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.CarrierTransitions))
	}
	if m.OutErrors != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.OutErrors))
	}
	if m.OutDiscards != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.OutDiscards))
	}
	if m.OutUnknownProtoPkts != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.OutUnknownProtoPkts))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Subinterface) > 0 {
		for _, e := range m.Subinterface {
			l = e.Size()
			n += 2 + l + sovAmIfOcRender(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.Index))
	}
	if m.InitTime != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.InitTime))
	}
	if len(m.State) > 0 {
		for _, e := range m.State {
			l = e.Size()
			n += 2 + l + sovAmIfOcRender(uint64(l))
		}
	}
	if m.Ipv4 != nil {
		l = m.Ipv4.Size()
		n += 2 + l + sovAmIfOcRender(uint64(l))
	}
	if m.Ipv6 != nil {
		l = m.Ipv6.Size()
		n += 2 + l + sovAmIfOcRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ParentAeName != nil {
		l = len(*m.ParentAeName)
		n += 2 + l + sovAmIfOcRender(uint64(l))
	}
	if m.OperStatus != nil {
		l = len(*m.OperStatus)
		n += 2 + l + sovAmIfOcRender(uint64(l))
	}
	if len(m.Counters) > 0 {
		for _, e := range m.Counters {
			l = e.Size()
			n += 2 + l + sovAmIfOcRender(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateListCountersList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InPkts != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.InPkts))
	}
	if m.InOctets != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.InOctets))
	}
	if m.OutPkts != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.OutPkts))
	}
	if m.OutOctets != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.OutOctets))
	}
	if m.InUnicastPkts != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.InUnicastPkts))
	}
	if m.InMulticastPkts != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.InMulticastPkts))
	}
	if m.OutUnicastPkts != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.OutUnicastPkts))
	}
	if m.OutMulticastPkts != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.OutMulticastPkts))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4Type) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 2 + l + sovAmIfOcRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Counters) > 0 {
		for _, e := range m.Counters {
			l = e.Size()
			n += 2 + l + sovAmIfOcRender(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateTypeCountersList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InPkts != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.InPkts))
	}
	if m.InOctets != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.InOctets))
	}
	if m.InMulticastPkts != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.InMulticastPkts))
	}
	if m.InMulticastOctets != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.InMulticastOctets))
	}
	if m.OutPkts != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.OutPkts))
	}
	if m.OutOctets != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.OutOctets))
	}
	if m.OutMulticastPkts != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.OutMulticastPkts))
	}
	if m.OutMulticastOctets != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.OutMulticastOctets))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6Type) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 2 + l + sovAmIfOcRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Counters) > 0 {
		for _, e := range m.Counters {
			l = e.Size()
			n += 2 + l + sovAmIfOcRender(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateTypeCountersList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InPkts != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.InPkts))
	}
	if m.InOctets != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.InOctets))
	}
	if m.InMulticastPkts != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.InMulticastPkts))
	}
	if m.InMulticastOctets != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.InMulticastOctets))
	}
	if m.OutPkts != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.OutPkts))
	}
	if m.OutOctets != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.OutOctets))
	}
	if m.OutMulticastPkts != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.OutMulticastPkts))
	}
	if m.OutMulticastOctets != nil {
		n += 2 + sovAmIfOcRender(uint64(*m.OutMulticastOctets))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAmIfOcRender(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAmIfOcRender(x uint64) (n int) {
	return sovAmIfOcRender(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InterfacesIpCounters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmIfOcRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: interfaces_ip_counters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: interfaces_ip_counters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interface = append(m.Interface, &InterfacesIpCountersInterfaceList{})
			if err := m.Interface[len(m.Interface)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmIfOcRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesIpCountersInterfaceList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmIfOcRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: interface_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: interface_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InitTime = &v
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State, &InterfacesIpCountersInterfaceListStateList{})
			if err := m.State[len(m.State)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 152:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subinterfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subinterfaces = append(m.Subinterfaces, &InterfacesIpCountersInterfaceListSubinterfacesList{})
			if err := m.Subinterfaces[len(m.Subinterfaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmIfOcRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesIpCountersInterfaceListStateList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmIfOcRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: state_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: state_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentAeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ParentAeName = &s
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OperStatus = &s
			iNdEx = postIndex
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighSpeed", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HighSpeed = &v
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Counters = append(m.Counters, &InterfacesIpCountersInterfaceListStateListCountersList{})
			if err := m.Counters[len(m.Counters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmIfOcRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesIpCountersInterfaceListStateListCountersList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmIfOcRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: counters_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: counters_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InPkts", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InPkts = &v
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InOctets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InOctets = &v
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InUnicastPkts", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InUnicastPkts = &v
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InMulticastPkts", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InMulticastPkts = &v
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InBroadcastPkts", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InBroadcastPkts = &v
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InPausePkts", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InPausePkts = &v
		case 57:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutPkts", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutPkts = &v
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutOctets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutOctets = &v
		case 59:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutUnicastPkts", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutUnicastPkts = &v
		case 60:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutMulticastPkts", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutMulticastPkts = &v
		case 61:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutBroadcastPkts", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutBroadcastPkts = &v
		case 62:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutPausePkts", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutPausePkts = &v
		case 63:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InErrors", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InErrors = &v
		case 64:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InDiscards", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InDiscards = &v
		case 65:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InUnknownProtoPkts", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InUnknownProtoPkts = &v
		case 66:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarrierTransitions", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CarrierTransitions = &v
		case 67:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutErrors", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutErrors = &v
		case 68:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutDiscards", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutDiscards = &v
		case 69:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutUnknownProtoPkts", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutUnknownProtoPkts = &v
		default:
			iNdEx = preIndex
			skippy, err := skipAmIfOcRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmIfOcRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: subinterfaces_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: subinterfaces_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subinterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subinterface = append(m.Subinterface, &InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceList{})
			if err := m.Subinterface[len(m.Subinterface)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmIfOcRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmIfOcRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: subinterface_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: subinterface_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Index = &v
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InitTime = &v
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State, &InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateList{})
			if err := m.State[len(m.State)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 153:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ipv4 == nil {
				m.Ipv4 = &InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4Type{}
			}
			if err := m.Ipv4.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 154:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ipv6 == nil {
				m.Ipv6 = &InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6Type{}
			}
			if err := m.Ipv6.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmIfOcRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmIfOcRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: state_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: state_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentAeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ParentAeName = &s
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OperStatus = &s
			iNdEx = postIndex
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Counters = append(m.Counters, &InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateListCountersList{})
			if err := m.Counters[len(m.Counters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmIfOcRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListStateListCountersList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmIfOcRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: counters_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: counters_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InPkts", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InPkts = &v
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InOctets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InOctets = &v
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutPkts", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutPkts = &v
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutOctets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutOctets = &v
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InUnicastPkts", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InUnicastPkts = &v
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InMulticastPkts", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InMulticastPkts = &v
		case 57:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutUnicastPkts", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutUnicastPkts = &v
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutMulticastPkts", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutMulticastPkts = &v
		default:
			iNdEx = preIndex
			skippy, err := skipAmIfOcRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4Type) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmIfOcRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ipv4_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ipv4_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 153:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateType{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmIfOcRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmIfOcRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: state_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: state_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 153:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Counters = append(m.Counters, &InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateTypeCountersList{})
			if err := m.Counters[len(m.Counters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmIfOcRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv4TypeStateTypeCountersList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmIfOcRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: counters_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: counters_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InPkts", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InPkts = &v
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InOctets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InOctets = &v
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InMulticastPkts", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InMulticastPkts = &v
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InMulticastOctets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InMulticastOctets = &v
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutPkts", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutPkts = &v
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutOctets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutOctets = &v
		case 57:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutMulticastPkts", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutMulticastPkts = &v
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutMulticastOctets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutMulticastOctets = &v
		default:
			iNdEx = preIndex
			skippy, err := skipAmIfOcRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6Type) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmIfOcRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ipv6_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ipv6_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 154:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateType{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmIfOcRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmIfOcRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: state_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: state_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 154:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Counters = append(m.Counters, &InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateTypeCountersList{})
			if err := m.Counters[len(m.Counters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmIfOcRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesIpCountersInterfaceListSubinterfacesListSubinterfaceListIpv6TypeStateTypeCountersList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmIfOcRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: counters_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: counters_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InPkts", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InPkts = &v
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InOctets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InOctets = &v
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InMulticastPkts", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InMulticastPkts = &v
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InMulticastOctets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InMulticastOctets = &v
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutPkts", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutPkts = &v
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutOctets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutOctets = &v
		case 57:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutMulticastPkts", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutMulticastPkts = &v
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutMulticastOctets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutMulticastOctets = &v
		default:
			iNdEx = preIndex
			skippy, err := skipAmIfOcRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAmIfOcRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAmIfOcRender(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAmIfOcRender
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAmIfOcRender
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAmIfOcRender
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAmIfOcRender
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAmIfOcRender
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAmIfOcRender        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAmIfOcRender          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAmIfOcRender = fmt.Errorf("proto: unexpected end of group")
)
