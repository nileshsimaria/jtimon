// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ancpd_oc.proto

package schema

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type JunosAncp struct {
	System               *JunosAncpSystemType `protobuf:"bytes,151,opt,name=system" json:"system,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *JunosAncp) Reset()         { *m = JunosAncp{} }
func (m *JunosAncp) String() string { return proto.CompactTextString(m) }
func (*JunosAncp) ProtoMessage()    {}
func (*JunosAncp) Descriptor() ([]byte, []int) {
	return fileDescriptor_802aa389b0dda049, []int{0}
}
func (m *JunosAncp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosAncp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosAncp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosAncp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosAncp.Merge(m, src)
}
func (m *JunosAncp) XXX_Size() int {
	return m.Size()
}
func (m *JunosAncp) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosAncp.DiscardUnknown(m)
}

var xxx_messageInfo_JunosAncp proto.InternalMessageInfo

func (m *JunosAncp) GetSystem() *JunosAncpSystemType {
	if m != nil {
		return m.System
	}
	return nil
}

type JunosAncpSystemType struct {
	SubscriberManagement *JunosAncpSystemTypeSubscriberManagementType `protobuf:"bytes,151,opt,name=subscriber_management,json=subscriberManagement" json:"subscriber_management,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *JunosAncpSystemType) Reset()         { *m = JunosAncpSystemType{} }
func (m *JunosAncpSystemType) String() string { return proto.CompactTextString(m) }
func (*JunosAncpSystemType) ProtoMessage()    {}
func (*JunosAncpSystemType) Descriptor() ([]byte, []int) {
	return fileDescriptor_802aa389b0dda049, []int{0, 0}
}
func (m *JunosAncpSystemType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosAncpSystemType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosAncpSystemType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosAncpSystemType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosAncpSystemType.Merge(m, src)
}
func (m *JunosAncpSystemType) XXX_Size() int {
	return m.Size()
}
func (m *JunosAncpSystemType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosAncpSystemType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosAncpSystemType proto.InternalMessageInfo

func (m *JunosAncpSystemType) GetSubscriberManagement() *JunosAncpSystemTypeSubscriberManagementType {
	if m != nil {
		return m.SubscriberManagement
	}
	return nil
}

type JunosAncpSystemTypeSubscriberManagementType struct {
	AccessNetwork        *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkType `protobuf:"bytes,151,opt,name=access_network,json=accessNetwork" json:"access_network,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                      `json:"-"`
	XXX_unrecognized     []byte                                                        `json:"-"`
	XXX_sizecache        int32                                                         `json:"-"`
}

func (m *JunosAncpSystemTypeSubscriberManagementType) Reset() {
	*m = JunosAncpSystemTypeSubscriberManagementType{}
}
func (m *JunosAncpSystemTypeSubscriberManagementType) String() string {
	return proto.CompactTextString(m)
}
func (*JunosAncpSystemTypeSubscriberManagementType) ProtoMessage() {}
func (*JunosAncpSystemTypeSubscriberManagementType) Descriptor() ([]byte, []int) {
	return fileDescriptor_802aa389b0dda049, []int{0, 0, 0}
}
func (m *JunosAncpSystemTypeSubscriberManagementType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosAncpSystemTypeSubscriberManagementType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosAncpSystemTypeSubscriberManagementType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosAncpSystemTypeSubscriberManagementType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosAncpSystemTypeSubscriberManagementType.Merge(m, src)
}
func (m *JunosAncpSystemTypeSubscriberManagementType) XXX_Size() int {
	return m.Size()
}
func (m *JunosAncpSystemTypeSubscriberManagementType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosAncpSystemTypeSubscriberManagementType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosAncpSystemTypeSubscriberManagementType proto.InternalMessageInfo

func (m *JunosAncpSystemTypeSubscriberManagementType) GetAccessNetwork() *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkType {
	if m != nil {
		return m.AccessNetwork
	}
	return nil
}

type JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkType struct {
	Ancp                 *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpType `protobuf:"bytes,151,opt,name=ancp" json:"ancp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                              `json:"-"`
	XXX_unrecognized     []byte                                                                `json:"-"`
	XXX_sizecache        int32                                                                 `json:"-"`
}

func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkType) Reset() {
	*m = JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkType{}
}
func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkType) String() string {
	return proto.CompactTextString(m)
}
func (*JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkType) ProtoMessage() {}
func (*JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkType) Descriptor() ([]byte, []int) {
	return fileDescriptor_802aa389b0dda049, []int{0, 0, 0, 0}
}
func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkType.Merge(m, src)
}
func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkType) XXX_Size() int {
	return m.Size()
}
func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkType proto.InternalMessageInfo

func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkType) GetAncp() *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpType {
	if m != nil {
		return m.Ancp
	}
	return nil
}

type JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpType struct {
	Protocol             *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType `protobuf:"bytes,151,opt,name=protocol" json:"protocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                          `json:"-"`
	XXX_unrecognized     []byte                                                                            `json:"-"`
	XXX_sizecache        int32                                                                             `json:"-"`
}

func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpType) Reset() {
	*m = JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpType{}
}
func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpType) String() string {
	return proto.CompactTextString(m)
}
func (*JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpType) ProtoMessage() {}
func (*JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpType) Descriptor() ([]byte, []int) {
	return fileDescriptor_802aa389b0dda049, []int{0, 0, 0, 0, 0}
}
func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpType.Merge(m, src)
}
func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpType) XXX_Size() int {
	return m.Size()
}
func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpType proto.InternalMessageInfo

func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpType) GetProtocol() *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType {
	if m != nil {
		return m.Protocol
	}
	return nil
}

type JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType struct {
	ConfiguredNeighborCount     *uint32  `protobuf:"varint,51,opt,name=configured_neighbor_count,json=configuredNeighborCount" json:"configured_neighbor_count,omitempty"`
	EstablishingNeighborCount   *uint32  `protobuf:"varint,52,opt,name=establishing_neighbor_count,json=establishingNeighborCount" json:"establishing_neighbor_count,omitempty"`
	EstablishedNeighborCount    *uint32  `protobuf:"varint,53,opt,name=established_neighbor_count,json=establishedNeighborCount" json:"established_neighbor_count,omitempty"`
	NotEstablishedNeighborCount *uint32  `protobuf:"varint,54,opt,name=not_established_neighbor_count,json=notEstablishedNeighborCount" json:"not_established_neighbor_count,omitempty"`
	TotalNeighborCount          *uint32  `protobuf:"varint,55,opt,name=total_neighbor_count,json=totalNeighborCount" json:"total_neighbor_count,omitempty"`
	MappedStaticSubscriberCount *uint32  `protobuf:"varint,56,opt,name=mapped_static_subscriber_count,json=mappedStaticSubscriberCount" json:"mapped_static_subscriber_count,omitempty"`
	PortUpCount                 *uint64  `protobuf:"varint,57,opt,name=port_up_count,json=portUpCount" json:"port_up_count,omitempty"`
	PortDownCount               *uint64  `protobuf:"varint,58,opt,name=port_down_count,json=portDownCount" json:"port_down_count,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType) Reset() {
	*m = JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType{}
}
func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType) String() string {
	return proto.CompactTextString(m)
}
func (*JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType) ProtoMessage() {
}
func (*JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType) Descriptor() ([]byte, []int) {
	return fileDescriptor_802aa389b0dda049, []int{0, 0, 0, 0, 0, 0}
}
func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType.Merge(m, src)
}
func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType) XXX_Size() int {
	return m.Size()
}
func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType proto.InternalMessageInfo

func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType) GetConfiguredNeighborCount() uint32 {
	if m != nil && m.ConfiguredNeighborCount != nil {
		return *m.ConfiguredNeighborCount
	}
	return 0
}

func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType) GetEstablishingNeighborCount() uint32 {
	if m != nil && m.EstablishingNeighborCount != nil {
		return *m.EstablishingNeighborCount
	}
	return 0
}

func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType) GetEstablishedNeighborCount() uint32 {
	if m != nil && m.EstablishedNeighborCount != nil {
		return *m.EstablishedNeighborCount
	}
	return 0
}

func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType) GetNotEstablishedNeighborCount() uint32 {
	if m != nil && m.NotEstablishedNeighborCount != nil {
		return *m.NotEstablishedNeighborCount
	}
	return 0
}

func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType) GetTotalNeighborCount() uint32 {
	if m != nil && m.TotalNeighborCount != nil {
		return *m.TotalNeighborCount
	}
	return 0
}

func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType) GetMappedStaticSubscriberCount() uint32 {
	if m != nil && m.MappedStaticSubscriberCount != nil {
		return *m.MappedStaticSubscriberCount
	}
	return 0
}

func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType) GetPortUpCount() uint64 {
	if m != nil && m.PortUpCount != nil {
		return *m.PortUpCount
	}
	return 0
}

func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType) GetPortDownCount() uint64 {
	if m != nil && m.PortDownCount != nil {
		return *m.PortDownCount
	}
	return 0
}

var E_JnprJunosAncpExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*JunosAncp)(nil),
	Field:         32,
	Name:          "jnpr_junos_ancp_ext",
	Tag:           "bytes,32,opt,name=jnpr_junos_ancp_ext",
	Filename:      "ancpd_oc.proto",
}

func init() {
	proto.RegisterType((*JunosAncp)(nil), "junos_ancp")
	proto.RegisterType((*JunosAncpSystemType)(nil), "junos_ancp.system_type")
	proto.RegisterType((*JunosAncpSystemTypeSubscriberManagementType)(nil), "junos_ancp.system_type.subscriber_management_type")
	proto.RegisterType((*JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkType)(nil), "junos_ancp.system_type.subscriber_management_type.access_network_type")
	proto.RegisterType((*JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpType)(nil), "junos_ancp.system_type.subscriber_management_type.access_network_type.ancp_type")
	proto.RegisterType((*JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType)(nil), "junos_ancp.system_type.subscriber_management_type.access_network_type.ancp_type.protocol_type")
	proto.RegisterExtension(E_JnprJunosAncpExt)
}

func init() { proto.RegisterFile("ancpd_oc.proto", fileDescriptor_802aa389b0dda049) }

var fileDescriptor_802aa389b0dda049 = []byte{
	// 559 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xcd, 0x6a, 0x14, 0x4f,
	0x14, 0xc5, 0x69, 0xfe, 0xf9, 0xc7, 0x58, 0xc3, 0x44, 0xe9, 0x44, 0x32, 0xe9, 0xc0, 0x30, 0x64,
	0x21, 0xd9, 0xa4, 0x3b, 0xc4, 0xef, 0x20, 0x82, 0xc6, 0xb8, 0x08, 0x18, 0x64, 0x06, 0x37, 0x2e,
	0x2c, 0xab, 0x6b, 0xae, 0xdd, 0x35, 0x99, 0xae, 0x2a, 0xaa, 0x6e, 0x9b, 0x04, 0x1f, 0xc4, 0x27,
	0xf0, 0x5d, 0x5c, 0xea, 0x5a, 0x17, 0x32, 0xb8, 0xf2, 0x29, 0xa4, 0xab, 0xe6, 0x33, 0xc9, 0x08,
	0x42, 0x96, 0x7d, 0xcf, 0xef, 0x9c, 0x73, 0xa1, 0x6e, 0x93, 0x65, 0x26, 0xb9, 0xee, 0x52, 0xc5,
	0x63, 0x6d, 0x14, 0xaa, 0x68, 0x05, 0xa1, 0x0f, 0x05, 0xa0, 0x39, 0xa3, 0xa8, 0xb4, 0x1f, 0x6e,
	0x7e, 0x5e, 0x22, 0xa4, 0x57, 0x4a, 0x65, 0x69, 0x45, 0x87, 0x3b, 0x64, 0xd1, 0x9e, 0x59, 0x84,
	0xa2, 0xf1, 0x29, 0x68, 0x05, 0x5b, 0xb5, 0xdd, 0xb5, 0x78, 0xa2, 0xc6, 0x5e, 0xa2, 0x78, 0xa6,
	0xa1, 0x3d, 0xe4, 0xa2, 0x5f, 0xd7, 0x48, 0x6d, 0x6a, 0x1e, 0xe6, 0xe4, 0x96, 0x2d, 0x53, 0xcb,
	0x8d, 0x48, 0xc1, 0xd0, 0x82, 0x49, 0x96, 0x41, 0x01, 0x12, 0x47, 0x81, 0xbb, 0x73, 0x02, 0xe3,
	0x4b, 0x5d, 0xbe, 0x6b, 0x75, 0xa2, 0xbd, 0x1c, 0x4b, 0xd1, 0xef, 0x45, 0x12, 0xcd, 0x37, 0x85,
	0x92, 0x2c, 0x33, 0xce, 0xc1, 0x5a, 0x2a, 0x01, 0x4f, 0x94, 0x39, 0x1e, 0x6d, 0xf0, 0xe2, 0xdf,
	0x37, 0x88, 0x67, 0x93, 0xfc, 0x56, 0x75, 0x3f, 0x3c, 0xf2, 0xb3, 0xe8, 0xfb, 0xff, 0x64, 0xe5,
	0x12, 0x2c, 0x04, 0xb2, 0x50, 0x35, 0x8d, 0xda, 0x5f, 0x5d, 0x4d, 0x7b, 0x5c, 0xf9, 0xfd, 0x1e,
	0x2e, 0x3e, 0xfa, 0xb1, 0x40, 0xae, 0x8f, 0x67, 0xe1, 0x47, 0xb2, 0xe4, 0xde, 0x97, 0xab, 0xfe,
	0xa8, 0xf8, 0xed, 0x55, 0x17, 0xc7, 0xa3, 0x06, 0xbf, 0xc6, 0xb8, 0x30, 0xfa, 0xf6, 0x1f, 0xa9,
	0xcf, 0x68, 0xe1, 0x1e, 0x59, 0xe7, 0x4a, 0xbe, 0x17, 0x59, 0x69, 0xa0, 0x4b, 0x25, 0x88, 0x2c,
	0x4f, 0x95, 0xa1, 0x5c, 0x95, 0x12, 0x1b, 0x77, 0x5a, 0xc1, 0x56, 0xbd, 0xbd, 0x36, 0x01, 0x8e,
	0x86, 0xfa, 0x7e, 0x25, 0x87, 0x4f, 0xc8, 0x06, 0x58, 0x64, 0x69, 0x5f, 0xd8, 0x5c, 0xc8, 0xec,
	0xbc, 0xfb, 0xae, 0x73, 0xaf, 0x4f, 0x23, 0xb3, 0xfe, 0xc7, 0x24, 0x1a, 0x8b, 0x17, 0xcb, 0xef,
	0x39, 0x7b, 0x63, 0x8a, 0x98, 0x75, 0xef, 0x93, 0xa6, 0x54, 0x48, 0xff, 0x92, 0x70, 0xdf, 0x25,
	0x6c, 0x48, 0x85, 0x07, 0xf3, 0x42, 0x76, 0xc8, 0x2a, 0x2a, 0x64, 0xfd, 0xf3, 0xd6, 0x07, 0xce,
	0x1a, 0x3a, 0xed, 0x42, 0x6d, 0xc1, 0xb4, 0x86, 0x2e, 0xb5, 0xc8, 0x50, 0x70, 0x3a, 0xf5, 0x48,
	0xde, 0xfb, 0xd0, 0xd7, 0x7a, 0xaa, 0xe3, 0xa0, 0xce, 0x98, 0xf1, 0x21, 0x9b, 0xa4, 0xae, 0x95,
	0x41, 0x5a, 0xea, 0xa1, 0xe7, 0x51, 0x2b, 0xd8, 0x5a, 0x68, 0xd7, 0xaa, 0xe1, 0x6b, 0xed, 0x99,
	0xdb, 0xe4, 0x86, 0x63, 0xba, 0xea, 0x44, 0x0e, 0xa9, 0x3d, 0x47, 0x39, 0xeb, 0x73, 0x75, 0x22,
	0x1d, 0xb7, 0xd7, 0x21, 0x2b, 0x3d, 0xa9, 0x0d, 0x9d, 0xdc, 0x10, 0x85, 0x53, 0x0c, 0xd7, 0xe2,
	0xc3, 0x52, 0x0a, 0x0d, 0x66, 0xf8, 0x17, 0xd8, 0x0e, 0x48, 0xab, 0x8c, 0x6d, 0xb4, 0xdc, 0xcd,
	0xd5, 0xa6, 0x6e, 0xae, 0x7d, 0xb3, 0x0a, 0x38, 0xac, 0xbe, 0x9f, 0x4a, 0xae, 0x0f, 0x4e, 0xf1,
	0xd9, 0xbb, 0x2f, 0x83, 0x66, 0xf0, 0x75, 0xd0, 0x0c, 0x7e, 0x0e, 0x9a, 0xc1, 0x9b, 0x76, 0x26,
	0xb0, 0xe2, 0xab, 0xb8, 0x58, 0x02, 0x26, 0x82, 0x43, 0x0a, 0x26, 0x4b, 0x72, 0x60, 0x7d, 0xcc,
	0x53, 0x85, 0xdb, 0x42, 0x66, 0x60, 0x71, 0xbb, 0x87, 0x62, 0x5b, 0x32, 0x14, 0x1f, 0x20, 0xd1,
	0xc7, 0x59, 0xd2, 0x43, 0x91, 0xb0, 0x2e, 0xd3, 0x08, 0xc6, 0x26, 0x7e, 0xc3, 0xc4, 0xf2, 0x1c,
	0x0a, 0xf6, 0x27, 0x00, 0x00, 0xff, 0xff, 0xc7, 0x15, 0xdf, 0xd9, 0x04, 0x05, 0x00, 0x00,
}

func (m *JunosAncp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosAncp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosAncp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.System != nil {
		{
			size, err := m.System.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAncpdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *JunosAncpSystemType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosAncpSystemType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosAncpSystemType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SubscriberManagement != nil {
		{
			size, err := m.SubscriberManagement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAncpdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *JunosAncpSystemTypeSubscriberManagementType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosAncpSystemTypeSubscriberManagementType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosAncpSystemTypeSubscriberManagementType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AccessNetwork != nil {
		{
			size, err := m.AccessNetwork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAncpdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ancp != nil {
		{
			size, err := m.Ancp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAncpdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Protocol != nil {
		{
			size, err := m.Protocol.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAncpdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PortDownCount != nil {
		i = encodeVarintAncpdOc(dAtA, i, uint64(*m.PortDownCount))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd0
	}
	if m.PortUpCount != nil {
		i = encodeVarintAncpdOc(dAtA, i, uint64(*m.PortUpCount))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc8
	}
	if m.MappedStaticSubscriberCount != nil {
		i = encodeVarintAncpdOc(dAtA, i, uint64(*m.MappedStaticSubscriberCount))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc0
	}
	if m.TotalNeighborCount != nil {
		i = encodeVarintAncpdOc(dAtA, i, uint64(*m.TotalNeighborCount))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.NotEstablishedNeighborCount != nil {
		i = encodeVarintAncpdOc(dAtA, i, uint64(*m.NotEstablishedNeighborCount))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.EstablishedNeighborCount != nil {
		i = encodeVarintAncpdOc(dAtA, i, uint64(*m.EstablishedNeighborCount))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.EstablishingNeighborCount != nil {
		i = encodeVarintAncpdOc(dAtA, i, uint64(*m.EstablishingNeighborCount))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.ConfiguredNeighborCount != nil {
		i = encodeVarintAncpdOc(dAtA, i, uint64(*m.ConfiguredNeighborCount))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func encodeVarintAncpdOc(dAtA []byte, offset int, v uint64) int {
	offset -= sovAncpdOc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *JunosAncp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.System != nil {
		l = m.System.Size()
		n += 2 + l + sovAncpdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosAncpSystemType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubscriberManagement != nil {
		l = m.SubscriberManagement.Size()
		n += 2 + l + sovAncpdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosAncpSystemTypeSubscriberManagementType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccessNetwork != nil {
		l = m.AccessNetwork.Size()
		n += 2 + l + sovAncpdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ancp != nil {
		l = m.Ancp.Size()
		n += 2 + l + sovAncpdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Protocol != nil {
		l = m.Protocol.Size()
		n += 2 + l + sovAncpdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfiguredNeighborCount != nil {
		n += 2 + sovAncpdOc(uint64(*m.ConfiguredNeighborCount))
	}
	if m.EstablishingNeighborCount != nil {
		n += 2 + sovAncpdOc(uint64(*m.EstablishingNeighborCount))
	}
	if m.EstablishedNeighborCount != nil {
		n += 2 + sovAncpdOc(uint64(*m.EstablishedNeighborCount))
	}
	if m.NotEstablishedNeighborCount != nil {
		n += 2 + sovAncpdOc(uint64(*m.NotEstablishedNeighborCount))
	}
	if m.TotalNeighborCount != nil {
		n += 2 + sovAncpdOc(uint64(*m.TotalNeighborCount))
	}
	if m.MappedStaticSubscriberCount != nil {
		n += 2 + sovAncpdOc(uint64(*m.MappedStaticSubscriberCount))
	}
	if m.PortUpCount != nil {
		n += 2 + sovAncpdOc(uint64(*m.PortUpCount))
	}
	if m.PortDownCount != nil {
		n += 2 + sovAncpdOc(uint64(*m.PortDownCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAncpdOc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAncpdOc(x uint64) (n int) {
	return sovAncpdOc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *JunosAncp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAncpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: junos_ancp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: junos_ancp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field System", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAncpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAncpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.System == nil {
				m.System = &JunosAncpSystemType{}
			}
			if err := m.System.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAncpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAncpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAncpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosAncpSystemType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAncpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: system_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: system_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriberManagement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAncpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAncpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubscriberManagement == nil {
				m.SubscriberManagement = &JunosAncpSystemTypeSubscriberManagementType{}
			}
			if err := m.SubscriberManagement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAncpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAncpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAncpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosAncpSystemTypeSubscriberManagementType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAncpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: subscriber_management_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: subscriber_management_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessNetwork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAncpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAncpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccessNetwork == nil {
				m.AccessNetwork = &JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkType{}
			}
			if err := m.AccessNetwork.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAncpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAncpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAncpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAncpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: access_network_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: access_network_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ancp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAncpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAncpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ancp == nil {
				m.Ancp = &JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpType{}
			}
			if err := m.Ancp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAncpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAncpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAncpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAncpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ancp_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ancp_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAncpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAncpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Protocol == nil {
				m.Protocol = &JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType{}
			}
			if err := m.Protocol.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAncpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAncpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAncpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosAncpSystemTypeSubscriberManagementTypeAccessNetworkTypeAncpTypeProtocolType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAncpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: protocol_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: protocol_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfiguredNeighborCount", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConfiguredNeighborCount = &v
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstablishingNeighborCount", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EstablishingNeighborCount = &v
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstablishedNeighborCount", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EstablishedNeighborCount = &v
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotEstablishedNeighborCount", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NotEstablishedNeighborCount = &v
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNeighborCount", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalNeighborCount = &v
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MappedStaticSubscriberCount", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MappedStaticSubscriberCount = &v
		case 57:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortUpCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PortUpCount = &v
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortDownCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PortDownCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipAncpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAncpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAncpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAncpdOc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAncpdOc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAncpdOc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAncpdOc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAncpdOc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAncpdOc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAncpdOc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAncpdOc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAncpdOc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAncpdOc = fmt.Errorf("proto: unexpected end of group")
)
