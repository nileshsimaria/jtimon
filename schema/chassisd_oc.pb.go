// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chassisd_oc.proto

package schema

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Components struct {
	Component            []*ComponentsComponentList `protobuf:"bytes,151,rep,name=component" json:"component,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *Components) Reset()         { *m = Components{} }
func (m *Components) String() string { return proto.CompactTextString(m) }
func (*Components) ProtoMessage()    {}
func (*Components) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e8a9475610846cf, []int{0}
}
func (m *Components) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Components) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Components.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Components) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Components.Merge(m, src)
}
func (m *Components) XXX_Size() int {
	return m.Size()
}
func (m *Components) XXX_DiscardUnknown() {
	xxx_messageInfo_Components.DiscardUnknown(m)
}

var xxx_messageInfo_Components proto.InternalMessageInfo

func (m *Components) GetComponent() []*ComponentsComponentList {
	if m != nil {
		return m.Component
	}
	return nil
}

type ComponentsComponentList struct {
	Name                 *string                                   `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	State                *ComponentsComponentListStateType         `protobuf:"bytes,152,opt,name=state" json:"state,omitempty"`
	Properties           *ComponentsComponentListPropertiesType    `protobuf:"bytes,156,opt,name=properties" json:"properties,omitempty"`
	Subcomponents        *ComponentsComponentListSubcomponentsType `protobuf:"bytes,153,opt,name=subcomponents" json:"subcomponents,omitempty"`
	Transceiver          *ComponentsComponentListTransceiverType   `protobuf:"bytes,161,opt,name=transceiver" json:"transceiver,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *ComponentsComponentList) Reset()         { *m = ComponentsComponentList{} }
func (m *ComponentsComponentList) String() string { return proto.CompactTextString(m) }
func (*ComponentsComponentList) ProtoMessage()    {}
func (*ComponentsComponentList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e8a9475610846cf, []int{0, 0}
}
func (m *ComponentsComponentList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComponentsComponentList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComponentsComponentList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComponentsComponentList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentsComponentList.Merge(m, src)
}
func (m *ComponentsComponentList) XXX_Size() int {
	return m.Size()
}
func (m *ComponentsComponentList) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentsComponentList.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentsComponentList proto.InternalMessageInfo

func (m *ComponentsComponentList) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ComponentsComponentList) GetState() *ComponentsComponentListStateType {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ComponentsComponentList) GetProperties() *ComponentsComponentListPropertiesType {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *ComponentsComponentList) GetSubcomponents() *ComponentsComponentListSubcomponentsType {
	if m != nil {
		return m.Subcomponents
	}
	return nil
}

func (m *ComponentsComponentList) GetTransceiver() *ComponentsComponentListTransceiverType {
	if m != nil {
		return m.Transceiver
	}
	return nil
}

type ComponentsComponentListStateType struct {
	Name                 *string                                          `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	Type                 *string                                          `protobuf:"bytes,52,opt,name=type" json:"type,omitempty"`
	Id                   *string                                          `protobuf:"bytes,53,opt,name=id" json:"id,omitempty"`
	Location             *string                                          `protobuf:"bytes,54,opt,name=location" json:"location,omitempty"`
	Description          *string                                          `protobuf:"bytes,55,opt,name=description" json:"description,omitempty"`
	MfgName              *string                                          `protobuf:"bytes,56,opt,name=mfg_name,json=mfgName" json:"mfg_name,omitempty"`
	MfgDate              *string                                          `protobuf:"bytes,57,opt,name=mfg_date,json=mfgDate" json:"mfg_date,omitempty"`
	HardwareVersion      *string                                          `protobuf:"bytes,58,opt,name=hardware_version,json=hardwareVersion" json:"hardware_version,omitempty"`
	FirmwareVersion      *string                                          `protobuf:"bytes,59,opt,name=firmware_version,json=firmwareVersion" json:"firmware_version,omitempty"`
	SoftwareVersion      *string                                          `protobuf:"bytes,60,opt,name=software_version,json=softwareVersion" json:"software_version,omitempty"`
	SerialNo             *string                                          `protobuf:"bytes,61,opt,name=serial_no,json=serialNo" json:"serial_no,omitempty"`
	PartNo               *string                                          `protobuf:"bytes,62,opt,name=part_no,json=partNo" json:"part_no,omitempty"`
	Removable            *bool                                            `protobuf:"varint,63,opt,name=removable" json:"removable,omitempty"`
	OperStatus           *string                                          `protobuf:"bytes,64,opt,name=oper_status,json=operStatus" json:"oper_status,omitempty"`
	Empty                *bool                                            `protobuf:"varint,65,opt,name=empty" json:"empty,omitempty"`
	Parent               *string                                          `protobuf:"bytes,66,opt,name=parent" json:"parent,omitempty"`
	Temperature          *ComponentsComponentListStateTypeTemperatureType `protobuf:"bytes,160,opt,name=temperature" json:"temperature,omitempty"`
	Memory               *ComponentsComponentListStateTypeMemoryType      `protobuf:"bytes,170,opt,name=memory" json:"memory,omitempty"`
	AllocatedPower       *uint32                                          `protobuf:"varint,67,opt,name=allocated_power,json=allocatedPower" json:"allocated_power,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                         `json:"-"`
	XXX_unrecognized     []byte                                           `json:"-"`
	XXX_sizecache        int32                                            `json:"-"`
}

func (m *ComponentsComponentListStateType) Reset()         { *m = ComponentsComponentListStateType{} }
func (m *ComponentsComponentListStateType) String() string { return proto.CompactTextString(m) }
func (*ComponentsComponentListStateType) ProtoMessage()    {}
func (*ComponentsComponentListStateType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e8a9475610846cf, []int{0, 0, 0}
}
func (m *ComponentsComponentListStateType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComponentsComponentListStateType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComponentsComponentListStateType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComponentsComponentListStateType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentsComponentListStateType.Merge(m, src)
}
func (m *ComponentsComponentListStateType) XXX_Size() int {
	return m.Size()
}
func (m *ComponentsComponentListStateType) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentsComponentListStateType.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentsComponentListStateType proto.InternalMessageInfo

func (m *ComponentsComponentListStateType) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ComponentsComponentListStateType) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *ComponentsComponentListStateType) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *ComponentsComponentListStateType) GetLocation() string {
	if m != nil && m.Location != nil {
		return *m.Location
	}
	return ""
}

func (m *ComponentsComponentListStateType) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *ComponentsComponentListStateType) GetMfgName() string {
	if m != nil && m.MfgName != nil {
		return *m.MfgName
	}
	return ""
}

func (m *ComponentsComponentListStateType) GetMfgDate() string {
	if m != nil && m.MfgDate != nil {
		return *m.MfgDate
	}
	return ""
}

func (m *ComponentsComponentListStateType) GetHardwareVersion() string {
	if m != nil && m.HardwareVersion != nil {
		return *m.HardwareVersion
	}
	return ""
}

func (m *ComponentsComponentListStateType) GetFirmwareVersion() string {
	if m != nil && m.FirmwareVersion != nil {
		return *m.FirmwareVersion
	}
	return ""
}

func (m *ComponentsComponentListStateType) GetSoftwareVersion() string {
	if m != nil && m.SoftwareVersion != nil {
		return *m.SoftwareVersion
	}
	return ""
}

func (m *ComponentsComponentListStateType) GetSerialNo() string {
	if m != nil && m.SerialNo != nil {
		return *m.SerialNo
	}
	return ""
}

func (m *ComponentsComponentListStateType) GetPartNo() string {
	if m != nil && m.PartNo != nil {
		return *m.PartNo
	}
	return ""
}

func (m *ComponentsComponentListStateType) GetRemovable() bool {
	if m != nil && m.Removable != nil {
		return *m.Removable
	}
	return false
}

func (m *ComponentsComponentListStateType) GetOperStatus() string {
	if m != nil && m.OperStatus != nil {
		return *m.OperStatus
	}
	return ""
}

func (m *ComponentsComponentListStateType) GetEmpty() bool {
	if m != nil && m.Empty != nil {
		return *m.Empty
	}
	return false
}

func (m *ComponentsComponentListStateType) GetParent() string {
	if m != nil && m.Parent != nil {
		return *m.Parent
	}
	return ""
}

func (m *ComponentsComponentListStateType) GetTemperature() *ComponentsComponentListStateTypeTemperatureType {
	if m != nil {
		return m.Temperature
	}
	return nil
}

func (m *ComponentsComponentListStateType) GetMemory() *ComponentsComponentListStateTypeMemoryType {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *ComponentsComponentListStateType) GetAllocatedPower() uint32 {
	if m != nil && m.AllocatedPower != nil {
		return *m.AllocatedPower
	}
	return 0
}

type ComponentsComponentListStateTypeTemperatureType struct {
	Instant              *float64 `protobuf:"fixed64,81,opt,name=instant" json:"instant,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComponentsComponentListStateTypeTemperatureType) Reset() {
	*m = ComponentsComponentListStateTypeTemperatureType{}
}
func (m *ComponentsComponentListStateTypeTemperatureType) String() string {
	return proto.CompactTextString(m)
}
func (*ComponentsComponentListStateTypeTemperatureType) ProtoMessage() {}
func (*ComponentsComponentListStateTypeTemperatureType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e8a9475610846cf, []int{0, 0, 0, 0}
}
func (m *ComponentsComponentListStateTypeTemperatureType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComponentsComponentListStateTypeTemperatureType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComponentsComponentListStateTypeTemperatureType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComponentsComponentListStateTypeTemperatureType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentsComponentListStateTypeTemperatureType.Merge(m, src)
}
func (m *ComponentsComponentListStateTypeTemperatureType) XXX_Size() int {
	return m.Size()
}
func (m *ComponentsComponentListStateTypeTemperatureType) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentsComponentListStateTypeTemperatureType.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentsComponentListStateTypeTemperatureType proto.InternalMessageInfo

func (m *ComponentsComponentListStateTypeTemperatureType) GetInstant() float64 {
	if m != nil && m.Instant != nil {
		return *m.Instant
	}
	return 0
}

type ComponentsComponentListStateTypeMemoryType struct {
	Available            *uint64  `protobuf:"varint,91,opt,name=available" json:"available,omitempty"`
	Utilized             *uint64  `protobuf:"varint,92,opt,name=utilized" json:"utilized,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComponentsComponentListStateTypeMemoryType) Reset() {
	*m = ComponentsComponentListStateTypeMemoryType{}
}
func (m *ComponentsComponentListStateTypeMemoryType) String() string {
	return proto.CompactTextString(m)
}
func (*ComponentsComponentListStateTypeMemoryType) ProtoMessage() {}
func (*ComponentsComponentListStateTypeMemoryType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e8a9475610846cf, []int{0, 0, 0, 1}
}
func (m *ComponentsComponentListStateTypeMemoryType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComponentsComponentListStateTypeMemoryType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComponentsComponentListStateTypeMemoryType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComponentsComponentListStateTypeMemoryType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentsComponentListStateTypeMemoryType.Merge(m, src)
}
func (m *ComponentsComponentListStateTypeMemoryType) XXX_Size() int {
	return m.Size()
}
func (m *ComponentsComponentListStateTypeMemoryType) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentsComponentListStateTypeMemoryType.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentsComponentListStateTypeMemoryType proto.InternalMessageInfo

func (m *ComponentsComponentListStateTypeMemoryType) GetAvailable() uint64 {
	if m != nil && m.Available != nil {
		return *m.Available
	}
	return 0
}

func (m *ComponentsComponentListStateTypeMemoryType) GetUtilized() uint64 {
	if m != nil && m.Utilized != nil {
		return *m.Utilized
	}
	return 0
}

type ComponentsComponentListPropertiesType struct {
	Property             []*ComponentsComponentListPropertiesTypePropertyList `protobuf:"bytes,151,rep,name=property" json:"property,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                             `json:"-"`
	XXX_unrecognized     []byte                                               `json:"-"`
	XXX_sizecache        int32                                                `json:"-"`
}

func (m *ComponentsComponentListPropertiesType) Reset()         { *m = ComponentsComponentListPropertiesType{} }
func (m *ComponentsComponentListPropertiesType) String() string { return proto.CompactTextString(m) }
func (*ComponentsComponentListPropertiesType) ProtoMessage()    {}
func (*ComponentsComponentListPropertiesType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e8a9475610846cf, []int{0, 0, 1}
}
func (m *ComponentsComponentListPropertiesType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComponentsComponentListPropertiesType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComponentsComponentListPropertiesType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComponentsComponentListPropertiesType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentsComponentListPropertiesType.Merge(m, src)
}
func (m *ComponentsComponentListPropertiesType) XXX_Size() int {
	return m.Size()
}
func (m *ComponentsComponentListPropertiesType) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentsComponentListPropertiesType.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentsComponentListPropertiesType proto.InternalMessageInfo

func (m *ComponentsComponentListPropertiesType) GetProperty() []*ComponentsComponentListPropertiesTypePropertyList {
	if m != nil {
		return m.Property
	}
	return nil
}

type ComponentsComponentListPropertiesTypePropertyList struct {
	Name                 *string                                                     `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	State                *ComponentsComponentListPropertiesTypePropertyListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                    `json:"-"`
	XXX_unrecognized     []byte                                                      `json:"-"`
	XXX_sizecache        int32                                                       `json:"-"`
}

func (m *ComponentsComponentListPropertiesTypePropertyList) Reset() {
	*m = ComponentsComponentListPropertiesTypePropertyList{}
}
func (m *ComponentsComponentListPropertiesTypePropertyList) String() string {
	return proto.CompactTextString(m)
}
func (*ComponentsComponentListPropertiesTypePropertyList) ProtoMessage() {}
func (*ComponentsComponentListPropertiesTypePropertyList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e8a9475610846cf, []int{0, 0, 1, 0}
}
func (m *ComponentsComponentListPropertiesTypePropertyList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComponentsComponentListPropertiesTypePropertyList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComponentsComponentListPropertiesTypePropertyList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComponentsComponentListPropertiesTypePropertyList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentsComponentListPropertiesTypePropertyList.Merge(m, src)
}
func (m *ComponentsComponentListPropertiesTypePropertyList) XXX_Size() int {
	return m.Size()
}
func (m *ComponentsComponentListPropertiesTypePropertyList) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentsComponentListPropertiesTypePropertyList.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentsComponentListPropertiesTypePropertyList proto.InternalMessageInfo

func (m *ComponentsComponentListPropertiesTypePropertyList) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ComponentsComponentListPropertiesTypePropertyList) GetState() *ComponentsComponentListPropertiesTypePropertyListStateType {
	if m != nil {
		return m.State
	}
	return nil
}

type ComponentsComponentListPropertiesTypePropertyListStateType struct {
	Value                *string  `protobuf:"bytes,51,opt,name=value" json:"value,omitempty"`
	Configurable         *bool    `protobuf:"varint,52,opt,name=configurable" json:"configurable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComponentsComponentListPropertiesTypePropertyListStateType) Reset() {
	*m = ComponentsComponentListPropertiesTypePropertyListStateType{}
}
func (m *ComponentsComponentListPropertiesTypePropertyListStateType) String() string {
	return proto.CompactTextString(m)
}
func (*ComponentsComponentListPropertiesTypePropertyListStateType) ProtoMessage() {}
func (*ComponentsComponentListPropertiesTypePropertyListStateType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e8a9475610846cf, []int{0, 0, 1, 0, 0}
}
func (m *ComponentsComponentListPropertiesTypePropertyListStateType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComponentsComponentListPropertiesTypePropertyListStateType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComponentsComponentListPropertiesTypePropertyListStateType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComponentsComponentListPropertiesTypePropertyListStateType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentsComponentListPropertiesTypePropertyListStateType.Merge(m, src)
}
func (m *ComponentsComponentListPropertiesTypePropertyListStateType) XXX_Size() int {
	return m.Size()
}
func (m *ComponentsComponentListPropertiesTypePropertyListStateType) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentsComponentListPropertiesTypePropertyListStateType.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentsComponentListPropertiesTypePropertyListStateType proto.InternalMessageInfo

func (m *ComponentsComponentListPropertiesTypePropertyListStateType) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func (m *ComponentsComponentListPropertiesTypePropertyListStateType) GetConfigurable() bool {
	if m != nil && m.Configurable != nil {
		return *m.Configurable
	}
	return false
}

type ComponentsComponentListSubcomponentsType struct {
	Subcomponent         []*ComponentsComponentListSubcomponentsTypeSubcomponentList `protobuf:"bytes,151,rep,name=subcomponent" json:"subcomponent,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                    `json:"-"`
	XXX_unrecognized     []byte                                                      `json:"-"`
	XXX_sizecache        int32                                                       `json:"-"`
}

func (m *ComponentsComponentListSubcomponentsType) Reset() {
	*m = ComponentsComponentListSubcomponentsType{}
}
func (m *ComponentsComponentListSubcomponentsType) String() string { return proto.CompactTextString(m) }
func (*ComponentsComponentListSubcomponentsType) ProtoMessage()    {}
func (*ComponentsComponentListSubcomponentsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e8a9475610846cf, []int{0, 0, 2}
}
func (m *ComponentsComponentListSubcomponentsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComponentsComponentListSubcomponentsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComponentsComponentListSubcomponentsType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComponentsComponentListSubcomponentsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentsComponentListSubcomponentsType.Merge(m, src)
}
func (m *ComponentsComponentListSubcomponentsType) XXX_Size() int {
	return m.Size()
}
func (m *ComponentsComponentListSubcomponentsType) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentsComponentListSubcomponentsType.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentsComponentListSubcomponentsType proto.InternalMessageInfo

func (m *ComponentsComponentListSubcomponentsType) GetSubcomponent() []*ComponentsComponentListSubcomponentsTypeSubcomponentList {
	if m != nil {
		return m.Subcomponent
	}
	return nil
}

type ComponentsComponentListSubcomponentsTypeSubcomponentList struct {
	Name                 *string                                                            `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	State                *ComponentsComponentListSubcomponentsTypeSubcomponentListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                           `json:"-"`
	XXX_unrecognized     []byte                                                             `json:"-"`
	XXX_sizecache        int32                                                              `json:"-"`
}

func (m *ComponentsComponentListSubcomponentsTypeSubcomponentList) Reset() {
	*m = ComponentsComponentListSubcomponentsTypeSubcomponentList{}
}
func (m *ComponentsComponentListSubcomponentsTypeSubcomponentList) String() string {
	return proto.CompactTextString(m)
}
func (*ComponentsComponentListSubcomponentsTypeSubcomponentList) ProtoMessage() {}
func (*ComponentsComponentListSubcomponentsTypeSubcomponentList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e8a9475610846cf, []int{0, 0, 2, 0}
}
func (m *ComponentsComponentListSubcomponentsTypeSubcomponentList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComponentsComponentListSubcomponentsTypeSubcomponentList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComponentsComponentListSubcomponentsTypeSubcomponentList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComponentsComponentListSubcomponentsTypeSubcomponentList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentsComponentListSubcomponentsTypeSubcomponentList.Merge(m, src)
}
func (m *ComponentsComponentListSubcomponentsTypeSubcomponentList) XXX_Size() int {
	return m.Size()
}
func (m *ComponentsComponentListSubcomponentsTypeSubcomponentList) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentsComponentListSubcomponentsTypeSubcomponentList.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentsComponentListSubcomponentsTypeSubcomponentList proto.InternalMessageInfo

func (m *ComponentsComponentListSubcomponentsTypeSubcomponentList) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ComponentsComponentListSubcomponentsTypeSubcomponentList) GetState() *ComponentsComponentListSubcomponentsTypeSubcomponentListStateType {
	if m != nil {
		return m.State
	}
	return nil
}

type ComponentsComponentListSubcomponentsTypeSubcomponentListStateType struct {
	Name                 *string  `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComponentsComponentListSubcomponentsTypeSubcomponentListStateType) Reset() {
	*m = ComponentsComponentListSubcomponentsTypeSubcomponentListStateType{}
}
func (m *ComponentsComponentListSubcomponentsTypeSubcomponentListStateType) String() string {
	return proto.CompactTextString(m)
}
func (*ComponentsComponentListSubcomponentsTypeSubcomponentListStateType) ProtoMessage() {}
func (*ComponentsComponentListSubcomponentsTypeSubcomponentListStateType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e8a9475610846cf, []int{0, 0, 2, 0, 0}
}
func (m *ComponentsComponentListSubcomponentsTypeSubcomponentListStateType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComponentsComponentListSubcomponentsTypeSubcomponentListStateType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComponentsComponentListSubcomponentsTypeSubcomponentListStateType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComponentsComponentListSubcomponentsTypeSubcomponentListStateType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentsComponentListSubcomponentsTypeSubcomponentListStateType.Merge(m, src)
}
func (m *ComponentsComponentListSubcomponentsTypeSubcomponentListStateType) XXX_Size() int {
	return m.Size()
}
func (m *ComponentsComponentListSubcomponentsTypeSubcomponentListStateType) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentsComponentListSubcomponentsTypeSubcomponentListStateType.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentsComponentListSubcomponentsTypeSubcomponentListStateType proto.InternalMessageInfo

func (m *ComponentsComponentListSubcomponentsTypeSubcomponentListStateType) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type ComponentsComponentListTransceiverType struct {
	State                *ComponentsComponentListTransceiverTypeStateType            `protobuf:"bytes,162,opt,name=state" json:"state,omitempty"`
	PhysicalChannels     *ComponentsComponentListTransceiverTypePhysicalChannelsType `protobuf:"bytes,191,opt,name=physical_channels,json=physicalChannels" json:"physical_channels,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                    `json:"-"`
	XXX_unrecognized     []byte                                                      `json:"-"`
	XXX_sizecache        int32                                                       `json:"-"`
}

func (m *ComponentsComponentListTransceiverType) Reset() {
	*m = ComponentsComponentListTransceiverType{}
}
func (m *ComponentsComponentListTransceiverType) String() string { return proto.CompactTextString(m) }
func (*ComponentsComponentListTransceiverType) ProtoMessage()    {}
func (*ComponentsComponentListTransceiverType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e8a9475610846cf, []int{0, 0, 3}
}
func (m *ComponentsComponentListTransceiverType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComponentsComponentListTransceiverType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComponentsComponentListTransceiverType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComponentsComponentListTransceiverType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentsComponentListTransceiverType.Merge(m, src)
}
func (m *ComponentsComponentListTransceiverType) XXX_Size() int {
	return m.Size()
}
func (m *ComponentsComponentListTransceiverType) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentsComponentListTransceiverType.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentsComponentListTransceiverType proto.InternalMessageInfo

func (m *ComponentsComponentListTransceiverType) GetState() *ComponentsComponentListTransceiverTypeStateType {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ComponentsComponentListTransceiverType) GetPhysicalChannels() *ComponentsComponentListTransceiverTypePhysicalChannelsType {
	if m != nil {
		return m.PhysicalChannels
	}
	return nil
}

type ComponentsComponentListTransceiverTypeStateType struct {
	FormFactorPreconf      *string  `protobuf:"bytes,255,opt,name=form_factor_preconf,json=formFactorPreconf" json:"form_factor_preconf,omitempty"`
	EthernetPmdPreconf     *string  `protobuf:"bytes,256,opt,name=ethernet_pmd_preconf,json=ethernetPmdPreconf" json:"ethernet_pmd_preconf,omitempty"`
	Present                *string  `protobuf:"bytes,266,opt,name=present" json:"present,omitempty"`
	FormFactor             *string  `protobuf:"bytes,257,opt,name=form_factor,json=formFactor" json:"form_factor,omitempty"`
	ConnectorType          *string  `protobuf:"bytes,258,opt,name=connector_type,json=connectorType" json:"connector_type,omitempty"`
	Vendor                 *string  `protobuf:"bytes,259,opt,name=vendor" json:"vendor,omitempty"`
	VendorPart             *string  `protobuf:"bytes,260,opt,name=vendor_part,json=vendorPart" json:"vendor_part,omitempty"`
	VendorRev              *string  `protobuf:"bytes,261,opt,name=vendor_rev,json=vendorRev" json:"vendor_rev,omitempty"`
	EthernetPmd            *string  `protobuf:"bytes,262,opt,name=ethernet_pmd,json=ethernetPmd" json:"ethernet_pmd,omitempty"`
	SonetSdhComplianceCode *string  `protobuf:"bytes,263,opt,name=sonet_sdh_compliance_code,json=sonetSdhComplianceCode" json:"sonet_sdh_compliance_code,omitempty"`
	OtnComplianceCode      *string  `protobuf:"bytes,264,opt,name=otn_compliance_code,json=otnComplianceCode" json:"otn_compliance_code,omitempty"`
	SerialNo               *string  `protobuf:"bytes,265,opt,name=serial_no,json=serialNo" json:"serial_no,omitempty"`
	DateCode               *string  `protobuf:"bytes,286,opt,name=date_code,json=dateCode" json:"date_code,omitempty"`
	Enabled                *bool    `protobuf:"varint,51,opt,name=enabled" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *ComponentsComponentListTransceiverTypeStateType) Reset() {
	*m = ComponentsComponentListTransceiverTypeStateType{}
}
func (m *ComponentsComponentListTransceiverTypeStateType) String() string {
	return proto.CompactTextString(m)
}
func (*ComponentsComponentListTransceiverTypeStateType) ProtoMessage() {}
func (*ComponentsComponentListTransceiverTypeStateType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e8a9475610846cf, []int{0, 0, 3, 0}
}
func (m *ComponentsComponentListTransceiverTypeStateType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComponentsComponentListTransceiverTypeStateType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComponentsComponentListTransceiverTypeStateType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComponentsComponentListTransceiverTypeStateType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentsComponentListTransceiverTypeStateType.Merge(m, src)
}
func (m *ComponentsComponentListTransceiverTypeStateType) XXX_Size() int {
	return m.Size()
}
func (m *ComponentsComponentListTransceiverTypeStateType) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentsComponentListTransceiverTypeStateType.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentsComponentListTransceiverTypeStateType proto.InternalMessageInfo

func (m *ComponentsComponentListTransceiverTypeStateType) GetFormFactorPreconf() string {
	if m != nil && m.FormFactorPreconf != nil {
		return *m.FormFactorPreconf
	}
	return ""
}

func (m *ComponentsComponentListTransceiverTypeStateType) GetEthernetPmdPreconf() string {
	if m != nil && m.EthernetPmdPreconf != nil {
		return *m.EthernetPmdPreconf
	}
	return ""
}

func (m *ComponentsComponentListTransceiverTypeStateType) GetPresent() string {
	if m != nil && m.Present != nil {
		return *m.Present
	}
	return ""
}

func (m *ComponentsComponentListTransceiverTypeStateType) GetFormFactor() string {
	if m != nil && m.FormFactor != nil {
		return *m.FormFactor
	}
	return ""
}

func (m *ComponentsComponentListTransceiverTypeStateType) GetConnectorType() string {
	if m != nil && m.ConnectorType != nil {
		return *m.ConnectorType
	}
	return ""
}

func (m *ComponentsComponentListTransceiverTypeStateType) GetVendor() string {
	if m != nil && m.Vendor != nil {
		return *m.Vendor
	}
	return ""
}

func (m *ComponentsComponentListTransceiverTypeStateType) GetVendorPart() string {
	if m != nil && m.VendorPart != nil {
		return *m.VendorPart
	}
	return ""
}

func (m *ComponentsComponentListTransceiverTypeStateType) GetVendorRev() string {
	if m != nil && m.VendorRev != nil {
		return *m.VendorRev
	}
	return ""
}

func (m *ComponentsComponentListTransceiverTypeStateType) GetEthernetPmd() string {
	if m != nil && m.EthernetPmd != nil {
		return *m.EthernetPmd
	}
	return ""
}

func (m *ComponentsComponentListTransceiverTypeStateType) GetSonetSdhComplianceCode() string {
	if m != nil && m.SonetSdhComplianceCode != nil {
		return *m.SonetSdhComplianceCode
	}
	return ""
}

func (m *ComponentsComponentListTransceiverTypeStateType) GetOtnComplianceCode() string {
	if m != nil && m.OtnComplianceCode != nil {
		return *m.OtnComplianceCode
	}
	return ""
}

func (m *ComponentsComponentListTransceiverTypeStateType) GetSerialNo() string {
	if m != nil && m.SerialNo != nil {
		return *m.SerialNo
	}
	return ""
}

func (m *ComponentsComponentListTransceiverTypeStateType) GetDateCode() string {
	if m != nil && m.DateCode != nil {
		return *m.DateCode
	}
	return ""
}

func (m *ComponentsComponentListTransceiverTypeStateType) GetEnabled() bool {
	if m != nil && m.Enabled != nil {
		return *m.Enabled
	}
	return false
}

type ComponentsComponentListTransceiverTypePhysicalChannelsType struct {
	Channel              []*ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList `protobuf:"bytes,91,rep,name=channel" json:"channel,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                 `json:"-"`
	XXX_unrecognized     []byte                                                                   `json:"-"`
	XXX_sizecache        int32                                                                    `json:"-"`
}

func (m *ComponentsComponentListTransceiverTypePhysicalChannelsType) Reset() {
	*m = ComponentsComponentListTransceiverTypePhysicalChannelsType{}
}
func (m *ComponentsComponentListTransceiverTypePhysicalChannelsType) String() string {
	return proto.CompactTextString(m)
}
func (*ComponentsComponentListTransceiverTypePhysicalChannelsType) ProtoMessage() {}
func (*ComponentsComponentListTransceiverTypePhysicalChannelsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e8a9475610846cf, []int{0, 0, 3, 1}
}
func (m *ComponentsComponentListTransceiverTypePhysicalChannelsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComponentsComponentListTransceiverTypePhysicalChannelsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComponentsComponentListTransceiverTypePhysicalChannelsType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComponentsComponentListTransceiverTypePhysicalChannelsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentsComponentListTransceiverTypePhysicalChannelsType.Merge(m, src)
}
func (m *ComponentsComponentListTransceiverTypePhysicalChannelsType) XXX_Size() int {
	return m.Size()
}
func (m *ComponentsComponentListTransceiverTypePhysicalChannelsType) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentsComponentListTransceiverTypePhysicalChannelsType.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentsComponentListTransceiverTypePhysicalChannelsType proto.InternalMessageInfo

func (m *ComponentsComponentListTransceiverTypePhysicalChannelsType) GetChannel() []*ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList {
	if m != nil {
		return m.Channel
	}
	return nil
}

type ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList struct {
	Index                *uint32                                                                         `protobuf:"varint,191,opt,name=index" json:"index,omitempty"`
	State                *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType `protobuf:"bytes,849,opt,name=state" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                        `json:"-"`
	XXX_unrecognized     []byte                                                                          `json:"-"`
	XXX_sizecache        int32                                                                           `json:"-"`
}

func (m *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList) Reset() {
	*m = ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList{}
}
func (m *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList) String() string {
	return proto.CompactTextString(m)
}
func (*ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList) ProtoMessage() {}
func (*ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e8a9475610846cf, []int{0, 0, 3, 1, 0}
}
func (m *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList.Merge(m, src)
}
func (m *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList) XXX_Size() int {
	return m.Size()
}
func (m *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList proto.InternalMessageInfo

func (m *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList) GetIndex() uint32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList) GetState() *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType {
	if m != nil {
		return m.State
	}
	return nil
}

type ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType struct {
	Index                *uint32  `protobuf:"varint,39,opt,name=index" json:"index,omitempty"`
	Description          *string  `protobuf:"bytes,41,opt,name=description" json:"description,omitempty"`
	TxLaser              *bool    `protobuf:"varint,42,opt,name=tx_laser,json=txLaser" json:"tx_laser,omitempty"`
	TargetOutputPower    *float64 `protobuf:"fixed64,43,opt,name=target_output_power,json=targetOutputPower" json:"target_output_power,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType) Reset() {
	*m = ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType{}
}
func (m *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType) String() string {
	return proto.CompactTextString(m)
}
func (*ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType) ProtoMessage() {
}
func (*ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e8a9475610846cf, []int{0, 0, 3, 1, 0, 0}
}
func (m *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType.Merge(m, src)
}
func (m *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType) XXX_Size() int {
	return m.Size()
}
func (m *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType proto.InternalMessageInfo

func (m *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType) GetIndex() uint32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType) GetTxLaser() bool {
	if m != nil && m.TxLaser != nil {
		return *m.TxLaser
	}
	return false
}

func (m *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType) GetTargetOutputPower() float64 {
	if m != nil && m.TargetOutputPower != nil {
		return *m.TargetOutputPower
	}
	return 0
}

var E_JnprComponentsExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*Components)(nil),
	Field:         40,
	Name:          "jnpr_components_ext",
	Tag:           "bytes,40,opt,name=jnpr_components_ext",
	Filename:      "chassisd_oc.proto",
}

func init() {
	proto.RegisterType((*Components)(nil), "components")
	proto.RegisterType((*ComponentsComponentList)(nil), "components.component_list")
	proto.RegisterType((*ComponentsComponentListStateType)(nil), "components.component_list.state_type")
	proto.RegisterType((*ComponentsComponentListStateTypeTemperatureType)(nil), "components.component_list.state_type.temperature_type")
	proto.RegisterType((*ComponentsComponentListStateTypeMemoryType)(nil), "components.component_list.state_type.memory_type")
	proto.RegisterType((*ComponentsComponentListPropertiesType)(nil), "components.component_list.properties_type")
	proto.RegisterType((*ComponentsComponentListPropertiesTypePropertyList)(nil), "components.component_list.properties_type.property_list")
	proto.RegisterType((*ComponentsComponentListPropertiesTypePropertyListStateType)(nil), "components.component_list.properties_type.property_list.state_type")
	proto.RegisterType((*ComponentsComponentListSubcomponentsType)(nil), "components.component_list.subcomponents_type")
	proto.RegisterType((*ComponentsComponentListSubcomponentsTypeSubcomponentList)(nil), "components.component_list.subcomponents_type.subcomponent_list")
	proto.RegisterType((*ComponentsComponentListSubcomponentsTypeSubcomponentListStateType)(nil), "components.component_list.subcomponents_type.subcomponent_list.state_type")
	proto.RegisterType((*ComponentsComponentListTransceiverType)(nil), "components.component_list.transceiver_type")
	proto.RegisterType((*ComponentsComponentListTransceiverTypeStateType)(nil), "components.component_list.transceiver_type.state_type")
	proto.RegisterType((*ComponentsComponentListTransceiverTypePhysicalChannelsType)(nil), "components.component_list.transceiver_type.physical_channels_type")
	proto.RegisterType((*ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList)(nil), "components.component_list.transceiver_type.physical_channels_type.channel_list")
	proto.RegisterType((*ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType)(nil), "components.component_list.transceiver_type.physical_channels_type.channel_list.state_type")
	proto.RegisterExtension(E_JnprComponentsExt)
}

func init() { proto.RegisterFile("chassisd_oc.proto", fileDescriptor_0e8a9475610846cf) }

var fileDescriptor_0e8a9475610846cf = []byte{
	// 1284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcd, 0x6f, 0x1b, 0xc5,
	0x1b, 0xd6, 0xba, 0xf9, 0xf2, 0xeb, 0xa6, 0x8d, 0x27, 0x55, 0x33, 0xd9, 0x5f, 0x94, 0x9f, 0x55,
	0x09, 0xea, 0xb6, 0xc4, 0x56, 0x4b, 0x29, 0x6d, 0x29, 0xb4, 0x24, 0x50, 0xa4, 0x02, 0x69, 0x70,
	0x0b, 0x12, 0x2d, 0xd2, 0x32, 0xd9, 0x1d, 0xdb, 0x9b, 0xee, 0xce, 0x2c, 0x33, 0x63, 0x37, 0xe6,
	0x04, 0xe5, 0x9b, 0x0b, 0xc7, 0x82, 0x40, 0x88, 0x8f, 0x03, 0x12, 0x27, 0x10, 0x07, 0xc4, 0x89,
	0x2b, 0x27, 0x04, 0xff, 0x01, 0xaa, 0xc4, 0xdf, 0x01, 0x9a, 0x99, 0x5d, 0x7b, 0xed, 0x84, 0x34,
	0xa5, 0xdc, 0xfc, 0x3e, 0xcf, 0xf3, 0x3e, 0x33, 0xfb, 0xce, 0x3b, 0xef, 0x18, 0xca, 0x7e, 0x9b,
	0x48, 0x19, 0xca, 0xc0, 0xe3, 0x7e, 0x2d, 0x11, 0x5c, 0x71, 0x77, 0x56, 0xd1, 0x88, 0xc6, 0x54,
	0x89, 0x9e, 0xa7, 0x78, 0x62, 0xc1, 0x43, 0x7f, 0xce, 0x01, 0xf8, 0x3c, 0x4e, 0x38, 0xa3, 0x4c,
	0x49, 0x74, 0x06, 0x8a, 0xfd, 0x08, 0xdf, 0x76, 0x2a, 0x7b, 0xaa, 0xa5, 0x13, 0x6e, 0x6d, 0x20,
	0x18, 0xfc, 0xf4, 0xa2, 0x50, 0xaa, 0xc6, 0x40, 0xed, 0x7e, 0x3a, 0x07, 0xfb, 0x86, 0x59, 0x34,
	0x0f, 0x63, 0x8c, 0xc4, 0x14, 0x3f, 0x5c, 0x71, 0xaa, 0xc5, 0xe5, 0xf1, 0x5b, 0x17, 0x0a, 0x53,
	0x4e, 0xc3, 0x40, 0xe8, 0x1c, 0x8c, 0x4b, 0x45, 0x14, 0xc5, 0x1f, 0x3b, 0x15, 0xa7, 0x5a, 0x3a,
	0xf1, 0xc0, 0x3f, 0x2f, 0x52, 0x33, 0x42, 0x4f, 0xf5, 0x12, 0xda, 0xb0, 0x49, 0xe8, 0x59, 0x80,
	0x44, 0xf0, 0x84, 0x0a, 0x15, 0x52, 0x89, 0x3f, 0xb3, 0x16, 0x47, 0x77, 0xb0, 0x18, 0xa8, 0xad,
	0x4f, 0x2e, 0x1d, 0x5d, 0x85, 0x69, 0xd9, 0x59, 0x1f, 0xe4, 0xe2, 0x4f, 0xac, 0xdf, 0xd2, 0x4e,
	0x5b, 0xca, 0x27, 0x58, 0xcb, 0x61, 0x13, 0xb4, 0x0a, 0x25, 0x25, 0x08, 0x93, 0x3e, 0x0d, 0xbb,
	0x54, 0xe0, 0x2f, 0xad, 0xe7, 0xb1, 0x1d, 0x3c, 0x73, 0x72, 0xeb, 0x98, 0x37, 0x70, 0xbf, 0x9e,
	0x00, 0x18, 0x14, 0x02, 0xa1, 0x7c, 0x69, 0xd3, 0x9a, 0x22, 0x18, 0xd3, 0x1c, 0x3e, 0x69, 0x31,
	0xa3, 0xdb, 0x07, 0x85, 0x30, 0xc0, 0x8f, 0x18, 0xa4, 0x10, 0x06, 0xc8, 0x85, 0xa9, 0x88, 0xfb,
	0x44, 0x85, 0x9c, 0xe1, 0x53, 0x06, 0xed, 0xc7, 0xa8, 0x02, 0xa5, 0x80, 0x4a, 0x5f, 0x84, 0x89,
	0xa1, 0x1f, 0x35, 0x74, 0x1e, 0x42, 0xf3, 0x30, 0x15, 0x37, 0x5b, 0x9e, 0x59, 0xf9, 0xb4, 0xa1,
	0x27, 0xe3, 0x66, 0x6b, 0x55, 0x2f, 0x9e, 0x52, 0x81, 0x3e, 0xd3, 0x33, 0x7d, 0xea, 0x29, 0x7d,
	0x5a, 0x47, 0x60, 0xa6, 0x4d, 0x44, 0x70, 0x93, 0x08, 0xea, 0x75, 0xa9, 0x90, 0xda, 0xfc, 0xac,
	0x91, 0xec, 0xcf, 0xf0, 0x97, 0x2c, 0xac, 0xa5, 0xcd, 0x50, 0xc4, 0x43, 0xd2, 0xc7, 0xac, 0x34,
	0xc3, 0x73, 0x52, 0xc9, 0x9b, 0x6a, 0x48, 0x7a, 0xce, 0x4a, 0x33, 0x3c, 0x93, 0xfe, 0x0f, 0x8a,
	0x92, 0x8a, 0x90, 0x44, 0x1e, 0xe3, 0xf8, 0x71, 0xfb, 0xd5, 0x16, 0x58, 0xe5, 0x68, 0x0e, 0x26,
	0x13, 0x22, 0x94, 0xa6, 0x9e, 0x30, 0xd4, 0x84, 0x0e, 0x57, 0x39, 0x5a, 0x80, 0xa2, 0xa0, 0x31,
	0xef, 0x92, 0xf5, 0x88, 0xe2, 0xf3, 0x15, 0xa7, 0x3a, 0xd5, 0x18, 0x00, 0xe8, 0xff, 0x50, 0xd2,
	0x1d, 0xe4, 0xe9, 0x33, 0xe9, 0x48, 0x7c, 0xc1, 0xa4, 0x82, 0x86, 0xae, 0x18, 0x04, 0x1d, 0x80,
	0x71, 0x1a, 0x27, 0xaa, 0x87, 0x9f, 0x34, 0xa9, 0x36, 0x40, 0x07, 0x41, 0xdb, 0xeb, 0xdb, 0xb5,
	0xdc, 0x5f, 0x8c, 0x32, 0x85, 0x5e, 0x86, 0x92, 0xa2, 0x71, 0x42, 0x05, 0x51, 0x1d, 0x41, 0xf1,
	0x17, 0xb6, 0x5d, 0x4e, 0xed, 0xea, 0x56, 0xd4, 0x72, 0x99, 0x59, 0xe7, 0x0c, 0x10, 0x74, 0x09,
	0x26, 0x62, 0x1a, 0x73, 0xd1, 0xc3, 0xdf, 0x5a, 0xd7, 0xe3, 0xbb, 0x73, 0xb5, 0x49, 0xd6, 0x30,
	0x75, 0x40, 0x87, 0x61, 0x3f, 0x89, 0x4c, 0xc3, 0xd0, 0xc0, 0x4b, 0xf8, 0x4d, 0x2a, 0xf0, 0x4a,
	0xc5, 0xa9, 0x4e, 0x37, 0xf6, 0xf5, 0xe1, 0x35, 0x8d, 0xba, 0x0f, 0xc1, 0xcc, 0xe8, 0xae, 0x10,
	0x86, 0xc9, 0x90, 0x49, 0x45, 0x98, 0xc2, 0x2f, 0x54, 0x9c, 0xaa, 0xd3, 0xc8, 0x42, 0xf7, 0x19,
	0x28, 0xe5, 0x56, 0xd3, 0x95, 0x27, 0x5d, 0x12, 0x46, 0xa6, 0xf2, 0xd7, 0x2b, 0x4e, 0x75, 0xac,
	0x31, 0x00, 0x74, 0x0b, 0x77, 0x54, 0x18, 0x85, 0xaf, 0xd3, 0x00, 0xbf, 0x62, 0xc8, 0x7e, 0xec,
	0xfe, 0x54, 0x80, 0xfd, 0x23, 0x77, 0x1d, 0xbd, 0x08, 0x53, 0x29, 0xd4, 0xcb, 0x46, 0xda, 0xe9,
	0xdd, 0x8f, 0x8a, 0x2c, 0xee, 0xd9, 0x81, 0xd7, 0xb7, 0x72, 0x7f, 0x75, 0x60, 0x7a, 0x88, 0xdb,
	0x69, 0xdc, 0x5d, 0xcb, 0xc6, 0xdd, 0x6d, 0x7b, 0x04, 0x2b, 0xff, 0x76, 0x03, 0x5b, 0x87, 0xa1,
	0x7b, 0x71, 0x68, 0x30, 0x1c, 0x80, 0xf1, 0x2e, 0x89, 0x3a, 0xd9, 0x64, 0xb0, 0x01, 0x3a, 0x04,
	0x7b, 0x7d, 0xce, 0x9a, 0x61, 0xab, 0x23, 0x4c, 0x51, 0x4f, 0x9a, 0x9e, 0x1c, 0xc2, 0xdc, 0xef,
	0x0a, 0x80, 0xb6, 0xce, 0x35, 0x14, 0xc0, 0xde, 0x3c, 0x9a, 0x95, 0xf0, 0xfc, 0x3d, 0x4d, 0xc7,
	0x21, 0xc8, 0x56, 0x72, 0xc8, 0xd5, 0xfd, 0xc1, 0x81, 0xf2, 0x16, 0xcd, 0x4e, 0x15, 0x25, 0x23,
	0x15, 0xbd, 0x74, 0x9f, 0xfb, 0xd9, 0xa6, 0xb0, 0x95, 0xbb, 0x4d, 0x5c, 0xf7, 0x9b, 0x22, 0xcc,
	0x8c, 0x8e, 0x6d, 0xf4, 0x7c, 0xb6, 0xb3, 0xaf, 0xee, 0x7e, 0x89, 0x47, 0x93, 0xb7, 0x79, 0xeb,
	0x12, 0x28, 0x27, 0xed, 0x9e, 0x0c, 0x7d, 0x12, 0x79, 0x7e, 0x9b, 0x30, 0x46, 0x23, 0x89, 0x7f,
	0xb6, 0xd6, 0xcb, 0xf7, 0x62, 0xbd, 0xc5, 0xc5, 0x2e, 0x33, 0x93, 0xe1, 0x2b, 0x29, 0xec, 0xde,
	0x1e, 0x1b, 0xfa, 0xf0, 0x3a, 0xcc, 0x36, 0xb9, 0x88, 0xbd, 0x26, 0xf1, 0x15, 0x17, 0x5e, 0x22,
	0xa8, 0x6e, 0x1b, 0xfc, 0x97, 0x63, 0x0a, 0x51, 0xd6, 0xdc, 0x45, 0x43, 0xad, 0x59, 0x06, 0x1d,
	0x87, 0x03, 0x54, 0xb5, 0xa9, 0x60, 0x54, 0x79, 0x49, 0x1c, 0xf4, 0x33, 0xde, 0x28, 0x98, 0x0c,
	0x94, 0x91, 0x6b, 0x71, 0x90, 0xa5, 0xcc, 0xc3, 0x64, 0x22, 0xa8, 0xd4, 0xfd, 0xf5, 0xa1, 0x55,
	0x65, 0xb1, 0x7e, 0x95, 0x72, 0xcb, 0xe3, 0x37, 0x2d, 0x0d, 0x83, 0x65, 0xd1, 0x83, 0xfa, 0x8f,
	0x07, 0x63, 0xd4, 0x6c, 0xcf, 0xbc, 0x80, 0xb7, 0xac, 0x68, 0xba, 0x0f, 0x5f, 0xd5, 0x1f, 0x32,
	0x07, 0x13, 0x5d, 0xca, 0x02, 0x2e, 0xf0, 0x5b, 0x96, 0x4f, 0x43, 0xbd, 0x84, 0xfd, 0xe5, 0xe9,
	0xd1, 0x8f, 0xdf, 0x4e, 0x97, 0xb0, 0xd8, 0x1a, 0x11, 0x0a, 0x2d, 0x42, 0x1a, 0x79, 0x82, 0x76,
	0xf1, 0x3b, 0x56, 0x50, 0xb4, 0x50, 0x83, 0x76, 0xf5, 0xfd, 0xca, 0x7f, 0x32, 0x7e, 0xd7, 0x2a,
	0x4a, 0xb9, 0x4f, 0x45, 0x67, 0x61, 0x5e, 0x72, 0x2d, 0x90, 0x41, 0xdb, 0xd3, 0x87, 0x15, 0x85,
	0x84, 0xf9, 0xd4, 0xf3, 0x79, 0x40, 0xf1, 0x7b, 0x36, 0xe1, 0xa0, 0x51, 0x5c, 0x09, 0xda, 0x2b,
	0x7d, 0x7e, 0x85, 0x07, 0xe6, 0x0c, 0xb8, 0x62, 0x5b, 0xb2, 0xde, 0xb7, 0x59, 0x65, 0xae, 0xd8,
	0x48, 0xc2, 0x42, 0xfe, 0xc9, 0xfb, 0xa0, 0x30, 0xf2, 0xe6, 0x2d, 0x40, 0x51, 0x3f, 0xd4, 0xd6,
	0xe4, 0xf3, 0x94, 0xd5, 0x88, 0xc9, 0xc5, 0x30, 0x49, 0x99, 0x1e, 0x09, 0x81, 0x69, 0xf6, 0xa9,
	0x46, 0x16, 0xba, 0x3f, 0xee, 0x81, 0x83, 0xdb, 0xb7, 0x11, 0x0a, 0x61, 0x32, 0x05, 0xf0, 0x75,
	0x33, 0x20, 0x2e, 0xdf, 0x7f, 0x6f, 0xd6, 0xd2, 0xc8, 0x0e, 0x8c, 0xcc, 0xdf, 0xfd, 0xbe, 0x00,
	0x7b, 0xf3, 0x0c, 0x5a, 0x80, 0xf1, 0x90, 0x05, 0x74, 0xd3, 0x5e, 0x8b, 0xe9, 0x6c, 0x50, 0x58,
	0x10, 0xbd, 0x96, 0xdd, 0xc7, 0xdf, 0x27, 0xcc, 0xa5, 0xb9, 0xf6, 0x1f, 0x6f, 0x6c, 0x9b, 0xc9,
	0xf1, 0x91, 0x33, 0x3a, 0x93, 0xed, 0xfe, 0x0e, 0x9b, 0xb7, 0x32, 0xdd, 0xd7, 0xc8, 0xdf, 0xad,
	0x23, 0xdb, 0xfe, 0xdd, 0x52, 0x9b, 0x5e, 0x44, 0x24, 0x15, 0xf8, 0xa8, 0x3d, 0x09, 0xb5, 0xf9,
	0x9c, 0x0e, 0x51, 0x0d, 0x66, 0x15, 0x11, 0x2d, 0xaa, 0x3c, 0xde, 0x51, 0x49, 0x47, 0xa5, 0x8f,
	0xf1, 0x31, 0xf3, 0xae, 0x96, 0x2d, 0x75, 0xd9, 0x30, 0xe6, 0x3d, 0x3e, 0x7b, 0x15, 0x66, 0x37,
	0x58, 0x22, 0xbc, 0xdc, 0x1c, 0xa4, 0x9b, 0x0a, 0xcd, 0xd5, 0x2e, 0x75, 0x58, 0x98, 0x50, 0xb1,
	0x4a, 0xd5, 0x4d, 0x2e, 0x6e, 0xc8, 0x2b, 0x94, 0x49, 0x2e, 0x24, 0xae, 0x9a, 0x52, 0x95, 0x72,
	0xa5, 0x6a, 0x94, 0xb5, 0xc1, 0x4a, 0x3f, 0x7e, 0x7a, 0x53, 0x2d, 0xbf, 0xfa, 0xcb, 0x9d, 0x45,
	0xe7, 0xb7, 0x3b, 0x8b, 0xce, 0x1f, 0x77, 0x16, 0x9d, 0x6b, 0x8d, 0x56, 0xa8, 0x6a, 0x1b, 0xd6,
	0xaf, 0xc6, 0xa8, 0xaa, 0x87, 0x3e, 0x5d, 0xa7, 0xa2, 0x55, 0x6f, 0x53, 0x12, 0xa9, 0xf6, 0x3a,
	0x57, 0x4b, 0x21, 0x6b, 0x51, 0xa9, 0x96, 0x36, 0x54, 0xb8, 0xc4, 0x88, 0x0a, 0xbb, 0xb4, 0x9e,
	0xdc, 0x68, 0xd5, 0x37, 0x54, 0x58, 0x27, 0x01, 0x49, 0x14, 0x15, 0xb2, 0xee, 0x6d, 0x74, 0x18,
	0x97, 0x75, 0xe9, 0xb7, 0x69, 0x4c, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xba, 0x53, 0xae, 0xab,
	0xc8, 0x0c, 0x00, 0x00,
}

func (m *Components) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Components) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Components) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Component) > 0 {
		for iNdEx := len(m.Component) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Component[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChassisdOc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *ComponentsComponentList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentsComponentList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComponentsComponentList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Transceiver != nil {
		{
			size, err := m.Transceiver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChassisdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0x8a
	}
	if m.Properties != nil {
		{
			size, err := m.Properties.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChassisdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xe2
	}
	if m.Subcomponents != nil {
		{
			size, err := m.Subcomponents.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChassisdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xca
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChassisdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xc2
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintChassisdOc(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *ComponentsComponentListStateType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentsComponentListStateType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComponentsComponentListStateType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Memory != nil {
		{
			size, err := m.Memory.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChassisdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xd2
	}
	if m.Temperature != nil {
		{
			size, err := m.Temperature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChassisdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0x82
	}
	if m.AllocatedPower != nil {
		i = encodeVarintChassisdOc(dAtA, i, uint64(*m.AllocatedPower))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x98
	}
	if m.Parent != nil {
		i -= len(*m.Parent)
		copy(dAtA[i:], *m.Parent)
		i = encodeVarintChassisdOc(dAtA, i, uint64(len(*m.Parent)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x92
	}
	if m.Empty != nil {
		i--
		if *m.Empty {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x88
	}
	if m.OperStatus != nil {
		i -= len(*m.OperStatus)
		copy(dAtA[i:], *m.OperStatus)
		i = encodeVarintChassisdOc(dAtA, i, uint64(len(*m.OperStatus)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x82
	}
	if m.Removable != nil {
		i--
		if *m.Removable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf8
	}
	if m.PartNo != nil {
		i -= len(*m.PartNo)
		copy(dAtA[i:], *m.PartNo)
		i = encodeVarintChassisdOc(dAtA, i, uint64(len(*m.PartNo)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf2
	}
	if m.SerialNo != nil {
		i -= len(*m.SerialNo)
		copy(dAtA[i:], *m.SerialNo)
		i = encodeVarintChassisdOc(dAtA, i, uint64(len(*m.SerialNo)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xea
	}
	if m.SoftwareVersion != nil {
		i -= len(*m.SoftwareVersion)
		copy(dAtA[i:], *m.SoftwareVersion)
		i = encodeVarintChassisdOc(dAtA, i, uint64(len(*m.SoftwareVersion)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	if m.FirmwareVersion != nil {
		i -= len(*m.FirmwareVersion)
		copy(dAtA[i:], *m.FirmwareVersion)
		i = encodeVarintChassisdOc(dAtA, i, uint64(len(*m.FirmwareVersion)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xda
	}
	if m.HardwareVersion != nil {
		i -= len(*m.HardwareVersion)
		copy(dAtA[i:], *m.HardwareVersion)
		i = encodeVarintChassisdOc(dAtA, i, uint64(len(*m.HardwareVersion)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd2
	}
	if m.MfgDate != nil {
		i -= len(*m.MfgDate)
		copy(dAtA[i:], *m.MfgDate)
		i = encodeVarintChassisdOc(dAtA, i, uint64(len(*m.MfgDate)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	if m.MfgName != nil {
		i -= len(*m.MfgName)
		copy(dAtA[i:], *m.MfgName)
		i = encodeVarintChassisdOc(dAtA, i, uint64(len(*m.MfgName)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc2
	}
	if m.Description != nil {
		i -= len(*m.Description)
		copy(dAtA[i:], *m.Description)
		i = encodeVarintChassisdOc(dAtA, i, uint64(len(*m.Description)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	if m.Location != nil {
		i -= len(*m.Location)
		copy(dAtA[i:], *m.Location)
		i = encodeVarintChassisdOc(dAtA, i, uint64(len(*m.Location)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	if m.Id != nil {
		i -= len(*m.Id)
		copy(dAtA[i:], *m.Id)
		i = encodeVarintChassisdOc(dAtA, i, uint64(len(*m.Id)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	if m.Type != nil {
		i -= len(*m.Type)
		copy(dAtA[i:], *m.Type)
		i = encodeVarintChassisdOc(dAtA, i, uint64(len(*m.Type)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintChassisdOc(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *ComponentsComponentListStateTypeTemperatureType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentsComponentListStateTypeTemperatureType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComponentsComponentListStateTypeTemperatureType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Instant != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Instant))))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x89
	}
	return len(dAtA) - i, nil
}

func (m *ComponentsComponentListStateTypeMemoryType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentsComponentListStateTypeMemoryType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComponentsComponentListStateTypeMemoryType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Utilized != nil {
		i = encodeVarintChassisdOc(dAtA, i, uint64(*m.Utilized))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xe0
	}
	if m.Available != nil {
		i = encodeVarintChassisdOc(dAtA, i, uint64(*m.Available))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xd8
	}
	return len(dAtA) - i, nil
}

func (m *ComponentsComponentListPropertiesType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentsComponentListPropertiesType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComponentsComponentListPropertiesType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Property) > 0 {
		for iNdEx := len(m.Property) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Property[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChassisdOc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *ComponentsComponentListPropertiesTypePropertyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentsComponentListPropertiesTypePropertyList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComponentsComponentListPropertiesTypePropertyList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChassisdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintChassisdOc(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *ComponentsComponentListPropertiesTypePropertyListStateType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentsComponentListPropertiesTypePropertyListStateType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComponentsComponentListPropertiesTypePropertyListStateType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Configurable != nil {
		i--
		if *m.Configurable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.Value != nil {
		i -= len(*m.Value)
		copy(dAtA[i:], *m.Value)
		i = encodeVarintChassisdOc(dAtA, i, uint64(len(*m.Value)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *ComponentsComponentListSubcomponentsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentsComponentListSubcomponentsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComponentsComponentListSubcomponentsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Subcomponent) > 0 {
		for iNdEx := len(m.Subcomponent) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subcomponent[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChassisdOc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *ComponentsComponentListSubcomponentsTypeSubcomponentList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentsComponentListSubcomponentsTypeSubcomponentList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComponentsComponentListSubcomponentsTypeSubcomponentList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChassisdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintChassisdOc(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *ComponentsComponentListSubcomponentsTypeSubcomponentListStateType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentsComponentListSubcomponentsTypeSubcomponentListStateType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComponentsComponentListSubcomponentsTypeSubcomponentListStateType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintChassisdOc(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *ComponentsComponentListTransceiverType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentsComponentListTransceiverType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComponentsComponentListTransceiverType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PhysicalChannels != nil {
		{
			size, err := m.PhysicalChannels.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChassisdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xfa
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChassisdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}

func (m *ComponentsComponentListTransceiverTypeStateType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentsComponentListTransceiverTypeStateType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComponentsComponentListTransceiverTypeStateType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DateCode != nil {
		i -= len(*m.DateCode)
		copy(dAtA[i:], *m.DateCode)
		i = encodeVarintChassisdOc(dAtA, i, uint64(len(*m.DateCode)))
		i--
		dAtA[i] = 0x11
		i--
		dAtA[i] = 0xf2
	}
	if m.Present != nil {
		i -= len(*m.Present)
		copy(dAtA[i:], *m.Present)
		i = encodeVarintChassisdOc(dAtA, i, uint64(len(*m.Present)))
		i--
		dAtA[i] = 0x10
		i--
		dAtA[i] = 0xd2
	}
	if m.SerialNo != nil {
		i -= len(*m.SerialNo)
		copy(dAtA[i:], *m.SerialNo)
		i = encodeVarintChassisdOc(dAtA, i, uint64(len(*m.SerialNo)))
		i--
		dAtA[i] = 0x10
		i--
		dAtA[i] = 0xca
	}
	if m.OtnComplianceCode != nil {
		i -= len(*m.OtnComplianceCode)
		copy(dAtA[i:], *m.OtnComplianceCode)
		i = encodeVarintChassisdOc(dAtA, i, uint64(len(*m.OtnComplianceCode)))
		i--
		dAtA[i] = 0x10
		i--
		dAtA[i] = 0xc2
	}
	if m.SonetSdhComplianceCode != nil {
		i -= len(*m.SonetSdhComplianceCode)
		copy(dAtA[i:], *m.SonetSdhComplianceCode)
		i = encodeVarintChassisdOc(dAtA, i, uint64(len(*m.SonetSdhComplianceCode)))
		i--
		dAtA[i] = 0x10
		i--
		dAtA[i] = 0xba
	}
	if m.EthernetPmd != nil {
		i -= len(*m.EthernetPmd)
		copy(dAtA[i:], *m.EthernetPmd)
		i = encodeVarintChassisdOc(dAtA, i, uint64(len(*m.EthernetPmd)))
		i--
		dAtA[i] = 0x10
		i--
		dAtA[i] = 0xb2
	}
	if m.VendorRev != nil {
		i -= len(*m.VendorRev)
		copy(dAtA[i:], *m.VendorRev)
		i = encodeVarintChassisdOc(dAtA, i, uint64(len(*m.VendorRev)))
		i--
		dAtA[i] = 0x10
		i--
		dAtA[i] = 0xaa
	}
	if m.VendorPart != nil {
		i -= len(*m.VendorPart)
		copy(dAtA[i:], *m.VendorPart)
		i = encodeVarintChassisdOc(dAtA, i, uint64(len(*m.VendorPart)))
		i--
		dAtA[i] = 0x10
		i--
		dAtA[i] = 0xa2
	}
	if m.Vendor != nil {
		i -= len(*m.Vendor)
		copy(dAtA[i:], *m.Vendor)
		i = encodeVarintChassisdOc(dAtA, i, uint64(len(*m.Vendor)))
		i--
		dAtA[i] = 0x10
		i--
		dAtA[i] = 0x9a
	}
	if m.ConnectorType != nil {
		i -= len(*m.ConnectorType)
		copy(dAtA[i:], *m.ConnectorType)
		i = encodeVarintChassisdOc(dAtA, i, uint64(len(*m.ConnectorType)))
		i--
		dAtA[i] = 0x10
		i--
		dAtA[i] = 0x92
	}
	if m.FormFactor != nil {
		i -= len(*m.FormFactor)
		copy(dAtA[i:], *m.FormFactor)
		i = encodeVarintChassisdOc(dAtA, i, uint64(len(*m.FormFactor)))
		i--
		dAtA[i] = 0x10
		i--
		dAtA[i] = 0x8a
	}
	if m.EthernetPmdPreconf != nil {
		i -= len(*m.EthernetPmdPreconf)
		copy(dAtA[i:], *m.EthernetPmdPreconf)
		i = encodeVarintChassisdOc(dAtA, i, uint64(len(*m.EthernetPmdPreconf)))
		i--
		dAtA[i] = 0x10
		i--
		dAtA[i] = 0x82
	}
	if m.FormFactorPreconf != nil {
		i -= len(*m.FormFactorPreconf)
		copy(dAtA[i:], *m.FormFactorPreconf)
		i = encodeVarintChassisdOc(dAtA, i, uint64(len(*m.FormFactorPreconf)))
		i--
		dAtA[i] = 0xf
		i--
		dAtA[i] = 0xfa
	}
	if m.Enabled != nil {
		i--
		if *m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func (m *ComponentsComponentListTransceiverTypePhysicalChannelsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentsComponentListTransceiverTypePhysicalChannelsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComponentsComponentListTransceiverTypePhysicalChannelsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Channel) > 0 {
		for iNdEx := len(m.Channel) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Channel[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChassisdOc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5
			i--
			dAtA[i] = 0xda
		}
	}
	return len(dAtA) - i, nil
}

func (m *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChassisdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x35
		i--
		dAtA[i] = 0x8a
	}
	if m.Index != nil {
		i = encodeVarintChassisdOc(dAtA, i, uint64(*m.Index))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xf8
	}
	return len(dAtA) - i, nil
}

func (m *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TargetOutputPower != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.TargetOutputPower))))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd9
	}
	if m.TxLaser != nil {
		i--
		if *m.TxLaser {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd0
	}
	if m.Description != nil {
		i -= len(*m.Description)
		copy(dAtA[i:], *m.Description)
		i = encodeVarintChassisdOc(dAtA, i, uint64(len(*m.Description)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	if m.Index != nil {
		i = encodeVarintChassisdOc(dAtA, i, uint64(*m.Index))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb8
	}
	return len(dAtA) - i, nil
}

func encodeVarintChassisdOc(dAtA []byte, offset int, v uint64) int {
	offset -= sovChassisdOc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Components) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Component) > 0 {
		for _, e := range m.Component {
			l = e.Size()
			n += 2 + l + sovChassisdOc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComponentsComponentList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.Subcomponents != nil {
		l = m.Subcomponents.Size()
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.Properties != nil {
		l = m.Properties.Size()
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.Transceiver != nil {
		l = m.Transceiver.Size()
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComponentsComponentListStateType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.Type != nil {
		l = len(*m.Type)
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.Id != nil {
		l = len(*m.Id)
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.Location != nil {
		l = len(*m.Location)
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.Description != nil {
		l = len(*m.Description)
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.MfgName != nil {
		l = len(*m.MfgName)
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.MfgDate != nil {
		l = len(*m.MfgDate)
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.HardwareVersion != nil {
		l = len(*m.HardwareVersion)
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.FirmwareVersion != nil {
		l = len(*m.FirmwareVersion)
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.SoftwareVersion != nil {
		l = len(*m.SoftwareVersion)
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.SerialNo != nil {
		l = len(*m.SerialNo)
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.PartNo != nil {
		l = len(*m.PartNo)
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.Removable != nil {
		n += 3
	}
	if m.OperStatus != nil {
		l = len(*m.OperStatus)
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.Empty != nil {
		n += 3
	}
	if m.Parent != nil {
		l = len(*m.Parent)
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.AllocatedPower != nil {
		n += 2 + sovChassisdOc(uint64(*m.AllocatedPower))
	}
	if m.Temperature != nil {
		l = m.Temperature.Size()
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.Memory != nil {
		l = m.Memory.Size()
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComponentsComponentListStateTypeTemperatureType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Instant != nil {
		n += 10
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComponentsComponentListStateTypeMemoryType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Available != nil {
		n += 2 + sovChassisdOc(uint64(*m.Available))
	}
	if m.Utilized != nil {
		n += 2 + sovChassisdOc(uint64(*m.Utilized))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComponentsComponentListPropertiesType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Property) > 0 {
		for _, e := range m.Property {
			l = e.Size()
			n += 2 + l + sovChassisdOc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComponentsComponentListPropertiesTypePropertyList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComponentsComponentListPropertiesTypePropertyListStateType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = len(*m.Value)
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.Configurable != nil {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComponentsComponentListSubcomponentsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Subcomponent) > 0 {
		for _, e := range m.Subcomponent {
			l = e.Size()
			n += 2 + l + sovChassisdOc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComponentsComponentListSubcomponentsTypeSubcomponentList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComponentsComponentListSubcomponentsTypeSubcomponentListStateType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComponentsComponentListTransceiverType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.PhysicalChannels != nil {
		l = m.PhysicalChannels.Size()
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComponentsComponentListTransceiverTypeStateType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		n += 3
	}
	if m.FormFactorPreconf != nil {
		l = len(*m.FormFactorPreconf)
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.EthernetPmdPreconf != nil {
		l = len(*m.EthernetPmdPreconf)
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.FormFactor != nil {
		l = len(*m.FormFactor)
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.ConnectorType != nil {
		l = len(*m.ConnectorType)
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.Vendor != nil {
		l = len(*m.Vendor)
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.VendorPart != nil {
		l = len(*m.VendorPart)
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.VendorRev != nil {
		l = len(*m.VendorRev)
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.EthernetPmd != nil {
		l = len(*m.EthernetPmd)
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.SonetSdhComplianceCode != nil {
		l = len(*m.SonetSdhComplianceCode)
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.OtnComplianceCode != nil {
		l = len(*m.OtnComplianceCode)
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.SerialNo != nil {
		l = len(*m.SerialNo)
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.Present != nil {
		l = len(*m.Present)
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.DateCode != nil {
		l = len(*m.DateCode)
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComponentsComponentListTransceiverTypePhysicalChannelsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Channel) > 0 {
		for _, e := range m.Channel {
			l = e.Size()
			n += 2 + l + sovChassisdOc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != nil {
		n += 2 + sovChassisdOc(uint64(*m.Index))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != nil {
		n += 2 + sovChassisdOc(uint64(*m.Index))
	}
	if m.Description != nil {
		l = len(*m.Description)
		n += 2 + l + sovChassisdOc(uint64(l))
	}
	if m.TxLaser != nil {
		n += 3
	}
	if m.TargetOutputPower != nil {
		n += 10
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovChassisdOc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChassisdOc(x uint64) (n int) {
	return sovChassisdOc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Components) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChassisdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: components: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: components: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Component", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Component = append(m.Component, &ComponentsComponentList{})
			if err := m.Component[len(m.Component)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChassisdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComponentsComponentList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChassisdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: component_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: component_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 152:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &ComponentsComponentListStateType{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 153:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subcomponents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subcomponents == nil {
				m.Subcomponents = &ComponentsComponentListSubcomponentsType{}
			}
			if err := m.Subcomponents.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 156:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Properties == nil {
				m.Properties = &ComponentsComponentListPropertiesType{}
			}
			if err := m.Properties.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 161:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transceiver == nil {
				m.Transceiver = &ComponentsComponentListTransceiverType{}
			}
			if err := m.Transceiver.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChassisdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComponentsComponentListStateType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChassisdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: state_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: state_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Type = &s
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Location = &s
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Description = &s
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MfgName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MfgName = &s
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MfgDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MfgDate = &s
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HardwareVersion = &s
			iNdEx = postIndex
		case 59:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirmwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FirmwareVersion = &s
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SoftwareVersion = &s
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerialNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SerialNo = &s
			iNdEx = postIndex
		case 62:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PartNo = &s
			iNdEx = postIndex
		case 63:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Removable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Removable = &b
		case 64:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OperStatus = &s
			iNdEx = postIndex
		case 65:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Empty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Empty = &b
		case 66:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Parent = &s
			iNdEx = postIndex
		case 67:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocatedPower", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllocatedPower = &v
		case 160:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Temperature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Temperature == nil {
				m.Temperature = &ComponentsComponentListStateTypeTemperatureType{}
			}
			if err := m.Temperature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 170:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Memory == nil {
				m.Memory = &ComponentsComponentListStateTypeMemoryType{}
			}
			if err := m.Memory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChassisdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComponentsComponentListStateTypeTemperatureType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChassisdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: temperature_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: temperature_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 81:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instant", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Instant = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipChassisdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComponentsComponentListStateTypeMemoryType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChassisdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: memory_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: memory_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 91:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Available", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Available = &v
		case 92:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Utilized", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Utilized = &v
		default:
			iNdEx = preIndex
			skippy, err := skipChassisdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComponentsComponentListPropertiesType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChassisdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: properties_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: properties_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Property", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Property = append(m.Property, &ComponentsComponentListPropertiesTypePropertyList{})
			if err := m.Property[len(m.Property)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChassisdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComponentsComponentListPropertiesTypePropertyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChassisdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: property_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: property_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &ComponentsComponentListPropertiesTypePropertyListStateType{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChassisdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComponentsComponentListPropertiesTypePropertyListStateType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChassisdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: state_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: state_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Value = &s
			iNdEx = postIndex
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configurable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Configurable = &b
		default:
			iNdEx = preIndex
			skippy, err := skipChassisdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComponentsComponentListSubcomponentsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChassisdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: subcomponents_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: subcomponents_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subcomponent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subcomponent = append(m.Subcomponent, &ComponentsComponentListSubcomponentsTypeSubcomponentList{})
			if err := m.Subcomponent[len(m.Subcomponent)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChassisdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComponentsComponentListSubcomponentsTypeSubcomponentList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChassisdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: subcomponent_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: subcomponent_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &ComponentsComponentListSubcomponentsTypeSubcomponentListStateType{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChassisdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComponentsComponentListSubcomponentsTypeSubcomponentListStateType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChassisdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: state_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: state_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChassisdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComponentsComponentListTransceiverType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChassisdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: transceiver_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: transceiver_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 162:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &ComponentsComponentListTransceiverTypeStateType{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 191:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhysicalChannels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PhysicalChannels == nil {
				m.PhysicalChannels = &ComponentsComponentListTransceiverTypePhysicalChannelsType{}
			}
			if err := m.PhysicalChannels.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChassisdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComponentsComponentListTransceiverTypeStateType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChassisdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: state_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: state_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Enabled = &b
		case 255:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FormFactorPreconf", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FormFactorPreconf = &s
			iNdEx = postIndex
		case 256:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthernetPmdPreconf", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.EthernetPmdPreconf = &s
			iNdEx = postIndex
		case 257:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FormFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FormFactor = &s
			iNdEx = postIndex
		case 258:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectorType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ConnectorType = &s
			iNdEx = postIndex
		case 259:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vendor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Vendor = &s
			iNdEx = postIndex
		case 260:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorPart", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VendorPart = &s
			iNdEx = postIndex
		case 261:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorRev", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VendorRev = &s
			iNdEx = postIndex
		case 262:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthernetPmd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.EthernetPmd = &s
			iNdEx = postIndex
		case 263:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SonetSdhComplianceCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SonetSdhComplianceCode = &s
			iNdEx = postIndex
		case 264:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtnComplianceCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OtnComplianceCode = &s
			iNdEx = postIndex
		case 265:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerialNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SerialNo = &s
			iNdEx = postIndex
		case 266:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Present", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Present = &s
			iNdEx = postIndex
		case 286:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DateCode = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChassisdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComponentsComponentListTransceiverTypePhysicalChannelsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChassisdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: physical_channels_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: physical_channels_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 91:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = append(m.Channel, &ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList{})
			if err := m.Channel[len(m.Channel)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChassisdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChassisdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: channel_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: channel_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 191:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Index = &v
		case 849:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChassisdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComponentsComponentListTransceiverTypePhysicalChannelsTypeChannelListStateType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChassisdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: state_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: state_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Index = &v
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChassisdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Description = &s
			iNdEx = postIndex
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxLaser", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.TxLaser = &b
		case 43:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetOutputPower", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.TargetOutputPower = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipChassisdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChassisdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChassisdOc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChassisdOc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChassisdOc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChassisdOc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChassisdOc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChassisdOc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChassisdOc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChassisdOc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChassisdOc = fmt.Errorf("proto: unexpected end of group")
)
