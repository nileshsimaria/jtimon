syntax = "proto2";
option go_package = "git.juniper.net/iceberg/healthbot-ingest-jti-native/pkg/jti/adapters/_junos/schema";
import "telemetry_top.proto";

extend JuniperNetworksSensors {
   optional components jnpr_components_ext = 40;
}

message components {
   message component_list {
      optional string name = 51 [(telemetry_options).is_key = true];
      optional state_type state = 152;
      message state_type {
         optional string name = 51;
         optional string type = 52;
         optional string id = 53;
         optional string location = 54;
         optional string description = 55;
         optional string mfg_name = 56;
         optional string mfg_date = 57;
         optional string hardware_version = 58;
         optional string firmware_version = 59;
         optional string software_version = 60;
         optional string serial_no = 61;
         optional string part_no = 62;
         optional bool removable = 63;
         optional string oper_status = 64;
         optional bool empty = 65;
         optional string parent = 66;
         optional temperature_type temperature = 160;
         message temperature_type {
            optional double instant = 81;
         }
         optional memory_type memory = 170;
         message memory_type {
            optional uint64 available = 91;
            optional uint64 utilized = 92;
         }
         optional uint32 allocated_power = 67;
      }
      optional properties_type properties = 156;
      message properties_type {
         message property_list {
            optional string name = 51 [(telemetry_options).is_key = true];
            optional state_type state = 151;
            message state_type {
               optional string value = 51;
               optional bool configurable = 52;
            }
         }
         repeated property_list property = 151;
      }
      optional subcomponents_type subcomponents = 153;
      message subcomponents_type {
         message subcomponent_list {
            optional string name = 51 [(telemetry_options).is_key = true];
            optional state_type state = 151;
            message state_type {
               optional string name = 51;
            }
         }
         repeated subcomponent_list subcomponent = 151;
      }
      optional transceiver_type transceiver = 161;
      message transceiver_type {
         optional state_type state = 162;
         message state_type {
            optional string form_factor_preconf = 255;
            optional string ethernet_pmd_preconf = 256;
            optional string present = 266;
            optional string form_factor = 257;
            optional string connector_type = 258;
            optional string vendor = 259;
            optional string vendor_part = 260;
            optional string vendor_rev = 261;
            optional string ethernet_pmd = 262;
            optional string sonet_sdh_compliance_code = 263;
            optional string otn_compliance_code = 264;
            optional string serial_no = 265;
            optional string date_code = 286;
            optional bool enabled = 51;
         }
         optional physical_channels_type physical_channels = 191;
         message physical_channels_type {
            message channel_list {
               optional uint32 index = 191 [(telemetry_options).is_key = true];
               optional state_type state = 849;
               message state_type {
                  optional uint32 index = 39;
                  optional string description = 41;
                  optional bool tx_laser = 42;
                  optional double target_output_power = 43;
               }
            }
            repeated channel_list channel = 91;
         }
      }
   }
   repeated component_list component = 151;
}
