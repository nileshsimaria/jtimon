// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cmerror.proto

package schema

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
// Juniper Error Item information
//
type Error struct {
	// Identifier that uniquely identifies the source of
	// the error.
	// e.g.
	//
	// junos/system/linecard/0/pcie/0/lane/0/pcie_cmerror_uncorrectable_major
	//
	Identifier *string `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	// Name of the error
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Instance id of the associated resource
	ComponentId *uint32 `protobuf:"varint,3,opt,name=component_id,json=componentId" json:"component_id,omitempty"`
	// Fru information
	FruType *string `protobuf:"bytes,4,opt,name=fru_type,json=fruType" json:"fru_type,omitempty"`
	FruSlot *uint32 `protobuf:"varint,5,opt,name=fru_slot,json=fruSlot" json:"fru_slot,omitempty"`
	// Scope,Category,Severity
	// in which this error belong to.
	Scope    *string `protobuf:"bytes,6,opt,name=scope" json:"scope,omitempty"`
	Category *string `protobuf:"bytes,7,opt,name=category" json:"category,omitempty"`
	Severity *string `protobuf:"bytes,8,opt,name=severity" json:"severity,omitempty"`
	// Thresholds and action configured for this
	// error.
	Threshold         *uint32 `protobuf:"varint,9,opt,name=threshold" json:"threshold,omitempty"`
	Limit             *uint32 `protobuf:"varint,10,opt,name=limit" json:"limit,omitempty"`
	RaisingThreshold  *uint32 `protobuf:"varint,11,opt,name=raising_threshold,json=raisingThreshold" json:"raising_threshold,omitempty"`
	ClearingThreshold *uint32 `protobuf:"varint,12,opt,name=clearing_threshold,json=clearingThreshold" json:"clearing_threshold,omitempty"`
	Action            *uint32 `protobuf:"varint,13,opt,name=action" json:"action,omitempty"`
	// local/global/both
	ActionHandlingType *uint32 `protobuf:"varint,14,opt,name=action_handling_type,json=actionHandlingType" json:"action_handling_type,omitempty"`
	// user configured thresholds and limits for this error.
	ConfiguredThreshold   *uint32  `protobuf:"varint,15,opt,name=configured_threshold,json=configuredThreshold" json:"configured_threshold,omitempty"`
	ConfiguredLimit       *uint32  `protobuf:"varint,16,opt,name=configured_limit,json=configuredLimit" json:"configured_limit,omitempty"`
	ConfiguredAction      *uint32  `protobuf:"varint,17,opt,name=configured_action,json=configuredAction" json:"configured_action,omitempty"`
	ConfiguredClearAction *uint32  `protobuf:"varint,18,opt,name=configured_clear_action,json=configuredClearAction" json:"configured_clear_action,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_747f0735808ade43, []int{0}
}
func (m *Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return m.Size()
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetIdentifier() string {
	if m != nil && m.Identifier != nil {
		return *m.Identifier
	}
	return ""
}

func (m *Error) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Error) GetComponentId() uint32 {
	if m != nil && m.ComponentId != nil {
		return *m.ComponentId
	}
	return 0
}

func (m *Error) GetFruType() string {
	if m != nil && m.FruType != nil {
		return *m.FruType
	}
	return ""
}

func (m *Error) GetFruSlot() uint32 {
	if m != nil && m.FruSlot != nil {
		return *m.FruSlot
	}
	return 0
}

func (m *Error) GetScope() string {
	if m != nil && m.Scope != nil {
		return *m.Scope
	}
	return ""
}

func (m *Error) GetCategory() string {
	if m != nil && m.Category != nil {
		return *m.Category
	}
	return ""
}

func (m *Error) GetSeverity() string {
	if m != nil && m.Severity != nil {
		return *m.Severity
	}
	return ""
}

func (m *Error) GetThreshold() uint32 {
	if m != nil && m.Threshold != nil {
		return *m.Threshold
	}
	return 0
}

func (m *Error) GetLimit() uint32 {
	if m != nil && m.Limit != nil {
		return *m.Limit
	}
	return 0
}

func (m *Error) GetRaisingThreshold() uint32 {
	if m != nil && m.RaisingThreshold != nil {
		return *m.RaisingThreshold
	}
	return 0
}

func (m *Error) GetClearingThreshold() uint32 {
	if m != nil && m.ClearingThreshold != nil {
		return *m.ClearingThreshold
	}
	return 0
}

func (m *Error) GetAction() uint32 {
	if m != nil && m.Action != nil {
		return *m.Action
	}
	return 0
}

func (m *Error) GetActionHandlingType() uint32 {
	if m != nil && m.ActionHandlingType != nil {
		return *m.ActionHandlingType
	}
	return 0
}

func (m *Error) GetConfiguredThreshold() uint32 {
	if m != nil && m.ConfiguredThreshold != nil {
		return *m.ConfiguredThreshold
	}
	return 0
}

func (m *Error) GetConfiguredLimit() uint32 {
	if m != nil && m.ConfiguredLimit != nil {
		return *m.ConfiguredLimit
	}
	return 0
}

func (m *Error) GetConfiguredAction() uint32 {
	if m != nil && m.ConfiguredAction != nil {
		return *m.ConfiguredAction
	}
	return 0
}

func (m *Error) GetConfiguredClearAction() uint32 {
	if m != nil && m.ConfiguredClearAction != nil {
		return *m.ConfiguredClearAction
	}
	return 0
}

type GlobalErrorConfiguration struct {
	// configuration bucket identifier
	Scope    *string `protobuf:"bytes,1,opt,name=scope" json:"scope,omitempty"`
	Category *string `protobuf:"bytes,2,opt,name=category" json:"category,omitempty"`
	Severity *string `protobuf:"bytes,3,opt,name=severity" json:"severity,omitempty"`
	// configured parameters for this bucket.
	Threshold            *uint32  `protobuf:"varint,4,opt,name=threshold" json:"threshold,omitempty"`
	Action               *uint32  `protobuf:"varint,5,opt,name=action" json:"action,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GlobalErrorConfiguration) Reset()         { *m = GlobalErrorConfiguration{} }
func (m *GlobalErrorConfiguration) String() string { return proto.CompactTextString(m) }
func (*GlobalErrorConfiguration) ProtoMessage()    {}
func (*GlobalErrorConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_747f0735808ade43, []int{1}
}
func (m *GlobalErrorConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalErrorConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GlobalErrorConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GlobalErrorConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalErrorConfiguration.Merge(m, src)
}
func (m *GlobalErrorConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *GlobalErrorConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalErrorConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalErrorConfiguration proto.InternalMessageInfo

func (m *GlobalErrorConfiguration) GetScope() string {
	if m != nil && m.Scope != nil {
		return *m.Scope
	}
	return ""
}

func (m *GlobalErrorConfiguration) GetCategory() string {
	if m != nil && m.Category != nil {
		return *m.Category
	}
	return ""
}

func (m *GlobalErrorConfiguration) GetSeverity() string {
	if m != nil && m.Severity != nil {
		return *m.Severity
	}
	return ""
}

func (m *GlobalErrorConfiguration) GetThreshold() uint32 {
	if m != nil && m.Threshold != nil {
		return *m.Threshold
	}
	return 0
}

func (m *GlobalErrorConfiguration) GetAction() uint32 {
	if m != nil && m.Action != nil {
		return *m.Action
	}
	return 0
}

//
// Top-level Cmerror message
//
type Cmerror struct {
	// collection of error items
	ErrorItem []*Error `protobuf:"bytes,1,rep,name=error_item,json=errorItem" json:"error_item,omitempty"`
	// last configuration change for cmerror.
	LastConfigurationChange *uint64 `protobuf:"varint,2,opt,name=last_configuration_change,json=lastConfigurationChange" json:"last_configuration_change,omitempty"`
	// This will toggle at start of every wrap cycle
	WrapCycleMarker *bool `protobuf:"varint,3,opt,name=wrap_cycle_marker,json=wrapCycleMarker" json:"wrap_cycle_marker,omitempty"`
	// Fru slot identifier
	FruSlot *uint32 `protobuf:"varint,4,opt,name=fru_slot,json=fruSlot" json:"fru_slot,omitempty"`
	FruType *string `protobuf:"bytes,5,opt,name=fru_type,json=fruType" json:"fru_type,omitempty"`
	// Collection of global configuration items
	GlobalConfigurationItem []*GlobalErrorConfiguration `protobuf:"bytes,6,rep,name=global_configuration_item,json=globalConfigurationItem" json:"global_configuration_item,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}                    `json:"-"`
	XXX_unrecognized        []byte                      `json:"-"`
	XXX_sizecache           int32                       `json:"-"`
}

func (m *Cmerror) Reset()         { *m = Cmerror{} }
func (m *Cmerror) String() string { return proto.CompactTextString(m) }
func (*Cmerror) ProtoMessage()    {}
func (*Cmerror) Descriptor() ([]byte, []int) {
	return fileDescriptor_747f0735808ade43, []int{2}
}
func (m *Cmerror) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cmerror) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cmerror.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cmerror) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cmerror.Merge(m, src)
}
func (m *Cmerror) XXX_Size() int {
	return m.Size()
}
func (m *Cmerror) XXX_DiscardUnknown() {
	xxx_messageInfo_Cmerror.DiscardUnknown(m)
}

var xxx_messageInfo_Cmerror proto.InternalMessageInfo

func (m *Cmerror) GetErrorItem() []*Error {
	if m != nil {
		return m.ErrorItem
	}
	return nil
}

func (m *Cmerror) GetLastConfigurationChange() uint64 {
	if m != nil && m.LastConfigurationChange != nil {
		return *m.LastConfigurationChange
	}
	return 0
}

func (m *Cmerror) GetWrapCycleMarker() bool {
	if m != nil && m.WrapCycleMarker != nil {
		return *m.WrapCycleMarker
	}
	return false
}

func (m *Cmerror) GetFruSlot() uint32 {
	if m != nil && m.FruSlot != nil {
		return *m.FruSlot
	}
	return 0
}

func (m *Cmerror) GetFruType() string {
	if m != nil && m.FruType != nil {
		return *m.FruType
	}
	return ""
}

func (m *Cmerror) GetGlobalConfigurationItem() []*GlobalErrorConfiguration {
	if m != nil {
		return m.GlobalConfigurationItem
	}
	return nil
}

var E_JnprCmerrorExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*Cmerror)(nil),
	Field:         20,
	Name:          "jnpr_cmerror_ext",
	Tag:           "bytes,20,opt,name=jnpr_cmerror_ext",
	Filename:      "cmerror.proto",
}

func init() {
	proto.RegisterType((*Error)(nil), "Error")
	proto.RegisterType((*GlobalErrorConfiguration)(nil), "GlobalErrorConfiguration")
	proto.RegisterType((*Cmerror)(nil), "Cmerror")
	proto.RegisterExtension(E_JnprCmerrorExt)
}

func init() { proto.RegisterFile("cmerror.proto", fileDescriptor_747f0735808ade43) }

var fileDescriptor_747f0735808ade43 = []byte{
	// 678 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0xcd, 0x6e, 0xdb, 0x38,
	0x10, 0xc7, 0x21, 0xc7, 0x76, 0x6c, 0x3a, 0x1f, 0x36, 0xe3, 0x5d, 0xcb, 0xc1, 0x22, 0xf0, 0x06,
	0x58, 0xc0, 0xdb, 0xc2, 0x76, 0x9b, 0x43, 0x0f, 0x39, 0xb5, 0x31, 0x82, 0x36, 0xfd, 0x3a, 0x28,
	0xe9, 0xa5, 0x17, 0x95, 0x91, 0xc7, 0x12, 0x1d, 0x89, 0x14, 0xa8, 0x71, 0x12, 0x5f, 0x7b, 0xe8,
	0x63, 0xf4, 0xd6, 0x77, 0xe9, 0xb1, 0x8f, 0x50, 0xe4, 0x49, 0x0a, 0x91, 0xb2, 0x25, 0x07, 0x48,
	0x6e, 0xe2, 0xfc, 0xfe, 0x7f, 0x92, 0x33, 0x9c, 0x11, 0xd9, 0xf6, 0x22, 0x50, 0x4a, 0xaa, 0x61,
	0xac, 0x24, 0xca, 0xfd, 0x3d, 0x84, 0x10, 0x22, 0x40, 0xb5, 0x70, 0x51, 0xc6, 0x26, 0x78, 0xf8,
	0xad, 0x42, 0x2a, 0xa7, 0xa9, 0x88, 0xfe, 0x47, 0x08, 0x9f, 0x80, 0x40, 0x3e, 0xe5, 0xa0, 0x6c,
	0xab, 0x67, 0xf5, 0xeb, 0x27, 0x95, 0xaf, 0x2f, 0x4b, 0x35, 0xcb, 0x29, 0x00, 0x4a, 0x49, 0x59,
	0xb0, 0x08, 0xec, 0x52, 0x2a, 0x70, 0xf4, 0x37, 0xfd, 0x97, 0x6c, 0x79, 0x32, 0x8a, 0xa5, 0x00,
	0x81, 0x2e, 0x9f, 0xd8, 0x1b, 0x3d, 0xab, 0xbf, 0xed, 0x34, 0x56, 0xb1, 0xb3, 0x09, 0xed, 0x92,
	0xda, 0x54, 0xcd, 0x5d, 0x5c, 0xc4, 0x60, 0x97, 0xb5, 0x75, 0x73, 0xaa, 0xe6, 0x17, 0x8b, 0x18,
	0x96, 0x28, 0x09, 0x25, 0xda, 0x15, 0xed, 0x4c, 0xd1, 0x79, 0x28, 0x91, 0xb6, 0x49, 0x25, 0xf1,
	0x64, 0x0c, 0x76, 0x55, 0x5b, 0xcc, 0x82, 0xee, 0x93, 0x9a, 0xc7, 0x10, 0x7c, 0xa9, 0x16, 0xf6,
	0xa6, 0x06, 0xab, 0x75, 0xca, 0x12, 0xb8, 0x06, 0xc5, 0x71, 0x61, 0xd7, 0x0c, 0x5b, 0xae, 0xe9,
	0x3f, 0xa4, 0x8e, 0x81, 0x82, 0x24, 0x90, 0xe1, 0xc4, 0xae, 0xeb, 0x93, 0xf2, 0x40, 0x7a, 0x56,
	0xc8, 0x23, 0x8e, 0x36, 0xd1, 0xc4, 0x2c, 0xe8, 0x53, 0xd2, 0x52, 0x8c, 0x27, 0x5c, 0xf8, 0x6e,
	0xee, 0x6d, 0x68, 0x45, 0x33, 0x03, 0x17, 0xab, 0x2d, 0x06, 0x84, 0x7a, 0x21, 0x30, 0xb5, 0xae,
	0xde, 0xd2, 0xea, 0xd6, 0x92, 0xe4, 0xf2, 0xbf, 0x49, 0x95, 0x79, 0xc8, 0xa5, 0xb0, 0xb7, 0xb5,
	0x24, 0x5b, 0xd1, 0x67, 0xa4, 0x6d, 0xbe, 0xdc, 0x80, 0x89, 0x49, 0xa8, 0x77, 0x4b, 0xeb, 0xb6,
	0xa3, 0x55, 0xd4, 0xb0, 0x37, 0x19, 0xd2, 0x25, 0x7c, 0x4e, 0xda, 0x9e, 0x14, 0x53, 0xee, 0xcf,
	0x15, 0x4c, 0x0a, 0x47, 0xef, 0x6a, 0xc7, 0x5e, 0xce, 0xf2, 0xc3, 0xff, 0x27, 0xcd, 0x82, 0xc5,
	0x64, 0xde, 0xd4, 0xf2, 0xdd, 0x3c, 0xfe, 0x7e, 0x59, 0x83, 0x82, 0x34, 0xbb, 0x72, 0xcb, 0xd4,
	0x20, 0x07, 0xaf, 0xcc, 0xe5, 0x5f, 0x90, 0x4e, 0x41, 0xac, 0x93, 0x5e, 0x5a, 0xa8, 0xb6, 0xfc,
	0x95, 0xe3, 0x71, 0x4a, 0x8d, 0xef, 0xf0, 0xbb, 0x45, 0xec, 0xd7, 0xa1, 0xbc, 0x64, 0xa1, 0x6e,
	0xc7, 0x71, 0x26, 0x62, 0x7a, 0xd3, 0x55, 0x1f, 0x58, 0x0f, 0xf5, 0x41, 0xe9, 0x91, 0x3e, 0xd8,
	0x78, 0xac, 0x0f, 0xca, 0xf7, 0xfb, 0x20, 0x7f, 0x95, 0x4a, 0xf1, 0x55, 0x0e, 0x7f, 0x94, 0xc8,
	0xe6, 0xd8, 0x0c, 0x54, 0x3a, 0x2b, 0xfa, 0xc3, 0xe5, 0x08, 0x91, 0x6d, 0xf5, 0x36, 0xfa, 0x8d,
	0xa3, 0xea, 0x50, 0x5f, 0xdc, 0xa9, 0x6b, 0x72, 0x86, 0x10, 0xd1, 0x63, 0xd2, 0x0d, 0x59, 0x82,
	0xae, 0x57, 0x4c, 0xc6, 0xf5, 0x02, 0x26, 0x7c, 0x33, 0x40, 0x65, 0xa7, 0x93, 0x0a, 0xd6, 0x92,
	0x1d, 0x6b, 0x4c, 0x9f, 0x90, 0xd6, 0x8d, 0x62, 0xb1, 0xeb, 0x2d, 0xbc, 0x10, 0xdc, 0x88, 0xa9,
	0x2b, 0x50, 0x3a, 0x93, 0x9a, 0xb3, 0x9b, 0x82, 0x71, 0x1a, 0xff, 0xa0, 0xc3, 0x6b, 0x13, 0x54,
	0x5e, 0x9f, 0xa0, 0xe2, 0xdc, 0x55, 0xd6, 0xe7, 0xee, 0x13, 0xe9, 0xfa, 0xba, 0xe0, 0xf7, 0xee,
	0xa7, 0x73, 0xaa, 0xea, 0x9c, 0xba, 0xc3, 0x87, 0x9e, 0xc4, 0xe9, 0x18, 0xef, 0x5a, 0x30, 0x4d,
	0xfa, 0xf8, 0x1d, 0x69, 0xce, 0x44, 0xac, 0xdc, 0xec, 0xe7, 0xe3, 0xc2, 0x2d, 0xd2, 0xce, 0xf0,
	0xed, 0x5c, 0xf0, 0x18, 0xd4, 0x47, 0xc0, 0x1b, 0xa9, 0xae, 0x92, 0x73, 0x10, 0x89, 0x54, 0x89,
	0xdd, 0xee, 0x59, 0xfd, 0xc6, 0x51, 0x6d, 0x98, 0x15, 0xd6, 0xd9, 0x49, 0xad, 0xd9, 0xe2, 0xf4,
	0x16, 0x4f, 0xbe, 0xfc, 0xbc, 0x3b, 0xb0, 0x7e, 0xdd, 0x1d, 0x58, 0xbf, 0xef, 0x0e, 0xac, 0xcf,
	0x8e, 0xcf, 0x71, 0x38, 0x33, 0x3b, 0x0d, 0x05, 0xe0, 0x88, 0x7b, 0x70, 0x09, 0xca, 0x1f, 0x05,
	0xc0, 0x42, 0x0c, 0x2e, 0x25, 0x0e, 0xb8, 0xf0, 0x21, 0xc1, 0xc1, 0x0c, 0xf9, 0x40, 0x30, 0xe4,
	0xd7, 0x30, 0x8a, 0xaf, 0xfc, 0xd1, 0x0c, 0xf9, 0x88, 0x4d, 0x58, 0x8c, 0xa0, 0x92, 0x91, 0x3b,
	0x9b, 0x0b, 0x99, 0x8c, 0x12, 0x2f, 0x80, 0x88, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0x69, 0x64,
	0xbf, 0x1b, 0x25, 0x05, 0x00, 0x00,
}

func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ConfiguredClearAction != nil {
		i = encodeVarintCmerror(dAtA, i, uint64(*m.ConfiguredClearAction))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.ConfiguredAction != nil {
		i = encodeVarintCmerror(dAtA, i, uint64(*m.ConfiguredAction))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.ConfiguredLimit != nil {
		i = encodeVarintCmerror(dAtA, i, uint64(*m.ConfiguredLimit))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.ConfiguredThreshold != nil {
		i = encodeVarintCmerror(dAtA, i, uint64(*m.ConfiguredThreshold))
		i--
		dAtA[i] = 0x78
	}
	if m.ActionHandlingType != nil {
		i = encodeVarintCmerror(dAtA, i, uint64(*m.ActionHandlingType))
		i--
		dAtA[i] = 0x70
	}
	if m.Action != nil {
		i = encodeVarintCmerror(dAtA, i, uint64(*m.Action))
		i--
		dAtA[i] = 0x68
	}
	if m.ClearingThreshold != nil {
		i = encodeVarintCmerror(dAtA, i, uint64(*m.ClearingThreshold))
		i--
		dAtA[i] = 0x60
	}
	if m.RaisingThreshold != nil {
		i = encodeVarintCmerror(dAtA, i, uint64(*m.RaisingThreshold))
		i--
		dAtA[i] = 0x58
	}
	if m.Limit != nil {
		i = encodeVarintCmerror(dAtA, i, uint64(*m.Limit))
		i--
		dAtA[i] = 0x50
	}
	if m.Threshold != nil {
		i = encodeVarintCmerror(dAtA, i, uint64(*m.Threshold))
		i--
		dAtA[i] = 0x48
	}
	if m.Severity != nil {
		i -= len(*m.Severity)
		copy(dAtA[i:], *m.Severity)
		i = encodeVarintCmerror(dAtA, i, uint64(len(*m.Severity)))
		i--
		dAtA[i] = 0x42
	}
	if m.Category != nil {
		i -= len(*m.Category)
		copy(dAtA[i:], *m.Category)
		i = encodeVarintCmerror(dAtA, i, uint64(len(*m.Category)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Scope != nil {
		i -= len(*m.Scope)
		copy(dAtA[i:], *m.Scope)
		i = encodeVarintCmerror(dAtA, i, uint64(len(*m.Scope)))
		i--
		dAtA[i] = 0x32
	}
	if m.FruSlot != nil {
		i = encodeVarintCmerror(dAtA, i, uint64(*m.FruSlot))
		i--
		dAtA[i] = 0x28
	}
	if m.FruType != nil {
		i -= len(*m.FruType)
		copy(dAtA[i:], *m.FruType)
		i = encodeVarintCmerror(dAtA, i, uint64(len(*m.FruType)))
		i--
		dAtA[i] = 0x22
	}
	if m.ComponentId != nil {
		i = encodeVarintCmerror(dAtA, i, uint64(*m.ComponentId))
		i--
		dAtA[i] = 0x18
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintCmerror(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Identifier != nil {
		i -= len(*m.Identifier)
		copy(dAtA[i:], *m.Identifier)
		i = encodeVarintCmerror(dAtA, i, uint64(len(*m.Identifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalErrorConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalErrorConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalErrorConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Action != nil {
		i = encodeVarintCmerror(dAtA, i, uint64(*m.Action))
		i--
		dAtA[i] = 0x28
	}
	if m.Threshold != nil {
		i = encodeVarintCmerror(dAtA, i, uint64(*m.Threshold))
		i--
		dAtA[i] = 0x20
	}
	if m.Severity != nil {
		i -= len(*m.Severity)
		copy(dAtA[i:], *m.Severity)
		i = encodeVarintCmerror(dAtA, i, uint64(len(*m.Severity)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Category != nil {
		i -= len(*m.Category)
		copy(dAtA[i:], *m.Category)
		i = encodeVarintCmerror(dAtA, i, uint64(len(*m.Category)))
		i--
		dAtA[i] = 0x12
	}
	if m.Scope != nil {
		i -= len(*m.Scope)
		copy(dAtA[i:], *m.Scope)
		i = encodeVarintCmerror(dAtA, i, uint64(len(*m.Scope)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Cmerror) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cmerror) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Cmerror) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GlobalConfigurationItem) > 0 {
		for iNdEx := len(m.GlobalConfigurationItem) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GlobalConfigurationItem[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCmerror(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.FruType != nil {
		i -= len(*m.FruType)
		copy(dAtA[i:], *m.FruType)
		i = encodeVarintCmerror(dAtA, i, uint64(len(*m.FruType)))
		i--
		dAtA[i] = 0x2a
	}
	if m.FruSlot != nil {
		i = encodeVarintCmerror(dAtA, i, uint64(*m.FruSlot))
		i--
		dAtA[i] = 0x20
	}
	if m.WrapCycleMarker != nil {
		i--
		if *m.WrapCycleMarker {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.LastConfigurationChange != nil {
		i = encodeVarintCmerror(dAtA, i, uint64(*m.LastConfigurationChange))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ErrorItem) > 0 {
		for iNdEx := len(m.ErrorItem) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ErrorItem[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCmerror(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCmerror(dAtA []byte, offset int, v uint64) int {
	offset -= sovCmerror(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Identifier != nil {
		l = len(*m.Identifier)
		n += 1 + l + sovCmerror(uint64(l))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovCmerror(uint64(l))
	}
	if m.ComponentId != nil {
		n += 1 + sovCmerror(uint64(*m.ComponentId))
	}
	if m.FruType != nil {
		l = len(*m.FruType)
		n += 1 + l + sovCmerror(uint64(l))
	}
	if m.FruSlot != nil {
		n += 1 + sovCmerror(uint64(*m.FruSlot))
	}
	if m.Scope != nil {
		l = len(*m.Scope)
		n += 1 + l + sovCmerror(uint64(l))
	}
	if m.Category != nil {
		l = len(*m.Category)
		n += 1 + l + sovCmerror(uint64(l))
	}
	if m.Severity != nil {
		l = len(*m.Severity)
		n += 1 + l + sovCmerror(uint64(l))
	}
	if m.Threshold != nil {
		n += 1 + sovCmerror(uint64(*m.Threshold))
	}
	if m.Limit != nil {
		n += 1 + sovCmerror(uint64(*m.Limit))
	}
	if m.RaisingThreshold != nil {
		n += 1 + sovCmerror(uint64(*m.RaisingThreshold))
	}
	if m.ClearingThreshold != nil {
		n += 1 + sovCmerror(uint64(*m.ClearingThreshold))
	}
	if m.Action != nil {
		n += 1 + sovCmerror(uint64(*m.Action))
	}
	if m.ActionHandlingType != nil {
		n += 1 + sovCmerror(uint64(*m.ActionHandlingType))
	}
	if m.ConfiguredThreshold != nil {
		n += 1 + sovCmerror(uint64(*m.ConfiguredThreshold))
	}
	if m.ConfiguredLimit != nil {
		n += 2 + sovCmerror(uint64(*m.ConfiguredLimit))
	}
	if m.ConfiguredAction != nil {
		n += 2 + sovCmerror(uint64(*m.ConfiguredAction))
	}
	if m.ConfiguredClearAction != nil {
		n += 2 + sovCmerror(uint64(*m.ConfiguredClearAction))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GlobalErrorConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Scope != nil {
		l = len(*m.Scope)
		n += 1 + l + sovCmerror(uint64(l))
	}
	if m.Category != nil {
		l = len(*m.Category)
		n += 1 + l + sovCmerror(uint64(l))
	}
	if m.Severity != nil {
		l = len(*m.Severity)
		n += 1 + l + sovCmerror(uint64(l))
	}
	if m.Threshold != nil {
		n += 1 + sovCmerror(uint64(*m.Threshold))
	}
	if m.Action != nil {
		n += 1 + sovCmerror(uint64(*m.Action))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Cmerror) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ErrorItem) > 0 {
		for _, e := range m.ErrorItem {
			l = e.Size()
			n += 1 + l + sovCmerror(uint64(l))
		}
	}
	if m.LastConfigurationChange != nil {
		n += 1 + sovCmerror(uint64(*m.LastConfigurationChange))
	}
	if m.WrapCycleMarker != nil {
		n += 2
	}
	if m.FruSlot != nil {
		n += 1 + sovCmerror(uint64(*m.FruSlot))
	}
	if m.FruType != nil {
		l = len(*m.FruType)
		n += 1 + l + sovCmerror(uint64(l))
	}
	if len(m.GlobalConfigurationItem) > 0 {
		for _, e := range m.GlobalConfigurationItem {
			l = e.Size()
			n += 1 + l + sovCmerror(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCmerror(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCmerror(x uint64) (n int) {
	return sovCmerror(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmerror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmerror
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmerror
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Identifier = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmerror
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmerror
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ComponentId = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FruType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmerror
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmerror
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FruType = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FruSlot", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FruSlot = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmerror
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmerror
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Scope = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmerror
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmerror
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Category = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Severity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmerror
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmerror
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Severity = &s
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Threshold = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Limit = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaisingThreshold", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RaisingThreshold = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearingThreshold", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClearingThreshold = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Action = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionHandlingType", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActionHandlingType = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfiguredThreshold", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConfiguredThreshold = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfiguredLimit", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConfiguredLimit = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfiguredAction", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConfiguredAction = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfiguredClearAction", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConfiguredClearAction = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCmerror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmerror
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmerror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalErrorConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmerror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalErrorConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalErrorConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmerror
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmerror
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Scope = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmerror
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmerror
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Category = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Severity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmerror
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmerror
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Severity = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Threshold = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Action = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCmerror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmerror
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmerror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cmerror) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmerror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cmerror: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cmerror: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmerror
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmerror
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorItem = append(m.ErrorItem, &Error{})
			if err := m.ErrorItem[len(m.ErrorItem)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastConfigurationChange", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastConfigurationChange = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WrapCycleMarker", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.WrapCycleMarker = &b
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FruSlot", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FruSlot = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FruType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmerror
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmerror
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FruType = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalConfigurationItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmerror
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmerror
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GlobalConfigurationItem = append(m.GlobalConfigurationItem, &GlobalErrorConfiguration{})
			if err := m.GlobalConfigurationItem[len(m.GlobalConfigurationItem)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmerror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmerror
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmerror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCmerror(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCmerror
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCmerror
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCmerror
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCmerror
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCmerror
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCmerror
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCmerror        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCmerror          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCmerror = fmt.Errorf("proto: unexpected end of group")
)
