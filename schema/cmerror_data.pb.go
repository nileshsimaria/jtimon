// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cmerror_data.proto

package schema

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
// Juniper Error Item information
//
type ErrorData struct {
	// Identifier that uniquely identifies the source of
	// the error.
	Identifier  *string `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	Count       *uint64 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	LastUpdated *uint64 `protobuf:"varint,3,opt,name=last_updated,json=lastUpdated" json:"last_updated,omitempty"`
	IsEnabled   *bool   `protobuf:"varint,4,opt,name=is_enabled,json=isEnabled" json:"is_enabled,omitempty"`
	// Additional Metadata for error processing
	ModuleId    *uint32 `protobuf:"varint,5,opt,name=module_id,json=moduleId" json:"module_id,omitempty"`
	ComponentId *uint32 `protobuf:"varint,6,opt,name=component_id,json=componentId" json:"component_id,omitempty"`
	ErrorCode   *uint32 `protobuf:"varint,7,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// Additional stats for each of the error
	OccurCount        *uint32 `protobuf:"varint,8,opt,name=occur_count,json=occurCount" json:"occur_count,omitempty"`
	ClearedCount      *uint32 `protobuf:"varint,9,opt,name=cleared_count,json=clearedCount" json:"cleared_count,omitempty"`
	LastClearedAt     *uint64 `protobuf:"varint,10,opt,name=last_cleared_at,json=lastClearedAt" json:"last_cleared_at,omitempty"`
	ActionCount       *uint32 `protobuf:"varint,11,opt,name=action_count,json=actionCount" json:"action_count,omitempty"`
	LastActionTakenAt *uint64 `protobuf:"varint,12,opt,name=last_action_taken_at,json=lastActionTakenAt" json:"last_action_taken_at,omitempty"`
	// Fru information
	FruType *string `protobuf:"bytes,13,opt,name=fru_type,json=fruType" json:"fru_type,omitempty"`
	FruSlot *uint32 `protobuf:"varint,14,opt,name=fru_slot,json=fruSlot" json:"fru_slot,omitempty"`
	// Help information regarding the error.
	Description          *string  `protobuf:"bytes,15,opt,name=description" json:"description,omitempty"`
	Help                 *string  `protobuf:"bytes,16,opt,name=help" json:"help,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ErrorData) Reset()         { *m = ErrorData{} }
func (m *ErrorData) String() string { return proto.CompactTextString(m) }
func (*ErrorData) ProtoMessage()    {}
func (*ErrorData) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e62e0d982e26602, []int{0}
}
func (m *ErrorData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErrorData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErrorData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ErrorData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorData.Merge(m, src)
}
func (m *ErrorData) XXX_Size() int {
	return m.Size()
}
func (m *ErrorData) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorData.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorData proto.InternalMessageInfo

func (m *ErrorData) GetIdentifier() string {
	if m != nil && m.Identifier != nil {
		return *m.Identifier
	}
	return ""
}

func (m *ErrorData) GetCount() uint64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *ErrorData) GetLastUpdated() uint64 {
	if m != nil && m.LastUpdated != nil {
		return *m.LastUpdated
	}
	return 0
}

func (m *ErrorData) GetIsEnabled() bool {
	if m != nil && m.IsEnabled != nil {
		return *m.IsEnabled
	}
	return false
}

func (m *ErrorData) GetModuleId() uint32 {
	if m != nil && m.ModuleId != nil {
		return *m.ModuleId
	}
	return 0
}

func (m *ErrorData) GetComponentId() uint32 {
	if m != nil && m.ComponentId != nil {
		return *m.ComponentId
	}
	return 0
}

func (m *ErrorData) GetErrorCode() uint32 {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return 0
}

func (m *ErrorData) GetOccurCount() uint32 {
	if m != nil && m.OccurCount != nil {
		return *m.OccurCount
	}
	return 0
}

func (m *ErrorData) GetClearedCount() uint32 {
	if m != nil && m.ClearedCount != nil {
		return *m.ClearedCount
	}
	return 0
}

func (m *ErrorData) GetLastClearedAt() uint64 {
	if m != nil && m.LastClearedAt != nil {
		return *m.LastClearedAt
	}
	return 0
}

func (m *ErrorData) GetActionCount() uint32 {
	if m != nil && m.ActionCount != nil {
		return *m.ActionCount
	}
	return 0
}

func (m *ErrorData) GetLastActionTakenAt() uint64 {
	if m != nil && m.LastActionTakenAt != nil {
		return *m.LastActionTakenAt
	}
	return 0
}

func (m *ErrorData) GetFruType() string {
	if m != nil && m.FruType != nil {
		return *m.FruType
	}
	return ""
}

func (m *ErrorData) GetFruSlot() uint32 {
	if m != nil && m.FruSlot != nil {
		return *m.FruSlot
	}
	return 0
}

func (m *ErrorData) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *ErrorData) GetHelp() string {
	if m != nil && m.Help != nil {
		return *m.Help
	}
	return ""
}

type ErrorResourceInfo struct {
	// resource id e.g pfe identifier
	Id *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// resource type e.g pfe/pic
	Type *string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	// resource state e.g enabled /disabled
	State                *uint32  `protobuf:"varint,3,opt,name=state" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ErrorResourceInfo) Reset()         { *m = ErrorResourceInfo{} }
func (m *ErrorResourceInfo) String() string { return proto.CompactTextString(m) }
func (*ErrorResourceInfo) ProtoMessage()    {}
func (*ErrorResourceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e62e0d982e26602, []int{1}
}
func (m *ErrorResourceInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErrorResourceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErrorResourceInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ErrorResourceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorResourceInfo.Merge(m, src)
}
func (m *ErrorResourceInfo) XXX_Size() int {
	return m.Size()
}
func (m *ErrorResourceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorResourceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorResourceInfo proto.InternalMessageInfo

func (m *ErrorResourceInfo) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ErrorResourceInfo) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *ErrorResourceInfo) GetState() uint32 {
	if m != nil && m.State != nil {
		return *m.State
	}
	return 0
}

//
// Top-level CmerrorData message
//
type CmerrorData struct {
	// collection of error items
	ErrorItem []*ErrorData `protobuf:"bytes,1,rep,name=error_item,json=errorItem" json:"error_item,omitempty"`
	// Fru slot identifier
	FruSlot *uint32 `protobuf:"varint,2,opt,name=fru_slot,json=fruSlot" json:"fru_slot,omitempty"`
	FruType *string `protobuf:"bytes,3,opt,name=fru_type,json=fruType" json:"fru_type,omitempty"`
	// collection of resource states from fru
	ResourceItem         []*ErrorResourceInfo `protobuf:"bytes,4,rep,name=resource_item,json=resourceItem" json:"resource_item,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CmerrorData) Reset()         { *m = CmerrorData{} }
func (m *CmerrorData) String() string { return proto.CompactTextString(m) }
func (*CmerrorData) ProtoMessage()    {}
func (*CmerrorData) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e62e0d982e26602, []int{2}
}
func (m *CmerrorData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CmerrorData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CmerrorData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CmerrorData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CmerrorData.Merge(m, src)
}
func (m *CmerrorData) XXX_Size() int {
	return m.Size()
}
func (m *CmerrorData) XXX_DiscardUnknown() {
	xxx_messageInfo_CmerrorData.DiscardUnknown(m)
}

var xxx_messageInfo_CmerrorData proto.InternalMessageInfo

func (m *CmerrorData) GetErrorItem() []*ErrorData {
	if m != nil {
		return m.ErrorItem
	}
	return nil
}

func (m *CmerrorData) GetFruSlot() uint32 {
	if m != nil && m.FruSlot != nil {
		return *m.FruSlot
	}
	return 0
}

func (m *CmerrorData) GetFruType() string {
	if m != nil && m.FruType != nil {
		return *m.FruType
	}
	return ""
}

func (m *CmerrorData) GetResourceItem() []*ErrorResourceInfo {
	if m != nil {
		return m.ResourceItem
	}
	return nil
}

var E_JnprCmerrorDataExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*CmerrorData)(nil),
	Field:         21,
	Name:          "jnpr_cmerror_data_ext",
	Tag:           "bytes,21,opt,name=jnpr_cmerror_data_ext",
	Filename:      "cmerror_data.proto",
}

func init() {
	proto.RegisterType((*ErrorData)(nil), "ErrorData")
	proto.RegisterType((*ErrorResourceInfo)(nil), "ErrorResourceInfo")
	proto.RegisterType((*CmerrorData)(nil), "CmerrorData")
	proto.RegisterExtension(E_JnprCmerrorDataExt)
}

func init() { proto.RegisterFile("cmerror_data.proto", fileDescriptor_9e62e0d982e26602) }

var fileDescriptor_9e62e0d982e26602 = []byte{
	// 626 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x93, 0xcf, 0x6e, 0x13, 0x3d,
	0x14, 0xc5, 0x35, 0x69, 0xf2, 0x35, 0xf1, 0x24, 0xfd, 0xe3, 0xaf, 0x15, 0x86, 0x8a, 0x2a, 0x54,
	0x02, 0x05, 0xa4, 0x24, 0x52, 0x17, 0x20, 0xb1, 0xa2, 0x0d, 0x5d, 0x04, 0x09, 0x16, 0xd3, 0x22,
	0x21, 0x36, 0x83, 0x3b, 0xbe, 0x49, 0x9c, 0xce, 0xd8, 0x23, 0xfb, 0x0e, 0xb4, 0x5b, 0x5e, 0x86,
	0x57, 0xe9, 0x92, 0x47, 0x40, 0x7d, 0x12, 0x64, 0x3b, 0xa9, 0xa6, 0x62, 0x37, 0xb9, 0xbf, 0x73,
	0x8f, 0x7d, 0xae, 0x6f, 0x08, 0xcd, 0x0a, 0x30, 0x46, 0x9b, 0x54, 0x70, 0xe4, 0xa3, 0xd2, 0x68,
	0xd4, 0x4f, 0xfe, 0x47, 0xc8, 0xa1, 0x00, 0x34, 0x37, 0x29, 0xea, 0x32, 0x14, 0x8f, 0x6e, 0x9b,
	0xa4, 0x73, 0xe6, 0x94, 0xef, 0x39, 0x72, 0xfa, 0x9c, 0x10, 0x29, 0x40, 0xa1, 0x9c, 0x49, 0x30,
	0x2c, 0xea, 0x47, 0x83, 0xce, 0x69, 0xeb, 0xe7, 0xbb, 0x46, 0x3b, 0x4a, 0x6a, 0x80, 0x1e, 0x90,
	0x56, 0xa6, 0x2b, 0x85, 0xac, 0xd1, 0x8f, 0x06, 0x4d, 0xaf, 0x60, 0x51, 0x12, 0x6a, 0x74, 0x40,
	0xba, 0x39, 0xb7, 0x98, 0x56, 0xa5, 0xe0, 0x08, 0x82, 0x6d, 0xdc, 0x6b, 0x76, 0xa2, 0x24, 0x76,
	0xe8, 0x73, 0x20, 0xf4, 0x29, 0x21, 0xd2, 0xa6, 0xa0, 0xf8, 0x65, 0x0e, 0x82, 0x35, 0xfb, 0xd1,
	0xa0, 0x9d, 0x74, 0xa4, 0x3d, 0x0b, 0x05, 0x7a, 0x40, 0x3a, 0x85, 0x16, 0x55, 0x0e, 0xa9, 0x14,
	0xac, 0xd5, 0x8f, 0x06, 0xbd, 0xa4, 0x1d, 0x0a, 0x53, 0x41, 0x9f, 0x91, 0x6e, 0xa6, 0x8b, 0x52,
	0x2b, 0x50, 0xe8, 0xf8, 0x7f, 0x9e, 0xc7, 0xf7, 0xb5, 0xa9, 0xb7, 0x0f, 0x33, 0xc8, 0xb4, 0x00,
	0xb6, 0xe9, 0x05, 0x1d, 0x5f, 0x99, 0x68, 0x01, 0xf4, 0x05, 0x89, 0x75, 0x96, 0x55, 0x0e, 0xbb,
	0x28, 0x6d, 0xc7, 0xd7, 0x51, 0x88, 0x27, 0x13, 0x9f, 0xe7, 0x15, 0xe9, 0x65, 0x39, 0x70, 0x03,
	0x62, 0xa5, 0xec, 0xd4, 0x95, 0xdd, 0x15, 0x0b, 0xda, 0x21, 0xd9, 0xf6, 0xd9, 0xd7, 0x0d, 0x1c,
	0x19, 0xa9, 0xc7, 0xef, 0x39, 0x3a, 0x09, 0xf0, 0xc4, 0x8f, 0x8a, 0x67, 0x28, 0xb5, 0x5a, 0x39,
	0xc7, 0x75, 0xe7, 0x38, 0xa0, 0x60, 0xfc, 0x9a, 0xec, 0x79, 0xe3, 0x95, 0x1c, 0xf9, 0x15, 0x28,
	0xe7, 0xde, 0xad, 0xbb, 0xef, 0x3a, 0xc9, 0x89, 0x57, 0x5c, 0x38, 0xc1, 0x09, 0xd2, 0xc7, 0xa4,
	0x3d, 0x33, 0x55, 0x8a, 0x37, 0x25, 0xb0, 0x9e, 0x7b, 0xce, 0x64, 0x73, 0x66, 0xaa, 0x8b, 0x9b,
	0x12, 0xd6, 0xc8, 0xe6, 0x1a, 0xd9, 0x96, 0x1f, 0x8e, 0x43, 0xe7, 0xb9, 0x46, 0xda, 0x27, 0xb1,
	0x00, 0x9b, 0x19, 0x59, 0x3a, 0x2f, 0xb6, 0xed, 0x1b, 0xeb, 0x25, 0x4a, 0x49, 0x73, 0x01, 0x79,
	0xc9, 0x76, 0x3c, 0xf2, 0xdf, 0x47, 0x1f, 0xc9, 0xae, 0xdf, 0xa4, 0x04, 0xac, 0xae, 0x4c, 0x06,
	0x53, 0x35, 0xd3, 0x74, 0x8b, 0x34, 0xa4, 0xf0, 0x9b, 0xd4, 0x4b, 0x1a, 0x52, 0xb8, 0x46, 0x7f,
	0x99, 0x46, 0x68, 0x74, 0xdf, 0x74, 0x8f, 0xb4, 0x2c, 0x72, 0x04, 0xbf, 0x2a, 0xbd, 0x24, 0xfc,
	0x38, 0xfa, 0x15, 0x91, 0x78, 0x12, 0xb6, 0xd8, 0xef, 0xe6, 0xcb, 0xf5, 0x73, 0x4a, 0x84, 0x82,
	0x45, 0xfd, 0x8d, 0x41, 0x7c, 0x4c, 0x46, 0xf7, 0xbb, 0xbb, 0x7a, 0xda, 0x29, 0x42, 0xf1, 0x20,
	0x5a, 0xe3, 0x61, 0xb4, 0xfa, 0x40, 0x36, 0x1e, 0x0e, 0xe4, 0x0d, 0xe9, 0x99, 0xd5, 0xd5, 0xc3,
	0x19, 0x4d, 0x7f, 0x06, 0x1d, 0xfd, 0x93, 0x2a, 0xe9, 0xae, 0x85, 0xee, 0xb8, 0xb7, 0x5f, 0xc8,
	0xfe, 0x52, 0x95, 0x26, 0xad, 0xff, 0xe7, 0x52, 0xb8, 0x46, 0xfa, 0x68, 0xf4, 0xa1, 0x52, 0xb2,
	0x04, 0xf3, 0x09, 0xf0, 0x87, 0x36, 0x57, 0xf6, 0x1c, 0x94, 0xd5, 0xc6, 0xb2, 0xfd, 0x7e, 0x34,
	0x88, 0x8f, 0xbb, 0xa3, 0x5a, 0xbe, 0x84, 0x3a, 0x8f, 0x5a, 0xe1, 0xec, 0x1a, 0x4f, 0xbf, 0xdd,
	0xde, 0x1d, 0x46, 0xbf, 0xef, 0x0e, 0xa3, 0x3f, 0x77, 0x87, 0xd1, 0xd7, 0x64, 0x2e, 0x71, 0xb4,
	0x0c, 0x8e, 0x23, 0x05, 0x38, 0x96, 0x19, 0x5c, 0x82, 0x99, 0x8f, 0x17, 0xc0, 0x73, 0x5c, 0x5c,
	0x6a, 0x1c, 0x4a, 0x35, 0x07, 0x8b, 0xc3, 0x25, 0xca, 0xa1, 0xe2, 0x28, 0xbf, 0xc3, 0xb8, 0xbc,
	0x9a, 0x8f, 0x97, 0x28, 0xc7, 0x5c, 0xf0, 0x12, 0xc1, 0xd8, 0x71, 0xba, 0xac, 0x94, 0xb6, 0x63,
	0x9b, 0x2d, 0xa0, 0xe0, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xa6, 0x54, 0x4d, 0x2a, 0x29, 0x04,
	0x00, 0x00,
}

func (m *ErrorData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrorData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ErrorData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Help != nil {
		i -= len(*m.Help)
		copy(dAtA[i:], *m.Help)
		i = encodeVarintCmerrorData(dAtA, i, uint64(len(*m.Help)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Description != nil {
		i -= len(*m.Description)
		copy(dAtA[i:], *m.Description)
		i = encodeVarintCmerrorData(dAtA, i, uint64(len(*m.Description)))
		i--
		dAtA[i] = 0x7a
	}
	if m.FruSlot != nil {
		i = encodeVarintCmerrorData(dAtA, i, uint64(*m.FruSlot))
		i--
		dAtA[i] = 0x70
	}
	if m.FruType != nil {
		i -= len(*m.FruType)
		copy(dAtA[i:], *m.FruType)
		i = encodeVarintCmerrorData(dAtA, i, uint64(len(*m.FruType)))
		i--
		dAtA[i] = 0x6a
	}
	if m.LastActionTakenAt != nil {
		i = encodeVarintCmerrorData(dAtA, i, uint64(*m.LastActionTakenAt))
		i--
		dAtA[i] = 0x60
	}
	if m.ActionCount != nil {
		i = encodeVarintCmerrorData(dAtA, i, uint64(*m.ActionCount))
		i--
		dAtA[i] = 0x58
	}
	if m.LastClearedAt != nil {
		i = encodeVarintCmerrorData(dAtA, i, uint64(*m.LastClearedAt))
		i--
		dAtA[i] = 0x50
	}
	if m.ClearedCount != nil {
		i = encodeVarintCmerrorData(dAtA, i, uint64(*m.ClearedCount))
		i--
		dAtA[i] = 0x48
	}
	if m.OccurCount != nil {
		i = encodeVarintCmerrorData(dAtA, i, uint64(*m.OccurCount))
		i--
		dAtA[i] = 0x40
	}
	if m.ErrorCode != nil {
		i = encodeVarintCmerrorData(dAtA, i, uint64(*m.ErrorCode))
		i--
		dAtA[i] = 0x38
	}
	if m.ComponentId != nil {
		i = encodeVarintCmerrorData(dAtA, i, uint64(*m.ComponentId))
		i--
		dAtA[i] = 0x30
	}
	if m.ModuleId != nil {
		i = encodeVarintCmerrorData(dAtA, i, uint64(*m.ModuleId))
		i--
		dAtA[i] = 0x28
	}
	if m.IsEnabled != nil {
		i--
		if *m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.LastUpdated != nil {
		i = encodeVarintCmerrorData(dAtA, i, uint64(*m.LastUpdated))
		i--
		dAtA[i] = 0x18
	}
	if m.Count != nil {
		i = encodeVarintCmerrorData(dAtA, i, uint64(*m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.Identifier != nil {
		i -= len(*m.Identifier)
		copy(dAtA[i:], *m.Identifier)
		i = encodeVarintCmerrorData(dAtA, i, uint64(len(*m.Identifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ErrorResourceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrorResourceInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ErrorResourceInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != nil {
		i = encodeVarintCmerrorData(dAtA, i, uint64(*m.State))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != nil {
		i -= len(*m.Type)
		copy(dAtA[i:], *m.Type)
		i = encodeVarintCmerrorData(dAtA, i, uint64(len(*m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		i = encodeVarintCmerrorData(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CmerrorData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmerrorData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CmerrorData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ResourceItem) > 0 {
		for iNdEx := len(m.ResourceItem) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResourceItem[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCmerrorData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.FruType != nil {
		i -= len(*m.FruType)
		copy(dAtA[i:], *m.FruType)
		i = encodeVarintCmerrorData(dAtA, i, uint64(len(*m.FruType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.FruSlot != nil {
		i = encodeVarintCmerrorData(dAtA, i, uint64(*m.FruSlot))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ErrorItem) > 0 {
		for iNdEx := len(m.ErrorItem) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ErrorItem[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCmerrorData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCmerrorData(dAtA []byte, offset int, v uint64) int {
	offset -= sovCmerrorData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ErrorData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Identifier != nil {
		l = len(*m.Identifier)
		n += 1 + l + sovCmerrorData(uint64(l))
	}
	if m.Count != nil {
		n += 1 + sovCmerrorData(uint64(*m.Count))
	}
	if m.LastUpdated != nil {
		n += 1 + sovCmerrorData(uint64(*m.LastUpdated))
	}
	if m.IsEnabled != nil {
		n += 2
	}
	if m.ModuleId != nil {
		n += 1 + sovCmerrorData(uint64(*m.ModuleId))
	}
	if m.ComponentId != nil {
		n += 1 + sovCmerrorData(uint64(*m.ComponentId))
	}
	if m.ErrorCode != nil {
		n += 1 + sovCmerrorData(uint64(*m.ErrorCode))
	}
	if m.OccurCount != nil {
		n += 1 + sovCmerrorData(uint64(*m.OccurCount))
	}
	if m.ClearedCount != nil {
		n += 1 + sovCmerrorData(uint64(*m.ClearedCount))
	}
	if m.LastClearedAt != nil {
		n += 1 + sovCmerrorData(uint64(*m.LastClearedAt))
	}
	if m.ActionCount != nil {
		n += 1 + sovCmerrorData(uint64(*m.ActionCount))
	}
	if m.LastActionTakenAt != nil {
		n += 1 + sovCmerrorData(uint64(*m.LastActionTakenAt))
	}
	if m.FruType != nil {
		l = len(*m.FruType)
		n += 1 + l + sovCmerrorData(uint64(l))
	}
	if m.FruSlot != nil {
		n += 1 + sovCmerrorData(uint64(*m.FruSlot))
	}
	if m.Description != nil {
		l = len(*m.Description)
		n += 1 + l + sovCmerrorData(uint64(l))
	}
	if m.Help != nil {
		l = len(*m.Help)
		n += 2 + l + sovCmerrorData(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ErrorResourceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovCmerrorData(uint64(*m.Id))
	}
	if m.Type != nil {
		l = len(*m.Type)
		n += 1 + l + sovCmerrorData(uint64(l))
	}
	if m.State != nil {
		n += 1 + sovCmerrorData(uint64(*m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CmerrorData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ErrorItem) > 0 {
		for _, e := range m.ErrorItem {
			l = e.Size()
			n += 1 + l + sovCmerrorData(uint64(l))
		}
	}
	if m.FruSlot != nil {
		n += 1 + sovCmerrorData(uint64(*m.FruSlot))
	}
	if m.FruType != nil {
		l = len(*m.FruType)
		n += 1 + l + sovCmerrorData(uint64(l))
	}
	if len(m.ResourceItem) > 0 {
		for _, e := range m.ResourceItem {
			l = e.Size()
			n += 1 + l + sovCmerrorData(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCmerrorData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCmerrorData(x uint64) (n int) {
	return sovCmerrorData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ErrorData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmerrorData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerrorData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmerrorData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmerrorData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Identifier = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerrorData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdated", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerrorData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastUpdated = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerrorData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsEnabled = &b
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerrorData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ModuleId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerrorData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ComponentId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerrorData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ErrorCode = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OccurCount", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerrorData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OccurCount = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearedCount", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerrorData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClearedCount = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastClearedAt", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerrorData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastClearedAt = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionCount", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerrorData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActionCount = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastActionTakenAt", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerrorData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastActionTakenAt = &v
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FruType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerrorData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmerrorData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmerrorData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FruType = &s
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FruSlot", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerrorData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FruSlot = &v
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerrorData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmerrorData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmerrorData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Description = &s
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Help", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerrorData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmerrorData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmerrorData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Help = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmerrorData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmerrorData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmerrorData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErrorResourceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmerrorData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorResourceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorResourceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerrorData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerrorData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmerrorData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmerrorData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Type = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerrorData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.State = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCmerrorData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmerrorData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmerrorData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmerrorData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmerrorData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmerrorData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmerrorData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerrorData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmerrorData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmerrorData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorItem = append(m.ErrorItem, &ErrorData{})
			if err := m.ErrorItem[len(m.ErrorItem)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FruSlot", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerrorData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FruSlot = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FruType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerrorData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmerrorData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmerrorData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FruType = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmerrorData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmerrorData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmerrorData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceItem = append(m.ResourceItem, &ErrorResourceInfo{})
			if err := m.ResourceItem[len(m.ResourceItem)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmerrorData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmerrorData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmerrorData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCmerrorData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCmerrorData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCmerrorData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCmerrorData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCmerrorData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCmerrorData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCmerrorData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCmerrorData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCmerrorData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCmerrorData = fmt.Errorf("proto: unexpected end of group")
)
