// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cpu_memory_utilization.proto

package schema

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
// The top level message is CpuMemoryUtilization
//
type CpuMemoryUtilization struct {
	Utilization          []*CpuMemoryUtilizationSummary `protobuf:"bytes,1,rep,name=utilization" json:"utilization,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *CpuMemoryUtilization) Reset()         { *m = CpuMemoryUtilization{} }
func (m *CpuMemoryUtilization) String() string { return proto.CompactTextString(m) }
func (*CpuMemoryUtilization) ProtoMessage()    {}
func (*CpuMemoryUtilization) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3a983ae9003ef42, []int{0}
}
func (m *CpuMemoryUtilization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CpuMemoryUtilization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CpuMemoryUtilization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CpuMemoryUtilization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CpuMemoryUtilization.Merge(m, src)
}
func (m *CpuMemoryUtilization) XXX_Size() int {
	return m.Size()
}
func (m *CpuMemoryUtilization) XXX_DiscardUnknown() {
	xxx_messageInfo_CpuMemoryUtilization.DiscardUnknown(m)
}

var xxx_messageInfo_CpuMemoryUtilization proto.InternalMessageInfo

func (m *CpuMemoryUtilization) GetUtilization() []*CpuMemoryUtilizationSummary {
	if m != nil {
		return m.Utilization
	}
	return nil
}

// This array gives the CPU  memory utilization on per partition basis
// and also the per application memory utilization for each partition
type CpuMemoryUtilizationSummary struct {
	// Name of the partition.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The total size of the partition in bytes
	Size_ *uint64 `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	// The amount of memory currently allocated from the partition in bytes
	BytesAllocated *uint64 `protobuf:"varint,3,opt,name=bytes_allocated,json=bytesAllocated" json:"bytes_allocated,omitempty"`
	// The amount of memory that is currently allocated, expressed
	// as percentage of the total (0--100).
	Utilization *int32 `protobuf:"varint,4,opt,name=utilization" json:"utilization,omitempty"`
	// Per application based memory utilization for this memory partition
	ApplicationUtilization []*CpuMemoryUtilizationPerApplication `protobuf:"bytes,5,rep,name=application_utilization,json=applicationUtilization" json:"application_utilization,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                              `json:"-"`
	XXX_unrecognized       []byte                                `json:"-"`
	XXX_sizecache          int32                                 `json:"-"`
}

func (m *CpuMemoryUtilizationSummary) Reset()         { *m = CpuMemoryUtilizationSummary{} }
func (m *CpuMemoryUtilizationSummary) String() string { return proto.CompactTextString(m) }
func (*CpuMemoryUtilizationSummary) ProtoMessage()    {}
func (*CpuMemoryUtilizationSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3a983ae9003ef42, []int{1}
}
func (m *CpuMemoryUtilizationSummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CpuMemoryUtilizationSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CpuMemoryUtilizationSummary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CpuMemoryUtilizationSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CpuMemoryUtilizationSummary.Merge(m, src)
}
func (m *CpuMemoryUtilizationSummary) XXX_Size() int {
	return m.Size()
}
func (m *CpuMemoryUtilizationSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_CpuMemoryUtilizationSummary.DiscardUnknown(m)
}

var xxx_messageInfo_CpuMemoryUtilizationSummary proto.InternalMessageInfo

func (m *CpuMemoryUtilizationSummary) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CpuMemoryUtilizationSummary) GetSize_() uint64 {
	if m != nil && m.Size_ != nil {
		return *m.Size_
	}
	return 0
}

func (m *CpuMemoryUtilizationSummary) GetBytesAllocated() uint64 {
	if m != nil && m.BytesAllocated != nil {
		return *m.BytesAllocated
	}
	return 0
}

func (m *CpuMemoryUtilizationSummary) GetUtilization() int32 {
	if m != nil && m.Utilization != nil {
		return *m.Utilization
	}
	return 0
}

func (m *CpuMemoryUtilizationSummary) GetApplicationUtilization() []*CpuMemoryUtilizationPerApplication {
	if m != nil {
		return m.ApplicationUtilization
	}
	return nil
}

// This describes per Application specific CPU memory utilization
type CpuMemoryUtilizationPerApplication struct {
	// Application name
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Number of bytes allocated
	BytesAllocated *uint64 `protobuf:"varint,2,opt,name=bytes_allocated,json=bytesAllocated" json:"bytes_allocated,omitempty"`
	//  Number of allocations
	Allocations *uint64 `protobuf:"varint,3,opt,name=allocations" json:"allocations,omitempty"`
	//  Number of frees
	Frees *uint64 `protobuf:"varint,4,opt,name=frees" json:"frees,omitempty"`
	// Number of allocations failed
	AllocationsFailed    *uint64  `protobuf:"varint,5,opt,name=allocations_failed,json=allocationsFailed" json:"allocations_failed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CpuMemoryUtilizationPerApplication) Reset()         { *m = CpuMemoryUtilizationPerApplication{} }
func (m *CpuMemoryUtilizationPerApplication) String() string { return proto.CompactTextString(m) }
func (*CpuMemoryUtilizationPerApplication) ProtoMessage()    {}
func (*CpuMemoryUtilizationPerApplication) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3a983ae9003ef42, []int{2}
}
func (m *CpuMemoryUtilizationPerApplication) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CpuMemoryUtilizationPerApplication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CpuMemoryUtilizationPerApplication.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CpuMemoryUtilizationPerApplication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CpuMemoryUtilizationPerApplication.Merge(m, src)
}
func (m *CpuMemoryUtilizationPerApplication) XXX_Size() int {
	return m.Size()
}
func (m *CpuMemoryUtilizationPerApplication) XXX_DiscardUnknown() {
	xxx_messageInfo_CpuMemoryUtilizationPerApplication.DiscardUnknown(m)
}

var xxx_messageInfo_CpuMemoryUtilizationPerApplication proto.InternalMessageInfo

func (m *CpuMemoryUtilizationPerApplication) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CpuMemoryUtilizationPerApplication) GetBytesAllocated() uint64 {
	if m != nil && m.BytesAllocated != nil {
		return *m.BytesAllocated
	}
	return 0
}

func (m *CpuMemoryUtilizationPerApplication) GetAllocations() uint64 {
	if m != nil && m.Allocations != nil {
		return *m.Allocations
	}
	return 0
}

func (m *CpuMemoryUtilizationPerApplication) GetFrees() uint64 {
	if m != nil && m.Frees != nil {
		return *m.Frees
	}
	return 0
}

func (m *CpuMemoryUtilizationPerApplication) GetAllocationsFailed() uint64 {
	if m != nil && m.AllocationsFailed != nil {
		return *m.AllocationsFailed
	}
	return 0
}

var E_CpuMemoryUtilExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*CpuMemoryUtilization)(nil),
	Field:         1,
	Name:          "cpu_memory_util_ext",
	Tag:           "bytes,1,opt,name=cpu_memory_util_ext",
	Filename:      "cpu_memory_utilization.proto",
}

func init() {
	proto.RegisterType((*CpuMemoryUtilization)(nil), "CpuMemoryUtilization")
	proto.RegisterType((*CpuMemoryUtilizationSummary)(nil), "CpuMemoryUtilizationSummary")
	proto.RegisterType((*CpuMemoryUtilizationPerApplication)(nil), "CpuMemoryUtilizationPerApplication")
	proto.RegisterExtension(E_CpuMemoryUtilExt)
}

func init() { proto.RegisterFile("cpu_memory_utilization.proto", fileDescriptor_d3a983ae9003ef42) }

var fileDescriptor_d3a983ae9003ef42 = []byte{
	// 409 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xcf, 0x6e, 0xd4, 0x30,
	0x10, 0xc6, 0xe5, 0x36, 0x39, 0xe0, 0x95, 0xf8, 0xe3, 0x16, 0x1a, 0x41, 0xb5, 0x8a, 0xc2, 0x81,
	0x5c, 0x92, 0x48, 0x3d, 0x72, 0x40, 0x2a, 0x08, 0x0e, 0x48, 0x20, 0x94, 0x0a, 0x0e, 0x08, 0x14,
	0xbc, 0xd9, 0x69, 0xd6, 0x69, 0x62, 0x5b, 0xf6, 0x04, 0x9a, 0x3e, 0x61, 0x8f, 0x3c, 0x02, 0xda,
	0x07, 0xe0, 0x19, 0x10, 0xde, 0xa2, 0x7a, 0x51, 0xa0, 0x37, 0xcf, 0x37, 0xdf, 0x37, 0x9a, 0xdf,
	0xc8, 0xf4, 0xb0, 0xd6, 0x43, 0xd5, 0x43, 0xaf, 0xcc, 0x58, 0x0d, 0x28, 0x3a, 0x71, 0xc1, 0x51,
	0x28, 0x99, 0x6b, 0xa3, 0x50, 0x3d, 0xdc, 0x43, 0xe8, 0xa0, 0x07, 0x34, 0x63, 0x85, 0x4a, 0x6f,
	0xc4, 0xe4, 0x03, 0xdd, 0x7f, 0xa1, 0x87, 0x37, 0x2e, 0xf3, 0xfe, 0x3a, 0xc2, 0x9e, 0xd1, 0x99,
	0x37, 0x21, 0x22, 0xf1, 0x6e, 0x3a, 0x3b, 0x3a, 0xcc, 0xa7, 0xbc, 0x27, 0x43, 0xdf, 0x73, 0x33,
	0x96, 0x7e, 0x20, 0xf9, 0x49, 0xe8, 0xa3, 0xff, 0x98, 0x19, 0xa3, 0x81, 0xe4, 0x3d, 0x44, 0x24,
	0x26, 0xe9, 0xad, 0xd2, 0xbd, 0x7f, 0x6b, 0x56, 0x5c, 0x40, 0xb4, 0x13, 0x93, 0x34, 0x28, 0xdd,
	0x9b, 0x3d, 0xa1, 0x77, 0x16, 0x23, 0x82, 0xad, 0x78, 0xd7, 0xa9, 0x9a, 0x23, 0x2c, 0xa3, 0x5d,
	0xd7, 0xbe, 0xed, 0xe4, 0xe3, 0x3f, 0x2a, 0x8b, 0xb7, 0x17, 0x0e, 0x62, 0x92, 0x86, 0x5b, 0x2b,
	0xb1, 0x4f, 0xf4, 0x80, 0x6b, 0xdd, 0x89, 0xda, 0x95, 0xfe, 0x81, 0xa2, 0xd0, 0xe1, 0x3d, 0x9e,
	0xc4, 0x7b, 0x07, 0xe6, 0xf8, 0x3a, 0x56, 0x3e, 0xf0, 0x66, 0x78, 0xae, 0xe4, 0x92, 0xd0, 0xe4,
	0xe6, 0xf8, 0x24, 0xf7, 0x04, 0xe3, 0xce, 0xbf, 0x18, 0xaf, 0x2c, 0x42, 0x49, 0x7b, 0x75, 0x08,
	0x5f, 0x62, 0xfb, 0x34, 0x3c, 0x35, 0x00, 0xd6, 0xf1, 0x07, 0xe5, 0xa6, 0x60, 0x19, 0x65, 0x9e,
	0xa9, 0x3a, 0xe5, 0xa2, 0x83, 0x65, 0x14, 0x3a, 0xcb, 0x3d, 0xaf, 0xf3, 0xca, 0x35, 0x9e, 0x7e,
	0xa6, 0x7b, 0x7f, 0x7d, 0xa4, 0x0a, 0xce, 0x91, 0x1d, 0xe4, 0xaf, 0x07, 0x29, 0x34, 0x98, 0xb7,
	0x80, 0xdf, 0x94, 0x39, 0xb3, 0x27, 0x20, 0xad, 0x32, 0xd6, 0xb1, 0xcc, 0x8e, 0xee, 0x4f, 0x5e,
	0xaf, 0xbc, 0x5b, 0xfb, 0xea, 0xcb, 0x73, 0x7c, 0xfe, 0xe5, 0x72, 0x3d, 0x27, 0xdf, 0xd7, 0x73,
	0xf2, 0x63, 0x3d, 0x27, 0x1f, 0xcb, 0x46, 0x60, 0xde, 0x6e, 0x06, 0xe7, 0x12, 0xb0, 0x10, 0x35,
	0x2c, 0xc0, 0x34, 0xc5, 0x0a, 0x78, 0x87, 0xab, 0x85, 0xc2, 0x4c, 0xc8, 0x06, 0x2c, 0x66, 0x2d,
	0x8a, 0x4c, 0x72, 0x14, 0x5f, 0xa1, 0xd0, 0x67, 0x4d, 0xd1, 0xa2, 0x28, 0xf8, 0x92, 0x6b, 0x04,
	0x63, 0x8b, 0xaa, 0x1d, 0xa4, 0xb2, 0x85, 0xad, 0x57, 0xd0, 0xf3, 0x5f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xaa, 0x4c, 0xa6, 0x76, 0x08, 0x03, 0x00, 0x00,
}

func (m *CpuMemoryUtilization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CpuMemoryUtilization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CpuMemoryUtilization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Utilization) > 0 {
		for iNdEx := len(m.Utilization) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Utilization[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCpuMemoryUtilization(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CpuMemoryUtilizationSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CpuMemoryUtilizationSummary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CpuMemoryUtilizationSummary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ApplicationUtilization) > 0 {
		for iNdEx := len(m.ApplicationUtilization) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApplicationUtilization[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCpuMemoryUtilization(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Utilization != nil {
		i = encodeVarintCpuMemoryUtilization(dAtA, i, uint64(*m.Utilization))
		i--
		dAtA[i] = 0x20
	}
	if m.BytesAllocated != nil {
		i = encodeVarintCpuMemoryUtilization(dAtA, i, uint64(*m.BytesAllocated))
		i--
		dAtA[i] = 0x18
	}
	if m.Size_ != nil {
		i = encodeVarintCpuMemoryUtilization(dAtA, i, uint64(*m.Size_))
		i--
		dAtA[i] = 0x10
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintCpuMemoryUtilization(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CpuMemoryUtilizationPerApplication) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CpuMemoryUtilizationPerApplication) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CpuMemoryUtilizationPerApplication) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AllocationsFailed != nil {
		i = encodeVarintCpuMemoryUtilization(dAtA, i, uint64(*m.AllocationsFailed))
		i--
		dAtA[i] = 0x28
	}
	if m.Frees != nil {
		i = encodeVarintCpuMemoryUtilization(dAtA, i, uint64(*m.Frees))
		i--
		dAtA[i] = 0x20
	}
	if m.Allocations != nil {
		i = encodeVarintCpuMemoryUtilization(dAtA, i, uint64(*m.Allocations))
		i--
		dAtA[i] = 0x18
	}
	if m.BytesAllocated != nil {
		i = encodeVarintCpuMemoryUtilization(dAtA, i, uint64(*m.BytesAllocated))
		i--
		dAtA[i] = 0x10
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintCpuMemoryUtilization(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCpuMemoryUtilization(dAtA []byte, offset int, v uint64) int {
	offset -= sovCpuMemoryUtilization(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CpuMemoryUtilization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Utilization) > 0 {
		for _, e := range m.Utilization {
			l = e.Size()
			n += 1 + l + sovCpuMemoryUtilization(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CpuMemoryUtilizationSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovCpuMemoryUtilization(uint64(l))
	}
	if m.Size_ != nil {
		n += 1 + sovCpuMemoryUtilization(uint64(*m.Size_))
	}
	if m.BytesAllocated != nil {
		n += 1 + sovCpuMemoryUtilization(uint64(*m.BytesAllocated))
	}
	if m.Utilization != nil {
		n += 1 + sovCpuMemoryUtilization(uint64(*m.Utilization))
	}
	if len(m.ApplicationUtilization) > 0 {
		for _, e := range m.ApplicationUtilization {
			l = e.Size()
			n += 1 + l + sovCpuMemoryUtilization(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CpuMemoryUtilizationPerApplication) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovCpuMemoryUtilization(uint64(l))
	}
	if m.BytesAllocated != nil {
		n += 1 + sovCpuMemoryUtilization(uint64(*m.BytesAllocated))
	}
	if m.Allocations != nil {
		n += 1 + sovCpuMemoryUtilization(uint64(*m.Allocations))
	}
	if m.Frees != nil {
		n += 1 + sovCpuMemoryUtilization(uint64(*m.Frees))
	}
	if m.AllocationsFailed != nil {
		n += 1 + sovCpuMemoryUtilization(uint64(*m.AllocationsFailed))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCpuMemoryUtilization(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCpuMemoryUtilization(x uint64) (n int) {
	return sovCpuMemoryUtilization(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CpuMemoryUtilization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpuMemoryUtilization
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CpuMemoryUtilization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CpuMemoryUtilization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Utilization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpuMemoryUtilization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpuMemoryUtilization
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpuMemoryUtilization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Utilization = append(m.Utilization, &CpuMemoryUtilizationSummary{})
			if err := m.Utilization[len(m.Utilization)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpuMemoryUtilization(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpuMemoryUtilization
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCpuMemoryUtilization
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CpuMemoryUtilizationSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpuMemoryUtilization
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CpuMemoryUtilizationSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CpuMemoryUtilizationSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpuMemoryUtilization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCpuMemoryUtilization
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCpuMemoryUtilization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpuMemoryUtilization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Size_ = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesAllocated", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpuMemoryUtilization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BytesAllocated = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Utilization", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpuMemoryUtilization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Utilization = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationUtilization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpuMemoryUtilization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpuMemoryUtilization
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpuMemoryUtilization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationUtilization = append(m.ApplicationUtilization, &CpuMemoryUtilizationPerApplication{})
			if err := m.ApplicationUtilization[len(m.ApplicationUtilization)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpuMemoryUtilization(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpuMemoryUtilization
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCpuMemoryUtilization
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CpuMemoryUtilizationPerApplication) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpuMemoryUtilization
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CpuMemoryUtilizationPerApplication: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CpuMemoryUtilizationPerApplication: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpuMemoryUtilization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCpuMemoryUtilization
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCpuMemoryUtilization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesAllocated", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpuMemoryUtilization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BytesAllocated = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocations", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpuMemoryUtilization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Allocations = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frees", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpuMemoryUtilization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Frees = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocationsFailed", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpuMemoryUtilization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllocationsFailed = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCpuMemoryUtilization(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpuMemoryUtilization
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCpuMemoryUtilization
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCpuMemoryUtilization(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCpuMemoryUtilization
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCpuMemoryUtilization
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCpuMemoryUtilization
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCpuMemoryUtilization
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCpuMemoryUtilization
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCpuMemoryUtilization
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCpuMemoryUtilization        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCpuMemoryUtilization          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCpuMemoryUtilization = fmt.Errorf("proto: unexpected end of group")
)
