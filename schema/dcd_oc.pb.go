// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dcd_oc.proto

package schema

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InterfacesInterface struct {
	Interface            []*InterfacesInterfaceInterfaceList `protobuf:"bytes,151,rep,name=interface" json:"interface,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *InterfacesInterface) Reset()         { *m = InterfacesInterface{} }
func (m *InterfacesInterface) String() string { return proto.CompactTextString(m) }
func (*InterfacesInterface) ProtoMessage()    {}
func (*InterfacesInterface) Descriptor() ([]byte, []int) {
	return fileDescriptor_49af152afdbe540c, []int{0}
}
func (m *InterfacesInterface) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesInterface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesInterface.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesInterface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesInterface.Merge(m, src)
}
func (m *InterfacesInterface) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesInterface) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesInterface.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesInterface proto.InternalMessageInfo

func (m *InterfacesInterface) GetInterface() []*InterfacesInterfaceInterfaceList {
	if m != nil {
		return m.Interface
	}
	return nil
}

type InterfacesInterfaceInterfaceList struct {
	Name                 *string                                          `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	Aggregation          *InterfacesInterfaceInterfaceListAggregationType `protobuf:"bytes,151,opt,name=aggregation" json:"aggregation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                         `json:"-"`
	XXX_unrecognized     []byte                                           `json:"-"`
	XXX_sizecache        int32                                            `json:"-"`
}

func (m *InterfacesInterfaceInterfaceList) Reset()         { *m = InterfacesInterfaceInterfaceList{} }
func (m *InterfacesInterfaceInterfaceList) String() string { return proto.CompactTextString(m) }
func (*InterfacesInterfaceInterfaceList) ProtoMessage()    {}
func (*InterfacesInterfaceInterfaceList) Descriptor() ([]byte, []int) {
	return fileDescriptor_49af152afdbe540c, []int{0, 0}
}
func (m *InterfacesInterfaceInterfaceList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesInterfaceInterfaceList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesInterfaceInterfaceList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesInterfaceInterfaceList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesInterfaceInterfaceList.Merge(m, src)
}
func (m *InterfacesInterfaceInterfaceList) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesInterfaceInterfaceList) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesInterfaceInterfaceList.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesInterfaceInterfaceList proto.InternalMessageInfo

func (m *InterfacesInterfaceInterfaceList) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *InterfacesInterfaceInterfaceList) GetAggregation() *InterfacesInterfaceInterfaceListAggregationType {
	if m != nil {
		return m.Aggregation
	}
	return nil
}

type InterfacesInterfaceInterfaceListAggregationType struct {
	State                *InterfacesInterfaceInterfaceListAggregationTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                  `json:"-"`
	XXX_unrecognized     []byte                                                    `json:"-"`
	XXX_sizecache        int32                                                     `json:"-"`
}

func (m *InterfacesInterfaceInterfaceListAggregationType) Reset() {
	*m = InterfacesInterfaceInterfaceListAggregationType{}
}
func (m *InterfacesInterfaceInterfaceListAggregationType) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesInterfaceInterfaceListAggregationType) ProtoMessage() {}
func (*InterfacesInterfaceInterfaceListAggregationType) Descriptor() ([]byte, []int) {
	return fileDescriptor_49af152afdbe540c, []int{0, 0, 0}
}
func (m *InterfacesInterfaceInterfaceListAggregationType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesInterfaceInterfaceListAggregationType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesInterfaceInterfaceListAggregationType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesInterfaceInterfaceListAggregationType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesInterfaceInterfaceListAggregationType.Merge(m, src)
}
func (m *InterfacesInterfaceInterfaceListAggregationType) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesInterfaceInterfaceListAggregationType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesInterfaceInterfaceListAggregationType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesInterfaceInterfaceListAggregationType proto.InternalMessageInfo

func (m *InterfacesInterfaceInterfaceListAggregationType) GetState() *InterfacesInterfaceInterfaceListAggregationTypeStateType {
	if m != nil {
		return m.State
	}
	return nil
}

type InterfacesInterfaceInterfaceListAggregationTypeStateType struct {
	LagType              *string  `protobuf:"bytes,51,opt,name=lag_type,json=lagType" json:"lag_type,omitempty"`
	MinLinks             *uint32  `protobuf:"varint,52,opt,name=min_links,json=minLinks" json:"min_links,omitempty"`
	LagSpeed             *uint32  `protobuf:"varint,53,opt,name=lag_speed,json=lagSpeed" json:"lag_speed,omitempty"`
	Member               []string `protobuf:"bytes,54,rep,name=member" json:"member,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InterfacesInterfaceInterfaceListAggregationTypeStateType) Reset() {
	*m = InterfacesInterfaceInterfaceListAggregationTypeStateType{}
}
func (m *InterfacesInterfaceInterfaceListAggregationTypeStateType) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesInterfaceInterfaceListAggregationTypeStateType) ProtoMessage() {}
func (*InterfacesInterfaceInterfaceListAggregationTypeStateType) Descriptor() ([]byte, []int) {
	return fileDescriptor_49af152afdbe540c, []int{0, 0, 0, 0}
}
func (m *InterfacesInterfaceInterfaceListAggregationTypeStateType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesInterfaceInterfaceListAggregationTypeStateType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesInterfaceInterfaceListAggregationTypeStateType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesInterfaceInterfaceListAggregationTypeStateType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesInterfaceInterfaceListAggregationTypeStateType.Merge(m, src)
}
func (m *InterfacesInterfaceInterfaceListAggregationTypeStateType) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesInterfaceInterfaceListAggregationTypeStateType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesInterfaceInterfaceListAggregationTypeStateType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesInterfaceInterfaceListAggregationTypeStateType proto.InternalMessageInfo

func (m *InterfacesInterfaceInterfaceListAggregationTypeStateType) GetLagType() string {
	if m != nil && m.LagType != nil {
		return *m.LagType
	}
	return ""
}

func (m *InterfacesInterfaceInterfaceListAggregationTypeStateType) GetMinLinks() uint32 {
	if m != nil && m.MinLinks != nil {
		return *m.MinLinks
	}
	return 0
}

func (m *InterfacesInterfaceInterfaceListAggregationTypeStateType) GetLagSpeed() uint32 {
	if m != nil && m.LagSpeed != nil {
		return *m.LagSpeed
	}
	return 0
}

func (m *InterfacesInterfaceInterfaceListAggregationTypeStateType) GetMember() []string {
	if m != nil {
		return m.Member
	}
	return nil
}

var E_JnprInterfacesInterfaceExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*InterfacesInterface)(nil),
	Field:         41,
	Name:          "jnpr_interfaces_interface_ext",
	Tag:           "bytes,41,opt,name=jnpr_interfaces_interface_ext",
	Filename:      "dcd_oc.proto",
}

func init() {
	proto.RegisterType((*InterfacesInterface)(nil), "interfaces_interface")
	proto.RegisterType((*InterfacesInterfaceInterfaceList)(nil), "interfaces_interface.interface_list")
	proto.RegisterType((*InterfacesInterfaceInterfaceListAggregationType)(nil), "interfaces_interface.interface_list.aggregation_type")
	proto.RegisterType((*InterfacesInterfaceInterfaceListAggregationTypeStateType)(nil), "interfaces_interface.interface_list.aggregation_type.state_type")
	proto.RegisterExtension(E_JnprInterfacesInterfaceExt)
}

func init() { proto.RegisterFile("dcd_oc.proto", fileDescriptor_49af152afdbe540c) }

var fileDescriptor_49af152afdbe540c = []byte{
	// 416 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x50, 0x3d, 0x8f, 0xd3, 0x40,
	0x10, 0xd5, 0x5e, 0x38, 0x48, 0x36, 0x80, 0x90, 0xf9, 0xf2, 0x19, 0x11, 0x59, 0x88, 0xc2, 0x14,
	0xb1, 0xa5, 0x83, 0xa3, 0xa0, 0x3a, 0x1d, 0xa2, 0x00, 0x21, 0x8a, 0x3d, 0x24, 0x10, 0xcd, 0xb2,
	0xb1, 0x87, 0xcd, 0x3a, 0xf6, 0xee, 0xb2, 0x3b, 0x07, 0x97, 0x96, 0x3f, 0xc1, 0x5f, 0xa2, 0xa0,
	0xe0, 0x27, 0xa0, 0x14, 0x94, 0xfc, 0x06, 0x64, 0x1b, 0x9c, 0x80, 0x52, 0xa0, 0xeb, 0xe6, 0xbd,
	0x37, 0xef, 0x3d, 0xcd, 0xd0, 0x8b, 0x45, 0x5e, 0x70, 0x93, 0xa7, 0xd6, 0x19, 0x34, 0xd1, 0x55,
	0x84, 0x0a, 0x6a, 0x40, 0xb7, 0xe4, 0x68, 0x6c, 0x47, 0xde, 0xf9, 0x3a, 0xa0, 0xd7, 0x94, 0x46,
	0x70, 0xef, 0x44, 0x0e, 0x9e, 0xf7, 0x63, 0xf0, 0x98, 0x8e, 0x7a, 0x10, 0x7e, 0x26, 0xf1, 0x20,
	0x19, 0xef, 0xdf, 0x4d, 0xb7, 0xad, 0xae, 0x49, 0x5e, 0x29, 0x8f, 0x6c, 0xed, 0x8b, 0x7e, 0xee,
	0xd0, 0xcb, 0x7f, 0xab, 0xc1, 0x1e, 0x3d, 0xa7, 0x45, 0x0d, 0xe1, 0xfd, 0x98, 0x24, 0xa3, 0xa3,
	0xdd, 0x4f, 0x87, 0x3b, 0x43, 0xc2, 0x5a, 0x2a, 0x78, 0x4d, 0xc7, 0x42, 0x4a, 0x07, 0x52, 0xa0,
	0x32, 0xba, 0x29, 0x25, 0xc9, 0x78, 0xff, 0xe0, 0x7f, 0x4a, 0xd3, 0x0d, 0x23, 0xc7, 0xa5, 0x05,
	0xb6, 0x19, 0x15, 0xfd, 0x20, 0xf4, 0xca, 0xbf, 0x1b, 0xc1, 0x2b, 0xba, 0xeb, 0x51, 0x20, 0xfc,
	0x29, 0x3a, 0x3c, 0x53, 0x51, 0xda, 0x66, 0x74, 0x9d, 0x5d, 0x5e, 0xb4, 0xa4, 0x74, 0x4d, 0x06,
	0x7b, 0x74, 0x58, 0x09, 0xd9, 0xce, 0xdd, 0xd1, 0xec, 0x42, 0x25, 0xe4, 0xcb, 0x46, 0xba, 0x45,
	0x47, 0xb5, 0xd2, 0xbc, 0x52, 0x7a, 0xe1, 0xc3, 0x07, 0x31, 0x49, 0x2e, 0xb1, 0x61, 0xad, 0xf4,
	0xf3, 0x06, 0x37, 0x62, 0xe3, 0xf3, 0x16, 0xa0, 0x08, 0x0f, 0x3a, 0xb1, 0x12, 0xf2, 0xb8, 0xc1,
	0xc1, 0x0d, 0x7a, 0xbe, 0x86, 0x7a, 0x06, 0x2e, 0x7c, 0x18, 0x0f, 0x92, 0x11, 0xfb, 0x8d, 0x1e,
	0xbd, 0xa7, 0xb7, 0x4b, 0x6d, 0x1d, 0xdf, 0x76, 0x09, 0x87, 0x53, 0x0c, 0x6e, 0xa6, 0xcf, 0x4e,
	0xb4, 0xb2, 0xe0, 0x5e, 0x00, 0x7e, 0x34, 0x6e, 0xe1, 0x8f, 0x41, 0x7b, 0xe3, 0x7c, 0x78, 0xaf,
	0xfd, 0xc1, 0xf5, 0xad, 0x3f, 0x60, 0x51, 0x13, 0xfa, 0xb4, 0x57, 0xfa, 0xe9, 0xc9, 0x29, 0x1e,
	0xbd, 0xfd, 0xb2, 0x9a, 0x90, 0x6f, 0xab, 0x09, 0xf9, 0xbe, 0x9a, 0x90, 0x37, 0x4c, 0x2a, 0x4c,
	0xcb, 0xae, 0x22, 0xd5, 0x80, 0x99, 0xca, 0x61, 0x06, 0x4e, 0x66, 0x73, 0x10, 0x15, 0xce, 0x67,
	0x06, 0xa7, 0x4a, 0x4b, 0xf0, 0x38, 0x2d, 0x51, 0x4d, 0xb5, 0x40, 0xf5, 0x01, 0x32, 0xbb, 0x90,
	0x59, 0x89, 0x2a, 0x13, 0x85, 0xb0, 0x08, 0xce, 0x67, 0xbc, 0x3c, 0xd1, 0xc6, 0x67, 0x3e, 0x9f,
	0x43, 0x2d, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0x37, 0x7b, 0x55, 0x55, 0xc7, 0x02, 0x00, 0x00,
}

func (m *InterfacesInterface) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesInterface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesInterface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Interface) > 0 {
		for iNdEx := len(m.Interface) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Interface[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDcdOc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesInterfaceInterfaceList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesInterfaceInterfaceList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesInterfaceInterfaceList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Aggregation != nil {
		{
			size, err := m.Aggregation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDcdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintDcdOc(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesInterfaceInterfaceListAggregationType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesInterfaceInterfaceListAggregationType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesInterfaceInterfaceListAggregationType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDcdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesInterfaceInterfaceListAggregationTypeStateType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesInterfaceInterfaceListAggregationTypeStateType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesInterfaceInterfaceListAggregationTypeStateType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Member) > 0 {
		for iNdEx := len(m.Member) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Member[iNdEx])
			copy(dAtA[i:], m.Member[iNdEx])
			i = encodeVarintDcdOc(dAtA, i, uint64(len(m.Member[iNdEx])))
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xb2
		}
	}
	if m.LagSpeed != nil {
		i = encodeVarintDcdOc(dAtA, i, uint64(*m.LagSpeed))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.MinLinks != nil {
		i = encodeVarintDcdOc(dAtA, i, uint64(*m.MinLinks))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.LagType != nil {
		i -= len(*m.LagType)
		copy(dAtA[i:], *m.LagType)
		i = encodeVarintDcdOc(dAtA, i, uint64(len(*m.LagType)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func encodeVarintDcdOc(dAtA []byte, offset int, v uint64) int {
	offset -= sovDcdOc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InterfacesInterface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Interface) > 0 {
		for _, e := range m.Interface {
			l = e.Size()
			n += 2 + l + sovDcdOc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesInterfaceInterfaceList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 2 + l + sovDcdOc(uint64(l))
	}
	if m.Aggregation != nil {
		l = m.Aggregation.Size()
		n += 2 + l + sovDcdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesInterfaceInterfaceListAggregationType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 2 + l + sovDcdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesInterfaceInterfaceListAggregationTypeStateType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LagType != nil {
		l = len(*m.LagType)
		n += 2 + l + sovDcdOc(uint64(l))
	}
	if m.MinLinks != nil {
		n += 2 + sovDcdOc(uint64(*m.MinLinks))
	}
	if m.LagSpeed != nil {
		n += 2 + sovDcdOc(uint64(*m.LagSpeed))
	}
	if len(m.Member) > 0 {
		for _, s := range m.Member {
			l = len(s)
			n += 2 + l + sovDcdOc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDcdOc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDcdOc(x uint64) (n int) {
	return sovDcdOc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InterfacesInterface) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDcdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: interfaces_interface: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: interfaces_interface: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDcdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDcdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDcdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interface = append(m.Interface, &InterfacesInterfaceInterfaceList{})
			if err := m.Interface[len(m.Interface)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDcdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDcdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDcdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesInterfaceInterfaceList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDcdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: interface_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: interface_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDcdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDcdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDcdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aggregation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDcdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDcdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDcdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Aggregation == nil {
				m.Aggregation = &InterfacesInterfaceInterfaceListAggregationType{}
			}
			if err := m.Aggregation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDcdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDcdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDcdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesInterfaceInterfaceListAggregationType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDcdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: aggregation_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: aggregation_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDcdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDcdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDcdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &InterfacesInterfaceInterfaceListAggregationTypeStateType{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDcdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDcdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDcdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesInterfaceInterfaceListAggregationTypeStateType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDcdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: state_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: state_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LagType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDcdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDcdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDcdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LagType = &s
			iNdEx = postIndex
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLinks", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDcdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinLinks = &v
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LagSpeed", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDcdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LagSpeed = &v
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Member", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDcdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDcdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDcdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Member = append(m.Member, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDcdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDcdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDcdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDcdOc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDcdOc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDcdOc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDcdOc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDcdOc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDcdOc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDcdOc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDcdOc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDcdOc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDcdOc = fmt.Errorf("proto: unexpected end of group")
)
