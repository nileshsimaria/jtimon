// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fabric.proto

package schema

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FabricMessageSensorLocation int32

const (
	FabricMessage_Linecard      FabricMessageSensorLocation = 1
	FabricMessage_Switch_Fabric FabricMessageSensorLocation = 2
)

var FabricMessageSensorLocation_name = map[int32]string{
	1: "Linecard",
	2: "Switch_Fabric",
}

var FabricMessageSensorLocation_value = map[string]int32{
	"Linecard":      1,
	"Switch_Fabric": 2,
}

func (x FabricMessageSensorLocation) Enum() *FabricMessageSensorLocation {
	p := new(FabricMessageSensorLocation)
	*p = x
	return p
}

func (x FabricMessageSensorLocation) String() string {
	return proto.EnumName(FabricMessageSensorLocation_name, int32(x))
}

func (x *FabricMessageSensorLocation) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FabricMessageSensorLocation_value, data, "FabricMessageSensorLocation")
	if err != nil {
		return err
	}
	*x = FabricMessageSensorLocation(value)
	return nil
}

func (FabricMessageSensorLocation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_284efff686d8e9bf, []int{0, 0}
}

type EdgeStatsIdentifierType int32

const (
	EdgeStats_Switch_Fabric EdgeStatsIdentifierType = 1
	EdgeStats_Linecard      EdgeStatsIdentifierType = 2
)

var EdgeStatsIdentifierType_name = map[int32]string{
	1: "Switch_Fabric",
	2: "Linecard",
}

var EdgeStatsIdentifierType_value = map[string]int32{
	"Switch_Fabric": 1,
	"Linecard":      2,
}

func (x EdgeStatsIdentifierType) Enum() *EdgeStatsIdentifierType {
	p := new(EdgeStatsIdentifierType)
	*p = x
	return p
}

func (x EdgeStatsIdentifierType) String() string {
	return proto.EnumName(EdgeStatsIdentifierType_name, int32(x))
}

func (x *EdgeStatsIdentifierType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EdgeStatsIdentifierType_value, data, "EdgeStatsIdentifierType")
	if err != nil {
		return err
	}
	*x = EdgeStatsIdentifierType(value)
	return nil
}

func (EdgeStatsIdentifierType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_284efff686d8e9bf, []int{1, 0}
}

type FabricMessage struct {
	Edges                []*EdgeStats                 `protobuf:"bytes,1,rep,name=edges" json:"edges,omitempty"`
	Location             *FabricMessageSensorLocation `protobuf:"varint,2,opt,name=location,enum=FabricMessageSensorLocation" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *FabricMessage) Reset()         { *m = FabricMessage{} }
func (m *FabricMessage) String() string { return proto.CompactTextString(m) }
func (*FabricMessage) ProtoMessage()    {}
func (*FabricMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_284efff686d8e9bf, []int{0}
}
func (m *FabricMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FabricMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FabricMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FabricMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FabricMessage.Merge(m, src)
}
func (m *FabricMessage) XXX_Size() int {
	return m.Size()
}
func (m *FabricMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_FabricMessage.DiscardUnknown(m)
}

var xxx_messageInfo_FabricMessage proto.InternalMessageInfo

func (m *FabricMessage) GetEdges() []*EdgeStats {
	if m != nil {
		return m.Edges
	}
	return nil
}

func (m *FabricMessage) GetLocation() FabricMessageSensorLocation {
	if m != nil && m.Location != nil {
		return *m.Location
	}
	return FabricMessage_Linecard
}

type EdgeStats struct {
	SourceType      *EdgeStatsIdentifierType `protobuf:"varint,1,opt,name=source_type,json=sourceType,enum=EdgeStatsIdentifierType" json:"source_type,omitempty"`
	SourceSlot      *uint32                  `protobuf:"varint,2,opt,name=source_slot,json=sourceSlot" json:"source_slot,omitempty"`
	SourcePfe       *uint32                  `protobuf:"varint,3,opt,name=source_pfe,json=sourcePfe" json:"source_pfe,omitempty"`
	DestinationType *EdgeStatsIdentifierType `protobuf:"varint,4,opt,name=destination_type,json=destinationType,enum=EdgeStatsIdentifierType" json:"destination_type,omitempty"`
	DestinationSlot *uint32                  `protobuf:"varint,5,opt,name=destination_slot,json=destinationSlot" json:"destination_slot,omitempty"`
	DestinationPfe  *uint32                  `protobuf:"varint,6,opt,name=destination_pfe,json=destinationPfe" json:"destination_pfe,omitempty"`
	// stats from src's perspective
	ClassStats           []*ClassStats `protobuf:"bytes,7,rep,name=class_stats,json=classStats" json:"class_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *EdgeStats) Reset()         { *m = EdgeStats{} }
func (m *EdgeStats) String() string { return proto.CompactTextString(m) }
func (*EdgeStats) ProtoMessage()    {}
func (*EdgeStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_284efff686d8e9bf, []int{1}
}
func (m *EdgeStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EdgeStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EdgeStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EdgeStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EdgeStats.Merge(m, src)
}
func (m *EdgeStats) XXX_Size() int {
	return m.Size()
}
func (m *EdgeStats) XXX_DiscardUnknown() {
	xxx_messageInfo_EdgeStats.DiscardUnknown(m)
}

var xxx_messageInfo_EdgeStats proto.InternalMessageInfo

func (m *EdgeStats) GetSourceType() EdgeStatsIdentifierType {
	if m != nil && m.SourceType != nil {
		return *m.SourceType
	}
	return EdgeStats_Switch_Fabric
}

func (m *EdgeStats) GetSourceSlot() uint32 {
	if m != nil && m.SourceSlot != nil {
		return *m.SourceSlot
	}
	return 0
}

func (m *EdgeStats) GetSourcePfe() uint32 {
	if m != nil && m.SourcePfe != nil {
		return *m.SourcePfe
	}
	return 0
}

func (m *EdgeStats) GetDestinationType() EdgeStatsIdentifierType {
	if m != nil && m.DestinationType != nil {
		return *m.DestinationType
	}
	return EdgeStats_Switch_Fabric
}

func (m *EdgeStats) GetDestinationSlot() uint32 {
	if m != nil && m.DestinationSlot != nil {
		return *m.DestinationSlot
	}
	return 0
}

func (m *EdgeStats) GetDestinationPfe() uint32 {
	if m != nil && m.DestinationPfe != nil {
		return *m.DestinationPfe
	}
	return 0
}

func (m *EdgeStats) GetClassStats() []*ClassStats {
	if m != nil {
		return m.ClassStats
	}
	return nil
}

type ClassStats struct {
	// service class, 0 being highest
	Priority *string `protobuf:"bytes,1,opt,name=priority" json:"priority,omitempty"`
	// transmit data from src to dst
	TransmitCounts       *Counters `protobuf:"bytes,2,opt,name=transmit_counts,json=transmitCounts" json:"transmit_counts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ClassStats) Reset()         { *m = ClassStats{} }
func (m *ClassStats) String() string { return proto.CompactTextString(m) }
func (*ClassStats) ProtoMessage()    {}
func (*ClassStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_284efff686d8e9bf, []int{2}
}
func (m *ClassStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClassStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClassStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClassStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClassStats.Merge(m, src)
}
func (m *ClassStats) XXX_Size() int {
	return m.Size()
}
func (m *ClassStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ClassStats.DiscardUnknown(m)
}

var xxx_messageInfo_ClassStats proto.InternalMessageInfo

func (m *ClassStats) GetPriority() string {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return ""
}

func (m *ClassStats) GetTransmitCounts() *Counters {
	if m != nil {
		return m.TransmitCounts
	}
	return nil
}

type Counters struct {
	// Counter: total packets/cells from this source->destination
	Packets *uint64 `protobuf:"varint,1,opt,name=packets" json:"packets,omitempty"`
	// Counter: total bytes from this source->destination
	Bytes *uint64 `protobuf:"varint,2,opt,name=bytes" json:"bytes,omitempty"`
	// Rate: packets/cells per seconds, measured across an interval of 1 second.
	PacketsPerSecond *uint64 `protobuf:"varint,3,opt,name=packets_per_second,json=packetsPerSecond" json:"packets_per_second,omitempty"`
	// Rate: bits per seconds, measured across an interval of 1 second.
	BytesPerSecond *uint64 `protobuf:"varint,4,opt,name=bytes_per_second,json=bytesPerSecond" json:"bytes_per_second,omitempty"`
	// Counter: total number of dropped packets/cells from this source->destination
	DropPackets *uint64 `protobuf:"varint,5,opt,name=drop_packets,json=dropPackets" json:"drop_packets,omitempty"`
	// Counter: total number of dropped bytes from this source->destination
	DropBytes *uint64 `protobuf:"varint,6,opt,name=drop_bytes,json=dropBytes" json:"drop_bytes,omitempty"`
	// Rate: the rate at which packets/cells are dropped, in pps/cps, measured
	// across an interval of 1 second.
	DropPacketsPerSecond *uint64 `protobuf:"varint,7,opt,name=drop_packets_per_second,json=dropPacketsPerSecond" json:"drop_packets_per_second,omitempty"`
	// Rate: the rate at which bytes are dropped, in bytes per sec, measured
	// across an interval of 1 second.
	DropBytesPerSecond *uint64 `protobuf:"varint,8,opt,name=drop_bytes_per_second,json=dropBytesPerSecond" json:"drop_bytes_per_second,omitempty"`
	// Average: avg queue depth,TAQL:time-average-queue-len, in packets
	QueueDepthAverage *uint64 `protobuf:"varint,9,opt,name=queue_depth_average,json=queueDepthAverage" json:"queue_depth_average,omitempty"`
	// Gauge: current queue depth, in packets
	QueueDepthCurrent *uint64 `protobuf:"varint,10,opt,name=queue_depth_current,json=queueDepthCurrent" json:"queue_depth_current,omitempty"`
	// Peak: the max measured queue depth, in packets, across all measurements since boot.
	QueueDepthPeak *uint64 `protobuf:"varint,11,opt,name=queue_depth_peak,json=queueDepthPeak" json:"queue_depth_peak,omitempty"`
	// The configured maximum depth of the queue, in packets
	QueueDepthMaximum *uint64 `protobuf:"varint,12,opt,name=queue_depth_maximum,json=queueDepthMaximum" json:"queue_depth_maximum,omitempty"`
	// Counter: total number of errored packets
	ErrorPackets *uint64 `protobuf:"varint,13,opt,name=error_packets,json=errorPackets" json:"error_packets,omitempty"`
	// Rate: the rate of errored packets, in pps, measured across an interval of 1 second.
	ErrorPacketsPerSecond *uint64  `protobuf:"varint,14,opt,name=error_packets_per_second,json=errorPacketsPerSecond" json:"error_packets_per_second,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *Counters) Reset()         { *m = Counters{} }
func (m *Counters) String() string { return proto.CompactTextString(m) }
func (*Counters) ProtoMessage()    {}
func (*Counters) Descriptor() ([]byte, []int) {
	return fileDescriptor_284efff686d8e9bf, []int{3}
}
func (m *Counters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Counters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Counters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Counters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Counters.Merge(m, src)
}
func (m *Counters) XXX_Size() int {
	return m.Size()
}
func (m *Counters) XXX_DiscardUnknown() {
	xxx_messageInfo_Counters.DiscardUnknown(m)
}

var xxx_messageInfo_Counters proto.InternalMessageInfo

func (m *Counters) GetPackets() uint64 {
	if m != nil && m.Packets != nil {
		return *m.Packets
	}
	return 0
}

func (m *Counters) GetBytes() uint64 {
	if m != nil && m.Bytes != nil {
		return *m.Bytes
	}
	return 0
}

func (m *Counters) GetPacketsPerSecond() uint64 {
	if m != nil && m.PacketsPerSecond != nil {
		return *m.PacketsPerSecond
	}
	return 0
}

func (m *Counters) GetBytesPerSecond() uint64 {
	if m != nil && m.BytesPerSecond != nil {
		return *m.BytesPerSecond
	}
	return 0
}

func (m *Counters) GetDropPackets() uint64 {
	if m != nil && m.DropPackets != nil {
		return *m.DropPackets
	}
	return 0
}

func (m *Counters) GetDropBytes() uint64 {
	if m != nil && m.DropBytes != nil {
		return *m.DropBytes
	}
	return 0
}

func (m *Counters) GetDropPacketsPerSecond() uint64 {
	if m != nil && m.DropPacketsPerSecond != nil {
		return *m.DropPacketsPerSecond
	}
	return 0
}

func (m *Counters) GetDropBytesPerSecond() uint64 {
	if m != nil && m.DropBytesPerSecond != nil {
		return *m.DropBytesPerSecond
	}
	return 0
}

func (m *Counters) GetQueueDepthAverage() uint64 {
	if m != nil && m.QueueDepthAverage != nil {
		return *m.QueueDepthAverage
	}
	return 0
}

func (m *Counters) GetQueueDepthCurrent() uint64 {
	if m != nil && m.QueueDepthCurrent != nil {
		return *m.QueueDepthCurrent
	}
	return 0
}

func (m *Counters) GetQueueDepthPeak() uint64 {
	if m != nil && m.QueueDepthPeak != nil {
		return *m.QueueDepthPeak
	}
	return 0
}

func (m *Counters) GetQueueDepthMaximum() uint64 {
	if m != nil && m.QueueDepthMaximum != nil {
		return *m.QueueDepthMaximum
	}
	return 0
}

func (m *Counters) GetErrorPackets() uint64 {
	if m != nil && m.ErrorPackets != nil {
		return *m.ErrorPackets
	}
	return 0
}

func (m *Counters) GetErrorPacketsPerSecond() uint64 {
	if m != nil && m.ErrorPacketsPerSecond != nil {
		return *m.ErrorPacketsPerSecond
	}
	return 0
}

var E_FabricMessageExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*FabricMessage)(nil),
	Field:         2,
	Name:          "fabricMessageExt",
	Tag:           "bytes,2,opt,name=fabricMessageExt",
	Filename:      "fabric.proto",
}

func init() {
	proto.RegisterEnum("FabricMessageSensorLocation", FabricMessageSensorLocation_name, FabricMessageSensorLocation_value)
	proto.RegisterEnum("EdgeStatsIdentifierType", EdgeStatsIdentifierType_name, EdgeStatsIdentifierType_value)
	proto.RegisterType((*FabricMessage)(nil), "fabric_message")
	proto.RegisterType((*EdgeStats)(nil), "edge_stats")
	proto.RegisterType((*ClassStats)(nil), "class_stats")
	proto.RegisterType((*Counters)(nil), "counters")
	proto.RegisterExtension(E_FabricMessageExt)
}

func init() { proto.RegisterFile("fabric.proto", fileDescriptor_284efff686d8e9bf) }

var fileDescriptor_284efff686d8e9bf = []byte{
	// 742 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xcb, 0x6e, 0xfb, 0x44,
	0x14, 0xc6, 0xe5, 0xb4, 0x69, 0x93, 0x93, 0x6b, 0xa7, 0x54, 0xb5, 0xa8, 0xd4, 0x4b, 0x54, 0xa1,
	0x0a, 0x29, 0x36, 0x0a, 0x42, 0x42, 0x08, 0x21, 0x48, 0x81, 0x05, 0xa2, 0x28, 0x72, 0xba, 0x62,
	0x63, 0x26, 0xf6, 0x49, 0x32, 0xb9, 0x78, 0xcc, 0xcc, 0xb8, 0x6d, 0xb6, 0xbc, 0x0e, 0x4b, 0x36,
	0x3c, 0x02, 0x4b, 0x1e, 0x01, 0xf5, 0x49, 0x90, 0x67, 0xe2, 0x64, 0x92, 0xaa, 0xd2, 0x7f, 0xd7,
	0x39, 0xdf, 0xf7, 0x9d, 0xf3, 0xcb, 0x9c, 0x7a, 0xa0, 0x3e, 0xa6, 0x23, 0xc1, 0x22, 0x2f, 0x15,
	0x5c, 0xf1, 0x8f, 0x4f, 0x15, 0x2e, 0x70, 0x89, 0x4a, 0xac, 0x42, 0xc5, 0x53, 0x53, 0xec, 0xfc,
	0xe9, 0x40, 0xd3, 0xb8, 0xc2, 0x25, 0x4a, 0x49, 0x27, 0x48, 0x6e, 0xa0, 0x8c, 0xf1, 0x04, 0xa5,
	0xeb, 0x5c, 0x1f, 0xdc, 0xd5, 0x7a, 0x35, 0x2f, 0x3f, 0x85, 0x52, 0x51, 0x25, 0x03, 0xa3, 0x90,
	0x3e, 0x54, 0x16, 0x3c, 0xa2, 0x8a, 0xf1, 0xc4, 0x2d, 0x5d, 0x3b, 0x77, 0xcd, 0xde, 0x95, 0xb7,
	0xdb, 0xc5, 0x93, 0x98, 0x48, 0x2e, 0xc2, 0xc2, 0xd6, 0x2f, 0xff, 0xf1, 0x6d, 0xa9, 0xe2, 0x04,
	0x9b, 0x5c, 0xa7, 0x07, 0xad, 0x3d, 0x0f, 0xa9, 0x43, 0xe5, 0x67, 0x96, 0x60, 0x44, 0x45, 0xdc,
	0x76, 0xc8, 0x09, 0x34, 0x86, 0xcf, 0x4c, 0x45, 0xd3, 0xf0, 0x47, 0xdd, 0xba, 0x5d, 0xea, 0xfc,
	0x75, 0x00, 0xb0, 0xa5, 0x21, 0xf7, 0x50, 0x93, 0x3c, 0x13, 0x11, 0x86, 0x6a, 0x95, 0xa2, 0xeb,
	0x68, 0x92, 0x0b, 0x8b, 0xd7, 0x63, 0x31, 0x26, 0x8a, 0x8d, 0x19, 0x0a, 0x6d, 0x29, 0x28, 0xc0,
	0xc4, 0x1e, 0x57, 0x29, 0x92, 0x4f, 0x36, 0x4d, 0xe4, 0x82, 0x2b, 0xfd, 0x73, 0x1a, 0x7b, 0xbe,
	0xe1, 0x82, 0x2b, 0x72, 0x0b, 0xeb, 0x53, 0x98, 0x8e, 0xd1, 0x3d, 0xb0, 0x6d, 0x55, 0x23, 0x0c,
	0xc6, 0x48, 0x1e, 0xa0, 0x1d, 0xa3, 0x54, 0x2c, 0xd1, 0xbf, 0xc8, 0x70, 0x1d, 0x7e, 0x30, 0x57,
	0xcb, 0xca, 0x6a, 0xb8, 0xcf, 0x76, 0xdb, 0x69, 0xc2, 0xb2, 0x3d, 0xda, 0x4e, 0x68, 0x4c, 0x0f,
	0xec, 0x92, 0x66, 0x3d, 0xb2, 0x03, 0x4d, 0x4b, 0xcd, 0x81, 0xbb, 0x50, 0x8b, 0x16, 0x54, 0x4a,
	0x03, 0xe6, 0x1e, 0xeb, 0x9d, 0xd7, 0x3d, 0xab, 0x16, 0x80, 0x3e, 0x0c, 0xf3, 0xbf, 0xf3, 0xad,
	0xed, 0xb1, 0xbf, 0xdd, 0x93, 0xb3, 0xb3, 0xc8, 0x52, 0x27, 0xde, 0x19, 0x41, 0x6e, 0xa0, 0x92,
	0x0a, 0xc6, 0x05, 0x53, 0x2b, 0xbd, 0xb2, 0xea, 0xe6, 0x7f, 0xa3, 0x28, 0x93, 0x1e, 0xb4, 0x94,
	0xa0, 0x89, 0x5c, 0x32, 0x15, 0x46, 0x3c, 0x4b, 0x94, 0xd4, 0x7b, 0xa9, 0xf5, 0xaa, 0x9e, 0x3e,
	0xa2, 0x90, 0x41, 0xb3, 0x70, 0xdc, 0x6b, 0x43, 0xe7, 0xef, 0x32, 0x54, 0x0a, 0x91, 0x5c, 0xc1,
	0x71, 0x4a, 0xa3, 0x39, 0x2a, 0xa9, 0x47, 0x1c, 0xea, 0x11, 0xae, 0x13, 0x14, 0x55, 0x72, 0x01,
	0xe5, 0xd1, 0x4a, 0xa1, 0xe9, 0xbb, 0x91, 0x4d, 0x8d, 0x7c, 0x0e, 0x64, 0xed, 0x0b, 0x53, 0x14,
	0xa1, 0xc4, 0x88, 0x27, 0xb1, 0x5e, 0xb9, 0x71, 0x5e, 0x3b, 0x41, 0x7b, 0x6d, 0x18, 0xa0, 0x18,
	0x6a, 0x99, 0xf8, 0xd0, 0xd6, 0x69, 0x3b, 0x72, 0x68, 0x47, 0x9a, 0x5a, 0xde, 0x06, 0xee, 0xa0,
	0x1e, 0x0b, 0x9e, 0x86, 0x05, 0x68, 0xd9, 0x26, 0xa9, 0xe5, 0xd2, 0x60, 0x0d, 0x7b, 0x0b, 0xa0,
	0x9d, 0x86, 0xf8, 0xc8, 0xf6, 0x55, 0x73, 0xa1, 0xaf, 0xa9, 0xbf, 0x86, 0x73, 0xbb, 0x9f, 0xcd,
	0x71, 0x6c, 0x73, 0x7c, 0x64, 0xb5, 0xde, 0xd2, 0x7c, 0x09, 0x67, 0xdb, 0x19, 0x76, 0xb6, 0x62,
	0x67, 0xc9, 0x66, 0xdc, 0x36, 0xf9, 0x05, 0x9c, 0xfe, 0x9e, 0x61, 0x86, 0x61, 0x8c, 0xa9, 0x9a,
	0x86, 0xf4, 0x09, 0x05, 0x9d, 0xa0, 0x5b, 0xb5, 0x73, 0x27, 0xda, 0xf1, 0x7d, 0x6e, 0xf8, 0xce,
	0xe8, 0xfb, 0xb1, 0x28, 0x13, 0x02, 0x13, 0xe5, 0xc2, 0x3b, 0xb1, 0x7b, 0xa3, 0xe7, 0xd7, 0x6c,
	0xc7, 0x52, 0xa4, 0x73, 0xb7, 0xb6, 0x73, 0xcd, 0xdb, 0xcc, 0x00, 0xe9, 0x7c, 0x7f, 0xce, 0x92,
	0xbe, 0xb0, 0x65, 0xb6, 0x74, 0xeb, 0xef, 0xcc, 0x79, 0x30, 0x3a, 0xf9, 0x14, 0x1a, 0x28, 0x04,
	0x17, 0x9b, 0xf5, 0x34, 0xec, 0x6b, 0xaf, 0x6b, 0xad, 0xd8, 0xcf, 0x37, 0xe0, 0xee, 0x78, 0xed,
	0xeb, 0x6b, 0xda, 0x73, 0xce, 0xec, 0xd8, 0xe6, 0x06, 0xbf, 0x7a, 0x84, 0xb6, 0x79, 0x3d, 0x1f,
	0xcc, 0xe3, 0xf9, 0xc3, 0x8b, 0x22, 0xe7, 0xde, 0x4f, 0x59, 0xc2, 0x52, 0x14, 0xbf, 0xa0, 0x7a,
	0xe6, 0x62, 0x2e, 0x87, 0xfa, 0xb1, 0x2c, 0x3e, 0x84, 0xd6, 0xde, 0x7b, 0x1b, 0xbc, 0xe9, 0xd0,
	0xff, 0xed, 0x9f, 0xd7, 0x4b, 0xe7, 0xdf, 0xd7, 0x4b, 0xe7, 0xbf, 0xd7, 0x4b, 0xe7, 0xd7, 0x60,
	0xc2, 0x94, 0x37, 0x33, 0x2d, 0xbd, 0x04, 0x95, 0xcf, 0x22, 0x1c, 0xa1, 0x98, 0xf8, 0x53, 0xa4,
	0x0b, 0x35, 0x1d, 0x71, 0xd5, 0x65, 0xc9, 0x04, 0xa5, 0xea, 0xce, 0x14, 0xeb, 0xe6, 0xef, 0xc3,
	0x13, 0xfa, 0xe9, 0x7c, 0xe2, 0xcf, 0x14, 0xf3, 0x69, 0x4c, 0xd3, 0xfc, 0xbb, 0xf2, 0xc3, 0x59,
	0x96, 0x70, 0xe9, 0xcb, 0x68, 0x8a, 0x4b, 0xfa, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8f, 0x54,
	0xa4, 0x3d, 0x60, 0x06, 0x00, 0x00,
}

func (m *FabricMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FabricMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FabricMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Location != nil {
		i = encodeVarintFabric(dAtA, i, uint64(*m.Location))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Edges) > 0 {
		for iNdEx := len(m.Edges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Edges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFabric(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EdgeStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EdgeStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EdgeStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ClassStats) > 0 {
		for iNdEx := len(m.ClassStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClassStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFabric(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.DestinationPfe != nil {
		i = encodeVarintFabric(dAtA, i, uint64(*m.DestinationPfe))
		i--
		dAtA[i] = 0x30
	}
	if m.DestinationSlot != nil {
		i = encodeVarintFabric(dAtA, i, uint64(*m.DestinationSlot))
		i--
		dAtA[i] = 0x28
	}
	if m.DestinationType != nil {
		i = encodeVarintFabric(dAtA, i, uint64(*m.DestinationType))
		i--
		dAtA[i] = 0x20
	}
	if m.SourcePfe != nil {
		i = encodeVarintFabric(dAtA, i, uint64(*m.SourcePfe))
		i--
		dAtA[i] = 0x18
	}
	if m.SourceSlot != nil {
		i = encodeVarintFabric(dAtA, i, uint64(*m.SourceSlot))
		i--
		dAtA[i] = 0x10
	}
	if m.SourceType != nil {
		i = encodeVarintFabric(dAtA, i, uint64(*m.SourceType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClassStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClassStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClassStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TransmitCounts != nil {
		{
			size, err := m.TransmitCounts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFabric(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Priority != nil {
		i -= len(*m.Priority)
		copy(dAtA[i:], *m.Priority)
		i = encodeVarintFabric(dAtA, i, uint64(len(*m.Priority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Counters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Counters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Counters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ErrorPacketsPerSecond != nil {
		i = encodeVarintFabric(dAtA, i, uint64(*m.ErrorPacketsPerSecond))
		i--
		dAtA[i] = 0x70
	}
	if m.ErrorPackets != nil {
		i = encodeVarintFabric(dAtA, i, uint64(*m.ErrorPackets))
		i--
		dAtA[i] = 0x68
	}
	if m.QueueDepthMaximum != nil {
		i = encodeVarintFabric(dAtA, i, uint64(*m.QueueDepthMaximum))
		i--
		dAtA[i] = 0x60
	}
	if m.QueueDepthPeak != nil {
		i = encodeVarintFabric(dAtA, i, uint64(*m.QueueDepthPeak))
		i--
		dAtA[i] = 0x58
	}
	if m.QueueDepthCurrent != nil {
		i = encodeVarintFabric(dAtA, i, uint64(*m.QueueDepthCurrent))
		i--
		dAtA[i] = 0x50
	}
	if m.QueueDepthAverage != nil {
		i = encodeVarintFabric(dAtA, i, uint64(*m.QueueDepthAverage))
		i--
		dAtA[i] = 0x48
	}
	if m.DropBytesPerSecond != nil {
		i = encodeVarintFabric(dAtA, i, uint64(*m.DropBytesPerSecond))
		i--
		dAtA[i] = 0x40
	}
	if m.DropPacketsPerSecond != nil {
		i = encodeVarintFabric(dAtA, i, uint64(*m.DropPacketsPerSecond))
		i--
		dAtA[i] = 0x38
	}
	if m.DropBytes != nil {
		i = encodeVarintFabric(dAtA, i, uint64(*m.DropBytes))
		i--
		dAtA[i] = 0x30
	}
	if m.DropPackets != nil {
		i = encodeVarintFabric(dAtA, i, uint64(*m.DropPackets))
		i--
		dAtA[i] = 0x28
	}
	if m.BytesPerSecond != nil {
		i = encodeVarintFabric(dAtA, i, uint64(*m.BytesPerSecond))
		i--
		dAtA[i] = 0x20
	}
	if m.PacketsPerSecond != nil {
		i = encodeVarintFabric(dAtA, i, uint64(*m.PacketsPerSecond))
		i--
		dAtA[i] = 0x18
	}
	if m.Bytes != nil {
		i = encodeVarintFabric(dAtA, i, uint64(*m.Bytes))
		i--
		dAtA[i] = 0x10
	}
	if m.Packets != nil {
		i = encodeVarintFabric(dAtA, i, uint64(*m.Packets))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFabric(dAtA []byte, offset int, v uint64) int {
	offset -= sovFabric(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FabricMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Edges) > 0 {
		for _, e := range m.Edges {
			l = e.Size()
			n += 1 + l + sovFabric(uint64(l))
		}
	}
	if m.Location != nil {
		n += 1 + sovFabric(uint64(*m.Location))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EdgeStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceType != nil {
		n += 1 + sovFabric(uint64(*m.SourceType))
	}
	if m.SourceSlot != nil {
		n += 1 + sovFabric(uint64(*m.SourceSlot))
	}
	if m.SourcePfe != nil {
		n += 1 + sovFabric(uint64(*m.SourcePfe))
	}
	if m.DestinationType != nil {
		n += 1 + sovFabric(uint64(*m.DestinationType))
	}
	if m.DestinationSlot != nil {
		n += 1 + sovFabric(uint64(*m.DestinationSlot))
	}
	if m.DestinationPfe != nil {
		n += 1 + sovFabric(uint64(*m.DestinationPfe))
	}
	if len(m.ClassStats) > 0 {
		for _, e := range m.ClassStats {
			l = e.Size()
			n += 1 + l + sovFabric(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClassStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Priority != nil {
		l = len(*m.Priority)
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.TransmitCounts != nil {
		l = m.TransmitCounts.Size()
		n += 1 + l + sovFabric(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Counters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Packets != nil {
		n += 1 + sovFabric(uint64(*m.Packets))
	}
	if m.Bytes != nil {
		n += 1 + sovFabric(uint64(*m.Bytes))
	}
	if m.PacketsPerSecond != nil {
		n += 1 + sovFabric(uint64(*m.PacketsPerSecond))
	}
	if m.BytesPerSecond != nil {
		n += 1 + sovFabric(uint64(*m.BytesPerSecond))
	}
	if m.DropPackets != nil {
		n += 1 + sovFabric(uint64(*m.DropPackets))
	}
	if m.DropBytes != nil {
		n += 1 + sovFabric(uint64(*m.DropBytes))
	}
	if m.DropPacketsPerSecond != nil {
		n += 1 + sovFabric(uint64(*m.DropPacketsPerSecond))
	}
	if m.DropBytesPerSecond != nil {
		n += 1 + sovFabric(uint64(*m.DropBytesPerSecond))
	}
	if m.QueueDepthAverage != nil {
		n += 1 + sovFabric(uint64(*m.QueueDepthAverage))
	}
	if m.QueueDepthCurrent != nil {
		n += 1 + sovFabric(uint64(*m.QueueDepthCurrent))
	}
	if m.QueueDepthPeak != nil {
		n += 1 + sovFabric(uint64(*m.QueueDepthPeak))
	}
	if m.QueueDepthMaximum != nil {
		n += 1 + sovFabric(uint64(*m.QueueDepthMaximum))
	}
	if m.ErrorPackets != nil {
		n += 1 + sovFabric(uint64(*m.ErrorPackets))
	}
	if m.ErrorPacketsPerSecond != nil {
		n += 1 + sovFabric(uint64(*m.ErrorPacketsPerSecond))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovFabric(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFabric(x uint64) (n int) {
	return sovFabric(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FabricMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: fabric_message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: fabric_message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Edges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Edges = append(m.Edges, &EdgeStats{})
			if err := m.Edges[len(m.Edges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var v FabricMessageSensorLocation
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= FabricMessageSensorLocation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Location = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EdgeStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: edge_stats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: edge_stats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			var v EdgeStatsIdentifierType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= EdgeStatsIdentifierType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SourceType = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceSlot", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SourceSlot = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourcePfe", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SourcePfe = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationType", wireType)
			}
			var v EdgeStatsIdentifierType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= EdgeStatsIdentifierType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DestinationType = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationSlot", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DestinationSlot = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationPfe", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DestinationPfe = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassStats = append(m.ClassStats, &ClassStats{})
			if err := m.ClassStats[len(m.ClassStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClassStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: class_stats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: class_stats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Priority = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransmitCounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFabric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransmitCounts == nil {
				m.TransmitCounts = &Counters{}
			}
			if err := m.TransmitCounts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Counters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: counters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: counters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Packets = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bytes = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketsPerSecond", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PacketsPerSecond = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesPerSecond", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BytesPerSecond = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropPackets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropPackets = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropBytes", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropBytes = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropPacketsPerSecond", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropPacketsPerSecond = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropBytesPerSecond", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropBytesPerSecond = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueDepthAverage", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.QueueDepthAverage = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueDepthCurrent", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.QueueDepthCurrent = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueDepthPeak", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.QueueDepthPeak = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueDepthMaximum", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.QueueDepthMaximum = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorPackets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ErrorPackets = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorPacketsPerSecond", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ErrorPacketsPerSecond = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFabric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFabric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFabric(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFabric
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFabric
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFabric
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFabric
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFabric
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFabric        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFabric          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFabric = fmt.Errorf("proto: unexpected end of group")
)
