// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: firewall.proto

package schema

import (
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
// Top-level message
//
type Firewall struct {
	FirewallStats        []*FirewallStats `protobuf:"bytes,1,rep,name=firewall_stats,json=firewallStats" json:"firewall_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Firewall) Reset()         { *m = Firewall{} }
func (m *Firewall) String() string { return proto.CompactTextString(m) }
func (*Firewall) ProtoMessage()    {}
func (*Firewall) Descriptor() ([]byte, []int) {
	return fileDescriptor_00e54131a1710129, []int{0}
}
func (m *Firewall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Firewall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Firewall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Firewall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Firewall.Merge(m, src)
}
func (m *Firewall) XXX_Size() int {
	return m.Size()
}
func (m *Firewall) XXX_DiscardUnknown() {
	xxx_messageInfo_Firewall.DiscardUnknown(m)
}

var xxx_messageInfo_Firewall proto.InternalMessageInfo

func (m *Firewall) GetFirewallStats() []*FirewallStats {
	if m != nil {
		return m.FirewallStats
	}
	return nil
}

//
// Firewall filter statistics
//
type FirewallStats struct {
	FilterName *string `protobuf:"bytes,1,req,name=filter_name,json=filterName" json:"filter_name,omitempty"`
	// The Unix timestamp (seconds since 00:00:00 UTC 1970-01-01) of
	// last filter state change event such as filter add, filter change,
	// or counter clear.
	Timestamp                *uint64                     `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	MemoryUsage              []*MemoryUsage              `protobuf:"bytes,3,rep,name=memory_usage,json=memoryUsage" json:"memory_usage,omitempty"`
	CounterStats             []*CounterStats             `protobuf:"bytes,4,rep,name=counter_stats,json=counterStats" json:"counter_stats,omitempty"`
	PolicerStats             []*PolicerStats             `protobuf:"bytes,5,rep,name=policer_stats,json=policerStats" json:"policer_stats,omitempty"`
	HierarchicalPolicerStats []*HierarchicalPolicerStats `protobuf:"bytes,6,rep,name=hierarchical_policer_stats,json=hierarchicalPolicerStats" json:"hierarchical_policer_stats,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                    `json:"-"`
	XXX_unrecognized         []byte                      `json:"-"`
	XXX_sizecache            int32                       `json:"-"`
}

func (m *FirewallStats) Reset()         { *m = FirewallStats{} }
func (m *FirewallStats) String() string { return proto.CompactTextString(m) }
func (*FirewallStats) ProtoMessage()    {}
func (*FirewallStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_00e54131a1710129, []int{1}
}
func (m *FirewallStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FirewallStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FirewallStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FirewallStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirewallStats.Merge(m, src)
}
func (m *FirewallStats) XXX_Size() int {
	return m.Size()
}
func (m *FirewallStats) XXX_DiscardUnknown() {
	xxx_messageInfo_FirewallStats.DiscardUnknown(m)
}

var xxx_messageInfo_FirewallStats proto.InternalMessageInfo

func (m *FirewallStats) GetFilterName() string {
	if m != nil && m.FilterName != nil {
		return *m.FilterName
	}
	return ""
}

func (m *FirewallStats) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *FirewallStats) GetMemoryUsage() []*MemoryUsage {
	if m != nil {
		return m.MemoryUsage
	}
	return nil
}

func (m *FirewallStats) GetCounterStats() []*CounterStats {
	if m != nil {
		return m.CounterStats
	}
	return nil
}

func (m *FirewallStats) GetPolicerStats() []*PolicerStats {
	if m != nil {
		return m.PolicerStats
	}
	return nil
}

func (m *FirewallStats) GetHierarchicalPolicerStats() []*HierarchicalPolicerStats {
	if m != nil {
		return m.HierarchicalPolicerStats
	}
	return nil
}

//
// Memory usage
//
type MemoryUsage struct {
	// The router has typically several types of memories (e.g. CPU's memory,
	// ASIC's forwarding memories) in which the firewall object is written.
	// This field indicates the name of the memory subsystem whose utilization
	// is being reported.
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// The amount of the memory allocated in bytes to the filter
	Allocated            *uint64  `protobuf:"varint,2,opt,name=allocated" json:"allocated,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MemoryUsage) Reset()         { *m = MemoryUsage{} }
func (m *MemoryUsage) String() string { return proto.CompactTextString(m) }
func (*MemoryUsage) ProtoMessage()    {}
func (*MemoryUsage) Descriptor() ([]byte, []int) {
	return fileDescriptor_00e54131a1710129, []int{2}
}
func (m *MemoryUsage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemoryUsage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemoryUsage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemoryUsage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemoryUsage.Merge(m, src)
}
func (m *MemoryUsage) XXX_Size() int {
	return m.Size()
}
func (m *MemoryUsage) XXX_DiscardUnknown() {
	xxx_messageInfo_MemoryUsage.DiscardUnknown(m)
}

var xxx_messageInfo_MemoryUsage proto.InternalMessageInfo

func (m *MemoryUsage) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *MemoryUsage) GetAllocated() uint64 {
	if m != nil && m.Allocated != nil {
		return *m.Allocated
	}
	return 0
}

//
// Counter statistics
//
type CounterStats struct {
	// Counter name
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// The total number of packets seen by the counter
	Packets *uint64 `protobuf:"varint,2,opt,name=packets" json:"packets,omitempty"`
	// The total number of bytes seen by the counter
	Bytes                *uint64  `protobuf:"varint,3,opt,name=bytes" json:"bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CounterStats) Reset()         { *m = CounterStats{} }
func (m *CounterStats) String() string { return proto.CompactTextString(m) }
func (*CounterStats) ProtoMessage()    {}
func (*CounterStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_00e54131a1710129, []int{3}
}
func (m *CounterStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CounterStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CounterStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CounterStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CounterStats.Merge(m, src)
}
func (m *CounterStats) XXX_Size() int {
	return m.Size()
}
func (m *CounterStats) XXX_DiscardUnknown() {
	xxx_messageInfo_CounterStats.DiscardUnknown(m)
}

var xxx_messageInfo_CounterStats proto.InternalMessageInfo

func (m *CounterStats) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CounterStats) GetPackets() uint64 {
	if m != nil && m.Packets != nil {
		return *m.Packets
	}
	return 0
}

func (m *CounterStats) GetBytes() uint64 {
	if m != nil && m.Bytes != nil {
		return *m.Bytes
	}
	return 0
}

//
// Policer statistics
//
type PolicerStats struct {
	// Policer instance name
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// The total number of packets marked out-of-specification by the policer
	OutOfSpecPackets *uint64 `protobuf:"varint,2,opt,name=out_of_spec_packets,json=outOfSpecPackets" json:"out_of_spec_packets,omitempty"`
	// The total number of bytes marked out-of-specification by the policer
	OutOfSpecBytes *uint64 `protobuf:"varint,3,opt,name=out_of_spec_bytes,json=outOfSpecBytes" json:"out_of_spec_bytes,omitempty"`
	// Additional statistics when enhanced policer statistics are available
	ExtendedPolicerStats *ExtendedPolicerStats `protobuf:"bytes,4,opt,name=extended_policer_stats,json=extendedPolicerStats" json:"extended_policer_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PolicerStats) Reset()         { *m = PolicerStats{} }
func (m *PolicerStats) String() string { return proto.CompactTextString(m) }
func (*PolicerStats) ProtoMessage()    {}
func (*PolicerStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_00e54131a1710129, []int{4}
}
func (m *PolicerStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicerStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PolicerStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PolicerStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicerStats.Merge(m, src)
}
func (m *PolicerStats) XXX_Size() int {
	return m.Size()
}
func (m *PolicerStats) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicerStats.DiscardUnknown(m)
}

var xxx_messageInfo_PolicerStats proto.InternalMessageInfo

func (m *PolicerStats) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *PolicerStats) GetOutOfSpecPackets() uint64 {
	if m != nil && m.OutOfSpecPackets != nil {
		return *m.OutOfSpecPackets
	}
	return 0
}

func (m *PolicerStats) GetOutOfSpecBytes() uint64 {
	if m != nil && m.OutOfSpecBytes != nil {
		return *m.OutOfSpecBytes
	}
	return 0
}

func (m *PolicerStats) GetExtendedPolicerStats() *ExtendedPolicerStats {
	if m != nil {
		return m.ExtendedPolicerStats
	}
	return nil
}

//
// Extended policer statistics when enhanced policer statistics are available
//
type ExtendedPolicerStats struct {
	// The total number of packets subjected to policing
	OfferedPackets *uint64 `protobuf:"varint,1,opt,name=offered_packets,json=offeredPackets" json:"offered_packets,omitempty"`
	// The total number of bytes subjected to policing
	OfferedBytes *uint64 `protobuf:"varint,2,opt,name=offered_bytes,json=offeredBytes" json:"offered_bytes,omitempty"`
	// The total number of packets not discarded by the policer
	TransmittedPackets *uint64 `protobuf:"varint,3,opt,name=transmitted_packets,json=transmittedPackets" json:"transmitted_packets,omitempty"`
	// The total number of bytes not discarded by the policer
	TransmittedBytes     *uint64  `protobuf:"varint,4,opt,name=transmitted_bytes,json=transmittedBytes" json:"transmitted_bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExtendedPolicerStats) Reset()         { *m = ExtendedPolicerStats{} }
func (m *ExtendedPolicerStats) String() string { return proto.CompactTextString(m) }
func (*ExtendedPolicerStats) ProtoMessage()    {}
func (*ExtendedPolicerStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_00e54131a1710129, []int{5}
}
func (m *ExtendedPolicerStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtendedPolicerStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtendedPolicerStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtendedPolicerStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtendedPolicerStats.Merge(m, src)
}
func (m *ExtendedPolicerStats) XXX_Size() int {
	return m.Size()
}
func (m *ExtendedPolicerStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtendedPolicerStats.DiscardUnknown(m)
}

var xxx_messageInfo_ExtendedPolicerStats proto.InternalMessageInfo

func (m *ExtendedPolicerStats) GetOfferedPackets() uint64 {
	if m != nil && m.OfferedPackets != nil {
		return *m.OfferedPackets
	}
	return 0
}

func (m *ExtendedPolicerStats) GetOfferedBytes() uint64 {
	if m != nil && m.OfferedBytes != nil {
		return *m.OfferedBytes
	}
	return 0
}

func (m *ExtendedPolicerStats) GetTransmittedPackets() uint64 {
	if m != nil && m.TransmittedPackets != nil {
		return *m.TransmittedPackets
	}
	return 0
}

func (m *ExtendedPolicerStats) GetTransmittedBytes() uint64 {
	if m != nil && m.TransmittedBytes != nil {
		return *m.TransmittedBytes
	}
	return 0
}

//
// Hierarchical policer statistics
//
type HierarchicalPolicerStats struct {
	// Hierarchical policer instance name
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// The total number of packets marked out-of-specification by
	// the premium policer
	PremiumPackets *uint64 `protobuf:"varint,2,opt,name=premium_packets,json=premiumPackets" json:"premium_packets,omitempty"`
	// The total number of bytes marked out-of-specification by
	// the premium policer
	PremiumBytes *uint64 `protobuf:"varint,3,opt,name=premium_bytes,json=premiumBytes" json:"premium_bytes,omitempty"`
	// The total number of packets marked out-of-specification by
	// the aggregate policer
	AggregatePackets *uint64 `protobuf:"varint,4,opt,name=aggregate_packets,json=aggregatePackets" json:"aggregate_packets,omitempty"`
	// The total number of bytes marked out-of-specification by
	// the aggregate policer
	AggregateBytes       *uint64  `protobuf:"varint,5,opt,name=aggregate_bytes,json=aggregateBytes" json:"aggregate_bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HierarchicalPolicerStats) Reset()         { *m = HierarchicalPolicerStats{} }
func (m *HierarchicalPolicerStats) String() string { return proto.CompactTextString(m) }
func (*HierarchicalPolicerStats) ProtoMessage()    {}
func (*HierarchicalPolicerStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_00e54131a1710129, []int{6}
}
func (m *HierarchicalPolicerStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HierarchicalPolicerStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HierarchicalPolicerStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HierarchicalPolicerStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HierarchicalPolicerStats.Merge(m, src)
}
func (m *HierarchicalPolicerStats) XXX_Size() int {
	return m.Size()
}
func (m *HierarchicalPolicerStats) XXX_DiscardUnknown() {
	xxx_messageInfo_HierarchicalPolicerStats.DiscardUnknown(m)
}

var xxx_messageInfo_HierarchicalPolicerStats proto.InternalMessageInfo

func (m *HierarchicalPolicerStats) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *HierarchicalPolicerStats) GetPremiumPackets() uint64 {
	if m != nil && m.PremiumPackets != nil {
		return *m.PremiumPackets
	}
	return 0
}

func (m *HierarchicalPolicerStats) GetPremiumBytes() uint64 {
	if m != nil && m.PremiumBytes != nil {
		return *m.PremiumBytes
	}
	return 0
}

func (m *HierarchicalPolicerStats) GetAggregatePackets() uint64 {
	if m != nil && m.AggregatePackets != nil {
		return *m.AggregatePackets
	}
	return 0
}

func (m *HierarchicalPolicerStats) GetAggregateBytes() uint64 {
	if m != nil && m.AggregateBytes != nil {
		return *m.AggregateBytes
	}
	return 0
}

var E_JnprFirewallExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*Firewall)(nil),
	Field:         6,
	Name:          "jnpr_firewall_ext",
	Tag:           "bytes,6,opt,name=jnpr_firewall_ext",
	Filename:      "firewall.proto",
}

func init() {
	proto.RegisterType((*Firewall)(nil), "Firewall")
	proto.RegisterType((*FirewallStats)(nil), "FirewallStats")
	proto.RegisterType((*MemoryUsage)(nil), "MemoryUsage")
	proto.RegisterType((*CounterStats)(nil), "CounterStats")
	proto.RegisterType((*PolicerStats)(nil), "PolicerStats")
	proto.RegisterType((*ExtendedPolicerStats)(nil), "ExtendedPolicerStats")
	proto.RegisterType((*HierarchicalPolicerStats)(nil), "HierarchicalPolicerStats")
	proto.RegisterExtension(E_JnprFirewallExt)
}

func init() { proto.RegisterFile("firewall.proto", fileDescriptor_00e54131a1710129) }

var fileDescriptor_00e54131a1710129 = []byte{
	// 664 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0x4d, 0x6f, 0xd3, 0x4a,
	0x14, 0xd5, 0xa4, 0xc9, 0x7b, 0xed, 0xe4, 0xab, 0x71, 0xfb, 0x1e, 0x6e, 0x91, 0x4a, 0x14, 0x24,
	0x14, 0x21, 0xd5, 0x46, 0x11, 0xb0, 0x60, 0x05, 0x45, 0x45, 0x08, 0xd4, 0x52, 0xb9, 0x42, 0x48,
	0x6c, 0xcc, 0xd4, 0xb9, 0x71, 0x26, 0xb5, 0x3d, 0xd6, 0xcc, 0x0d, 0x6d, 0xb7, 0xfc, 0x3a, 0x56,
	0x88, 0x5f, 0x80, 0x50, 0xff, 0x03, 0x7b, 0x64, 0x8f, 0x9d, 0x8c, 0x21, 0xed, 0xf2, 0x9e, 0x73,
	0xcf, 0x3d, 0x73, 0xe6, 0xda, 0x43, 0x3b, 0x13, 0x2e, 0xe1, 0x82, 0x45, 0x91, 0x93, 0x4a, 0x81,
	0x62, 0x77, 0x0b, 0x21, 0x82, 0x18, 0x50, 0x5e, 0xf9, 0x28, 0x52, 0x0d, 0x0e, 0x5e, 0xd0, 0xf5,
	0x57, 0x45, 0x9b, 0xf5, 0x64, 0x29, 0xf1, 0x15, 0x32, 0x54, 0x36, 0xe9, 0xaf, 0x0d, 0x9b, 0xa3,
	0x8e, 0x53, 0xb6, 0x9c, 0x66, 0xa8, 0xd7, 0x9e, 0x98, 0xe5, 0xe0, 0x5b, 0x8d, 0xb6, 0x2b, 0x0d,
	0xd6, 0x03, 0xda, 0x9c, 0xf0, 0x08, 0x41, 0xfa, 0x09, 0x8b, 0xc1, 0x26, 0xfd, 0xda, 0x70, 0xe3,
	0xa0, 0xf1, 0xe5, 0x79, 0x6d, 0x9d, 0x78, 0x54, 0x33, 0xc7, 0x2c, 0x06, 0xeb, 0x3e, 0xdd, 0x40,
	0x1e, 0x83, 0x42, 0x16, 0xa7, 0x76, 0xad, 0x4f, 0x86, 0xf5, 0xbc, 0x6b, 0x93, 0x78, 0x4b, 0xdc,
	0x72, 0x69, 0x2b, 0x86, 0x58, 0xc8, 0x2b, 0x7f, 0xae, 0x58, 0x08, 0xf6, 0x5a, 0x7e, 0xa6, 0x96,
	0x73, 0x94, 0x83, 0xef, 0x33, 0xcc, 0x6b, 0xc6, 0xcb, 0xc2, 0x1a, 0xd1, 0x76, 0x20, 0xe6, 0x49,
	0x66, 0xaf, 0x53, 0xd4, 0x73, 0x45, 0xdb, 0x79, 0xa9, 0x51, 0x1d, 0xa2, 0x15, 0x18, 0x55, 0xa6,
	0x49, 0x45, 0xc4, 0x83, 0x85, 0xa6, 0x51, 0x68, 0x4e, 0x34, 0x5a, 0x68, 0x52, 0xa3, 0xb2, 0x3e,
	0xd0, 0xdd, 0x29, 0x07, 0xc9, 0x64, 0x30, 0xe5, 0x01, 0x8b, 0xfc, 0xea, 0x80, 0x7f, 0xf2, 0x01,
	0x3b, 0xce, 0x6b, 0xa3, 0xa5, 0x32, 0xcc, 0x9e, 0xde, 0xc0, 0x0c, 0x8e, 0x68, 0xd3, 0x08, 0x67,
	0xed, 0xd0, 0xfa, 0xdf, 0xd7, 0x98, 0x43, 0xd9, 0x05, 0xb2, 0x28, 0x12, 0x01, 0x43, 0x18, 0x1b,
	0x17, 0xd8, 0x27, 0xde, 0x12, 0x1f, 0x84, 0xb4, 0x65, 0x26, 0xbf, 0x6d, 0xde, 0x3d, 0xfa, 0x6f,
	0xca, 0x82, 0x73, 0x40, 0x65, 0x4c, 0xb3, 0x89, 0x57, 0xa2, 0xd6, 0x5d, 0xda, 0x38, 0xbb, 0x42,
	0x50, 0xf6, 0x9a, 0x49, 0x6b, 0x6c, 0xf0, 0x83, 0xd0, 0x96, 0x19, 0xe4, 0x36, 0xa7, 0xc7, 0x74,
	0x4b, 0xcc, 0xd1, 0x17, 0x13, 0x5f, 0xa5, 0x10, 0xf8, 0x2b, 0x5d, 0x37, 0xc5, 0x1c, 0xdf, 0x4d,
	0x4e, 0x53, 0x08, 0x4e, 0x0a, 0xfb, 0x47, 0xb4, 0x67, 0xaa, 0x56, 0x1c, 0xa5, 0xb3, 0xd0, 0x1c,
	0x64, 0xa4, 0xf5, 0x96, 0xfe, 0x0f, 0x97, 0x08, 0xc9, 0x18, 0xc6, 0x7f, 0x2c, 0xa8, 0xde, 0x27,
	0xc3, 0xe6, 0xe8, 0x3f, 0xe7, 0xb0, 0xa0, 0x2b, 0xcb, 0xd9, 0x86, 0x15, 0x68, 0x16, 0x70, 0x7b,
	0x55, 0xbb, 0xe5, 0xd0, 0xae, 0x98, 0x4c, 0x40, 0x66, 0x26, 0x45, 0x12, 0x52, 0x3d, 0x95, 0x66,
	0xcb, 0x1c, 0x0f, 0x69, 0xbb, 0xec, 0xd7, 0x19, 0x2a, 0xb9, 0x5b, 0x05, 0xa7, 0x13, 0x3c, 0xa5,
	0x5b, 0x28, 0x59, 0xa2, 0x62, 0x8e, 0x68, 0xcc, 0xaf, 0xa4, 0xb6, 0x8c, 0x8e, 0xd2, 0x63, 0x44,
	0x7b, 0xa6, 0x4e, 0xfb, 0xd4, 0x2b, 0xf7, 0x6b, 0xf0, 0xb9, 0xd7, 0xe0, 0x17, 0xa1, 0xf6, 0x4d,
	0x1f, 0xec, 0x6d, 0xdb, 0x74, 0x68, 0x37, 0x95, 0x10, 0xf3, 0x79, 0xbc, 0x7a, 0x93, 0x9d, 0x82,
	0x35, 0xf2, 0x97, 0xfd, 0x2b, 0x76, 0xd8, 0x2a, 0x38, 0x9d, 0x7f, 0x44, 0x7b, 0x2c, 0x0c, 0x25,
	0x84, 0x0c, 0x61, 0x31, 0xbd, 0x9a, 0x63, 0xc1, 0x97, 0xf3, 0x1d, 0xda, 0x5d, 0x6a, 0xb4, 0x43,
	0xa3, 0x72, 0x9e, 0x05, 0x9b, 0x7b, 0x3c, 0x3b, 0xa6, 0xbd, 0x59, 0x92, 0x4a, 0x7f, 0xf1, 0xfc,
	0xc1, 0x25, 0x5a, 0x77, 0x9c, 0x37, 0xf3, 0x84, 0xa7, 0x20, 0x8f, 0x01, 0x2f, 0x84, 0x3c, 0x57,
	0xa7, 0x90, 0x28, 0x21, 0xb3, 0x5f, 0x3b, 0xfb, 0x72, 0x36, 0x16, 0xaf, 0xa2, 0xd7, 0xcd, 0xc4,
	0x65, 0x75, 0x78, 0x89, 0x07, 0x9f, 0xbe, 0x5e, 0xef, 0x91, 0xef, 0xd7, 0x7b, 0xe4, 0xe7, 0xf5,
	0x1e, 0xf9, 0xe8, 0x85, 0x1c, 0x9d, 0x99, 0x9e, 0xe5, 0x24, 0x80, 0x2e, 0x0f, 0xe0, 0x0c, 0x64,
	0xe8, 0x4e, 0x81, 0x45, 0x38, 0x3d, 0x13, 0xb8, 0xcf, 0x93, 0x10, 0x14, 0xee, 0xcf, 0x90, 0xef,
	0x27, 0x0c, 0xf9, 0x67, 0x70, 0xd3, 0xf3, 0xd0, 0x9d, 0x21, 0x77, 0xd9, 0x98, 0xa5, 0x08, 0x52,
	0xb9, 0xfe, 0x6c, 0x9e, 0x08, 0xe5, 0xaa, 0x60, 0x0a, 0x31, 0xfb, 0x1d, 0x00, 0x00, 0xff, 0xff,
	0x0d, 0x53, 0x72, 0x93, 0xdd, 0x05, 0x00, 0x00,
}

func (m *Firewall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Firewall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Firewall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FirewallStats) > 0 {
		for iNdEx := len(m.FirewallStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FirewallStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFirewall(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FirewallStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FirewallStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FirewallStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.HierarchicalPolicerStats) > 0 {
		for iNdEx := len(m.HierarchicalPolicerStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HierarchicalPolicerStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFirewall(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.PolicerStats) > 0 {
		for iNdEx := len(m.PolicerStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PolicerStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFirewall(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.CounterStats) > 0 {
		for iNdEx := len(m.CounterStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CounterStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFirewall(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.MemoryUsage) > 0 {
		for iNdEx := len(m.MemoryUsage) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MemoryUsage[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFirewall(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Timestamp != nil {
		i = encodeVarintFirewall(dAtA, i, uint64(*m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.FilterName == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("filter_name")
	} else {
		i -= len(*m.FilterName)
		copy(dAtA[i:], *m.FilterName)
		i = encodeVarintFirewall(dAtA, i, uint64(len(*m.FilterName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MemoryUsage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemoryUsage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MemoryUsage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Allocated != nil {
		i = encodeVarintFirewall(dAtA, i, uint64(*m.Allocated))
		i--
		dAtA[i] = 0x10
	}
	if m.Name == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	} else {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintFirewall(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CounterStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CounterStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CounterStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Bytes != nil {
		i = encodeVarintFirewall(dAtA, i, uint64(*m.Bytes))
		i--
		dAtA[i] = 0x18
	}
	if m.Packets != nil {
		i = encodeVarintFirewall(dAtA, i, uint64(*m.Packets))
		i--
		dAtA[i] = 0x10
	}
	if m.Name == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	} else {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintFirewall(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PolicerStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicerStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicerStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExtendedPolicerStats != nil {
		{
			size, err := m.ExtendedPolicerStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFirewall(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.OutOfSpecBytes != nil {
		i = encodeVarintFirewall(dAtA, i, uint64(*m.OutOfSpecBytes))
		i--
		dAtA[i] = 0x18
	}
	if m.OutOfSpecPackets != nil {
		i = encodeVarintFirewall(dAtA, i, uint64(*m.OutOfSpecPackets))
		i--
		dAtA[i] = 0x10
	}
	if m.Name == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	} else {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintFirewall(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExtendedPolicerStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtendedPolicerStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtendedPolicerStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TransmittedBytes != nil {
		i = encodeVarintFirewall(dAtA, i, uint64(*m.TransmittedBytes))
		i--
		dAtA[i] = 0x20
	}
	if m.TransmittedPackets != nil {
		i = encodeVarintFirewall(dAtA, i, uint64(*m.TransmittedPackets))
		i--
		dAtA[i] = 0x18
	}
	if m.OfferedBytes != nil {
		i = encodeVarintFirewall(dAtA, i, uint64(*m.OfferedBytes))
		i--
		dAtA[i] = 0x10
	}
	if m.OfferedPackets != nil {
		i = encodeVarintFirewall(dAtA, i, uint64(*m.OfferedPackets))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HierarchicalPolicerStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HierarchicalPolicerStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HierarchicalPolicerStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AggregateBytes != nil {
		i = encodeVarintFirewall(dAtA, i, uint64(*m.AggregateBytes))
		i--
		dAtA[i] = 0x28
	}
	if m.AggregatePackets != nil {
		i = encodeVarintFirewall(dAtA, i, uint64(*m.AggregatePackets))
		i--
		dAtA[i] = 0x20
	}
	if m.PremiumBytes != nil {
		i = encodeVarintFirewall(dAtA, i, uint64(*m.PremiumBytes))
		i--
		dAtA[i] = 0x18
	}
	if m.PremiumPackets != nil {
		i = encodeVarintFirewall(dAtA, i, uint64(*m.PremiumPackets))
		i--
		dAtA[i] = 0x10
	}
	if m.Name == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	} else {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintFirewall(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFirewall(dAtA []byte, offset int, v uint64) int {
	offset -= sovFirewall(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Firewall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FirewallStats) > 0 {
		for _, e := range m.FirewallStats {
			l = e.Size()
			n += 1 + l + sovFirewall(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FirewallStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FilterName != nil {
		l = len(*m.FilterName)
		n += 1 + l + sovFirewall(uint64(l))
	}
	if m.Timestamp != nil {
		n += 1 + sovFirewall(uint64(*m.Timestamp))
	}
	if len(m.MemoryUsage) > 0 {
		for _, e := range m.MemoryUsage {
			l = e.Size()
			n += 1 + l + sovFirewall(uint64(l))
		}
	}
	if len(m.CounterStats) > 0 {
		for _, e := range m.CounterStats {
			l = e.Size()
			n += 1 + l + sovFirewall(uint64(l))
		}
	}
	if len(m.PolicerStats) > 0 {
		for _, e := range m.PolicerStats {
			l = e.Size()
			n += 1 + l + sovFirewall(uint64(l))
		}
	}
	if len(m.HierarchicalPolicerStats) > 0 {
		for _, e := range m.HierarchicalPolicerStats {
			l = e.Size()
			n += 1 + l + sovFirewall(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MemoryUsage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovFirewall(uint64(l))
	}
	if m.Allocated != nil {
		n += 1 + sovFirewall(uint64(*m.Allocated))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CounterStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovFirewall(uint64(l))
	}
	if m.Packets != nil {
		n += 1 + sovFirewall(uint64(*m.Packets))
	}
	if m.Bytes != nil {
		n += 1 + sovFirewall(uint64(*m.Bytes))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PolicerStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovFirewall(uint64(l))
	}
	if m.OutOfSpecPackets != nil {
		n += 1 + sovFirewall(uint64(*m.OutOfSpecPackets))
	}
	if m.OutOfSpecBytes != nil {
		n += 1 + sovFirewall(uint64(*m.OutOfSpecBytes))
	}
	if m.ExtendedPolicerStats != nil {
		l = m.ExtendedPolicerStats.Size()
		n += 1 + l + sovFirewall(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExtendedPolicerStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OfferedPackets != nil {
		n += 1 + sovFirewall(uint64(*m.OfferedPackets))
	}
	if m.OfferedBytes != nil {
		n += 1 + sovFirewall(uint64(*m.OfferedBytes))
	}
	if m.TransmittedPackets != nil {
		n += 1 + sovFirewall(uint64(*m.TransmittedPackets))
	}
	if m.TransmittedBytes != nil {
		n += 1 + sovFirewall(uint64(*m.TransmittedBytes))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HierarchicalPolicerStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovFirewall(uint64(l))
	}
	if m.PremiumPackets != nil {
		n += 1 + sovFirewall(uint64(*m.PremiumPackets))
	}
	if m.PremiumBytes != nil {
		n += 1 + sovFirewall(uint64(*m.PremiumBytes))
	}
	if m.AggregatePackets != nil {
		n += 1 + sovFirewall(uint64(*m.AggregatePackets))
	}
	if m.AggregateBytes != nil {
		n += 1 + sovFirewall(uint64(*m.AggregateBytes))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovFirewall(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFirewall(x uint64) (n int) {
	return sovFirewall(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Firewall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFirewall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Firewall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Firewall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirewallStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirewall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirewall
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFirewall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirewallStats = append(m.FirewallStats, &FirewallStats{})
			if err := m.FirewallStats[len(m.FirewallStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFirewall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFirewall
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFirewall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FirewallStats) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFirewall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FirewallStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FirewallStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirewall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFirewall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFirewall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FilterName = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirewall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Timestamp = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryUsage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirewall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirewall
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFirewall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemoryUsage = append(m.MemoryUsage, &MemoryUsage{})
			if err := m.MemoryUsage[len(m.MemoryUsage)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirewall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirewall
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFirewall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterStats = append(m.CounterStats, &CounterStats{})
			if err := m.CounterStats[len(m.CounterStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicerStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirewall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirewall
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFirewall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicerStats = append(m.PolicerStats, &PolicerStats{})
			if err := m.PolicerStats[len(m.PolicerStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HierarchicalPolicerStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirewall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirewall
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFirewall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HierarchicalPolicerStats = append(m.HierarchicalPolicerStats, &HierarchicalPolicerStats{})
			if err := m.HierarchicalPolicerStats[len(m.HierarchicalPolicerStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFirewall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFirewall
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFirewall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("filter_name")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemoryUsage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFirewall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemoryUsage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemoryUsage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirewall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFirewall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFirewall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocated", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirewall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Allocated = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFirewall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFirewall
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFirewall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CounterStats) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFirewall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CounterStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CounterStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirewall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFirewall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFirewall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirewall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Packets = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirewall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bytes = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFirewall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFirewall
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFirewall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicerStats) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFirewall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicerStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicerStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirewall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFirewall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFirewall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutOfSpecPackets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirewall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutOfSpecPackets = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutOfSpecBytes", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirewall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutOfSpecBytes = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPolicerStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirewall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirewall
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFirewall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtendedPolicerStats == nil {
				m.ExtendedPolicerStats = &ExtendedPolicerStats{}
			}
			if err := m.ExtendedPolicerStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFirewall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFirewall
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFirewall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtendedPolicerStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFirewall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtendedPolicerStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtendedPolicerStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfferedPackets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirewall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OfferedPackets = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfferedBytes", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirewall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OfferedBytes = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransmittedPackets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirewall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TransmittedPackets = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransmittedBytes", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirewall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TransmittedBytes = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFirewall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFirewall
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFirewall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HierarchicalPolicerStats) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFirewall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HierarchicalPolicerStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HierarchicalPolicerStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirewall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFirewall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFirewall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PremiumPackets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirewall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PremiumPackets = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PremiumBytes", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirewall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PremiumBytes = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatePackets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirewall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AggregatePackets = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregateBytes", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirewall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AggregateBytes = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFirewall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFirewall
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFirewall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFirewall(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFirewall
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFirewall
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFirewall
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFirewall
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFirewall
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFirewall
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFirewall        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFirewall          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFirewall = fmt.Errorf("proto: unexpected end of group")
)
