// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inline_jflow.proto

package schema

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InlineJflow struct {
	// Version of exported flow records (v10 or v9)
	Ipv4FlowsExportFormat *string `protobuf:"bytes,2,opt,name=ipv4_flows_export_format,json=ipv4FlowsExportFormat" json:"ipv4_flows_export_format,omitempty"`
	Ipv6FlowsExportFormat *string `protobuf:"bytes,3,opt,name=ipv6_flows_export_format,json=ipv6FlowsExportFormat" json:"ipv6_flows_export_format,omitempty"`
	VplsFlowsExportFormat *string `protobuf:"bytes,4,opt,name=vpls_flows_export_format,json=vplsFlowsExportFormat" json:"vpls_flows_export_format,omitempty"`
	MplsFlowsExportFormat *string `protobuf:"bytes,5,opt,name=mpls_flows_export_format,json=mplsFlowsExportFormat" json:"mpls_flows_export_format,omitempty"`
	// Total number of IPv4/IPv6/MPLS routes
	Ipv4RouteRecordCnt *uint32 `protobuf:"varint,6,opt,name=ipv4_route_record_cnt,json=ipv4RouteRecordCnt" json:"ipv4_route_record_cnt,omitempty"`
	Ipv6RouteRecordCnt *uint32 `protobuf:"varint,7,opt,name=ipv6_route_record_cnt,json=ipv6RouteRecordCnt" json:"ipv6_route_record_cnt,omitempty"`
	MplsRouteRecordCnt *uint32 `protobuf:"varint,8,opt,name=mpls_route_record_cnt,json=mplsRouteRecordCnt" json:"mpls_route_record_cnt,omitempty"`
	// Total number of Autonomous System information
	AutonomousSystemRecordCnt *uint32 `protobuf:"varint,9,opt,name=autonomous_system_record_cnt,json=autonomousSystemRecordCnt" json:"autonomous_system_record_cnt,omitempty"`
	// Maximum number of flows supported.
	Ipv4MaxFlowsCount *uint64 `protobuf:"varint,10,opt,name=ipv4_max_flows_count,json=ipv4MaxFlowsCount" json:"ipv4_max_flows_count,omitempty"`
	Ipv6MaxFlowsCount *uint64 `protobuf:"varint,11,opt,name=ipv6_max_flows_count,json=ipv6MaxFlowsCount" json:"ipv6_max_flows_count,omitempty"`
	VplsMaxFlowsCount *uint64 `protobuf:"varint,12,opt,name=vpls_max_flows_count,json=vplsMaxFlowsCount" json:"vpls_max_flows_count,omitempty"`
	MplsMaxFlowsCount *uint64 `protobuf:"varint,13,opt,name=mpls_max_flows_count,json=mplsMaxFlowsCount" json:"mpls_max_flows_count,omitempty"`
	// Total number of heap memory allocation failure
	MemoryAllocFailCnt *uint32 `protobuf:"varint,14,opt,name=memory_alloc_fail_cnt,json=memoryAllocFailCnt" json:"memory_alloc_fail_cnt,omitempty"`
	// Value of Configured Observation Domain ID
	Ipv4ConfiguredObservationDomainId *uint32 `protobuf:"varint,15,opt,name=ipv4_configured_observation_domain_id,json=ipv4ConfiguredObservationDomainId" json:"ipv4_configured_observation_domain_id,omitempty"`
	Ipv6ConfiguredObservationDomainId *uint32 `protobuf:"varint,16,opt,name=ipv6_configured_observation_domain_id,json=ipv6ConfiguredObservationDomainId" json:"ipv6_configured_observation_domain_id,omitempty"`
	VplsConfiguredObservationDomainId *uint32 `protobuf:"varint,17,opt,name=vpls_configured_observation_domain_id,json=vplsConfiguredObservationDomainId" json:"vpls_configured_observation_domain_id,omitempty"`
	MplsConfiguredObservationDomainId *uint32 `protobuf:"varint,18,opt,name=mpls_configured_observation_domain_id,json=mplsConfiguredObservationDomainId" json:"mpls_configured_observation_domain_id,omitempty"`
	// Timestamp of last clear command
	LastClearTimestamp *uint32 `protobuf:"varint,19,opt,name=last_clear_timestamp,json=lastClearTimestamp" json:"last_clear_timestamp,omitempty"`
	// Status of ipv6_extended_attrib knob
	Ipv6ExtendedAttribute *bool `protobuf:"varint,20,opt,name=ipv6_extended_attribute,json=ipv6ExtendedAttribute" json:"ipv6_extended_attribute,omitempty"`
	// Status of flex_flow_sizing knob
	FlexibleFlowSizing *bool `protobuf:"varint,21,opt,name=flexible_flow_sizing,json=flexibleFlowSizing" json:"flexible_flow_sizing,omitempty"`
	// Status of use_extended_flow_memory knob
	UseExtendedFlowMemory *bool `protobuf:"varint,22,opt,name=use_extended_flow_memory,json=useExtendedFlowMemory" json:"use_extended_flow_memory,omitempty"`
	// Version of Bridge exported flow records (v10 or v9)
	BridgeFlowsExportFormat *string `protobuf:"bytes,23,opt,name=bridge_flows_export_format,json=bridgeFlowsExportFormat" json:"bridge_flows_export_format,omitempty"`
	// Maximum number of flows supported for Bridge.
	BridgeMaxFlowsCount *uint64 `protobuf:"varint,24,opt,name=bridge_max_flows_count,json=bridgeMaxFlowsCount" json:"bridge_max_flows_count,omitempty"`
	// Value of Configured Observation Domain ID for Bridge
	BridgeConfiguredObservationDomainId *uint32 `protobuf:"varint,25,opt,name=bridge_configured_observation_domain_id,json=bridgeConfiguredObservationDomainId" json:"bridge_configured_observation_domain_id,omitempty"`
	// NPU level statistics
	NpuStats             []*InlineJflowNpuStats `protobuf:"bytes,50,rep,name=npu_stats,json=npuStats" json:"npu_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *InlineJflow) Reset()         { *m = InlineJflow{} }
func (m *InlineJflow) String() string { return proto.CompactTextString(m) }
func (*InlineJflow) ProtoMessage()    {}
func (*InlineJflow) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f414b06d7d500f7, []int{0}
}
func (m *InlineJflow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InlineJflow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InlineJflow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InlineJflow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InlineJflow.Merge(m, src)
}
func (m *InlineJflow) XXX_Size() int {
	return m.Size()
}
func (m *InlineJflow) XXX_DiscardUnknown() {
	xxx_messageInfo_InlineJflow.DiscardUnknown(m)
}

var xxx_messageInfo_InlineJflow proto.InternalMessageInfo

func (m *InlineJflow) GetIpv4FlowsExportFormat() string {
	if m != nil && m.Ipv4FlowsExportFormat != nil {
		return *m.Ipv4FlowsExportFormat
	}
	return ""
}

func (m *InlineJflow) GetIpv6FlowsExportFormat() string {
	if m != nil && m.Ipv6FlowsExportFormat != nil {
		return *m.Ipv6FlowsExportFormat
	}
	return ""
}

func (m *InlineJflow) GetVplsFlowsExportFormat() string {
	if m != nil && m.VplsFlowsExportFormat != nil {
		return *m.VplsFlowsExportFormat
	}
	return ""
}

func (m *InlineJflow) GetMplsFlowsExportFormat() string {
	if m != nil && m.MplsFlowsExportFormat != nil {
		return *m.MplsFlowsExportFormat
	}
	return ""
}

func (m *InlineJflow) GetIpv4RouteRecordCnt() uint32 {
	if m != nil && m.Ipv4RouteRecordCnt != nil {
		return *m.Ipv4RouteRecordCnt
	}
	return 0
}

func (m *InlineJflow) GetIpv6RouteRecordCnt() uint32 {
	if m != nil && m.Ipv6RouteRecordCnt != nil {
		return *m.Ipv6RouteRecordCnt
	}
	return 0
}

func (m *InlineJflow) GetMplsRouteRecordCnt() uint32 {
	if m != nil && m.MplsRouteRecordCnt != nil {
		return *m.MplsRouteRecordCnt
	}
	return 0
}

func (m *InlineJflow) GetAutonomousSystemRecordCnt() uint32 {
	if m != nil && m.AutonomousSystemRecordCnt != nil {
		return *m.AutonomousSystemRecordCnt
	}
	return 0
}

func (m *InlineJflow) GetIpv4MaxFlowsCount() uint64 {
	if m != nil && m.Ipv4MaxFlowsCount != nil {
		return *m.Ipv4MaxFlowsCount
	}
	return 0
}

func (m *InlineJflow) GetIpv6MaxFlowsCount() uint64 {
	if m != nil && m.Ipv6MaxFlowsCount != nil {
		return *m.Ipv6MaxFlowsCount
	}
	return 0
}

func (m *InlineJflow) GetVplsMaxFlowsCount() uint64 {
	if m != nil && m.VplsMaxFlowsCount != nil {
		return *m.VplsMaxFlowsCount
	}
	return 0
}

func (m *InlineJflow) GetMplsMaxFlowsCount() uint64 {
	if m != nil && m.MplsMaxFlowsCount != nil {
		return *m.MplsMaxFlowsCount
	}
	return 0
}

func (m *InlineJflow) GetMemoryAllocFailCnt() uint32 {
	if m != nil && m.MemoryAllocFailCnt != nil {
		return *m.MemoryAllocFailCnt
	}
	return 0
}

func (m *InlineJflow) GetIpv4ConfiguredObservationDomainId() uint32 {
	if m != nil && m.Ipv4ConfiguredObservationDomainId != nil {
		return *m.Ipv4ConfiguredObservationDomainId
	}
	return 0
}

func (m *InlineJflow) GetIpv6ConfiguredObservationDomainId() uint32 {
	if m != nil && m.Ipv6ConfiguredObservationDomainId != nil {
		return *m.Ipv6ConfiguredObservationDomainId
	}
	return 0
}

func (m *InlineJflow) GetVplsConfiguredObservationDomainId() uint32 {
	if m != nil && m.VplsConfiguredObservationDomainId != nil {
		return *m.VplsConfiguredObservationDomainId
	}
	return 0
}

func (m *InlineJflow) GetMplsConfiguredObservationDomainId() uint32 {
	if m != nil && m.MplsConfiguredObservationDomainId != nil {
		return *m.MplsConfiguredObservationDomainId
	}
	return 0
}

func (m *InlineJflow) GetLastClearTimestamp() uint32 {
	if m != nil && m.LastClearTimestamp != nil {
		return *m.LastClearTimestamp
	}
	return 0
}

func (m *InlineJflow) GetIpv6ExtendedAttribute() bool {
	if m != nil && m.Ipv6ExtendedAttribute != nil {
		return *m.Ipv6ExtendedAttribute
	}
	return false
}

func (m *InlineJflow) GetFlexibleFlowSizing() bool {
	if m != nil && m.FlexibleFlowSizing != nil {
		return *m.FlexibleFlowSizing
	}
	return false
}

func (m *InlineJflow) GetUseExtendedFlowMemory() bool {
	if m != nil && m.UseExtendedFlowMemory != nil {
		return *m.UseExtendedFlowMemory
	}
	return false
}

func (m *InlineJflow) GetBridgeFlowsExportFormat() string {
	if m != nil && m.BridgeFlowsExportFormat != nil {
		return *m.BridgeFlowsExportFormat
	}
	return ""
}

func (m *InlineJflow) GetBridgeMaxFlowsCount() uint64 {
	if m != nil && m.BridgeMaxFlowsCount != nil {
		return *m.BridgeMaxFlowsCount
	}
	return 0
}

func (m *InlineJflow) GetBridgeConfiguredObservationDomainId() uint32 {
	if m != nil && m.BridgeConfiguredObservationDomainId != nil {
		return *m.BridgeConfiguredObservationDomainId
	}
	return 0
}

func (m *InlineJflow) GetNpuStats() []*InlineJflowNpuStats {
	if m != nil {
		return m.NpuStats
	}
	return nil
}

type InlineJflowNpuStats struct {
	// All NPUs in the system are globally identified
	// <fpcslot><luinst><pfeinst>
	//   8         4         4    bits
	NpuIdentifier *uint32 `protobuf:"varint,1,req,name=npu_identifier,json=npuIdentifier" json:"npu_identifier,omitempty"`
	// IPv4 NPU Stats
	// Total number of IPv4 packets and bytes sampled
	Ipv4FlowPackets *uint64 `protobuf:"varint,51,opt,name=ipv4_flow_packets,json=ipv4FlowPackets" json:"ipv4_flow_packets,omitempty"`
	Ipv4FlowBytes   *uint64 `protobuf:"varint,52,opt,name=ipv4_flow_bytes,json=ipv4FlowBytes" json:"ipv4_flow_bytes,omitempty"`
	// Total number of IPv4 flows created
	Ipv4TotalFlows *uint64 `protobuf:"varint,53,opt,name=ipv4_total_flows,json=ipv4TotalFlows" json:"ipv4_total_flows,omitempty"`
	// Total number of IPv4 flows that are active currently
	Ipv4ActiveFlows *uint64 `protobuf:"varint,54,opt,name=ipv4_active_flows,json=ipv4ActiveFlows" json:"ipv4_active_flows,omitempty"`
	// Total number of IPv4 flows exported to collector
	Ipv4FlowsExported *uint64 `protobuf:"varint,55,opt,name=ipv4_flows_exported,json=ipv4FlowsExported" json:"ipv4_flows_exported,omitempty"`
	// Total number of IPv4 flow packets exported to collector
	Ipv4PacketsExported *uint64 `protobuf:"varint,56,opt,name=ipv4_packets_exported,json=ipv4PacketsExported" json:"ipv4_packets_exported,omitempty"`
	// Total number of IPv4 flows exported due to idle time out
	Ipv4FlowsInactiveTimedOut *uint64 `protobuf:"varint,57,opt,name=ipv4_flows_inactive_timed_out,json=ipv4FlowsInactiveTimedOut" json:"ipv4_flows_inactive_timed_out,omitempty"`
	// Total number of IPv4 flows exported due to active time out
	Ipv4FlowsActiveTimedOut *uint64 `protobuf:"varint,58,opt,name=ipv4_flows_active_timed_out,json=ipv4FlowsActiveTimedOut" json:"ipv4_flows_active_timed_out,omitempty"`
	// Total number of IPv4 flow creation failure (flow insert faiure)
	Ipv4FlowCreateFailure *uint64 `protobuf:"varint,59,opt,name=ipv4_flow_create_failure,json=ipv4FlowCreateFailure" json:"ipv4_flow_create_failure,omitempty"`
	// Total number of route, autonomous system lookup failure
	Ipv4RouteLookupFailure            *uint64 `protobuf:"varint,60,opt,name=ipv4_route_lookup_failure,json=ipv4RouteLookupFailure" json:"ipv4_route_lookup_failure,omitempty"`
	Ipv4AutonomousSystemLookupFailure *uint64 `protobuf:"varint,61,opt,name=ipv4_autonomous_system_lookup_failure,json=ipv4AutonomousSystemLookupFailure" json:"ipv4_autonomous_system_lookup_failure,omitempty"`
	// Total number of exporting flow record to collector failed
	Ipv4FlowPacketExportFailure *uint64 `protobuf:"varint,62,opt,name=ipv4_flow_packet_export_failure,json=ipv4FlowPacketExportFailure" json:"ipv4_flow_packet_export_failure,omitempty"`
	// IPv4 flow table utlization in percentage
	Ipv4FlowTableUtilization *float32 `protobuf:"fixed32,63,opt,name=ipv4_flow_table_utilization,json=ipv4FlowTableUtilization" json:"ipv4_flow_table_utilization,omitempty"`
	// Absolute number of flow inserted
	Ipv4FlowInsertCount *uint64 `protobuf:"varint,64,opt,name=ipv4_flow_insert_count,json=ipv4FlowInsertCount" json:"ipv4_flow_insert_count,omitempty"`
	// IPv6 NPU Stats
	Ipv6FlowPackets                   *uint64  `protobuf:"varint,101,opt,name=ipv6_flow_packets,json=ipv6FlowPackets" json:"ipv6_flow_packets,omitempty"`
	Ipv6FlowBytes                     *uint64  `protobuf:"varint,102,opt,name=ipv6_flow_bytes,json=ipv6FlowBytes" json:"ipv6_flow_bytes,omitempty"`
	Ipv6TotalFlows                    *uint64  `protobuf:"varint,103,opt,name=ipv6_total_flows,json=ipv6TotalFlows" json:"ipv6_total_flows,omitempty"`
	Ipv6ActiveFlows                   *uint64  `protobuf:"varint,104,opt,name=ipv6_active_flows,json=ipv6ActiveFlows" json:"ipv6_active_flows,omitempty"`
	Ipv6FlowsExported                 *uint64  `protobuf:"varint,105,opt,name=ipv6_flows_exported,json=ipv6FlowsExported" json:"ipv6_flows_exported,omitempty"`
	Ipv6PacketsExported               *uint64  `protobuf:"varint,106,opt,name=ipv6_packets_exported,json=ipv6PacketsExported" json:"ipv6_packets_exported,omitempty"`
	Ipv6FlowsInactiveTimedOut         *uint64  `protobuf:"varint,107,opt,name=ipv6_flows_inactive_timed_out,json=ipv6FlowsInactiveTimedOut" json:"ipv6_flows_inactive_timed_out,omitempty"`
	Ipv6FlowsActiveTimedOut           *uint64  `protobuf:"varint,108,opt,name=ipv6_flows_active_timed_out,json=ipv6FlowsActiveTimedOut" json:"ipv6_flows_active_timed_out,omitempty"`
	Ipv6FlowCreateFailure             *uint64  `protobuf:"varint,109,opt,name=ipv6_flow_create_failure,json=ipv6FlowCreateFailure" json:"ipv6_flow_create_failure,omitempty"`
	Ipv6RouteLookupFailure            *uint64  `protobuf:"varint,110,opt,name=ipv6_route_lookup_failure,json=ipv6RouteLookupFailure" json:"ipv6_route_lookup_failure,omitempty"`
	Ipv6AutonomousSystemLookupFailure *uint64  `protobuf:"varint,111,opt,name=ipv6_autonomous_system_lookup_failure,json=ipv6AutonomousSystemLookupFailure" json:"ipv6_autonomous_system_lookup_failure,omitempty"`
	Ipv6FlowPacketExportFailure       *uint64  `protobuf:"varint,112,opt,name=ipv6_flow_packet_export_failure,json=ipv6FlowPacketExportFailure" json:"ipv6_flow_packet_export_failure,omitempty"`
	Ipv6FlowTableUtilization          *float32 `protobuf:"fixed32,113,opt,name=ipv6_flow_table_utilization,json=ipv6FlowTableUtilization" json:"ipv6_flow_table_utilization,omitempty"`
	Ipv6FlowInsertCount               *uint64  `protobuf:"varint,114,opt,name=ipv6_flow_insert_count,json=ipv6FlowInsertCount" json:"ipv6_flow_insert_count,omitempty"`
	// VPLS NPU Stats
	VplsFlowPackets                   *uint64  `protobuf:"varint,151,opt,name=vpls_flow_packets,json=vplsFlowPackets" json:"vpls_flow_packets,omitempty"`
	VplsFlowBytes                     *uint64  `protobuf:"varint,152,opt,name=vpls_flow_bytes,json=vplsFlowBytes" json:"vpls_flow_bytes,omitempty"`
	VplsTotalFlows                    *uint64  `protobuf:"varint,153,opt,name=vpls_total_flows,json=vplsTotalFlows" json:"vpls_total_flows,omitempty"`
	VplsActiveFlows                   *uint64  `protobuf:"varint,154,opt,name=vpls_active_flows,json=vplsActiveFlows" json:"vpls_active_flows,omitempty"`
	VplsFlowsExported                 *uint64  `protobuf:"varint,155,opt,name=vpls_flows_exported,json=vplsFlowsExported" json:"vpls_flows_exported,omitempty"`
	VplsPacketsExported               *uint64  `protobuf:"varint,156,opt,name=vpls_packets_exported,json=vplsPacketsExported" json:"vpls_packets_exported,omitempty"`
	VplsFlowsInactiveTimedOut         *uint64  `protobuf:"varint,157,opt,name=vpls_flows_inactive_timed_out,json=vplsFlowsInactiveTimedOut" json:"vpls_flows_inactive_timed_out,omitempty"`
	VplsFlowsActiveTimedOut           *uint64  `protobuf:"varint,158,opt,name=vpls_flows_active_timed_out,json=vplsFlowsActiveTimedOut" json:"vpls_flows_active_timed_out,omitempty"`
	VplsFlowCreateFailure             *uint64  `protobuf:"varint,159,opt,name=vpls_flow_create_failure,json=vplsFlowCreateFailure" json:"vpls_flow_create_failure,omitempty"`
	VplsRouteLookupFailure            *uint64  `protobuf:"varint,160,opt,name=vpls_route_lookup_failure,json=vplsRouteLookupFailure" json:"vpls_route_lookup_failure,omitempty"`
	VplsAutonomousSystemLookupFailure *uint64  `protobuf:"varint,161,opt,name=vpls_autonomous_system_lookup_failure,json=vplsAutonomousSystemLookupFailure" json:"vpls_autonomous_system_lookup_failure,omitempty"`
	VplsFlowPacketExportFailure       *uint64  `protobuf:"varint,162,opt,name=vpls_flow_packet_export_failure,json=vplsFlowPacketExportFailure" json:"vpls_flow_packet_export_failure,omitempty"`
	VplsFlowTableUtilization          *float32 `protobuf:"fixed32,163,opt,name=vpls_flow_table_utilization,json=vplsFlowTableUtilization" json:"vpls_flow_table_utilization,omitempty"`
	VplsFlowInsertCount               *uint64  `protobuf:"varint,164,opt,name=vpls_flow_insert_count,json=vplsFlowInsertCount" json:"vpls_flow_insert_count,omitempty"`
	// MPLS NPU Stats
	MplsFlowPackets                   *uint64  `protobuf:"varint,201,opt,name=mpls_flow_packets,json=mplsFlowPackets" json:"mpls_flow_packets,omitempty"`
	MplsFlowBytes                     *uint64  `protobuf:"varint,202,opt,name=mpls_flow_bytes,json=mplsFlowBytes" json:"mpls_flow_bytes,omitempty"`
	MplsTotalFlows                    *uint64  `protobuf:"varint,203,opt,name=mpls_total_flows,json=mplsTotalFlows" json:"mpls_total_flows,omitempty"`
	MplsActiveFlows                   *uint64  `protobuf:"varint,204,opt,name=mpls_active_flows,json=mplsActiveFlows" json:"mpls_active_flows,omitempty"`
	MplsFlowsExported                 *uint64  `protobuf:"varint,205,opt,name=mpls_flows_exported,json=mplsFlowsExported" json:"mpls_flows_exported,omitempty"`
	MplsPacketsExported               *uint64  `protobuf:"varint,206,opt,name=mpls_packets_exported,json=mplsPacketsExported" json:"mpls_packets_exported,omitempty"`
	MplsFlowsInactiveTimedOut         *uint64  `protobuf:"varint,207,opt,name=mpls_flows_inactive_timed_out,json=mplsFlowsInactiveTimedOut" json:"mpls_flows_inactive_timed_out,omitempty"`
	MplsFlowsActiveTimedOut           *uint64  `protobuf:"varint,208,opt,name=mpls_flows_active_timed_out,json=mplsFlowsActiveTimedOut" json:"mpls_flows_active_timed_out,omitempty"`
	MplsFlowCreateFailure             *uint64  `protobuf:"varint,209,opt,name=mpls_flow_create_failure,json=mplsFlowCreateFailure" json:"mpls_flow_create_failure,omitempty"`
	MplsRouteLookupFailure            *uint64  `protobuf:"varint,210,opt,name=mpls_route_lookup_failure,json=mplsRouteLookupFailure" json:"mpls_route_lookup_failure,omitempty"`
	MplsAutonomousSystemLookupFailure *uint64  `protobuf:"varint,211,opt,name=mpls_autonomous_system_lookup_failure,json=mplsAutonomousSystemLookupFailure" json:"mpls_autonomous_system_lookup_failure,omitempty"`
	MplsFlowPacketExportFailure       *uint64  `protobuf:"varint,212,opt,name=mpls_flow_packet_export_failure,json=mplsFlowPacketExportFailure" json:"mpls_flow_packet_export_failure,omitempty"`
	MplsFlowTableUtilization          *float32 `protobuf:"fixed32,213,opt,name=mpls_flow_table_utilization,json=mplsFlowTableUtilization" json:"mpls_flow_table_utilization,omitempty"`
	MplsFlowInsertCount               *uint64  `protobuf:"varint,214,opt,name=mpls_flow_insert_count,json=mplsFlowInsertCount" json:"mpls_flow_insert_count,omitempty"`
	// BRIDGE NPU Stats
	BridgeFlowPackets                   *uint64  `protobuf:"varint,251,opt,name=bridge_flow_packets,json=bridgeFlowPackets" json:"bridge_flow_packets,omitempty"`
	BridgeFlowBytes                     *uint64  `protobuf:"varint,252,opt,name=bridge_flow_bytes,json=bridgeFlowBytes" json:"bridge_flow_bytes,omitempty"`
	BridgeTotalFlows                    *uint64  `protobuf:"varint,253,opt,name=bridge_total_flows,json=bridgeTotalFlows" json:"bridge_total_flows,omitempty"`
	BridgeActiveFlows                   *uint64  `protobuf:"varint,254,opt,name=bridge_active_flows,json=bridgeActiveFlows" json:"bridge_active_flows,omitempty"`
	BridgeFlowsExported                 *uint64  `protobuf:"varint,255,opt,name=bridge_flows_exported,json=bridgeFlowsExported" json:"bridge_flows_exported,omitempty"`
	BridgePacketsExported               *uint64  `protobuf:"varint,256,opt,name=bridge_packets_exported,json=bridgePacketsExported" json:"bridge_packets_exported,omitempty"`
	BridgeFlowsInactiveTimedOut         *uint64  `protobuf:"varint,257,opt,name=bridge_flows_inactive_timed_out,json=bridgeFlowsInactiveTimedOut" json:"bridge_flows_inactive_timed_out,omitempty"`
	BridgeFlowsActiveTimedOut           *uint64  `protobuf:"varint,258,opt,name=bridge_flows_active_timed_out,json=bridgeFlowsActiveTimedOut" json:"bridge_flows_active_timed_out,omitempty"`
	BridgeFlowCreateFailure             *uint64  `protobuf:"varint,259,opt,name=bridge_flow_create_failure,json=bridgeFlowCreateFailure" json:"bridge_flow_create_failure,omitempty"`
	BridgeRouteLookupFailure            *uint64  `protobuf:"varint,260,opt,name=bridge_route_lookup_failure,json=bridgeRouteLookupFailure" json:"bridge_route_lookup_failure,omitempty"`
	BridgeAutonomousSystemLookupFailure *uint64  `protobuf:"varint,261,opt,name=bridge_autonomous_system_lookup_failure,json=bridgeAutonomousSystemLookupFailure" json:"bridge_autonomous_system_lookup_failure,omitempty"`
	BridgeFlowPacketExportFailure       *uint64  `protobuf:"varint,262,opt,name=bridge_flow_packet_export_failure,json=bridgeFlowPacketExportFailure" json:"bridge_flow_packet_export_failure,omitempty"`
	BridgeFlowTableUtilization          *float32 `protobuf:"fixed32,263,opt,name=bridge_flow_table_utilization,json=bridgeFlowTableUtilization" json:"bridge_flow_table_utilization,omitempty"`
	BridgeFlowInsertCount               *uint64  `protobuf:"varint,264,opt,name=bridge_flow_insert_count,json=bridgeFlowInsertCount" json:"bridge_flow_insert_count,omitempty"`
	XXX_NoUnkeyedLiteral                struct{} `json:"-"`
	XXX_unrecognized                    []byte   `json:"-"`
	XXX_sizecache                       int32    `json:"-"`
}

func (m *InlineJflowNpuStats) Reset()         { *m = InlineJflowNpuStats{} }
func (m *InlineJflowNpuStats) String() string { return proto.CompactTextString(m) }
func (*InlineJflowNpuStats) ProtoMessage()    {}
func (*InlineJflowNpuStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f414b06d7d500f7, []int{1}
}
func (m *InlineJflowNpuStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InlineJflowNpuStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InlineJflowNpuStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InlineJflowNpuStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InlineJflowNpuStats.Merge(m, src)
}
func (m *InlineJflowNpuStats) XXX_Size() int {
	return m.Size()
}
func (m *InlineJflowNpuStats) XXX_DiscardUnknown() {
	xxx_messageInfo_InlineJflowNpuStats.DiscardUnknown(m)
}

var xxx_messageInfo_InlineJflowNpuStats proto.InternalMessageInfo

func (m *InlineJflowNpuStats) GetNpuIdentifier() uint32 {
	if m != nil && m.NpuIdentifier != nil {
		return *m.NpuIdentifier
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv4FlowPackets() uint64 {
	if m != nil && m.Ipv4FlowPackets != nil {
		return *m.Ipv4FlowPackets
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv4FlowBytes() uint64 {
	if m != nil && m.Ipv4FlowBytes != nil {
		return *m.Ipv4FlowBytes
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv4TotalFlows() uint64 {
	if m != nil && m.Ipv4TotalFlows != nil {
		return *m.Ipv4TotalFlows
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv4ActiveFlows() uint64 {
	if m != nil && m.Ipv4ActiveFlows != nil {
		return *m.Ipv4ActiveFlows
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv4FlowsExported() uint64 {
	if m != nil && m.Ipv4FlowsExported != nil {
		return *m.Ipv4FlowsExported
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv4PacketsExported() uint64 {
	if m != nil && m.Ipv4PacketsExported != nil {
		return *m.Ipv4PacketsExported
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv4FlowsInactiveTimedOut() uint64 {
	if m != nil && m.Ipv4FlowsInactiveTimedOut != nil {
		return *m.Ipv4FlowsInactiveTimedOut
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv4FlowsActiveTimedOut() uint64 {
	if m != nil && m.Ipv4FlowsActiveTimedOut != nil {
		return *m.Ipv4FlowsActiveTimedOut
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv4FlowCreateFailure() uint64 {
	if m != nil && m.Ipv4FlowCreateFailure != nil {
		return *m.Ipv4FlowCreateFailure
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv4RouteLookupFailure() uint64 {
	if m != nil && m.Ipv4RouteLookupFailure != nil {
		return *m.Ipv4RouteLookupFailure
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv4AutonomousSystemLookupFailure() uint64 {
	if m != nil && m.Ipv4AutonomousSystemLookupFailure != nil {
		return *m.Ipv4AutonomousSystemLookupFailure
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv4FlowPacketExportFailure() uint64 {
	if m != nil && m.Ipv4FlowPacketExportFailure != nil {
		return *m.Ipv4FlowPacketExportFailure
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv4FlowTableUtilization() float32 {
	if m != nil && m.Ipv4FlowTableUtilization != nil {
		return *m.Ipv4FlowTableUtilization
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv4FlowInsertCount() uint64 {
	if m != nil && m.Ipv4FlowInsertCount != nil {
		return *m.Ipv4FlowInsertCount
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv6FlowPackets() uint64 {
	if m != nil && m.Ipv6FlowPackets != nil {
		return *m.Ipv6FlowPackets
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv6FlowBytes() uint64 {
	if m != nil && m.Ipv6FlowBytes != nil {
		return *m.Ipv6FlowBytes
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv6TotalFlows() uint64 {
	if m != nil && m.Ipv6TotalFlows != nil {
		return *m.Ipv6TotalFlows
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv6ActiveFlows() uint64 {
	if m != nil && m.Ipv6ActiveFlows != nil {
		return *m.Ipv6ActiveFlows
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv6FlowsExported() uint64 {
	if m != nil && m.Ipv6FlowsExported != nil {
		return *m.Ipv6FlowsExported
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv6PacketsExported() uint64 {
	if m != nil && m.Ipv6PacketsExported != nil {
		return *m.Ipv6PacketsExported
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv6FlowsInactiveTimedOut() uint64 {
	if m != nil && m.Ipv6FlowsInactiveTimedOut != nil {
		return *m.Ipv6FlowsInactiveTimedOut
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv6FlowsActiveTimedOut() uint64 {
	if m != nil && m.Ipv6FlowsActiveTimedOut != nil {
		return *m.Ipv6FlowsActiveTimedOut
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv6FlowCreateFailure() uint64 {
	if m != nil && m.Ipv6FlowCreateFailure != nil {
		return *m.Ipv6FlowCreateFailure
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv6RouteLookupFailure() uint64 {
	if m != nil && m.Ipv6RouteLookupFailure != nil {
		return *m.Ipv6RouteLookupFailure
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv6AutonomousSystemLookupFailure() uint64 {
	if m != nil && m.Ipv6AutonomousSystemLookupFailure != nil {
		return *m.Ipv6AutonomousSystemLookupFailure
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv6FlowPacketExportFailure() uint64 {
	if m != nil && m.Ipv6FlowPacketExportFailure != nil {
		return *m.Ipv6FlowPacketExportFailure
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv6FlowTableUtilization() float32 {
	if m != nil && m.Ipv6FlowTableUtilization != nil {
		return *m.Ipv6FlowTableUtilization
	}
	return 0
}

func (m *InlineJflowNpuStats) GetIpv6FlowInsertCount() uint64 {
	if m != nil && m.Ipv6FlowInsertCount != nil {
		return *m.Ipv6FlowInsertCount
	}
	return 0
}

func (m *InlineJflowNpuStats) GetVplsFlowPackets() uint64 {
	if m != nil && m.VplsFlowPackets != nil {
		return *m.VplsFlowPackets
	}
	return 0
}

func (m *InlineJflowNpuStats) GetVplsFlowBytes() uint64 {
	if m != nil && m.VplsFlowBytes != nil {
		return *m.VplsFlowBytes
	}
	return 0
}

func (m *InlineJflowNpuStats) GetVplsTotalFlows() uint64 {
	if m != nil && m.VplsTotalFlows != nil {
		return *m.VplsTotalFlows
	}
	return 0
}

func (m *InlineJflowNpuStats) GetVplsActiveFlows() uint64 {
	if m != nil && m.VplsActiveFlows != nil {
		return *m.VplsActiveFlows
	}
	return 0
}

func (m *InlineJflowNpuStats) GetVplsFlowsExported() uint64 {
	if m != nil && m.VplsFlowsExported != nil {
		return *m.VplsFlowsExported
	}
	return 0
}

func (m *InlineJflowNpuStats) GetVplsPacketsExported() uint64 {
	if m != nil && m.VplsPacketsExported != nil {
		return *m.VplsPacketsExported
	}
	return 0
}

func (m *InlineJflowNpuStats) GetVplsFlowsInactiveTimedOut() uint64 {
	if m != nil && m.VplsFlowsInactiveTimedOut != nil {
		return *m.VplsFlowsInactiveTimedOut
	}
	return 0
}

func (m *InlineJflowNpuStats) GetVplsFlowsActiveTimedOut() uint64 {
	if m != nil && m.VplsFlowsActiveTimedOut != nil {
		return *m.VplsFlowsActiveTimedOut
	}
	return 0
}

func (m *InlineJflowNpuStats) GetVplsFlowCreateFailure() uint64 {
	if m != nil && m.VplsFlowCreateFailure != nil {
		return *m.VplsFlowCreateFailure
	}
	return 0
}

func (m *InlineJflowNpuStats) GetVplsRouteLookupFailure() uint64 {
	if m != nil && m.VplsRouteLookupFailure != nil {
		return *m.VplsRouteLookupFailure
	}
	return 0
}

func (m *InlineJflowNpuStats) GetVplsAutonomousSystemLookupFailure() uint64 {
	if m != nil && m.VplsAutonomousSystemLookupFailure != nil {
		return *m.VplsAutonomousSystemLookupFailure
	}
	return 0
}

func (m *InlineJflowNpuStats) GetVplsFlowPacketExportFailure() uint64 {
	if m != nil && m.VplsFlowPacketExportFailure != nil {
		return *m.VplsFlowPacketExportFailure
	}
	return 0
}

func (m *InlineJflowNpuStats) GetVplsFlowTableUtilization() float32 {
	if m != nil && m.VplsFlowTableUtilization != nil {
		return *m.VplsFlowTableUtilization
	}
	return 0
}

func (m *InlineJflowNpuStats) GetVplsFlowInsertCount() uint64 {
	if m != nil && m.VplsFlowInsertCount != nil {
		return *m.VplsFlowInsertCount
	}
	return 0
}

func (m *InlineJflowNpuStats) GetMplsFlowPackets() uint64 {
	if m != nil && m.MplsFlowPackets != nil {
		return *m.MplsFlowPackets
	}
	return 0
}

func (m *InlineJflowNpuStats) GetMplsFlowBytes() uint64 {
	if m != nil && m.MplsFlowBytes != nil {
		return *m.MplsFlowBytes
	}
	return 0
}

func (m *InlineJflowNpuStats) GetMplsTotalFlows() uint64 {
	if m != nil && m.MplsTotalFlows != nil {
		return *m.MplsTotalFlows
	}
	return 0
}

func (m *InlineJflowNpuStats) GetMplsActiveFlows() uint64 {
	if m != nil && m.MplsActiveFlows != nil {
		return *m.MplsActiveFlows
	}
	return 0
}

func (m *InlineJflowNpuStats) GetMplsFlowsExported() uint64 {
	if m != nil && m.MplsFlowsExported != nil {
		return *m.MplsFlowsExported
	}
	return 0
}

func (m *InlineJflowNpuStats) GetMplsPacketsExported() uint64 {
	if m != nil && m.MplsPacketsExported != nil {
		return *m.MplsPacketsExported
	}
	return 0
}

func (m *InlineJflowNpuStats) GetMplsFlowsInactiveTimedOut() uint64 {
	if m != nil && m.MplsFlowsInactiveTimedOut != nil {
		return *m.MplsFlowsInactiveTimedOut
	}
	return 0
}

func (m *InlineJflowNpuStats) GetMplsFlowsActiveTimedOut() uint64 {
	if m != nil && m.MplsFlowsActiveTimedOut != nil {
		return *m.MplsFlowsActiveTimedOut
	}
	return 0
}

func (m *InlineJflowNpuStats) GetMplsFlowCreateFailure() uint64 {
	if m != nil && m.MplsFlowCreateFailure != nil {
		return *m.MplsFlowCreateFailure
	}
	return 0
}

func (m *InlineJflowNpuStats) GetMplsRouteLookupFailure() uint64 {
	if m != nil && m.MplsRouteLookupFailure != nil {
		return *m.MplsRouteLookupFailure
	}
	return 0
}

func (m *InlineJflowNpuStats) GetMplsAutonomousSystemLookupFailure() uint64 {
	if m != nil && m.MplsAutonomousSystemLookupFailure != nil {
		return *m.MplsAutonomousSystemLookupFailure
	}
	return 0
}

func (m *InlineJflowNpuStats) GetMplsFlowPacketExportFailure() uint64 {
	if m != nil && m.MplsFlowPacketExportFailure != nil {
		return *m.MplsFlowPacketExportFailure
	}
	return 0
}

func (m *InlineJflowNpuStats) GetMplsFlowTableUtilization() float32 {
	if m != nil && m.MplsFlowTableUtilization != nil {
		return *m.MplsFlowTableUtilization
	}
	return 0
}

func (m *InlineJflowNpuStats) GetMplsFlowInsertCount() uint64 {
	if m != nil && m.MplsFlowInsertCount != nil {
		return *m.MplsFlowInsertCount
	}
	return 0
}

func (m *InlineJflowNpuStats) GetBridgeFlowPackets() uint64 {
	if m != nil && m.BridgeFlowPackets != nil {
		return *m.BridgeFlowPackets
	}
	return 0
}

func (m *InlineJflowNpuStats) GetBridgeFlowBytes() uint64 {
	if m != nil && m.BridgeFlowBytes != nil {
		return *m.BridgeFlowBytes
	}
	return 0
}

func (m *InlineJflowNpuStats) GetBridgeTotalFlows() uint64 {
	if m != nil && m.BridgeTotalFlows != nil {
		return *m.BridgeTotalFlows
	}
	return 0
}

func (m *InlineJflowNpuStats) GetBridgeActiveFlows() uint64 {
	if m != nil && m.BridgeActiveFlows != nil {
		return *m.BridgeActiveFlows
	}
	return 0
}

func (m *InlineJflowNpuStats) GetBridgeFlowsExported() uint64 {
	if m != nil && m.BridgeFlowsExported != nil {
		return *m.BridgeFlowsExported
	}
	return 0
}

func (m *InlineJflowNpuStats) GetBridgePacketsExported() uint64 {
	if m != nil && m.BridgePacketsExported != nil {
		return *m.BridgePacketsExported
	}
	return 0
}

func (m *InlineJflowNpuStats) GetBridgeFlowsInactiveTimedOut() uint64 {
	if m != nil && m.BridgeFlowsInactiveTimedOut != nil {
		return *m.BridgeFlowsInactiveTimedOut
	}
	return 0
}

func (m *InlineJflowNpuStats) GetBridgeFlowsActiveTimedOut() uint64 {
	if m != nil && m.BridgeFlowsActiveTimedOut != nil {
		return *m.BridgeFlowsActiveTimedOut
	}
	return 0
}

func (m *InlineJflowNpuStats) GetBridgeFlowCreateFailure() uint64 {
	if m != nil && m.BridgeFlowCreateFailure != nil {
		return *m.BridgeFlowCreateFailure
	}
	return 0
}

func (m *InlineJflowNpuStats) GetBridgeRouteLookupFailure() uint64 {
	if m != nil && m.BridgeRouteLookupFailure != nil {
		return *m.BridgeRouteLookupFailure
	}
	return 0
}

func (m *InlineJflowNpuStats) GetBridgeAutonomousSystemLookupFailure() uint64 {
	if m != nil && m.BridgeAutonomousSystemLookupFailure != nil {
		return *m.BridgeAutonomousSystemLookupFailure
	}
	return 0
}

func (m *InlineJflowNpuStats) GetBridgeFlowPacketExportFailure() uint64 {
	if m != nil && m.BridgeFlowPacketExportFailure != nil {
		return *m.BridgeFlowPacketExportFailure
	}
	return 0
}

func (m *InlineJflowNpuStats) GetBridgeFlowTableUtilization() float32 {
	if m != nil && m.BridgeFlowTableUtilization != nil {
		return *m.BridgeFlowTableUtilization
	}
	return 0
}

func (m *InlineJflowNpuStats) GetBridgeFlowInsertCount() uint64 {
	if m != nil && m.BridgeFlowInsertCount != nil {
		return *m.BridgeFlowInsertCount
	}
	return 0
}

var E_InlineJflowStatsExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*InlineJflow)(nil),
	Field:         9,
	Name:          "inline_jflow_stats_ext",
	Tag:           "bytes,9,opt,name=inline_jflow_stats_ext",
	Filename:      "inline_jflow.proto",
}

func init() {
	proto.RegisterType((*InlineJflow)(nil), "InlineJflow")
	proto.RegisterType((*InlineJflowNpuStats)(nil), "InlineJflowNpuStats")
	proto.RegisterExtension(E_InlineJflowStatsExt)
}

func init() { proto.RegisterFile("inline_jflow.proto", fileDescriptor_2f414b06d7d500f7) }

var fileDescriptor_2f414b06d7d500f7 = []byte{
	// 1741 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x98, 0x69, 0x73, 0x14, 0xb9,
	0x19, 0xc7, 0x6b, 0x0c, 0x24, 0x20, 0xe3, 0xab, 0xc7, 0x47, 0x1b, 0xc7, 0x30, 0x40, 0x51, 0xf1,
	0x1b, 0x7b, 0xc0, 0x80, 0x00, 0x93, 0x60, 0x8c, 0xb1, 0x83, 0x09, 0x57, 0x8d, 0x9d, 0x4a, 0x8a,
	0x4a, 0x55, 0xa7, 0x3d, 0x2d, 0x8f, 0x65, 0xb7, 0xba, 0x27, 0xdd, 0x6a, 0x63, 0xf3, 0x2a, 0x21,
	0xd9, 0xe3, 0x1b, 0xec, 0x7d, 0xef, 0x87, 0xd9, 0x93, 0x65, 0xcf, 0xd7, 0xbb, 0x7c, 0x8d, 0x3d,
	0x4b, 0x52, 0x77, 0x8f, 0x8e, 0x9e, 0x19, 0xbf, 0x03, 0x3f, 0xcf, 0xff, 0x2f, 0xe9, 0xe9, 0xe7,
	0x27, 0x8d, 0x04, 0x2c, 0x1c, 0xf8, 0x38, 0x40, 0xce, 0xd6, 0x86, 0x1f, 0x3e, 0x9a, 0x69, 0x46,
	0x21, 0x0d, 0x8f, 0x95, 0x29, 0xf2, 0x11, 0x41, 0x34, 0xda, 0x73, 0x68, 0xd8, 0x14, 0x7f, 0x3c,
	0xf5, 0x43, 0x2f, 0xe8, 0x5d, 0xe1, 0xb9, 0xb7, 0x59, 0xaa, 0x75, 0x09, 0xd8, 0xb8, 0xb9, 0x73,
	0xc1, 0x61, 0xff, 0x89, 0x1d, 0xb4, 0xdb, 0x0c, 0x23, 0xea, 0x6c, 0x84, 0x11, 0x71, 0xa9, 0xdd,
	0x53, 0x29, 0x4d, 0x1d, 0xa9, 0x8d, 0xb0, 0xf8, 0x32, 0x0b, 0x2f, 0xf1, 0xe8, 0x32, 0x0f, 0xa6,
	0x42, 0x58, 0x28, 0x3c, 0x90, 0x0b, 0x61, 0xa1, 0x70, 0xa7, 0xe9, 0xc7, 0x85, 0xc2, 0x83, 0x42,
	0xc8, 0xe2, 0x85, 0x42, 0xd2, 0x4e, 0x78, 0x48, 0x08, 0x49, 0xa1, 0xf0, 0x1c, 0xe0, 0x6b, 0x70,
	0xa2, 0x30, 0xa1, 0xc8, 0x89, 0x50, 0x3d, 0x8c, 0x3c, 0xa7, 0x1e, 0x50, 0xfb, 0x77, 0x95, 0xd2,
	0x54, 0x5f, 0xcd, 0x62, 0xc1, 0x1a, 0x8b, 0xd5, 0x78, 0x68, 0x31, 0xc8, 0x24, 0xd0, 0x94, 0xfc,
	0x3e, 0x97, 0x40, 0x53, 0xc2, 0xa7, 0x67, 0x48, 0x0e, 0x0b, 0x09, 0x0b, 0x6a, 0x92, 0x79, 0xf0,
	0x07, 0x37, 0xa1, 0x61, 0x10, 0x92, 0x30, 0x89, 0x9d, 0x78, 0x2f, 0xa6, 0x88, 0xc8, 0xca, 0x23,
	0x5c, 0x39, 0xde, 0xca, 0x59, 0xe5, 0x29, 0x2d, 0x83, 0x2a, 0x18, 0xe6, 0x2b, 0x23, 0xee, 0x6e,
	0x5a, 0x96, 0x7a, 0x98, 0x04, 0xd4, 0x06, 0x95, 0xd2, 0xd4, 0xc1, 0xda, 0x10, 0x8b, 0xdd, 0x75,
	0x77, 0x79, 0x45, 0x16, 0x59, 0x20, 0x15, 0x40, 0x43, 0xd0, 0x9b, 0x0b, 0xa0, 0x21, 0xe0, 0x5f,
	0x4b, 0x17, 0x1c, 0x15, 0x02, 0x16, 0x33, 0x04, 0xa4, 0x48, 0xd0, 0x27, 0x04, 0xc4, 0x10, 0x5c,
	0x06, 0x23, 0x04, 0x91, 0x30, 0xda, 0x73, 0x5c, 0xdf, 0x0f, 0xeb, 0xce, 0x86, 0x8b, 0x7d, 0xbe,
	0xfa, 0x7e, 0xb6, 0xfa, 0x1b, 0x87, 0x9e, 0x5c, 0xef, 0xb1, 0x4b, 0x35, 0x4b, 0xe4, 0x2c, 0xb0,
	0x94, 0x65, 0x17, 0xfb, 0x6c, 0xf5, 0x0f, 0xc0, 0x19, 0xbe, 0xfa, 0x7a, 0x18, 0x6c, 0xe0, 0x46,
	0x12, 0x21, 0xcf, 0x09, 0xd7, 0x63, 0x14, 0xed, 0xb8, 0x14, 0x87, 0x81, 0xe3, 0x85, 0xc4, 0xc5,
	0x81, 0x83, 0x3d, 0x7b, 0x80, 0xd7, 0xf1, 0x24, 0x4b, 0x5e, 0xcc, 0x73, 0xef, 0xb7, 0x52, 0x6f,
	0xf2, 0xcc, 0x15, 0x2f, 0x75, 0x84, 0xdd, 0x1d, 0x07, 0x73, 0x47, 0xd8, 0xd5, 0x91, 0xd7, 0xaf,
	0xab, 0xe3, 0x90, 0x70, 0x64, 0xc9, 0x5d, 0x1d, 0xc9, 0xbe, 0x1c, 0x2d, 0xe1, 0x48, 0xba, 0x3a,
	0x9e, 0x05, 0xc3, 0xbe, 0x1b, 0x53, 0xa7, 0xee, 0x23, 0x37, 0x72, 0x28, 0x26, 0x28, 0xa6, 0x2e,
	0x69, 0xda, 0x65, 0xd1, 0xb8, 0x2c, 0xb6, 0xc8, 0x42, 0x6b, 0x59, 0xc4, 0x82, 0x60, 0x8c, 0xd7,
	0x09, 0xed, 0x52, 0x14, 0x78, 0xc8, 0x73, 0x5c, 0x4a, 0x23, 0xbc, 0x9e, 0x50, 0x64, 0x0f, 0x57,
	0x4a, 0x53, 0x87, 0x05, 0xfb, 0x4b, 0x69, 0x74, 0x21, 0x0b, 0xb2, 0x91, 0x36, 0x7c, 0xb4, 0x8b,
	0xd7, 0x7d, 0xc4, 0x9b, 0xc3, 0x89, 0xf1, 0x63, 0x1c, 0x34, 0xec, 0x11, 0x2e, 0xb2, 0xb2, 0x18,
	0xeb, 0x8e, 0x55, 0x1e, 0x61, 0xd0, 0x27, 0x31, 0x6a, 0x0d, 0xc4, 0x55, 0xa2, 0x17, 0xec, 0x51,
	0x31, 0x54, 0x12, 0xa3, 0x6c, 0x24, 0x26, 0xbc, 0xcb, 0x83, 0xd6, 0x55, 0x70, 0x6c, 0x3d, 0xc2,
	0x5e, 0x03, 0x15, 0xee, 0x17, 0x63, 0x7c, 0xbf, 0x18, 0x13, 0x19, 0xe6, 0x8e, 0x71, 0x1e, 0x8c,
	0xa6, 0x62, 0xbd, 0x8d, 0x6d, 0xde, 0xc6, 0x65, 0x11, 0x55, 0x1b, 0x79, 0x0d, 0xfc, 0x31, 0x15,
	0x75, 0xfd, 0x34, 0xe3, 0xbc, 0xb2, 0xa7, 0x45, 0x7a, 0xe7, 0x8f, 0x73, 0x0e, 0x1c, 0x09, 0x9a,
	0x89, 0x13, 0x53, 0x97, 0xc6, 0xf6, 0x6c, 0xe5, 0xc0, 0x54, 0xef, 0xec, 0xf0, 0x8c, 0xb4, 0x83,
	0xdf, 0x6b, 0x26, 0xab, 0x2c, 0x56, 0x3b, 0x1c, 0xa4, 0xff, 0x3a, 0xf5, 0xf4, 0x34, 0x28, 0x17,
	0x64, 0x58, 0x67, 0x40, 0x3f, 0xb3, 0xc2, 0x1e, 0x0a, 0x28, 0xde, 0xc0, 0x28, 0xb2, 0x4b, 0x95,
	0x9e, 0xa9, 0xbe, 0x5a, 0x5f, 0xd0, 0x4c, 0x56, 0xf2, 0x3f, 0x5a, 0xe7, 0xc0, 0x50, 0x7e, 0x24,
	0x38, 0x4d, 0xb7, 0xbe, 0x8d, 0x68, 0x6c, 0x9f, 0x67, 0xeb, 0xce, 0x60, 0x1c, 0xc8, 0x8e, 0x84,
	0x07, 0x22, 0x6a, 0x4d, 0x83, 0x81, 0x96, 0x64, 0x7d, 0x8f, 0xa2, 0xd8, 0xbe, 0x20, 0x0b, 0xfa,
	0x32, 0xc1, 0x0d, 0x16, 0xb3, 0xaa, 0x60, 0x90, 0xa7, 0xd3, 0x90, 0xba, 0xbe, 0x28, 0xaf, 0x7d,
	0x51, 0xce, 0xef, 0x67, 0xe1, 0x35, 0x16, 0xe5, 0xf5, 0xcd, 0xa7, 0xe4, 0xd6, 0x29, 0xde, 0x49,
	0xbf, 0xa8, 0x0d, 0x8d, 0x29, 0x2d, 0xf0, 0xb0, 0x90, 0x5c, 0x04, 0x65, 0xe3, 0x60, 0x43, 0x9e,
	0x7d, 0x49, 0x16, 0x0d, 0x69, 0x47, 0x1b, 0xf2, 0xac, 0x2b, 0xe9, 0x59, 0x91, 0xae, 0xbb, 0x25,
	0xbc, 0x2c, 0x0b, 0xb9, 0x75, 0xba, 0xf8, 0x5c, 0xfa, 0x17, 0x30, 0x29, 0x8d, 0x88, 0x83, 0x74,
	0xb2, 0x8c, 0x27, 0xcf, 0x09, 0x13, 0x6a, 0x5f, 0x91, 0x2d, 0xc6, 0xf3, 0xb1, 0x57, 0xd2, 0x4c,
	0x86, 0x97, 0x77, 0x3f, 0xa1, 0xd6, 0x22, 0x98, 0x90, 0x8c, 0x0c, 0x9b, 0x39, 0xd9, 0x66, 0x2c,
	0xb7, 0x59, 0x50, 0x4d, 0xae, 0x49, 0x07, 0xbb, 0x53, 0x8f, 0x90, 0x4b, 0x11, 0xdf, 0x5a, 0x93,
	0x08, 0xd9, 0x57, 0x65, 0x87, 0xfc, 0x7c, 0x5f, 0xe4, 0x49, 0xcb, 0x22, 0xc7, 0xba, 0x0e, 0xc6,
	0xa5, 0x43, 0xd3, 0x0f, 0xc3, 0xed, 0xa4, 0x99, 0x1b, 0xfc, 0x49, 0x36, 0x18, 0xcd, 0xcf, 0xcf,
	0x3b, 0x3c, 0x2b, 0x73, 0xf8, 0x7b, 0xba, 0x3d, 0x9b, 0x47, 0x9c, 0xe6, 0xf6, 0x67, 0xd9, 0x8d,
	0xef, 0xd2, 0x0b, 0xda, 0x89, 0xa7, 0x1a, 0xff, 0x15, 0x9c, 0xd0, 0x1b, 0x34, 0xc7, 0x3b, 0xb5,
	0xbc, 0x26, 0x5b, 0x4e, 0xa8, 0xed, 0x9a, 0x92, 0x9e, 0x9a, 0xdd, 0x94, 0x8a, 0xed, 0x50, 0x97,
	0xed, 0x4c, 0x09, 0xc5, 0x3e, 0x7e, 0xcc, 0x31, 0xb4, 0xe7, 0x2b, 0xa5, 0xa9, 0x1e, 0x6e, 0x54,
	0x29, 0xd5, 0xec, 0xcc, 0x68, 0x8d, 0xe5, 0xfd, 0xad, 0x95, 0x66, 0xcd, 0x81, 0xd1, 0x96, 0x0b,
	0x0e, 0x62, 0x14, 0xd1, 0x74, 0xc3, 0xb8, 0x6e, 0xf4, 0x0d, 0x33, 0x58, 0xe1, 0x29, 0x62, 0xdf,
	0x10, 0xcd, 0x0d, 0x55, 0xde, 0x90, 0xde, 0xdc, 0xd0, 0xe4, 0x0d, 0xca, 0xbc, 0x6d, 0xe8, 0xbc,
	0x41, 0x9d, 0x37, 0xa8, 0xf0, 0xd6, 0xd0, 0x79, 0x83, 0x06, 0x6f, 0x50, 0xe5, 0x6d, 0xd3, 0x98,
	0x92, 0xc9, 0x1b, 0xd4, 0x79, 0xc3, 0x3a, 0x6f, 0xb0, 0x88, 0x37, 0x68, 0xf2, 0xb6, 0xa5, 0xd7,
	0x0d, 0x16, 0xf3, 0x06, 0xdb, 0xf3, 0xb6, 0xad, 0xf3, 0x06, 0x3b, 0xf1, 0x06, 0xdb, 0xf1, 0xe6,
	0xeb, 0xbc, 0xc1, 0xf6, 0xbc, 0xc1, 0x42, 0xde, 0x88, 0xce, 0x1b, 0x6c, 0xc7, 0x1b, 0x2c, 0xe6,
	0x2d, 0xd0, 0x79, 0x83, 0x6d, 0x79, 0x83, 0xdd, 0x79, 0x0b, 0x75, 0xde, 0xe0, 0x7e, 0x78, 0x83,
	0x9d, 0x78, 0x6b, 0xea, 0xbc, 0xc1, 0xce, 0xbc, 0xc1, 0x76, 0xbc, 0xfd, 0x5b, 0xe7, 0x0d, 0x76,
	0xe0, 0x0d, 0x16, 0xf0, 0x16, 0x19, 0x7d, 0xa3, 0xf3, 0x36, 0x0b, 0x86, 0xf2, 0x0b, 0x48, 0xce,
	0xdb, 0x2b, 0x25, 0xa5, 0xbb, 0xb3, 0x1b, 0x48, 0x06, 0xdc, 0x0c, 0x18, 0x68, 0x69, 0x04, 0x70,
	0xaf, 0x2a, 0x8a, 0xbe, 0x4c, 0x21, 0x88, 0x3b, 0x0b, 0x06, 0x79, 0xbe, 0x4c, 0xdc, 0x6b, 0x8a,
	0xa0, 0x9f, 0xc5, 0x25, 0xe4, 0xb2, 0x59, 0x29, 0xc8, 0xbd, 0x6e, 0xce, 0x4a, 0x66, 0x0e, 0x82,
	0xb2, 0x71, 0x95, 0x42, 0x9e, 0xfd, 0x86, 0xa2, 0x1a, 0xd2, 0x6e, 0x53, 0xc8, 0xb3, 0xe6, 0x00,
	0xbf, 0x62, 0x99, 0xd0, 0xbd, 0xa9, 0x28, 0xb9, 0xb9, 0x4e, 0xdd, 0x2d, 0x30, 0x29, 0x8d, 0x59,
	0x40, 0xdd, 0x5b, 0x8a, 0xc7, 0x78, 0x3e, 0xba, 0x81, 0xdd, 0x4d, 0x30, 0x21, 0x39, 0x19, 0x3e,
	0x6f, 0x2b, 0x3e, 0x63, 0xb9, 0x8f, 0xc6, 0xdd, 0xbc, 0x74, 0x9d, 0xd4, 0xb9, 0x7b, 0x47, 0xb1,
	0xc8, 0xaf, 0x95, 0x2a, 0x78, 0x0b, 0x80, 0xcf, 0xb1, 0x18, 0xbc, 0x77, 0x15, 0x87, 0xd1, 0x9d,
	0xec, 0x0e, 0xa7, 0x02, 0xf2, 0x8f, 0xf4, 0x47, 0x7e, 0x57, 0xf2, 0xde, 0x53, 0xec, 0xf8, 0x8f,
	0xfd, 0xce, 0xe8, 0xdd, 0x01, 0x27, 0xf4, 0x5e, 0xd5, 0xd1, 0x7b, 0x5f, 0xf1, 0x9c, 0x50, 0x3b,
	0x57, 0x65, 0x6f, 0x49, 0xaa, 0x78, 0x01, 0x7b, 0x1f, 0x94, 0x14, 0xf8, 0x32, 0x27, 0x03, 0xbe,
	0xab, 0x60, 0xb4, 0x65, 0xa3, 0xc0, 0xf7, 0xa1, 0xd9, 0x3f, 0x05, 0xf4, 0x11, 0x83, 0xbe, 0x8f,
	0xd5, 0x3e, 0x27, 0x26, 0x7d, 0x44, 0xa3, 0xef, 0x13, 0x95, 0x3e, 0xa2, 0xd3, 0x47, 0x74, 0xfa,
	0x3e, 0x55, 0xe9, 0x23, 0x06, 0x7d, 0xc4, 0xa0, 0xef, 0x33, 0x73, 0x56, 0x1a, 0x7d, 0xa4, 0x80,
	0xbe, 0xcf, 0x55, 0xfa, 0x48, 0x11, 0x7d, 0xa4, 0x90, 0xbe, 0xa7, 0x6a, 0xf5, 0x48, 0x31, 0x7d,
	0xa4, 0x23, 0x7d, 0x5f, 0xa8, 0xf4, 0x91, 0x4e, 0xf4, 0x91, 0x0e, 0xf4, 0x3d, 0x53, 0xe9, 0x23,
	0xed, 0xe9, 0x23, 0xed, 0xe8, 0xfb, 0x52, 0xa5, 0x8f, 0xb4, 0xa3, 0x8f, 0xb4, 0xa5, 0xef, 0x2b,
	0x95, 0x3e, 0xd2, 0x96, 0x3e, 0xb2, 0x2f, 0xfa, 0xbe, 0x56, 0xe9, 0x23, 0xfb, 0xa1, 0x8f, 0x74,
	0xa1, 0xef, 0x1b, 0x95, 0x3e, 0xd2, 0x99, 0x3e, 0xd2, 0x81, 0xbe, 0x6f, 0x55, 0xfa, 0x48, 0x07,
	0xfa, 0x48, 0x31, 0x7d, 0xdf, 0x99, 0xfd, 0xa3, 0xd3, 0x07, 0x41, 0x59, 0xba, 0x15, 0xe7, 0xfc,
	0xfd, 0xa8, 0xf6, 0x6c, 0xeb, 0x5a, 0x9c, 0x11, 0x38, 0x0b, 0x86, 0x64, 0x9d, 0x60, 0xf0, 0x27,
	0x95, 0x8f, 0x96, 0x4a, 0x50, 0x78, 0x01, 0x58, 0xa9, 0x46, 0xe6, 0xf0, 0x67, 0x45, 0x34, 0x28,
	0x32, 0x24, 0x12, 0x5b, 0x33, 0x54, 0x58, 0xfc, 0xa5, 0x68, 0x86, 0x32, 0x8d, 0x73, 0x60, 0xa4,
	0xe0, 0xbe, 0x8f, 0x3c, 0xfb, 0x57, 0xb5, 0x2a, 0xc6, 0x95, 0x1f, 0x79, 0xd6, 0x35, 0x90, 0xbe,
	0x04, 0x98, 0x4c, 0xfe, 0xa7, 0x47, 0x69, 0x62, 0x91, 0xa6, 0x53, 0x79, 0x07, 0x9c, 0x50, 0xc6,
	0x2e, 0xe0, 0xf2, 0xbf, 0x8a, 0xcf, 0x84, 0x34, 0x0b, 0x83, 0xcc, 0x5b, 0x60, 0x52, 0x71, 0x33,
	0xbc, 0x9e, 0x28, 0x5e, 0xe3, 0x92, 0xd7, 0x82, 0xfe, 0xc3, 0x56, 0x7e, 0x03, 0xd1, 0xf9, 0xfc,
	0x9f, 0x62, 0x23, 0xbd, 0x85, 0xa8, 0x84, 0x2e, 0x81, 0x74, 0xb6, 0xc5, 0x8c, 0xfe, 0x5f, 0x71,
	0xb1, 0x45, 0x6a, 0x01, 0xa5, 0xff, 0xcc, 0x5f, 0x47, 0xba, 0x72, 0xfa, 0x82, 0x62, 0x99, 0xbe,
	0x92, 0x74, 0x26, 0xf5, 0x01, 0x38, 0x69, 0xf6, 0xb5, 0xce, 0xea, 0x8b, 0x8a, 0xef, 0xa4, 0xde,
	0xe5, 0x2a, 0xad, 0x2b, 0xca, 0x57, 0x28, 0xe0, 0xf5, 0xa5, 0x1e, 0x99, 0xd7, 0x63, 0x2d, 0x37,
	0x83, 0xd8, 0x79, 0x60, 0xcb, 0x56, 0x0a, 0xb3, 0x2f, 0x17, 0xf5, 0x97, 0x46, 0xed, 0xdc, 0x43,
	0x30, 0x2a, 0xbf, 0xef, 0x8b, 0xc7, 0x20, 0x07, 0xed, 0x52, 0x6b, 0x6c, 0xe6, 0x76, 0x12, 0xe0,
	0x26, 0x8a, 0xee, 0x21, 0xfa, 0x28, 0x8c, 0xb6, 0xe3, 0x55, 0x14, 0xc4, 0x61, 0x14, 0xf3, 0xa7,
	0xe3, 0xde, 0xd9, 0xa3, 0xf2, 0x4b, 0x51, 0xad, 0x8c, 0x5b, 0xff, 0xe1, 0x2f, 0x42, 0x4b, 0xbb,
	0xf4, 0xc6, 0xbf, 0x3e, 0x7a, 0x7e, 0xbc, 0xf4, 0xec, 0xf9, 0xf1, 0xd2, 0xf7, 0xcf, 0x8f, 0x97,
	0x1e, 0xd6, 0x1a, 0x98, 0xce, 0x6c, 0x09, 0xcb, 0x99, 0x00, 0xd1, 0x2a, 0xae, 0xa3, 0x75, 0x14,
	0x35, 0xaa, 0x9b, 0xc8, 0xf5, 0xe9, 0xe6, 0x7a, 0x48, 0xa7, 0x71, 0xd0, 0x40, 0x31, 0x9d, 0xde,
	0xa2, 0x78, 0x3a, 0x70, 0x59, 0xbb, 0x55, 0x9b, 0xdb, 0x8d, 0xea, 0x16, 0xc5, 0x55, 0xd7, 0x73,
	0x9b, 0x14, 0x45, 0x71, 0xd5, 0xd9, 0x4a, 0x82, 0x30, 0xae, 0xc6, 0xf5, 0x4d, 0x44, 0xdc, 0xdf,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xb8, 0x4a, 0x76, 0xe2, 0x9c, 0x18, 0x00, 0x00,
}

func (m *InlineJflow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InlineJflow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InlineJflow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NpuStats) > 0 {
		for iNdEx := len(m.NpuStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NpuStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInlineJflow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0x92
		}
	}
	if m.BridgeConfiguredObservationDomainId != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.BridgeConfiguredObservationDomainId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.BridgeMaxFlowsCount != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.BridgeMaxFlowsCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.BridgeFlowsExportFormat != nil {
		i -= len(*m.BridgeFlowsExportFormat)
		copy(dAtA[i:], *m.BridgeFlowsExportFormat)
		i = encodeVarintInlineJflow(dAtA, i, uint64(len(*m.BridgeFlowsExportFormat)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.UseExtendedFlowMemory != nil {
		i--
		if *m.UseExtendedFlowMemory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.FlexibleFlowSizing != nil {
		i--
		if *m.FlexibleFlowSizing {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.Ipv6ExtendedAttribute != nil {
		i--
		if *m.Ipv6ExtendedAttribute {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.LastClearTimestamp != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.LastClearTimestamp))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.MplsConfiguredObservationDomainId != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.MplsConfiguredObservationDomainId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.VplsConfiguredObservationDomainId != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.VplsConfiguredObservationDomainId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.Ipv6ConfiguredObservationDomainId != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.Ipv6ConfiguredObservationDomainId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Ipv4ConfiguredObservationDomainId != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.Ipv4ConfiguredObservationDomainId))
		i--
		dAtA[i] = 0x78
	}
	if m.MemoryAllocFailCnt != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.MemoryAllocFailCnt))
		i--
		dAtA[i] = 0x70
	}
	if m.MplsMaxFlowsCount != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.MplsMaxFlowsCount))
		i--
		dAtA[i] = 0x68
	}
	if m.VplsMaxFlowsCount != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.VplsMaxFlowsCount))
		i--
		dAtA[i] = 0x60
	}
	if m.Ipv6MaxFlowsCount != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.Ipv6MaxFlowsCount))
		i--
		dAtA[i] = 0x58
	}
	if m.Ipv4MaxFlowsCount != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.Ipv4MaxFlowsCount))
		i--
		dAtA[i] = 0x50
	}
	if m.AutonomousSystemRecordCnt != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.AutonomousSystemRecordCnt))
		i--
		dAtA[i] = 0x48
	}
	if m.MplsRouteRecordCnt != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.MplsRouteRecordCnt))
		i--
		dAtA[i] = 0x40
	}
	if m.Ipv6RouteRecordCnt != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.Ipv6RouteRecordCnt))
		i--
		dAtA[i] = 0x38
	}
	if m.Ipv4RouteRecordCnt != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.Ipv4RouteRecordCnt))
		i--
		dAtA[i] = 0x30
	}
	if m.MplsFlowsExportFormat != nil {
		i -= len(*m.MplsFlowsExportFormat)
		copy(dAtA[i:], *m.MplsFlowsExportFormat)
		i = encodeVarintInlineJflow(dAtA, i, uint64(len(*m.MplsFlowsExportFormat)))
		i--
		dAtA[i] = 0x2a
	}
	if m.VplsFlowsExportFormat != nil {
		i -= len(*m.VplsFlowsExportFormat)
		copy(dAtA[i:], *m.VplsFlowsExportFormat)
		i = encodeVarintInlineJflow(dAtA, i, uint64(len(*m.VplsFlowsExportFormat)))
		i--
		dAtA[i] = 0x22
	}
	if m.Ipv6FlowsExportFormat != nil {
		i -= len(*m.Ipv6FlowsExportFormat)
		copy(dAtA[i:], *m.Ipv6FlowsExportFormat)
		i = encodeVarintInlineJflow(dAtA, i, uint64(len(*m.Ipv6FlowsExportFormat)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Ipv4FlowsExportFormat != nil {
		i -= len(*m.Ipv4FlowsExportFormat)
		copy(dAtA[i:], *m.Ipv4FlowsExportFormat)
		i = encodeVarintInlineJflow(dAtA, i, uint64(len(*m.Ipv4FlowsExportFormat)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *InlineJflowNpuStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InlineJflowNpuStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InlineJflowNpuStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BridgeFlowInsertCount != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.BridgeFlowInsertCount))
		i--
		dAtA[i] = 0x10
		i--
		dAtA[i] = 0xc0
	}
	if m.BridgeFlowTableUtilization != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.BridgeFlowTableUtilization))))
		i--
		dAtA[i] = 0x10
		i--
		dAtA[i] = 0xbd
	}
	if m.BridgeFlowPacketExportFailure != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.BridgeFlowPacketExportFailure))
		i--
		dAtA[i] = 0x10
		i--
		dAtA[i] = 0xb0
	}
	if m.BridgeAutonomousSystemLookupFailure != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.BridgeAutonomousSystemLookupFailure))
		i--
		dAtA[i] = 0x10
		i--
		dAtA[i] = 0xa8
	}
	if m.BridgeRouteLookupFailure != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.BridgeRouteLookupFailure))
		i--
		dAtA[i] = 0x10
		i--
		dAtA[i] = 0xa0
	}
	if m.BridgeFlowCreateFailure != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.BridgeFlowCreateFailure))
		i--
		dAtA[i] = 0x10
		i--
		dAtA[i] = 0x98
	}
	if m.BridgeFlowsActiveTimedOut != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.BridgeFlowsActiveTimedOut))
		i--
		dAtA[i] = 0x10
		i--
		dAtA[i] = 0x90
	}
	if m.BridgeFlowsInactiveTimedOut != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.BridgeFlowsInactiveTimedOut))
		i--
		dAtA[i] = 0x10
		i--
		dAtA[i] = 0x88
	}
	if m.BridgePacketsExported != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.BridgePacketsExported))
		i--
		dAtA[i] = 0x10
		i--
		dAtA[i] = 0x80
	}
	if m.BridgeFlowsExported != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.BridgeFlowsExported))
		i--
		dAtA[i] = 0xf
		i--
		dAtA[i] = 0xf8
	}
	if m.BridgeActiveFlows != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.BridgeActiveFlows))
		i--
		dAtA[i] = 0xf
		i--
		dAtA[i] = 0xf0
	}
	if m.BridgeTotalFlows != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.BridgeTotalFlows))
		i--
		dAtA[i] = 0xf
		i--
		dAtA[i] = 0xe8
	}
	if m.BridgeFlowBytes != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.BridgeFlowBytes))
		i--
		dAtA[i] = 0xf
		i--
		dAtA[i] = 0xe0
	}
	if m.BridgeFlowPackets != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.BridgeFlowPackets))
		i--
		dAtA[i] = 0xf
		i--
		dAtA[i] = 0xd8
	}
	if m.MplsFlowInsertCount != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.MplsFlowInsertCount))
		i--
		dAtA[i] = 0xd
		i--
		dAtA[i] = 0xb0
	}
	if m.MplsFlowTableUtilization != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.MplsFlowTableUtilization))))
		i--
		dAtA[i] = 0xd
		i--
		dAtA[i] = 0xad
	}
	if m.MplsFlowPacketExportFailure != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.MplsFlowPacketExportFailure))
		i--
		dAtA[i] = 0xd
		i--
		dAtA[i] = 0xa0
	}
	if m.MplsAutonomousSystemLookupFailure != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.MplsAutonomousSystemLookupFailure))
		i--
		dAtA[i] = 0xd
		i--
		dAtA[i] = 0x98
	}
	if m.MplsRouteLookupFailure != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.MplsRouteLookupFailure))
		i--
		dAtA[i] = 0xd
		i--
		dAtA[i] = 0x90
	}
	if m.MplsFlowCreateFailure != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.MplsFlowCreateFailure))
		i--
		dAtA[i] = 0xd
		i--
		dAtA[i] = 0x88
	}
	if m.MplsFlowsActiveTimedOut != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.MplsFlowsActiveTimedOut))
		i--
		dAtA[i] = 0xd
		i--
		dAtA[i] = 0x80
	}
	if m.MplsFlowsInactiveTimedOut != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.MplsFlowsInactiveTimedOut))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xf8
	}
	if m.MplsPacketsExported != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.MplsPacketsExported))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xf0
	}
	if m.MplsFlowsExported != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.MplsFlowsExported))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xe8
	}
	if m.MplsActiveFlows != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.MplsActiveFlows))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xe0
	}
	if m.MplsTotalFlows != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.MplsTotalFlows))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd8
	}
	if m.MplsFlowBytes != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.MplsFlowBytes))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd0
	}
	if m.MplsFlowPackets != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.MplsFlowPackets))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc8
	}
	if m.VplsFlowInsertCount != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.VplsFlowInsertCount))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xa0
	}
	if m.VplsFlowTableUtilization != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.VplsFlowTableUtilization))))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0x9d
	}
	if m.VplsFlowPacketExportFailure != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.VplsFlowPacketExportFailure))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0x90
	}
	if m.VplsAutonomousSystemLookupFailure != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.VplsAutonomousSystemLookupFailure))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0x88
	}
	if m.VplsRouteLookupFailure != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.VplsRouteLookupFailure))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0x80
	}
	if m.VplsFlowCreateFailure != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.VplsFlowCreateFailure))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xf8
	}
	if m.VplsFlowsActiveTimedOut != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.VplsFlowsActiveTimedOut))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xf0
	}
	if m.VplsFlowsInactiveTimedOut != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.VplsFlowsInactiveTimedOut))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xe8
	}
	if m.VplsPacketsExported != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.VplsPacketsExported))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xe0
	}
	if m.VplsFlowsExported != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.VplsFlowsExported))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xd8
	}
	if m.VplsActiveFlows != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.VplsActiveFlows))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xd0
	}
	if m.VplsTotalFlows != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.VplsTotalFlows))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xc8
	}
	if m.VplsFlowBytes != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.VplsFlowBytes))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xc0
	}
	if m.VplsFlowPackets != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.VplsFlowPackets))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xb8
	}
	if m.Ipv6FlowInsertCount != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.Ipv6FlowInsertCount))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x90
	}
	if m.Ipv6FlowTableUtilization != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Ipv6FlowTableUtilization))))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x8d
	}
	if m.Ipv6FlowPacketExportFailure != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.Ipv6FlowPacketExportFailure))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x80
	}
	if m.Ipv6AutonomousSystemLookupFailure != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.Ipv6AutonomousSystemLookupFailure))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xf8
	}
	if m.Ipv6RouteLookupFailure != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.Ipv6RouteLookupFailure))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xf0
	}
	if m.Ipv6FlowCreateFailure != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.Ipv6FlowCreateFailure))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xe8
	}
	if m.Ipv6FlowsActiveTimedOut != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.Ipv6FlowsActiveTimedOut))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xe0
	}
	if m.Ipv6FlowsInactiveTimedOut != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.Ipv6FlowsInactiveTimedOut))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xd8
	}
	if m.Ipv6PacketsExported != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.Ipv6PacketsExported))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xd0
	}
	if m.Ipv6FlowsExported != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.Ipv6FlowsExported))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc8
	}
	if m.Ipv6ActiveFlows != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.Ipv6ActiveFlows))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc0
	}
	if m.Ipv6TotalFlows != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.Ipv6TotalFlows))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb8
	}
	if m.Ipv6FlowBytes != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.Ipv6FlowBytes))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb0
	}
	if m.Ipv6FlowPackets != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.Ipv6FlowPackets))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa8
	}
	if m.Ipv4FlowInsertCount != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.Ipv4FlowInsertCount))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x80
	}
	if m.Ipv4FlowTableUtilization != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.Ipv4FlowTableUtilization))))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xfd
	}
	if m.Ipv4FlowPacketExportFailure != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.Ipv4FlowPacketExportFailure))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf0
	}
	if m.Ipv4AutonomousSystemLookupFailure != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.Ipv4AutonomousSystemLookupFailure))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe8
	}
	if m.Ipv4RouteLookupFailure != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.Ipv4RouteLookupFailure))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe0
	}
	if m.Ipv4FlowCreateFailure != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.Ipv4FlowCreateFailure))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd8
	}
	if m.Ipv4FlowsActiveTimedOut != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.Ipv4FlowsActiveTimedOut))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd0
	}
	if m.Ipv4FlowsInactiveTimedOut != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.Ipv4FlowsInactiveTimedOut))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc8
	}
	if m.Ipv4PacketsExported != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.Ipv4PacketsExported))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc0
	}
	if m.Ipv4FlowsExported != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.Ipv4FlowsExported))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.Ipv4ActiveFlows != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.Ipv4ActiveFlows))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.Ipv4TotalFlows != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.Ipv4TotalFlows))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.Ipv4FlowBytes != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.Ipv4FlowBytes))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.Ipv4FlowPackets != nil {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.Ipv4FlowPackets))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	if m.NpuIdentifier == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("npu_identifier")
	} else {
		i = encodeVarintInlineJflow(dAtA, i, uint64(*m.NpuIdentifier))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintInlineJflow(dAtA []byte, offset int, v uint64) int {
	offset -= sovInlineJflow(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InlineJflow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ipv4FlowsExportFormat != nil {
		l = len(*m.Ipv4FlowsExportFormat)
		n += 1 + l + sovInlineJflow(uint64(l))
	}
	if m.Ipv6FlowsExportFormat != nil {
		l = len(*m.Ipv6FlowsExportFormat)
		n += 1 + l + sovInlineJflow(uint64(l))
	}
	if m.VplsFlowsExportFormat != nil {
		l = len(*m.VplsFlowsExportFormat)
		n += 1 + l + sovInlineJflow(uint64(l))
	}
	if m.MplsFlowsExportFormat != nil {
		l = len(*m.MplsFlowsExportFormat)
		n += 1 + l + sovInlineJflow(uint64(l))
	}
	if m.Ipv4RouteRecordCnt != nil {
		n += 1 + sovInlineJflow(uint64(*m.Ipv4RouteRecordCnt))
	}
	if m.Ipv6RouteRecordCnt != nil {
		n += 1 + sovInlineJflow(uint64(*m.Ipv6RouteRecordCnt))
	}
	if m.MplsRouteRecordCnt != nil {
		n += 1 + sovInlineJflow(uint64(*m.MplsRouteRecordCnt))
	}
	if m.AutonomousSystemRecordCnt != nil {
		n += 1 + sovInlineJflow(uint64(*m.AutonomousSystemRecordCnt))
	}
	if m.Ipv4MaxFlowsCount != nil {
		n += 1 + sovInlineJflow(uint64(*m.Ipv4MaxFlowsCount))
	}
	if m.Ipv6MaxFlowsCount != nil {
		n += 1 + sovInlineJflow(uint64(*m.Ipv6MaxFlowsCount))
	}
	if m.VplsMaxFlowsCount != nil {
		n += 1 + sovInlineJflow(uint64(*m.VplsMaxFlowsCount))
	}
	if m.MplsMaxFlowsCount != nil {
		n += 1 + sovInlineJflow(uint64(*m.MplsMaxFlowsCount))
	}
	if m.MemoryAllocFailCnt != nil {
		n += 1 + sovInlineJflow(uint64(*m.MemoryAllocFailCnt))
	}
	if m.Ipv4ConfiguredObservationDomainId != nil {
		n += 1 + sovInlineJflow(uint64(*m.Ipv4ConfiguredObservationDomainId))
	}
	if m.Ipv6ConfiguredObservationDomainId != nil {
		n += 2 + sovInlineJflow(uint64(*m.Ipv6ConfiguredObservationDomainId))
	}
	if m.VplsConfiguredObservationDomainId != nil {
		n += 2 + sovInlineJflow(uint64(*m.VplsConfiguredObservationDomainId))
	}
	if m.MplsConfiguredObservationDomainId != nil {
		n += 2 + sovInlineJflow(uint64(*m.MplsConfiguredObservationDomainId))
	}
	if m.LastClearTimestamp != nil {
		n += 2 + sovInlineJflow(uint64(*m.LastClearTimestamp))
	}
	if m.Ipv6ExtendedAttribute != nil {
		n += 3
	}
	if m.FlexibleFlowSizing != nil {
		n += 3
	}
	if m.UseExtendedFlowMemory != nil {
		n += 3
	}
	if m.BridgeFlowsExportFormat != nil {
		l = len(*m.BridgeFlowsExportFormat)
		n += 2 + l + sovInlineJflow(uint64(l))
	}
	if m.BridgeMaxFlowsCount != nil {
		n += 2 + sovInlineJflow(uint64(*m.BridgeMaxFlowsCount))
	}
	if m.BridgeConfiguredObservationDomainId != nil {
		n += 2 + sovInlineJflow(uint64(*m.BridgeConfiguredObservationDomainId))
	}
	if len(m.NpuStats) > 0 {
		for _, e := range m.NpuStats {
			l = e.Size()
			n += 2 + l + sovInlineJflow(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InlineJflowNpuStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NpuIdentifier != nil {
		n += 1 + sovInlineJflow(uint64(*m.NpuIdentifier))
	}
	if m.Ipv4FlowPackets != nil {
		n += 2 + sovInlineJflow(uint64(*m.Ipv4FlowPackets))
	}
	if m.Ipv4FlowBytes != nil {
		n += 2 + sovInlineJflow(uint64(*m.Ipv4FlowBytes))
	}
	if m.Ipv4TotalFlows != nil {
		n += 2 + sovInlineJflow(uint64(*m.Ipv4TotalFlows))
	}
	if m.Ipv4ActiveFlows != nil {
		n += 2 + sovInlineJflow(uint64(*m.Ipv4ActiveFlows))
	}
	if m.Ipv4FlowsExported != nil {
		n += 2 + sovInlineJflow(uint64(*m.Ipv4FlowsExported))
	}
	if m.Ipv4PacketsExported != nil {
		n += 2 + sovInlineJflow(uint64(*m.Ipv4PacketsExported))
	}
	if m.Ipv4FlowsInactiveTimedOut != nil {
		n += 2 + sovInlineJflow(uint64(*m.Ipv4FlowsInactiveTimedOut))
	}
	if m.Ipv4FlowsActiveTimedOut != nil {
		n += 2 + sovInlineJflow(uint64(*m.Ipv4FlowsActiveTimedOut))
	}
	if m.Ipv4FlowCreateFailure != nil {
		n += 2 + sovInlineJflow(uint64(*m.Ipv4FlowCreateFailure))
	}
	if m.Ipv4RouteLookupFailure != nil {
		n += 2 + sovInlineJflow(uint64(*m.Ipv4RouteLookupFailure))
	}
	if m.Ipv4AutonomousSystemLookupFailure != nil {
		n += 2 + sovInlineJflow(uint64(*m.Ipv4AutonomousSystemLookupFailure))
	}
	if m.Ipv4FlowPacketExportFailure != nil {
		n += 2 + sovInlineJflow(uint64(*m.Ipv4FlowPacketExportFailure))
	}
	if m.Ipv4FlowTableUtilization != nil {
		n += 6
	}
	if m.Ipv4FlowInsertCount != nil {
		n += 2 + sovInlineJflow(uint64(*m.Ipv4FlowInsertCount))
	}
	if m.Ipv6FlowPackets != nil {
		n += 2 + sovInlineJflow(uint64(*m.Ipv6FlowPackets))
	}
	if m.Ipv6FlowBytes != nil {
		n += 2 + sovInlineJflow(uint64(*m.Ipv6FlowBytes))
	}
	if m.Ipv6TotalFlows != nil {
		n += 2 + sovInlineJflow(uint64(*m.Ipv6TotalFlows))
	}
	if m.Ipv6ActiveFlows != nil {
		n += 2 + sovInlineJflow(uint64(*m.Ipv6ActiveFlows))
	}
	if m.Ipv6FlowsExported != nil {
		n += 2 + sovInlineJflow(uint64(*m.Ipv6FlowsExported))
	}
	if m.Ipv6PacketsExported != nil {
		n += 2 + sovInlineJflow(uint64(*m.Ipv6PacketsExported))
	}
	if m.Ipv6FlowsInactiveTimedOut != nil {
		n += 2 + sovInlineJflow(uint64(*m.Ipv6FlowsInactiveTimedOut))
	}
	if m.Ipv6FlowsActiveTimedOut != nil {
		n += 2 + sovInlineJflow(uint64(*m.Ipv6FlowsActiveTimedOut))
	}
	if m.Ipv6FlowCreateFailure != nil {
		n += 2 + sovInlineJflow(uint64(*m.Ipv6FlowCreateFailure))
	}
	if m.Ipv6RouteLookupFailure != nil {
		n += 2 + sovInlineJflow(uint64(*m.Ipv6RouteLookupFailure))
	}
	if m.Ipv6AutonomousSystemLookupFailure != nil {
		n += 2 + sovInlineJflow(uint64(*m.Ipv6AutonomousSystemLookupFailure))
	}
	if m.Ipv6FlowPacketExportFailure != nil {
		n += 2 + sovInlineJflow(uint64(*m.Ipv6FlowPacketExportFailure))
	}
	if m.Ipv6FlowTableUtilization != nil {
		n += 6
	}
	if m.Ipv6FlowInsertCount != nil {
		n += 2 + sovInlineJflow(uint64(*m.Ipv6FlowInsertCount))
	}
	if m.VplsFlowPackets != nil {
		n += 2 + sovInlineJflow(uint64(*m.VplsFlowPackets))
	}
	if m.VplsFlowBytes != nil {
		n += 2 + sovInlineJflow(uint64(*m.VplsFlowBytes))
	}
	if m.VplsTotalFlows != nil {
		n += 2 + sovInlineJflow(uint64(*m.VplsTotalFlows))
	}
	if m.VplsActiveFlows != nil {
		n += 2 + sovInlineJflow(uint64(*m.VplsActiveFlows))
	}
	if m.VplsFlowsExported != nil {
		n += 2 + sovInlineJflow(uint64(*m.VplsFlowsExported))
	}
	if m.VplsPacketsExported != nil {
		n += 2 + sovInlineJflow(uint64(*m.VplsPacketsExported))
	}
	if m.VplsFlowsInactiveTimedOut != nil {
		n += 2 + sovInlineJflow(uint64(*m.VplsFlowsInactiveTimedOut))
	}
	if m.VplsFlowsActiveTimedOut != nil {
		n += 2 + sovInlineJflow(uint64(*m.VplsFlowsActiveTimedOut))
	}
	if m.VplsFlowCreateFailure != nil {
		n += 2 + sovInlineJflow(uint64(*m.VplsFlowCreateFailure))
	}
	if m.VplsRouteLookupFailure != nil {
		n += 2 + sovInlineJflow(uint64(*m.VplsRouteLookupFailure))
	}
	if m.VplsAutonomousSystemLookupFailure != nil {
		n += 2 + sovInlineJflow(uint64(*m.VplsAutonomousSystemLookupFailure))
	}
	if m.VplsFlowPacketExportFailure != nil {
		n += 2 + sovInlineJflow(uint64(*m.VplsFlowPacketExportFailure))
	}
	if m.VplsFlowTableUtilization != nil {
		n += 6
	}
	if m.VplsFlowInsertCount != nil {
		n += 2 + sovInlineJflow(uint64(*m.VplsFlowInsertCount))
	}
	if m.MplsFlowPackets != nil {
		n += 2 + sovInlineJflow(uint64(*m.MplsFlowPackets))
	}
	if m.MplsFlowBytes != nil {
		n += 2 + sovInlineJflow(uint64(*m.MplsFlowBytes))
	}
	if m.MplsTotalFlows != nil {
		n += 2 + sovInlineJflow(uint64(*m.MplsTotalFlows))
	}
	if m.MplsActiveFlows != nil {
		n += 2 + sovInlineJflow(uint64(*m.MplsActiveFlows))
	}
	if m.MplsFlowsExported != nil {
		n += 2 + sovInlineJflow(uint64(*m.MplsFlowsExported))
	}
	if m.MplsPacketsExported != nil {
		n += 2 + sovInlineJflow(uint64(*m.MplsPacketsExported))
	}
	if m.MplsFlowsInactiveTimedOut != nil {
		n += 2 + sovInlineJflow(uint64(*m.MplsFlowsInactiveTimedOut))
	}
	if m.MplsFlowsActiveTimedOut != nil {
		n += 2 + sovInlineJflow(uint64(*m.MplsFlowsActiveTimedOut))
	}
	if m.MplsFlowCreateFailure != nil {
		n += 2 + sovInlineJflow(uint64(*m.MplsFlowCreateFailure))
	}
	if m.MplsRouteLookupFailure != nil {
		n += 2 + sovInlineJflow(uint64(*m.MplsRouteLookupFailure))
	}
	if m.MplsAutonomousSystemLookupFailure != nil {
		n += 2 + sovInlineJflow(uint64(*m.MplsAutonomousSystemLookupFailure))
	}
	if m.MplsFlowPacketExportFailure != nil {
		n += 2 + sovInlineJflow(uint64(*m.MplsFlowPacketExportFailure))
	}
	if m.MplsFlowTableUtilization != nil {
		n += 6
	}
	if m.MplsFlowInsertCount != nil {
		n += 2 + sovInlineJflow(uint64(*m.MplsFlowInsertCount))
	}
	if m.BridgeFlowPackets != nil {
		n += 2 + sovInlineJflow(uint64(*m.BridgeFlowPackets))
	}
	if m.BridgeFlowBytes != nil {
		n += 2 + sovInlineJflow(uint64(*m.BridgeFlowBytes))
	}
	if m.BridgeTotalFlows != nil {
		n += 2 + sovInlineJflow(uint64(*m.BridgeTotalFlows))
	}
	if m.BridgeActiveFlows != nil {
		n += 2 + sovInlineJflow(uint64(*m.BridgeActiveFlows))
	}
	if m.BridgeFlowsExported != nil {
		n += 2 + sovInlineJflow(uint64(*m.BridgeFlowsExported))
	}
	if m.BridgePacketsExported != nil {
		n += 2 + sovInlineJflow(uint64(*m.BridgePacketsExported))
	}
	if m.BridgeFlowsInactiveTimedOut != nil {
		n += 2 + sovInlineJflow(uint64(*m.BridgeFlowsInactiveTimedOut))
	}
	if m.BridgeFlowsActiveTimedOut != nil {
		n += 2 + sovInlineJflow(uint64(*m.BridgeFlowsActiveTimedOut))
	}
	if m.BridgeFlowCreateFailure != nil {
		n += 2 + sovInlineJflow(uint64(*m.BridgeFlowCreateFailure))
	}
	if m.BridgeRouteLookupFailure != nil {
		n += 2 + sovInlineJflow(uint64(*m.BridgeRouteLookupFailure))
	}
	if m.BridgeAutonomousSystemLookupFailure != nil {
		n += 2 + sovInlineJflow(uint64(*m.BridgeAutonomousSystemLookupFailure))
	}
	if m.BridgeFlowPacketExportFailure != nil {
		n += 2 + sovInlineJflow(uint64(*m.BridgeFlowPacketExportFailure))
	}
	if m.BridgeFlowTableUtilization != nil {
		n += 6
	}
	if m.BridgeFlowInsertCount != nil {
		n += 2 + sovInlineJflow(uint64(*m.BridgeFlowInsertCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovInlineJflow(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInlineJflow(x uint64) (n int) {
	return sovInlineJflow(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InlineJflow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInlineJflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InlineJflow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InlineJflow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4FlowsExportFormat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInlineJflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInlineJflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Ipv4FlowsExportFormat = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6FlowsExportFormat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInlineJflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInlineJflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Ipv6FlowsExportFormat = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VplsFlowsExportFormat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInlineJflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInlineJflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VplsFlowsExportFormat = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MplsFlowsExportFormat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInlineJflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInlineJflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MplsFlowsExportFormat = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4RouteRecordCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ipv4RouteRecordCnt = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6RouteRecordCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ipv6RouteRecordCnt = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MplsRouteRecordCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MplsRouteRecordCnt = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutonomousSystemRecordCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutonomousSystemRecordCnt = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4MaxFlowsCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ipv4MaxFlowsCount = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6MaxFlowsCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ipv6MaxFlowsCount = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VplsMaxFlowsCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VplsMaxFlowsCount = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MplsMaxFlowsCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MplsMaxFlowsCount = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryAllocFailCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MemoryAllocFailCnt = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4ConfiguredObservationDomainId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ipv4ConfiguredObservationDomainId = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6ConfiguredObservationDomainId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ipv6ConfiguredObservationDomainId = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VplsConfiguredObservationDomainId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VplsConfiguredObservationDomainId = &v
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MplsConfiguredObservationDomainId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MplsConfiguredObservationDomainId = &v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastClearTimestamp", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastClearTimestamp = &v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6ExtendedAttribute", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Ipv6ExtendedAttribute = &b
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlexibleFlowSizing", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.FlexibleFlowSizing = &b
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseExtendedFlowMemory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.UseExtendedFlowMemory = &b
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeFlowsExportFormat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInlineJflow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInlineJflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BridgeFlowsExportFormat = &s
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeMaxFlowsCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BridgeMaxFlowsCount = &v
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeConfiguredObservationDomainId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BridgeConfiguredObservationDomainId = &v
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NpuStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInlineJflow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInlineJflow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NpuStats = append(m.NpuStats, &InlineJflowNpuStats{})
			if err := m.NpuStats[len(m.NpuStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInlineJflow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInlineJflow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInlineJflow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InlineJflowNpuStats) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInlineJflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InlineJflowNpuStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InlineJflowNpuStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NpuIdentifier", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NpuIdentifier = &v
			hasFields[0] |= uint64(0x00000001)
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4FlowPackets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ipv4FlowPackets = &v
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4FlowBytes", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ipv4FlowBytes = &v
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4TotalFlows", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ipv4TotalFlows = &v
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4ActiveFlows", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ipv4ActiveFlows = &v
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4FlowsExported", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ipv4FlowsExported = &v
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4PacketsExported", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ipv4PacketsExported = &v
		case 57:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4FlowsInactiveTimedOut", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ipv4FlowsInactiveTimedOut = &v
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4FlowsActiveTimedOut", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ipv4FlowsActiveTimedOut = &v
		case 59:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4FlowCreateFailure", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ipv4FlowCreateFailure = &v
		case 60:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4RouteLookupFailure", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ipv4RouteLookupFailure = &v
		case 61:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4AutonomousSystemLookupFailure", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ipv4AutonomousSystemLookupFailure = &v
		case 62:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4FlowPacketExportFailure", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ipv4FlowPacketExportFailure = &v
		case 63:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4FlowTableUtilization", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Ipv4FlowTableUtilization = &v2
		case 64:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4FlowInsertCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ipv4FlowInsertCount = &v
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6FlowPackets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ipv6FlowPackets = &v
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6FlowBytes", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ipv6FlowBytes = &v
		case 103:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6TotalFlows", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ipv6TotalFlows = &v
		case 104:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6ActiveFlows", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ipv6ActiveFlows = &v
		case 105:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6FlowsExported", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ipv6FlowsExported = &v
		case 106:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6PacketsExported", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ipv6PacketsExported = &v
		case 107:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6FlowsInactiveTimedOut", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ipv6FlowsInactiveTimedOut = &v
		case 108:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6FlowsActiveTimedOut", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ipv6FlowsActiveTimedOut = &v
		case 109:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6FlowCreateFailure", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ipv6FlowCreateFailure = &v
		case 110:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6RouteLookupFailure", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ipv6RouteLookupFailure = &v
		case 111:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6AutonomousSystemLookupFailure", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ipv6AutonomousSystemLookupFailure = &v
		case 112:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6FlowPacketExportFailure", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ipv6FlowPacketExportFailure = &v
		case 113:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6FlowTableUtilization", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.Ipv6FlowTableUtilization = &v2
		case 114:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6FlowInsertCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ipv6FlowInsertCount = &v
		case 151:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VplsFlowPackets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VplsFlowPackets = &v
		case 152:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VplsFlowBytes", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VplsFlowBytes = &v
		case 153:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VplsTotalFlows", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VplsTotalFlows = &v
		case 154:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VplsActiveFlows", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VplsActiveFlows = &v
		case 155:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VplsFlowsExported", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VplsFlowsExported = &v
		case 156:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VplsPacketsExported", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VplsPacketsExported = &v
		case 157:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VplsFlowsInactiveTimedOut", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VplsFlowsInactiveTimedOut = &v
		case 158:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VplsFlowsActiveTimedOut", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VplsFlowsActiveTimedOut = &v
		case 159:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VplsFlowCreateFailure", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VplsFlowCreateFailure = &v
		case 160:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VplsRouteLookupFailure", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VplsRouteLookupFailure = &v
		case 161:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VplsAutonomousSystemLookupFailure", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VplsAutonomousSystemLookupFailure = &v
		case 162:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VplsFlowPacketExportFailure", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VplsFlowPacketExportFailure = &v
		case 163:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field VplsFlowTableUtilization", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.VplsFlowTableUtilization = &v2
		case 164:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VplsFlowInsertCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VplsFlowInsertCount = &v
		case 201:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MplsFlowPackets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MplsFlowPackets = &v
		case 202:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MplsFlowBytes", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MplsFlowBytes = &v
		case 203:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MplsTotalFlows", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MplsTotalFlows = &v
		case 204:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MplsActiveFlows", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MplsActiveFlows = &v
		case 205:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MplsFlowsExported", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MplsFlowsExported = &v
		case 206:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MplsPacketsExported", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MplsPacketsExported = &v
		case 207:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MplsFlowsInactiveTimedOut", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MplsFlowsInactiveTimedOut = &v
		case 208:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MplsFlowsActiveTimedOut", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MplsFlowsActiveTimedOut = &v
		case 209:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MplsFlowCreateFailure", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MplsFlowCreateFailure = &v
		case 210:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MplsRouteLookupFailure", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MplsRouteLookupFailure = &v
		case 211:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MplsAutonomousSystemLookupFailure", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MplsAutonomousSystemLookupFailure = &v
		case 212:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MplsFlowPacketExportFailure", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MplsFlowPacketExportFailure = &v
		case 213:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MplsFlowTableUtilization", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.MplsFlowTableUtilization = &v2
		case 214:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MplsFlowInsertCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MplsFlowInsertCount = &v
		case 251:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeFlowPackets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BridgeFlowPackets = &v
		case 252:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeFlowBytes", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BridgeFlowBytes = &v
		case 253:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeTotalFlows", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BridgeTotalFlows = &v
		case 254:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeActiveFlows", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BridgeActiveFlows = &v
		case 255:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeFlowsExported", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BridgeFlowsExported = &v
		case 256:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgePacketsExported", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BridgePacketsExported = &v
		case 257:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeFlowsInactiveTimedOut", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BridgeFlowsInactiveTimedOut = &v
		case 258:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeFlowsActiveTimedOut", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BridgeFlowsActiveTimedOut = &v
		case 259:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeFlowCreateFailure", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BridgeFlowCreateFailure = &v
		case 260:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeRouteLookupFailure", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BridgeRouteLookupFailure = &v
		case 261:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeAutonomousSystemLookupFailure", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BridgeAutonomousSystemLookupFailure = &v
		case 262:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeFlowPacketExportFailure", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BridgeFlowPacketExportFailure = &v
		case 263:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeFlowTableUtilization", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.BridgeFlowTableUtilization = &v2
		case 264:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeFlowInsertCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BridgeFlowInsertCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipInlineJflow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInlineJflow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInlineJflow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("npu_identifier")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInlineJflow(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInlineJflow
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInlineJflow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInlineJflow
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInlineJflow
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInlineJflow
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInlineJflow        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInlineJflow          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInlineJflow = fmt.Errorf("proto: unexpected end of group")
)
