// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: jkdsd_cpu_oc.proto

package schema

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ComponentsDebug struct {
	Component            []*ComponentsDebugComponentList `protobuf:"bytes,151,rep,name=component" json:"component,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *ComponentsDebug) Reset()         { *m = ComponentsDebug{} }
func (m *ComponentsDebug) String() string { return proto.CompactTextString(m) }
func (*ComponentsDebug) ProtoMessage()    {}
func (*ComponentsDebug) Descriptor() ([]byte, []int) {
	return fileDescriptor_904bd24d5b27d4fa, []int{0}
}
func (m *ComponentsDebug) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComponentsDebug) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComponentsDebug.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComponentsDebug) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentsDebug.Merge(m, src)
}
func (m *ComponentsDebug) XXX_Size() int {
	return m.Size()
}
func (m *ComponentsDebug) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentsDebug.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentsDebug proto.InternalMessageInfo

func (m *ComponentsDebug) GetComponent() []*ComponentsDebugComponentList {
	if m != nil {
		return m.Component
	}
	return nil
}

type ComponentsDebugComponentList struct {
	Name                 *string                              `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	Cpu                  *ComponentsDebugComponentListCpuType `protobuf:"bytes,151,opt,name=cpu" json:"cpu,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *ComponentsDebugComponentList) Reset()         { *m = ComponentsDebugComponentList{} }
func (m *ComponentsDebugComponentList) String() string { return proto.CompactTextString(m) }
func (*ComponentsDebugComponentList) ProtoMessage()    {}
func (*ComponentsDebugComponentList) Descriptor() ([]byte, []int) {
	return fileDescriptor_904bd24d5b27d4fa, []int{0, 0}
}
func (m *ComponentsDebugComponentList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComponentsDebugComponentList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComponentsDebugComponentList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComponentsDebugComponentList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentsDebugComponentList.Merge(m, src)
}
func (m *ComponentsDebugComponentList) XXX_Size() int {
	return m.Size()
}
func (m *ComponentsDebugComponentList) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentsDebugComponentList.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentsDebugComponentList proto.InternalMessageInfo

func (m *ComponentsDebugComponentList) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ComponentsDebugComponentList) GetCpu() *ComponentsDebugComponentListCpuType {
	if m != nil {
		return m.Cpu
	}
	return nil
}

type ComponentsDebugComponentListCpuType struct {
	Utilization          *ComponentsDebugComponentListCpuTypeUtilizationType `protobuf:"bytes,151,opt,name=utilization" json:"utilization,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                            `json:"-"`
	XXX_unrecognized     []byte                                              `json:"-"`
	XXX_sizecache        int32                                               `json:"-"`
}

func (m *ComponentsDebugComponentListCpuType) Reset()         { *m = ComponentsDebugComponentListCpuType{} }
func (m *ComponentsDebugComponentListCpuType) String() string { return proto.CompactTextString(m) }
func (*ComponentsDebugComponentListCpuType) ProtoMessage()    {}
func (*ComponentsDebugComponentListCpuType) Descriptor() ([]byte, []int) {
	return fileDescriptor_904bd24d5b27d4fa, []int{0, 0, 0}
}
func (m *ComponentsDebugComponentListCpuType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComponentsDebugComponentListCpuType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComponentsDebugComponentListCpuType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComponentsDebugComponentListCpuType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentsDebugComponentListCpuType.Merge(m, src)
}
func (m *ComponentsDebugComponentListCpuType) XXX_Size() int {
	return m.Size()
}
func (m *ComponentsDebugComponentListCpuType) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentsDebugComponentListCpuType.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentsDebugComponentListCpuType proto.InternalMessageInfo

func (m *ComponentsDebugComponentListCpuType) GetUtilization() *ComponentsDebugComponentListCpuTypeUtilizationType {
	if m != nil {
		return m.Utilization
	}
	return nil
}

type ComponentsDebugComponentListCpuTypeUtilizationType struct {
	State                *ComponentsDebugComponentListCpuTypeUtilizationTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                     `json:"-"`
	XXX_unrecognized     []byte                                                       `json:"-"`
	XXX_sizecache        int32                                                        `json:"-"`
}

func (m *ComponentsDebugComponentListCpuTypeUtilizationType) Reset() {
	*m = ComponentsDebugComponentListCpuTypeUtilizationType{}
}
func (m *ComponentsDebugComponentListCpuTypeUtilizationType) String() string {
	return proto.CompactTextString(m)
}
func (*ComponentsDebugComponentListCpuTypeUtilizationType) ProtoMessage() {}
func (*ComponentsDebugComponentListCpuTypeUtilizationType) Descriptor() ([]byte, []int) {
	return fileDescriptor_904bd24d5b27d4fa, []int{0, 0, 0, 0}
}
func (m *ComponentsDebugComponentListCpuTypeUtilizationType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComponentsDebugComponentListCpuTypeUtilizationType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComponentsDebugComponentListCpuTypeUtilizationType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComponentsDebugComponentListCpuTypeUtilizationType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentsDebugComponentListCpuTypeUtilizationType.Merge(m, src)
}
func (m *ComponentsDebugComponentListCpuTypeUtilizationType) XXX_Size() int {
	return m.Size()
}
func (m *ComponentsDebugComponentListCpuTypeUtilizationType) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentsDebugComponentListCpuTypeUtilizationType.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentsDebugComponentListCpuTypeUtilizationType proto.InternalMessageInfo

func (m *ComponentsDebugComponentListCpuTypeUtilizationType) GetState() *ComponentsDebugComponentListCpuTypeUtilizationTypeStateType {
	if m != nil {
		return m.State
	}
	return nil
}

type ComponentsDebugComponentListCpuTypeUtilizationTypeStateType struct {
	Name                 *string  `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	Instant              *uint32  `protobuf:"varint,52,opt,name=instant" json:"instant,omitempty"`
	Avg                  *uint32  `protobuf:"varint,53,opt,name=avg" json:"avg,omitempty"`
	Min                  *uint32  `protobuf:"varint,54,opt,name=min" json:"min,omitempty"`
	Max                  *uint32  `protobuf:"varint,55,opt,name=max" json:"max,omitempty"`
	Interval             *uint64  `protobuf:"varint,56,opt,name=interval" json:"interval,omitempty"`
	MinTime              *uint64  `protobuf:"varint,57,opt,name=min_time,json=minTime" json:"min_time,omitempty"`
	MaxTime              *uint64  `protobuf:"varint,58,opt,name=max_time,json=maxTime" json:"max_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComponentsDebugComponentListCpuTypeUtilizationTypeStateType) Reset() {
	*m = ComponentsDebugComponentListCpuTypeUtilizationTypeStateType{}
}
func (m *ComponentsDebugComponentListCpuTypeUtilizationTypeStateType) String() string {
	return proto.CompactTextString(m)
}
func (*ComponentsDebugComponentListCpuTypeUtilizationTypeStateType) ProtoMessage() {}
func (*ComponentsDebugComponentListCpuTypeUtilizationTypeStateType) Descriptor() ([]byte, []int) {
	return fileDescriptor_904bd24d5b27d4fa, []int{0, 0, 0, 0, 0}
}
func (m *ComponentsDebugComponentListCpuTypeUtilizationTypeStateType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComponentsDebugComponentListCpuTypeUtilizationTypeStateType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComponentsDebugComponentListCpuTypeUtilizationTypeStateType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComponentsDebugComponentListCpuTypeUtilizationTypeStateType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentsDebugComponentListCpuTypeUtilizationTypeStateType.Merge(m, src)
}
func (m *ComponentsDebugComponentListCpuTypeUtilizationTypeStateType) XXX_Size() int {
	return m.Size()
}
func (m *ComponentsDebugComponentListCpuTypeUtilizationTypeStateType) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentsDebugComponentListCpuTypeUtilizationTypeStateType.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentsDebugComponentListCpuTypeUtilizationTypeStateType proto.InternalMessageInfo

func (m *ComponentsDebugComponentListCpuTypeUtilizationTypeStateType) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ComponentsDebugComponentListCpuTypeUtilizationTypeStateType) GetInstant() uint32 {
	if m != nil && m.Instant != nil {
		return *m.Instant
	}
	return 0
}

func (m *ComponentsDebugComponentListCpuTypeUtilizationTypeStateType) GetAvg() uint32 {
	if m != nil && m.Avg != nil {
		return *m.Avg
	}
	return 0
}

func (m *ComponentsDebugComponentListCpuTypeUtilizationTypeStateType) GetMin() uint32 {
	if m != nil && m.Min != nil {
		return *m.Min
	}
	return 0
}

func (m *ComponentsDebugComponentListCpuTypeUtilizationTypeStateType) GetMax() uint32 {
	if m != nil && m.Max != nil {
		return *m.Max
	}
	return 0
}

func (m *ComponentsDebugComponentListCpuTypeUtilizationTypeStateType) GetInterval() uint64 {
	if m != nil && m.Interval != nil {
		return *m.Interval
	}
	return 0
}

func (m *ComponentsDebugComponentListCpuTypeUtilizationTypeStateType) GetMinTime() uint64 {
	if m != nil && m.MinTime != nil {
		return *m.MinTime
	}
	return 0
}

func (m *ComponentsDebugComponentListCpuTypeUtilizationTypeStateType) GetMaxTime() uint64 {
	if m != nil && m.MaxTime != nil {
		return *m.MaxTime
	}
	return 0
}

var E_JnprComponentsDebugExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*ComponentsDebug)(nil),
	Field:         107,
	Name:          "jnpr_components_debug_ext",
	Tag:           "bytes,107,opt,name=jnpr_components_debug_ext",
	Filename:      "jkdsd_cpu_oc.proto",
}

func init() {
	proto.RegisterType((*ComponentsDebug)(nil), "components_debug")
	proto.RegisterType((*ComponentsDebugComponentList)(nil), "components_debug.component_list")
	proto.RegisterType((*ComponentsDebugComponentListCpuType)(nil), "components_debug.component_list.cpu_type")
	proto.RegisterType((*ComponentsDebugComponentListCpuTypeUtilizationType)(nil), "components_debug.component_list.cpu_type.utilization_type")
	proto.RegisterType((*ComponentsDebugComponentListCpuTypeUtilizationTypeStateType)(nil), "components_debug.component_list.cpu_type.utilization_type.state_type")
	proto.RegisterExtension(E_JnprComponentsDebugExt)
}

func init() { proto.RegisterFile("jkdsd_cpu_oc.proto", fileDescriptor_904bd24d5b27d4fa) }

var fileDescriptor_904bd24d5b27d4fa = []byte{
	// 470 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x90, 0xbd, 0x8e, 0xd3, 0x40,
	0x14, 0x85, 0x35, 0x9b, 0xac, 0x36, 0x3b, 0x2b, 0x50, 0x18, 0x24, 0x98, 0xb8, 0x88, 0x22, 0xaa,
	0x50, 0xc4, 0x96, 0x96, 0xff, 0x08, 0x09, 0xb4, 0xb0, 0x0d, 0x05, 0x85, 0xa1, 0x42, 0x20, 0x33,
	0x71, 0xae, 0x9c, 0x71, 0x3c, 0x3f, 0xf2, 0x5c, 0x07, 0x2f, 0x25, 0x3d, 0x35, 0x35, 0x0f, 0xc1,
	0x0b, 0x50, 0x51, 0xf2, 0x08, 0x28, 0xbc, 0x08, 0xb2, 0x9d, 0x3f, 0x42, 0x01, 0xa2, 0x9b, 0xfb,
	0x9d, 0x7b, 0xcf, 0xd1, 0x1c, 0xca, 0xd2, 0xf9, 0xd4, 0x4d, 0xa3, 0xd8, 0x16, 0x91, 0x89, 0x7d,
	0x9b, 0x1b, 0x34, 0xde, 0x55, 0x84, 0x0c, 0x14, 0x60, 0x7e, 0x11, 0xa1, 0xb1, 0x0d, 0xbc, 0xf1,
	0xb3, 0x4d, 0xbb, 0xb1, 0x51, 0xd6, 0x68, 0xd0, 0xe8, 0xa2, 0x29, 0x4c, 0x8a, 0x84, 0x3d, 0xa2,
	0xc7, 0x1b, 0xc6, 0x3f, 0x91, 0x41, 0x6b, 0x78, 0x72, 0x3a, 0xf0, 0xf7, 0xd7, 0xb6, 0x20, 0xca,
	0xa4, 0xc3, 0x70, 0x7b, 0xe3, 0x7d, 0x6c, 0xd3, 0xcb, 0xbf, 0xab, 0xac, 0x47, 0xdb, 0x5a, 0x28,
	0xe0, 0xb7, 0x06, 0x64, 0x78, 0x7c, 0x76, 0xf8, 0xe1, 0xf1, 0x41, 0x87, 0x84, 0x35, 0x62, 0x0f,
	0x69, 0x2b, 0xb6, 0x45, 0x15, 0x44, 0x86, 0x27, 0xa7, 0x37, 0xff, 0x16, 0xe4, 0x57, 0xbf, 0xc2,
	0x0b, 0x0b, 0x61, 0x75, 0xe6, 0x7d, 0x6e, 0xd1, 0xce, 0x9a, 0xb0, 0x37, 0xf4, 0xa4, 0x40, 0x99,
	0xc9, 0xf7, 0x02, 0xa5, 0xd1, 0x6b, 0xcb, 0xf1, 0x3f, 0x5b, 0xfa, 0x3b, 0xd7, 0x4d, 0xc6, 0xae,
	0x9f, 0xf7, 0xe5, 0x80, 0x76, 0xf7, 0x37, 0xd8, 0x6b, 0x7a, 0xe8, 0x50, 0x20, 0xac, 0xd3, 0xce,
	0xff, 0x3f, 0xcd, 0xaf, 0x8d, 0x9a, 0xe0, 0xc6, 0xd4, 0xfb, 0x4a, 0x28, 0xdd, 0x52, 0xc6, 0x76,
	0x6b, 0x5c, 0xf5, 0xc7, 0xe9, 0x91, 0xd4, 0x0e, 0x85, 0x46, 0x7e, 0x7b, 0x40, 0x86, 0x97, 0xc2,
	0xf5, 0xc8, 0xba, 0xb4, 0x25, 0x16, 0x09, 0xbf, 0x53, 0xd3, 0xea, 0x59, 0x11, 0x25, 0x35, 0xbf,
	0xdb, 0x10, 0x25, 0x75, 0x4d, 0x44, 0xc9, 0xef, 0xad, 0x88, 0x28, 0x99, 0x47, 0x3b, 0x52, 0x23,
	0xe4, 0x0b, 0x91, 0xf1, 0xfb, 0x03, 0x32, 0x6c, 0x87, 0x9b, 0x99, 0xf5, 0x68, 0x47, 0x49, 0x1d,
	0xa1, 0x54, 0xc0, 0x1f, 0xd4, 0xda, 0x91, 0x92, 0xfa, 0xa5, 0x54, 0x50, 0x4b, 0xa2, 0x6c, 0xa4,
	0xf1, 0x4a, 0x12, 0x65, 0x25, 0x8d, 0x81, 0xf6, 0x52, 0x6d, 0xf3, 0x68, 0xbf, 0x98, 0x08, 0x4a,
	0x64, 0xd7, 0xfd, 0x67, 0x85, 0x96, 0x16, 0xf2, 0xe7, 0x80, 0xef, 0x4c, 0x3e, 0x77, 0x2f, 0x40,
	0x3b, 0x93, 0x3b, 0x3e, 0xaf, 0xeb, 0xbc, 0xf2, 0x47, 0x9d, 0xe1, 0xb5, 0xca, 0xec, 0xc9, 0x86,
	0x3e, 0xad, 0xe0, 0x79, 0x89, 0x67, 0x6f, 0xbf, 0x2d, 0xfb, 0xe4, 0xfb, 0xb2, 0x4f, 0x7e, 0x2c,
	0xfb, 0xe4, 0x55, 0x98, 0x48, 0xf4, 0xd3, 0xc6, 0xda, 0xd7, 0x80, 0x81, 0x8c, 0x61, 0x02, 0x79,
	0x12, 0xcc, 0x40, 0x64, 0x38, 0x9b, 0x18, 0x1c, 0x49, 0x9d, 0x80, 0xc3, 0x51, 0x8a, 0x72, 0xa4,
	0x05, 0xca, 0x05, 0x04, 0x76, 0x9e, 0x04, 0x29, 0xca, 0x40, 0x4c, 0x85, 0x45, 0xc8, 0x5d, 0x10,
	0xa5, 0x85, 0x36, 0x2e, 0x70, 0xf1, 0x0c, 0x94, 0xf8, 0x15, 0x00, 0x00, 0xff, 0xff, 0x6d, 0x37,
	0x1b, 0x92, 0x58, 0x03, 0x00, 0x00,
}

func (m *ComponentsDebug) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentsDebug) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComponentsDebug) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Component) > 0 {
		for iNdEx := len(m.Component) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Component[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintJkdsdCpuOc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *ComponentsDebugComponentList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentsDebugComponentList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComponentsDebugComponentList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Cpu != nil {
		{
			size, err := m.Cpu.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJkdsdCpuOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintJkdsdCpuOc(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *ComponentsDebugComponentListCpuType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentsDebugComponentListCpuType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComponentsDebugComponentListCpuType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Utilization != nil {
		{
			size, err := m.Utilization.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJkdsdCpuOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *ComponentsDebugComponentListCpuTypeUtilizationType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentsDebugComponentListCpuTypeUtilizationType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComponentsDebugComponentListCpuTypeUtilizationType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJkdsdCpuOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *ComponentsDebugComponentListCpuTypeUtilizationTypeStateType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentsDebugComponentListCpuTypeUtilizationTypeStateType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComponentsDebugComponentListCpuTypeUtilizationTypeStateType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MaxTime != nil {
		i = encodeVarintJkdsdCpuOc(dAtA, i, uint64(*m.MaxTime))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd0
	}
	if m.MinTime != nil {
		i = encodeVarintJkdsdCpuOc(dAtA, i, uint64(*m.MinTime))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc8
	}
	if m.Interval != nil {
		i = encodeVarintJkdsdCpuOc(dAtA, i, uint64(*m.Interval))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc0
	}
	if m.Max != nil {
		i = encodeVarintJkdsdCpuOc(dAtA, i, uint64(*m.Max))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.Min != nil {
		i = encodeVarintJkdsdCpuOc(dAtA, i, uint64(*m.Min))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.Avg != nil {
		i = encodeVarintJkdsdCpuOc(dAtA, i, uint64(*m.Avg))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.Instant != nil {
		i = encodeVarintJkdsdCpuOc(dAtA, i, uint64(*m.Instant))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintJkdsdCpuOc(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func encodeVarintJkdsdCpuOc(dAtA []byte, offset int, v uint64) int {
	offset -= sovJkdsdCpuOc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ComponentsDebug) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Component) > 0 {
		for _, e := range m.Component {
			l = e.Size()
			n += 2 + l + sovJkdsdCpuOc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComponentsDebugComponentList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 2 + l + sovJkdsdCpuOc(uint64(l))
	}
	if m.Cpu != nil {
		l = m.Cpu.Size()
		n += 2 + l + sovJkdsdCpuOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComponentsDebugComponentListCpuType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Utilization != nil {
		l = m.Utilization.Size()
		n += 2 + l + sovJkdsdCpuOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComponentsDebugComponentListCpuTypeUtilizationType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 2 + l + sovJkdsdCpuOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComponentsDebugComponentListCpuTypeUtilizationTypeStateType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 2 + l + sovJkdsdCpuOc(uint64(l))
	}
	if m.Instant != nil {
		n += 2 + sovJkdsdCpuOc(uint64(*m.Instant))
	}
	if m.Avg != nil {
		n += 2 + sovJkdsdCpuOc(uint64(*m.Avg))
	}
	if m.Min != nil {
		n += 2 + sovJkdsdCpuOc(uint64(*m.Min))
	}
	if m.Max != nil {
		n += 2 + sovJkdsdCpuOc(uint64(*m.Max))
	}
	if m.Interval != nil {
		n += 2 + sovJkdsdCpuOc(uint64(*m.Interval))
	}
	if m.MinTime != nil {
		n += 2 + sovJkdsdCpuOc(uint64(*m.MinTime))
	}
	if m.MaxTime != nil {
		n += 2 + sovJkdsdCpuOc(uint64(*m.MaxTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovJkdsdCpuOc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozJkdsdCpuOc(x uint64) (n int) {
	return sovJkdsdCpuOc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ComponentsDebug) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJkdsdCpuOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: components_debug: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: components_debug: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Component", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkdsdCpuOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJkdsdCpuOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJkdsdCpuOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Component = append(m.Component, &ComponentsDebugComponentList{})
			if err := m.Component[len(m.Component)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJkdsdCpuOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJkdsdCpuOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJkdsdCpuOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComponentsDebugComponentList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJkdsdCpuOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: component_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: component_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkdsdCpuOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJkdsdCpuOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJkdsdCpuOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkdsdCpuOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJkdsdCpuOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJkdsdCpuOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cpu == nil {
				m.Cpu = &ComponentsDebugComponentListCpuType{}
			}
			if err := m.Cpu.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJkdsdCpuOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJkdsdCpuOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJkdsdCpuOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComponentsDebugComponentListCpuType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJkdsdCpuOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cpu_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cpu_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Utilization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkdsdCpuOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJkdsdCpuOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJkdsdCpuOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Utilization == nil {
				m.Utilization = &ComponentsDebugComponentListCpuTypeUtilizationType{}
			}
			if err := m.Utilization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJkdsdCpuOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJkdsdCpuOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJkdsdCpuOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComponentsDebugComponentListCpuTypeUtilizationType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJkdsdCpuOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: utilization_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: utilization_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkdsdCpuOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJkdsdCpuOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJkdsdCpuOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &ComponentsDebugComponentListCpuTypeUtilizationTypeStateType{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJkdsdCpuOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJkdsdCpuOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJkdsdCpuOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComponentsDebugComponentListCpuTypeUtilizationTypeStateType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJkdsdCpuOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: state_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: state_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkdsdCpuOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJkdsdCpuOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJkdsdCpuOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instant", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkdsdCpuOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Instant = &v
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avg", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkdsdCpuOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Avg = &v
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkdsdCpuOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Min = &v
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkdsdCpuOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Max = &v
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkdsdCpuOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Interval = &v
		case 57:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkdsdCpuOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinTime = &v
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkdsdCpuOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipJkdsdCpuOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJkdsdCpuOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJkdsdCpuOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipJkdsdCpuOc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowJkdsdCpuOc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJkdsdCpuOc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJkdsdCpuOc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthJkdsdCpuOc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupJkdsdCpuOc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthJkdsdCpuOc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthJkdsdCpuOc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowJkdsdCpuOc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupJkdsdCpuOc = fmt.Errorf("proto: unexpected end of group")
)
