// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: jkdsd_oc.proto

package schema

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SystemDebug struct {
	Processes            *SystemDebugProcessesType `protobuf:"bytes,151,opt,name=processes" json:"processes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *SystemDebug) Reset()         { *m = SystemDebug{} }
func (m *SystemDebug) String() string { return proto.CompactTextString(m) }
func (*SystemDebug) ProtoMessage()    {}
func (*SystemDebug) Descriptor() ([]byte, []int) {
	return fileDescriptor_27d522bd05346529, []int{0}
}
func (m *SystemDebug) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemDebug) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemDebug.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemDebug) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemDebug.Merge(m, src)
}
func (m *SystemDebug) XXX_Size() int {
	return m.Size()
}
func (m *SystemDebug) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemDebug.DiscardUnknown(m)
}

var xxx_messageInfo_SystemDebug proto.InternalMessageInfo

func (m *SystemDebug) GetProcesses() *SystemDebugProcessesType {
	if m != nil {
		return m.Processes
	}
	return nil
}

type SystemDebugProcessesType struct {
	Process              []*SystemDebugProcessesTypeProcessList `protobuf:"bytes,151,rep,name=process" json:"process,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *SystemDebugProcessesType) Reset()         { *m = SystemDebugProcessesType{} }
func (m *SystemDebugProcessesType) String() string { return proto.CompactTextString(m) }
func (*SystemDebugProcessesType) ProtoMessage()    {}
func (*SystemDebugProcessesType) Descriptor() ([]byte, []int) {
	return fileDescriptor_27d522bd05346529, []int{0, 0}
}
func (m *SystemDebugProcessesType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemDebugProcessesType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemDebugProcessesType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemDebugProcessesType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemDebugProcessesType.Merge(m, src)
}
func (m *SystemDebugProcessesType) XXX_Size() int {
	return m.Size()
}
func (m *SystemDebugProcessesType) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemDebugProcessesType.DiscardUnknown(m)
}

var xxx_messageInfo_SystemDebugProcessesType proto.InternalMessageInfo

func (m *SystemDebugProcessesType) GetProcess() []*SystemDebugProcessesTypeProcessList {
	if m != nil {
		return m.Process
	}
	return nil
}

type SystemDebugProcessesTypeProcessList struct {
	Pid                  *uint64                                       `protobuf:"varint,51,opt,name=pid" json:"pid,omitempty"`
	State                *SystemDebugProcessesTypeProcessListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                      `json:"-"`
	XXX_unrecognized     []byte                                        `json:"-"`
	XXX_sizecache        int32                                         `json:"-"`
}

func (m *SystemDebugProcessesTypeProcessList) Reset()         { *m = SystemDebugProcessesTypeProcessList{} }
func (m *SystemDebugProcessesTypeProcessList) String() string { return proto.CompactTextString(m) }
func (*SystemDebugProcessesTypeProcessList) ProtoMessage()    {}
func (*SystemDebugProcessesTypeProcessList) Descriptor() ([]byte, []int) {
	return fileDescriptor_27d522bd05346529, []int{0, 0, 0}
}
func (m *SystemDebugProcessesTypeProcessList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemDebugProcessesTypeProcessList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemDebugProcessesTypeProcessList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemDebugProcessesTypeProcessList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemDebugProcessesTypeProcessList.Merge(m, src)
}
func (m *SystemDebugProcessesTypeProcessList) XXX_Size() int {
	return m.Size()
}
func (m *SystemDebugProcessesTypeProcessList) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemDebugProcessesTypeProcessList.DiscardUnknown(m)
}

var xxx_messageInfo_SystemDebugProcessesTypeProcessList proto.InternalMessageInfo

func (m *SystemDebugProcessesTypeProcessList) GetPid() uint64 {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return 0
}

func (m *SystemDebugProcessesTypeProcessList) GetState() *SystemDebugProcessesTypeProcessListStateType {
	if m != nil {
		return m.State
	}
	return nil
}

type SystemDebugProcessesTypeProcessListStateType struct {
	Pid                  *uint64  `protobuf:"varint,51,opt,name=pid" json:"pid,omitempty"`
	Name                 *string  `protobuf:"bytes,52,opt,name=name" json:"name,omitempty"`
	StartTime            *uint64  `protobuf:"varint,53,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	Uptime               *uint64  `protobuf:"varint,54,opt,name=uptime" json:"uptime,omitempty"`
	CpuUsageUser         *uint64  `protobuf:"varint,55,opt,name=cpu_usage_user,json=cpuUsageUser" json:"cpu_usage_user,omitempty"`
	CpuUsageSystem       *uint64  `protobuf:"varint,56,opt,name=cpu_usage_system,json=cpuUsageSystem" json:"cpu_usage_system,omitempty"`
	CpuUtilization       *uint32  `protobuf:"varint,57,opt,name=cpu_utilization,json=cpuUtilization" json:"cpu_utilization,omitempty"`
	MemoryUsage          *uint64  `protobuf:"varint,58,opt,name=memory_usage,json=memoryUsage" json:"memory_usage,omitempty"`
	MemoryUtilization    *uint32  `protobuf:"varint,59,opt,name=memory_utilization,json=memoryUtilization" json:"memory_utilization,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SystemDebugProcessesTypeProcessListStateType) Reset() {
	*m = SystemDebugProcessesTypeProcessListStateType{}
}
func (m *SystemDebugProcessesTypeProcessListStateType) String() string {
	return proto.CompactTextString(m)
}
func (*SystemDebugProcessesTypeProcessListStateType) ProtoMessage() {}
func (*SystemDebugProcessesTypeProcessListStateType) Descriptor() ([]byte, []int) {
	return fileDescriptor_27d522bd05346529, []int{0, 0, 0, 0}
}
func (m *SystemDebugProcessesTypeProcessListStateType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemDebugProcessesTypeProcessListStateType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemDebugProcessesTypeProcessListStateType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemDebugProcessesTypeProcessListStateType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemDebugProcessesTypeProcessListStateType.Merge(m, src)
}
func (m *SystemDebugProcessesTypeProcessListStateType) XXX_Size() int {
	return m.Size()
}
func (m *SystemDebugProcessesTypeProcessListStateType) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemDebugProcessesTypeProcessListStateType.DiscardUnknown(m)
}

var xxx_messageInfo_SystemDebugProcessesTypeProcessListStateType proto.InternalMessageInfo

func (m *SystemDebugProcessesTypeProcessListStateType) GetPid() uint64 {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return 0
}

func (m *SystemDebugProcessesTypeProcessListStateType) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *SystemDebugProcessesTypeProcessListStateType) GetStartTime() uint64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *SystemDebugProcessesTypeProcessListStateType) GetUptime() uint64 {
	if m != nil && m.Uptime != nil {
		return *m.Uptime
	}
	return 0
}

func (m *SystemDebugProcessesTypeProcessListStateType) GetCpuUsageUser() uint64 {
	if m != nil && m.CpuUsageUser != nil {
		return *m.CpuUsageUser
	}
	return 0
}

func (m *SystemDebugProcessesTypeProcessListStateType) GetCpuUsageSystem() uint64 {
	if m != nil && m.CpuUsageSystem != nil {
		return *m.CpuUsageSystem
	}
	return 0
}

func (m *SystemDebugProcessesTypeProcessListStateType) GetCpuUtilization() uint32 {
	if m != nil && m.CpuUtilization != nil {
		return *m.CpuUtilization
	}
	return 0
}

func (m *SystemDebugProcessesTypeProcessListStateType) GetMemoryUsage() uint64 {
	if m != nil && m.MemoryUsage != nil {
		return *m.MemoryUsage
	}
	return 0
}

func (m *SystemDebugProcessesTypeProcessListStateType) GetMemoryUtilization() uint32 {
	if m != nil && m.MemoryUtilization != nil {
		return *m.MemoryUtilization
	}
	return 0
}

var E_JnprSystemDebugExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*SystemDebug)(nil),
	Field:         106,
	Name:          "jnpr_system_debug_ext",
	Tag:           "bytes,106,opt,name=jnpr_system_debug_ext",
	Filename:      "jkdsd_oc.proto",
}

func init() {
	proto.RegisterType((*SystemDebug)(nil), "system_debug")
	proto.RegisterType((*SystemDebugProcessesType)(nil), "system_debug.processes_type")
	proto.RegisterType((*SystemDebugProcessesTypeProcessList)(nil), "system_debug.processes_type.process_list")
	proto.RegisterType((*SystemDebugProcessesTypeProcessListStateType)(nil), "system_debug.processes_type.process_list.state_type")
	proto.RegisterExtension(E_JnprSystemDebugExt)
}

func init() { proto.RegisterFile("jkdsd_oc.proto", fileDescriptor_27d522bd05346529) }

var fileDescriptor_27d522bd05346529 = []byte{
	// 487 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x4f, 0x6e, 0xd3, 0x40,
	0x14, 0xc6, 0xe5, 0x26, 0x05, 0x32, 0x49, 0x43, 0x19, 0x04, 0xb5, 0x22, 0x88, 0x02, 0x42, 0xc2,
	0x2c, 0x62, 0x4b, 0xa5, 0xfc, 0x6b, 0x37, 0xa8, 0x2a, 0x1b, 0x90, 0x58, 0xb8, 0x74, 0x01, 0x9b,
	0xc1, 0xb1, 0x9f, 0x9c, 0x71, 0x62, 0xcf, 0x68, 0xe6, 0x19, 0x1a, 0x96, 0x88, 0x3b, 0x70, 0x08,
	0xb6, 0x1c, 0x82, 0x25, 0xe2, 0x04, 0x28, 0x27, 0x41, 0x9e, 0x89, 0xb1, 0xbb, 0x41, 0xec, 0x32,
	0xdf, 0xf7, 0x9b, 0xdf, 0xcb, 0xf3, 0x90, 0x61, 0xb6, 0x48, 0x74, 0xc2, 0x44, 0xec, 0x4b, 0x25,
	0x50, 0x8c, 0xae, 0x23, 0x2c, 0x21, 0x07, 0x54, 0x2b, 0x86, 0x42, 0xda, 0xf0, 0xee, 0xaf, 0x2e,
	0x19, 0xe8, 0x95, 0x46, 0xc8, 0x59, 0x02, 0xb3, 0x32, 0xa5, 0x47, 0xa4, 0x27, 0x95, 0x88, 0x41,
	0x6b, 0xd0, 0xee, 0x57, 0x67, 0xe2, 0x78, 0xfd, 0xfd, 0x5b, 0x7e, 0x1b, 0xf1, 0xff, 0xf6, 0x0c,
	0x57, 0x12, 0xc2, 0x86, 0x1f, 0x7d, 0xe9, 0x92, 0xe1, 0xc5, 0x96, 0x9e, 0x90, 0xcb, 0x9b, 0xa4,
	0xb2, 0x75, 0xbc, 0xfe, 0xfe, 0x83, 0x7f, 0xd9, 0xea, 0x23, 0x5b, 0x72, 0x8d, 0x61, 0x7d, 0x75,
	0xf4, 0xad, 0x43, 0x06, 0xed, 0x86, 0xee, 0x91, 0x8e, 0xe4, 0x89, 0xfb, 0x70, 0xe2, 0x78, 0xdd,
	0xe3, 0xed, 0xcf, 0xcf, 0xb7, 0xae, 0x38, 0x61, 0x95, 0xd0, 0x57, 0x64, 0x5b, 0x63, 0x84, 0x50,
	0xff, 0xf7, 0x83, 0xff, 0x9e, 0xe6, 0x9b, 0x7b, 0x76, 0x27, 0xeb, 0x18, 0x7d, 0xdf, 0x22, 0xa4,
	0x49, 0xe9, 0x6e, 0x6b, 0xa8, 0x9d, 0x46, 0x49, 0xb7, 0x88, 0x72, 0x70, 0x0f, 0x26, 0x8e, 0xd7,
	0x0b, 0xcd, 0x6f, 0x7a, 0xdb, 0xdc, 0x51, 0xc8, 0x90, 0xe7, 0xe0, 0x3e, 0x32, 0x70, 0xcf, 0x24,
	0x6f, 0x78, 0x0e, 0xf4, 0x26, 0xb9, 0x54, 0x4a, 0x53, 0x3d, 0x36, 0xd5, 0xe6, 0x44, 0xef, 0x91,
	0x61, 0x2c, 0x4b, 0x56, 0xea, 0x28, 0x05, 0x56, 0x6a, 0x50, 0xee, 0x13, 0xd3, 0x0f, 0x62, 0x59,
	0x9e, 0x55, 0xe1, 0x99, 0x06, 0x45, 0x3d, 0xb2, 0xdb, 0x50, 0x76, 0x33, 0xf7, 0xa9, 0xe1, 0x86,
	0x35, 0x77, 0x6a, 0x52, 0x7a, 0x9f, 0x5c, 0x35, 0x24, 0xf2, 0x25, 0xff, 0x14, 0x21, 0x17, 0x85,
	0xfb, 0x6c, 0xe2, 0x78, 0x3b, 0x16, 0x6c, 0x52, 0x7a, 0x87, 0x0c, 0x72, 0xc8, 0x85, 0x5a, 0x59,
	0xab, 0x7b, 0x68, 0x74, 0x7d, 0x9b, 0x19, 0x23, 0x9d, 0x12, 0x5a, 0x23, 0x2d, 0xdd, 0x91, 0xd1,
	0x5d, 0xdb, 0x80, 0x4d, 0x71, 0xf8, 0x96, 0xdc, 0xc8, 0x0a, 0xa9, 0x58, 0xfb, 0xcb, 0x33, 0x38,
	0x47, 0xba, 0xe7, 0xbf, 0x2c, 0x0b, 0x2e, 0x41, 0xbd, 0x06, 0xfc, 0x28, 0xd4, 0x42, 0x9f, 0x42,
	0xa1, 0x85, 0xd2, 0x6e, 0x66, 0xde, 0x6a, 0xe7, 0xc2, 0x5b, 0x85, 0xb4, 0x92, 0xd8, 0x6d, 0x4e,
	0xaa, 0xe0, 0xc5, 0x39, 0x1e, 0xbf, 0xff, 0xb1, 0x1e, 0x3b, 0x3f, 0xd7, 0x63, 0xe7, 0xf7, 0x7a,
	0xec, 0xbc, 0x0b, 0x53, 0x8e, 0x7e, 0x66, 0x95, 0x7e, 0x01, 0x18, 0xf0, 0x18, 0x66, 0xa0, 0xd2,
	0x60, 0x0e, 0xd1, 0x12, 0xe7, 0x33, 0x81, 0x53, 0x5e, 0xa4, 0xa0, 0x71, 0x9a, 0x21, 0x9f, 0x16,
	0x11, 0xf2, 0x0f, 0x10, 0xc8, 0x45, 0x1a, 0x64, 0xc8, 0x83, 0x28, 0x89, 0x24, 0x82, 0xd2, 0x01,
	0xcb, 0xca, 0x42, 0xe8, 0x40, 0xc7, 0x73, 0xc8, 0xa3, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x65,
	0xc4, 0xa5, 0x2b, 0x37, 0x03, 0x00, 0x00,
}

func (m *SystemDebug) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemDebug) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemDebug) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Processes != nil {
		{
			size, err := m.Processes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJkdsdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *SystemDebugProcessesType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemDebugProcessesType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemDebugProcessesType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Process) > 0 {
		for iNdEx := len(m.Process) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Process[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintJkdsdOc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *SystemDebugProcessesTypeProcessList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemDebugProcessesTypeProcessList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemDebugProcessesTypeProcessList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJkdsdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	if m.Pid != nil {
		i = encodeVarintJkdsdOc(dAtA, i, uint64(*m.Pid))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func (m *SystemDebugProcessesTypeProcessListStateType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemDebugProcessesTypeProcessListStateType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemDebugProcessesTypeProcessListStateType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MemoryUtilization != nil {
		i = encodeVarintJkdsdOc(dAtA, i, uint64(*m.MemoryUtilization))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd8
	}
	if m.MemoryUsage != nil {
		i = encodeVarintJkdsdOc(dAtA, i, uint64(*m.MemoryUsage))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd0
	}
	if m.CpuUtilization != nil {
		i = encodeVarintJkdsdOc(dAtA, i, uint64(*m.CpuUtilization))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc8
	}
	if m.CpuUsageSystem != nil {
		i = encodeVarintJkdsdOc(dAtA, i, uint64(*m.CpuUsageSystem))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc0
	}
	if m.CpuUsageUser != nil {
		i = encodeVarintJkdsdOc(dAtA, i, uint64(*m.CpuUsageUser))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.Uptime != nil {
		i = encodeVarintJkdsdOc(dAtA, i, uint64(*m.Uptime))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.StartTime != nil {
		i = encodeVarintJkdsdOc(dAtA, i, uint64(*m.StartTime))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintJkdsdOc(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	if m.Pid != nil {
		i = encodeVarintJkdsdOc(dAtA, i, uint64(*m.Pid))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func encodeVarintJkdsdOc(dAtA []byte, offset int, v uint64) int {
	offset -= sovJkdsdOc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SystemDebug) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Processes != nil {
		l = m.Processes.Size()
		n += 2 + l + sovJkdsdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SystemDebugProcessesType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Process) > 0 {
		for _, e := range m.Process {
			l = e.Size()
			n += 2 + l + sovJkdsdOc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SystemDebugProcessesTypeProcessList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pid != nil {
		n += 2 + sovJkdsdOc(uint64(*m.Pid))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 2 + l + sovJkdsdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SystemDebugProcessesTypeProcessListStateType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pid != nil {
		n += 2 + sovJkdsdOc(uint64(*m.Pid))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 2 + l + sovJkdsdOc(uint64(l))
	}
	if m.StartTime != nil {
		n += 2 + sovJkdsdOc(uint64(*m.StartTime))
	}
	if m.Uptime != nil {
		n += 2 + sovJkdsdOc(uint64(*m.Uptime))
	}
	if m.CpuUsageUser != nil {
		n += 2 + sovJkdsdOc(uint64(*m.CpuUsageUser))
	}
	if m.CpuUsageSystem != nil {
		n += 2 + sovJkdsdOc(uint64(*m.CpuUsageSystem))
	}
	if m.CpuUtilization != nil {
		n += 2 + sovJkdsdOc(uint64(*m.CpuUtilization))
	}
	if m.MemoryUsage != nil {
		n += 2 + sovJkdsdOc(uint64(*m.MemoryUsage))
	}
	if m.MemoryUtilization != nil {
		n += 2 + sovJkdsdOc(uint64(*m.MemoryUtilization))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovJkdsdOc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozJkdsdOc(x uint64) (n int) {
	return sovJkdsdOc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SystemDebug) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJkdsdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: system_debug: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: system_debug: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Processes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkdsdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJkdsdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJkdsdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Processes == nil {
				m.Processes = &SystemDebugProcessesType{}
			}
			if err := m.Processes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJkdsdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJkdsdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJkdsdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemDebugProcessesType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJkdsdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: processes_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: processes_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Process", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkdsdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJkdsdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJkdsdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Process = append(m.Process, &SystemDebugProcessesTypeProcessList{})
			if err := m.Process[len(m.Process)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJkdsdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJkdsdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJkdsdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemDebugProcessesTypeProcessList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJkdsdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: process_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: process_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkdsdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pid = &v
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkdsdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJkdsdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJkdsdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &SystemDebugProcessesTypeProcessListStateType{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJkdsdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJkdsdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJkdsdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemDebugProcessesTypeProcessListStateType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJkdsdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: state_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: state_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkdsdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pid = &v
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkdsdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJkdsdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJkdsdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkdsdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTime = &v
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uptime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkdsdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Uptime = &v
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuUsageUser", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkdsdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CpuUsageUser = &v
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuUsageSystem", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkdsdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CpuUsageSystem = &v
		case 57:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuUtilization", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkdsdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CpuUtilization = &v
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryUsage", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkdsdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MemoryUsage = &v
		case 59:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryUtilization", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkdsdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MemoryUtilization = &v
		default:
			iNdEx = preIndex
			skippy, err := skipJkdsdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJkdsdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJkdsdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipJkdsdOc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowJkdsdOc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJkdsdOc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJkdsdOc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthJkdsdOc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupJkdsdOc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthJkdsdOc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthJkdsdOc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowJkdsdOc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupJkdsdOc = fmt.Errorf("proto: unexpected end of group")
)
