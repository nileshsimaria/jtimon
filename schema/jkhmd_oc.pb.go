// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: jkhmd_oc.proto

package schema

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type JunosKernelHealth struct {
	Chassis              *JunosKernelHealthChassisType        `protobuf:"bytes,191,opt,name=chassis" json:"chassis,omitempty"`
	RoutingOptions       *JunosKernelHealthRoutingOptionsType `protobuf:"bytes,509,opt,name=routing_options,json=routingOptions" json:"routing_options,omitempty"`
	Security             *JunosKernelHealthSecurityType       `protobuf:"bytes,183,opt,name=security" json:"security,omitempty"`
	Kernel               *JunosKernelHealthKernelType         `protobuf:"bytes,192,opt,name=kernel" json:"kernel,omitempty"`
	KernelIfstate        *JunosKernelHealthKernelIfstateType  `protobuf:"bytes,186,opt,name=kernel_ifstate,json=kernelIfstate" json:"kernel_ifstate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *JunosKernelHealth) Reset()         { *m = JunosKernelHealth{} }
func (m *JunosKernelHealth) String() string { return proto.CompactTextString(m) }
func (*JunosKernelHealth) ProtoMessage()    {}
func (*JunosKernelHealth) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ef45f12b88bd767, []int{0}
}
func (m *JunosKernelHealth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosKernelHealth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosKernelHealth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosKernelHealth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosKernelHealth.Merge(m, src)
}
func (m *JunosKernelHealth) XXX_Size() int {
	return m.Size()
}
func (m *JunosKernelHealth) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosKernelHealth.DiscardUnknown(m)
}

var xxx_messageInfo_JunosKernelHealth proto.InternalMessageInfo

func (m *JunosKernelHealth) GetChassis() *JunosKernelHealthChassisType {
	if m != nil {
		return m.Chassis
	}
	return nil
}

func (m *JunosKernelHealth) GetRoutingOptions() *JunosKernelHealthRoutingOptionsType {
	if m != nil {
		return m.RoutingOptions
	}
	return nil
}

func (m *JunosKernelHealth) GetSecurity() *JunosKernelHealthSecurityType {
	if m != nil {
		return m.Security
	}
	return nil
}

func (m *JunosKernelHealth) GetKernel() *JunosKernelHealthKernelType {
	if m != nil {
		return m.Kernel
	}
	return nil
}

func (m *JunosKernelHealth) GetKernelIfstate() *JunosKernelHealthKernelIfstateType {
	if m != nil {
		return m.KernelIfstate
	}
	return nil
}

type JunosKernelHealthChassisType struct {
	Gres                 *JunosKernelHealthChassisTypeGresType              `protobuf:"bytes,181,opt,name=gres" json:"gres,omitempty"`
	Issu                 *JunosKernelHealthChassisTypeIssuType              `protobuf:"bytes,182,opt,name=issu" json:"issu,omitempty"`
	AggregatedDevices    *JunosKernelHealthChassisTypeAggregatedDevicesType `protobuf:"bytes,351,opt,name=aggregated_devices,json=aggregatedDevices" json:"aggregated_devices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_unrecognized     []byte                                             `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *JunosKernelHealthChassisType) Reset()         { *m = JunosKernelHealthChassisType{} }
func (m *JunosKernelHealthChassisType) String() string { return proto.CompactTextString(m) }
func (*JunosKernelHealthChassisType) ProtoMessage()    {}
func (*JunosKernelHealthChassisType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ef45f12b88bd767, []int{0, 0}
}
func (m *JunosKernelHealthChassisType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosKernelHealthChassisType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosKernelHealthChassisType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosKernelHealthChassisType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosKernelHealthChassisType.Merge(m, src)
}
func (m *JunosKernelHealthChassisType) XXX_Size() int {
	return m.Size()
}
func (m *JunosKernelHealthChassisType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosKernelHealthChassisType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosKernelHealthChassisType proto.InternalMessageInfo

func (m *JunosKernelHealthChassisType) GetGres() *JunosKernelHealthChassisTypeGresType {
	if m != nil {
		return m.Gres
	}
	return nil
}

func (m *JunosKernelHealthChassisType) GetIssu() *JunosKernelHealthChassisTypeIssuType {
	if m != nil {
		return m.Issu
	}
	return nil
}

func (m *JunosKernelHealthChassisType) GetAggregatedDevices() *JunosKernelHealthChassisTypeAggregatedDevicesType {
	if m != nil {
		return m.AggregatedDevices
	}
	return nil
}

type JunosKernelHealthChassisTypeGresType struct {
	GresTime             *uint64  `protobuf:"varint,51,opt,name=gres_time,json=gresTime" json:"gres_time,omitempty"`
	SlaveConnectTime     *uint64  `protobuf:"varint,52,opt,name=slave_connect_time,json=slaveConnectTime" json:"slave_connect_time,omitempty"`
	ConfiguredState      *string  `protobuf:"bytes,53,opt,name=configured_state,json=configuredState" json:"configured_state,omitempty"`
	MasterKernelReady    *string  `protobuf:"bytes,54,opt,name=master_kernel_ready,json=masterKernelReady" json:"master_kernel_ready,omitempty"`
	SlaveKernelReady     *string  `protobuf:"bytes,55,opt,name=slave_kernel_ready,json=slaveKernelReady" json:"slave_kernel_ready,omitempty"`
	ErrorState           *string  `protobuf:"bytes,56,opt,name=error_state,json=errorState" json:"error_state,omitempty"`
	OtherRePresent       *string  `protobuf:"bytes,151,opt,name=other_re_present,json=otherRePresent" json:"other_re_present,omitempty"`
	OtherReAlive         *string  `protobuf:"bytes,152,opt,name=other_re_alive,json=otherReAlive" json:"other_re_alive,omitempty"`
	IsProtocolMaster     *string  `protobuf:"bytes,165,opt,name=is_protocol_master,json=isProtocolMaster" json:"is_protocol_master,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JunosKernelHealthChassisTypeGresType) Reset()         { *m = JunosKernelHealthChassisTypeGresType{} }
func (m *JunosKernelHealthChassisTypeGresType) String() string { return proto.CompactTextString(m) }
func (*JunosKernelHealthChassisTypeGresType) ProtoMessage()    {}
func (*JunosKernelHealthChassisTypeGresType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ef45f12b88bd767, []int{0, 0, 0}
}
func (m *JunosKernelHealthChassisTypeGresType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosKernelHealthChassisTypeGresType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosKernelHealthChassisTypeGresType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosKernelHealthChassisTypeGresType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosKernelHealthChassisTypeGresType.Merge(m, src)
}
func (m *JunosKernelHealthChassisTypeGresType) XXX_Size() int {
	return m.Size()
}
func (m *JunosKernelHealthChassisTypeGresType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosKernelHealthChassisTypeGresType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosKernelHealthChassisTypeGresType proto.InternalMessageInfo

func (m *JunosKernelHealthChassisTypeGresType) GetGresTime() uint64 {
	if m != nil && m.GresTime != nil {
		return *m.GresTime
	}
	return 0
}

func (m *JunosKernelHealthChassisTypeGresType) GetSlaveConnectTime() uint64 {
	if m != nil && m.SlaveConnectTime != nil {
		return *m.SlaveConnectTime
	}
	return 0
}

func (m *JunosKernelHealthChassisTypeGresType) GetConfiguredState() string {
	if m != nil && m.ConfiguredState != nil {
		return *m.ConfiguredState
	}
	return ""
}

func (m *JunosKernelHealthChassisTypeGresType) GetMasterKernelReady() string {
	if m != nil && m.MasterKernelReady != nil {
		return *m.MasterKernelReady
	}
	return ""
}

func (m *JunosKernelHealthChassisTypeGresType) GetSlaveKernelReady() string {
	if m != nil && m.SlaveKernelReady != nil {
		return *m.SlaveKernelReady
	}
	return ""
}

func (m *JunosKernelHealthChassisTypeGresType) GetErrorState() string {
	if m != nil && m.ErrorState != nil {
		return *m.ErrorState
	}
	return ""
}

func (m *JunosKernelHealthChassisTypeGresType) GetOtherRePresent() string {
	if m != nil && m.OtherRePresent != nil {
		return *m.OtherRePresent
	}
	return ""
}

func (m *JunosKernelHealthChassisTypeGresType) GetOtherReAlive() string {
	if m != nil && m.OtherReAlive != nil {
		return *m.OtherReAlive
	}
	return ""
}

func (m *JunosKernelHealthChassisTypeGresType) GetIsProtocolMaster() string {
	if m != nil && m.IsProtocolMaster != nil {
		return *m.IsProtocolMaster
	}
	return ""
}

type JunosKernelHealthChassisTypeIssuType struct {
	FailureStage         *string  `protobuf:"bytes,51,opt,name=failure_stage,json=failureStage" json:"failure_stage,omitempty"`
	CurrentIssuStage     *string  `protobuf:"bytes,52,opt,name=current_issu_stage,json=currentIssuStage" json:"current_issu_stage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JunosKernelHealthChassisTypeIssuType) Reset()         { *m = JunosKernelHealthChassisTypeIssuType{} }
func (m *JunosKernelHealthChassisTypeIssuType) String() string { return proto.CompactTextString(m) }
func (*JunosKernelHealthChassisTypeIssuType) ProtoMessage()    {}
func (*JunosKernelHealthChassisTypeIssuType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ef45f12b88bd767, []int{0, 0, 1}
}
func (m *JunosKernelHealthChassisTypeIssuType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosKernelHealthChassisTypeIssuType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosKernelHealthChassisTypeIssuType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosKernelHealthChassisTypeIssuType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosKernelHealthChassisTypeIssuType.Merge(m, src)
}
func (m *JunosKernelHealthChassisTypeIssuType) XXX_Size() int {
	return m.Size()
}
func (m *JunosKernelHealthChassisTypeIssuType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosKernelHealthChassisTypeIssuType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosKernelHealthChassisTypeIssuType proto.InternalMessageInfo

func (m *JunosKernelHealthChassisTypeIssuType) GetFailureStage() string {
	if m != nil && m.FailureStage != nil {
		return *m.FailureStage
	}
	return ""
}

func (m *JunosKernelHealthChassisTypeIssuType) GetCurrentIssuStage() string {
	if m != nil && m.CurrentIssuStage != nil {
		return *m.CurrentIssuStage
	}
	return ""
}

type JunosKernelHealthChassisTypeAggregatedDevicesType struct {
	PsLtUnstackCnt       *uint32  `protobuf:"varint,311,opt,name=ps_lt_unstack_cnt,json=psLtUnstackCnt" json:"ps_lt_unstack_cnt,omitempty"`
	PsIflCccDownCnt      *uint32  `protobuf:"varint,312,opt,name=ps_ifl_ccc_down_cnt,json=psIflCccDownCnt" json:"ps_ifl_ccc_down_cnt,omitempty"`
	RltLpLinkDownCnt     *uint32  `protobuf:"varint,313,opt,name=rlt_lp_link_down_cnt,json=rltLpLinkDownCnt" json:"rlt_lp_link_down_cnt,omitempty"`
	AeUnstackCnt         *uint32  `protobuf:"varint,314,opt,name=ae_unstack_cnt,json=aeUnstackCnt" json:"ae_unstack_cnt,omitempty"`
	AeLpLinkDownCnt      *uint32  `protobuf:"varint,315,opt,name=ae_lp_link_down_cnt,json=aeLpLinkDownCnt" json:"ae_lp_link_down_cnt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JunosKernelHealthChassisTypeAggregatedDevicesType) Reset() {
	*m = JunosKernelHealthChassisTypeAggregatedDevicesType{}
}
func (m *JunosKernelHealthChassisTypeAggregatedDevicesType) String() string {
	return proto.CompactTextString(m)
}
func (*JunosKernelHealthChassisTypeAggregatedDevicesType) ProtoMessage() {}
func (*JunosKernelHealthChassisTypeAggregatedDevicesType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ef45f12b88bd767, []int{0, 0, 2}
}
func (m *JunosKernelHealthChassisTypeAggregatedDevicesType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosKernelHealthChassisTypeAggregatedDevicesType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosKernelHealthChassisTypeAggregatedDevicesType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosKernelHealthChassisTypeAggregatedDevicesType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosKernelHealthChassisTypeAggregatedDevicesType.Merge(m, src)
}
func (m *JunosKernelHealthChassisTypeAggregatedDevicesType) XXX_Size() int {
	return m.Size()
}
func (m *JunosKernelHealthChassisTypeAggregatedDevicesType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosKernelHealthChassisTypeAggregatedDevicesType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosKernelHealthChassisTypeAggregatedDevicesType proto.InternalMessageInfo

func (m *JunosKernelHealthChassisTypeAggregatedDevicesType) GetPsLtUnstackCnt() uint32 {
	if m != nil && m.PsLtUnstackCnt != nil {
		return *m.PsLtUnstackCnt
	}
	return 0
}

func (m *JunosKernelHealthChassisTypeAggregatedDevicesType) GetPsIflCccDownCnt() uint32 {
	if m != nil && m.PsIflCccDownCnt != nil {
		return *m.PsIflCccDownCnt
	}
	return 0
}

func (m *JunosKernelHealthChassisTypeAggregatedDevicesType) GetRltLpLinkDownCnt() uint32 {
	if m != nil && m.RltLpLinkDownCnt != nil {
		return *m.RltLpLinkDownCnt
	}
	return 0
}

func (m *JunosKernelHealthChassisTypeAggregatedDevicesType) GetAeUnstackCnt() uint32 {
	if m != nil && m.AeUnstackCnt != nil {
		return *m.AeUnstackCnt
	}
	return 0
}

func (m *JunosKernelHealthChassisTypeAggregatedDevicesType) GetAeLpLinkDownCnt() uint32 {
	if m != nil && m.AeLpLinkDownCnt != nil {
		return *m.AeLpLinkDownCnt
	}
	return 0
}

type JunosKernelHealthRoutingOptionsType struct {
	NonstopRouting       *JunosKernelHealthRoutingOptionsTypeNonstopRoutingType `protobuf:"bytes,510,opt,name=nonstop_routing,json=nonstopRouting" json:"nonstop_routing,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                               `json:"-"`
	XXX_unrecognized     []byte                                                 `json:"-"`
	XXX_sizecache        int32                                                  `json:"-"`
}

func (m *JunosKernelHealthRoutingOptionsType) Reset()         { *m = JunosKernelHealthRoutingOptionsType{} }
func (m *JunosKernelHealthRoutingOptionsType) String() string { return proto.CompactTextString(m) }
func (*JunosKernelHealthRoutingOptionsType) ProtoMessage()    {}
func (*JunosKernelHealthRoutingOptionsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ef45f12b88bd767, []int{0, 1}
}
func (m *JunosKernelHealthRoutingOptionsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosKernelHealthRoutingOptionsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosKernelHealthRoutingOptionsType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosKernelHealthRoutingOptionsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosKernelHealthRoutingOptionsType.Merge(m, src)
}
func (m *JunosKernelHealthRoutingOptionsType) XXX_Size() int {
	return m.Size()
}
func (m *JunosKernelHealthRoutingOptionsType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosKernelHealthRoutingOptionsType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosKernelHealthRoutingOptionsType proto.InternalMessageInfo

func (m *JunosKernelHealthRoutingOptionsType) GetNonstopRouting() *JunosKernelHealthRoutingOptionsTypeNonstopRoutingType {
	if m != nil {
		return m.NonstopRouting
	}
	return nil
}

type JunosKernelHealthRoutingOptionsTypeNonstopRoutingType struct {
	JsrSplitFailureCnt   *uint32  `protobuf:"varint,506,opt,name=jsr_split_failure_cnt,json=jsrSplitFailureCnt" json:"jsr_split_failure_cnt,omitempty"`
	JsrMergeFailureCnt   *uint32  `protobuf:"varint,507,opt,name=jsr_merge_failure_cnt,json=jsrMergeFailureCnt" json:"jsr_merge_failure_cnt,omitempty"`
	JsrPrlQueueFullCnt   *uint32  `protobuf:"varint,508,opt,name=jsr_prl_queue_full_cnt,json=jsrPrlQueueFullCnt" json:"jsr_prl_queue_full_cnt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JunosKernelHealthRoutingOptionsTypeNonstopRoutingType) Reset() {
	*m = JunosKernelHealthRoutingOptionsTypeNonstopRoutingType{}
}
func (m *JunosKernelHealthRoutingOptionsTypeNonstopRoutingType) String() string {
	return proto.CompactTextString(m)
}
func (*JunosKernelHealthRoutingOptionsTypeNonstopRoutingType) ProtoMessage() {}
func (*JunosKernelHealthRoutingOptionsTypeNonstopRoutingType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ef45f12b88bd767, []int{0, 1, 0}
}
func (m *JunosKernelHealthRoutingOptionsTypeNonstopRoutingType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosKernelHealthRoutingOptionsTypeNonstopRoutingType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosKernelHealthRoutingOptionsTypeNonstopRoutingType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosKernelHealthRoutingOptionsTypeNonstopRoutingType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosKernelHealthRoutingOptionsTypeNonstopRoutingType.Merge(m, src)
}
func (m *JunosKernelHealthRoutingOptionsTypeNonstopRoutingType) XXX_Size() int {
	return m.Size()
}
func (m *JunosKernelHealthRoutingOptionsTypeNonstopRoutingType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosKernelHealthRoutingOptionsTypeNonstopRoutingType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosKernelHealthRoutingOptionsTypeNonstopRoutingType proto.InternalMessageInfo

func (m *JunosKernelHealthRoutingOptionsTypeNonstopRoutingType) GetJsrSplitFailureCnt() uint32 {
	if m != nil && m.JsrSplitFailureCnt != nil {
		return *m.JsrSplitFailureCnt
	}
	return 0
}

func (m *JunosKernelHealthRoutingOptionsTypeNonstopRoutingType) GetJsrMergeFailureCnt() uint32 {
	if m != nil && m.JsrMergeFailureCnt != nil {
		return *m.JsrMergeFailureCnt
	}
	return 0
}

func (m *JunosKernelHealthRoutingOptionsTypeNonstopRoutingType) GetJsrPrlQueueFullCnt() uint32 {
	if m != nil && m.JsrPrlQueueFullCnt != nil {
		return *m.JsrPrlQueueFullCnt
	}
	return 0
}

type JunosKernelHealthSecurityType struct {
	VeriexecState        *string  `protobuf:"bytes,51,opt,name=veriexec_state,json=veriexecState" json:"veriexec_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JunosKernelHealthSecurityType) Reset()         { *m = JunosKernelHealthSecurityType{} }
func (m *JunosKernelHealthSecurityType) String() string { return proto.CompactTextString(m) }
func (*JunosKernelHealthSecurityType) ProtoMessage()    {}
func (*JunosKernelHealthSecurityType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ef45f12b88bd767, []int{0, 2}
}
func (m *JunosKernelHealthSecurityType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosKernelHealthSecurityType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosKernelHealthSecurityType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosKernelHealthSecurityType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosKernelHealthSecurityType.Merge(m, src)
}
func (m *JunosKernelHealthSecurityType) XXX_Size() int {
	return m.Size()
}
func (m *JunosKernelHealthSecurityType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosKernelHealthSecurityType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosKernelHealthSecurityType proto.InternalMessageInfo

func (m *JunosKernelHealthSecurityType) GetVeriexecState() string {
	if m != nil && m.VeriexecState != nil {
		return *m.VeriexecState
	}
	return ""
}

type JunosKernelHealthKernelType struct {
	PeerInfra            *JunosKernelHealthKernelTypePeerInfraType      `protobuf:"bytes,184,opt,name=peer_infra,json=peerInfra" json:"peer_infra,omitempty"`
	Vpls                 *JunosKernelHealthKernelTypeVplsType           `protobuf:"bytes,201,opt,name=vpls" json:"vpls,omitempty"`
	Tunnel               *JunosKernelHealthKernelTypeTunnelType         `protobuf:"bytes,202,opt,name=tunnel" json:"tunnel,omitempty"`
	Multicast            *JunosKernelHealthKernelTypeMulticastType      `protobuf:"bytes,203,opt,name=multicast" json:"multicast,omitempty"`
	Tnp                  *JunosKernelHealthKernelTypeTnpType            `protobuf:"bytes,225,opt,name=tnp" json:"tnp,omitempty"`
	RecordMetaData       *JunosKernelHealthKernelTypeRecordMetaDataType `protobuf:"bytes,185,opt,name=record_meta_data,json=recordMetaData" json:"record_meta_data,omitempty"`
	Rtsock               *JunosKernelHealthKernelTypeRtsockType         `protobuf:"bytes,153,opt,name=rtsock" json:"rtsock,omitempty"`
	Tcpip                *JunosKernelHealthKernelTypeTcpipType          `protobuf:"bytes,598,opt,name=tcpip" json:"tcpip,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                       `json:"-"`
	XXX_unrecognized     []byte                                         `json:"-"`
	XXX_sizecache        int32                                          `json:"-"`
}

func (m *JunosKernelHealthKernelType) Reset()         { *m = JunosKernelHealthKernelType{} }
func (m *JunosKernelHealthKernelType) String() string { return proto.CompactTextString(m) }
func (*JunosKernelHealthKernelType) ProtoMessage()    {}
func (*JunosKernelHealthKernelType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ef45f12b88bd767, []int{0, 3}
}
func (m *JunosKernelHealthKernelType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosKernelHealthKernelType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosKernelHealthKernelType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosKernelHealthKernelType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosKernelHealthKernelType.Merge(m, src)
}
func (m *JunosKernelHealthKernelType) XXX_Size() int {
	return m.Size()
}
func (m *JunosKernelHealthKernelType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosKernelHealthKernelType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosKernelHealthKernelType proto.InternalMessageInfo

func (m *JunosKernelHealthKernelType) GetPeerInfra() *JunosKernelHealthKernelTypePeerInfraType {
	if m != nil {
		return m.PeerInfra
	}
	return nil
}

func (m *JunosKernelHealthKernelType) GetVpls() *JunosKernelHealthKernelTypeVplsType {
	if m != nil {
		return m.Vpls
	}
	return nil
}

func (m *JunosKernelHealthKernelType) GetTunnel() *JunosKernelHealthKernelTypeTunnelType {
	if m != nil {
		return m.Tunnel
	}
	return nil
}

func (m *JunosKernelHealthKernelType) GetMulticast() *JunosKernelHealthKernelTypeMulticastType {
	if m != nil {
		return m.Multicast
	}
	return nil
}

func (m *JunosKernelHealthKernelType) GetTnp() *JunosKernelHealthKernelTypeTnpType {
	if m != nil {
		return m.Tnp
	}
	return nil
}

func (m *JunosKernelHealthKernelType) GetRecordMetaData() *JunosKernelHealthKernelTypeRecordMetaDataType {
	if m != nil {
		return m.RecordMetaData
	}
	return nil
}

func (m *JunosKernelHealthKernelType) GetRtsock() *JunosKernelHealthKernelTypeRtsockType {
	if m != nil {
		return m.Rtsock
	}
	return nil
}

func (m *JunosKernelHealthKernelType) GetTcpip() *JunosKernelHealthKernelTypeTcpipType {
	if m != nil {
		return m.Tcpip
	}
	return nil
}

type JunosKernelHealthKernelTypePeerInfraType struct {
	PeerPfemanConnDrops  *uint32  `protobuf:"varint,51,opt,name=peer_pfeman_conn_drops,json=peerPfemanConnDrops" json:"peer_pfeman_conn_drops,omitempty"`
	SpuriousPptWkups     *uint32  `protobuf:"varint,52,opt,name=spurious_ppt_wkups,json=spuriousPptWkups" json:"spurious_ppt_wkups,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JunosKernelHealthKernelTypePeerInfraType) Reset() {
	*m = JunosKernelHealthKernelTypePeerInfraType{}
}
func (m *JunosKernelHealthKernelTypePeerInfraType) String() string { return proto.CompactTextString(m) }
func (*JunosKernelHealthKernelTypePeerInfraType) ProtoMessage()    {}
func (*JunosKernelHealthKernelTypePeerInfraType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ef45f12b88bd767, []int{0, 3, 0}
}
func (m *JunosKernelHealthKernelTypePeerInfraType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosKernelHealthKernelTypePeerInfraType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosKernelHealthKernelTypePeerInfraType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosKernelHealthKernelTypePeerInfraType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosKernelHealthKernelTypePeerInfraType.Merge(m, src)
}
func (m *JunosKernelHealthKernelTypePeerInfraType) XXX_Size() int {
	return m.Size()
}
func (m *JunosKernelHealthKernelTypePeerInfraType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosKernelHealthKernelTypePeerInfraType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosKernelHealthKernelTypePeerInfraType proto.InternalMessageInfo

func (m *JunosKernelHealthKernelTypePeerInfraType) GetPeerPfemanConnDrops() uint32 {
	if m != nil && m.PeerPfemanConnDrops != nil {
		return *m.PeerPfemanConnDrops
	}
	return 0
}

func (m *JunosKernelHealthKernelTypePeerInfraType) GetSpuriousPptWkups() uint32 {
	if m != nil && m.SpuriousPptWkups != nil {
		return *m.SpuriousPptWkups
	}
	return 0
}

type JunosKernelHealthKernelTypeVplsType struct {
	UnicastTokenCnt      *uint32  `protobuf:"varint,213,opt,name=unicast_token_cnt,json=unicastTokenCnt" json:"unicast_token_cnt,omitempty"`
	UnicastTokenMax      *uint32  `protobuf:"varint,214,opt,name=unicast_token_max,json=unicastTokenMax" json:"unicast_token_max,omitempty"`
	FloodTokenCnt        *uint32  `protobuf:"varint,215,opt,name=flood_token_cnt,json=floodTokenCnt" json:"flood_token_cnt,omitempty"`
	FloodTokenMax        *uint32  `protobuf:"varint,216,opt,name=flood_token_max,json=floodTokenMax" json:"flood_token_max,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JunosKernelHealthKernelTypeVplsType) Reset()         { *m = JunosKernelHealthKernelTypeVplsType{} }
func (m *JunosKernelHealthKernelTypeVplsType) String() string { return proto.CompactTextString(m) }
func (*JunosKernelHealthKernelTypeVplsType) ProtoMessage()    {}
func (*JunosKernelHealthKernelTypeVplsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ef45f12b88bd767, []int{0, 3, 1}
}
func (m *JunosKernelHealthKernelTypeVplsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosKernelHealthKernelTypeVplsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosKernelHealthKernelTypeVplsType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosKernelHealthKernelTypeVplsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosKernelHealthKernelTypeVplsType.Merge(m, src)
}
func (m *JunosKernelHealthKernelTypeVplsType) XXX_Size() int {
	return m.Size()
}
func (m *JunosKernelHealthKernelTypeVplsType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosKernelHealthKernelTypeVplsType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosKernelHealthKernelTypeVplsType proto.InternalMessageInfo

func (m *JunosKernelHealthKernelTypeVplsType) GetUnicastTokenCnt() uint32 {
	if m != nil && m.UnicastTokenCnt != nil {
		return *m.UnicastTokenCnt
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeVplsType) GetUnicastTokenMax() uint32 {
	if m != nil && m.UnicastTokenMax != nil {
		return *m.UnicastTokenMax
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeVplsType) GetFloodTokenCnt() uint32 {
	if m != nil && m.FloodTokenCnt != nil {
		return *m.FloodTokenCnt
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeVplsType) GetFloodTokenMax() uint32 {
	if m != nil && m.FloodTokenMax != nil {
		return *m.FloodTokenMax
	}
	return 0
}

type JunosKernelHealthKernelTypeTunnelType struct {
	RpfTunnelidCnt       *uint32  `protobuf:"varint,217,opt,name=rpf_tunnelid_cnt,json=rpfTunnelidCnt" json:"rpf_tunnelid_cnt,omitempty"`
	RpfTunnelidMax       *uint32  `protobuf:"varint,218,opt,name=rpf_tunnelid_max,json=rpfTunnelidMax" json:"rpf_tunnelid_max,omitempty"`
	NonrpfTunnelidCnt    *uint32  `protobuf:"varint,219,opt,name=nonrpf_tunnelid_cnt,json=nonrpfTunnelidCnt" json:"nonrpf_tunnelid_cnt,omitempty"`
	NonrpfTunnelidMax    *uint32  `protobuf:"varint,220,opt,name=nonrpf_tunnelid_max,json=nonrpfTunnelidMax" json:"nonrpf_tunnelid_max,omitempty"`
	LoopedCnt            *uint32  `protobuf:"varint,221,opt,name=looped_cnt,json=loopedCnt" json:"looped_cnt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JunosKernelHealthKernelTypeTunnelType) Reset()         { *m = JunosKernelHealthKernelTypeTunnelType{} }
func (m *JunosKernelHealthKernelTypeTunnelType) String() string { return proto.CompactTextString(m) }
func (*JunosKernelHealthKernelTypeTunnelType) ProtoMessage()    {}
func (*JunosKernelHealthKernelTypeTunnelType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ef45f12b88bd767, []int{0, 3, 2}
}
func (m *JunosKernelHealthKernelTypeTunnelType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosKernelHealthKernelTypeTunnelType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosKernelHealthKernelTypeTunnelType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosKernelHealthKernelTypeTunnelType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosKernelHealthKernelTypeTunnelType.Merge(m, src)
}
func (m *JunosKernelHealthKernelTypeTunnelType) XXX_Size() int {
	return m.Size()
}
func (m *JunosKernelHealthKernelTypeTunnelType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosKernelHealthKernelTypeTunnelType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosKernelHealthKernelTypeTunnelType proto.InternalMessageInfo

func (m *JunosKernelHealthKernelTypeTunnelType) GetRpfTunnelidCnt() uint32 {
	if m != nil && m.RpfTunnelidCnt != nil {
		return *m.RpfTunnelidCnt
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTunnelType) GetRpfTunnelidMax() uint32 {
	if m != nil && m.RpfTunnelidMax != nil {
		return *m.RpfTunnelidMax
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTunnelType) GetNonrpfTunnelidCnt() uint32 {
	if m != nil && m.NonrpfTunnelidCnt != nil {
		return *m.NonrpfTunnelidCnt
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTunnelType) GetNonrpfTunnelidMax() uint32 {
	if m != nil && m.NonrpfTunnelidMax != nil {
		return *m.NonrpfTunnelidMax
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTunnelType) GetLoopedCnt() uint32 {
	if m != nil && m.LoopedCnt != nil {
		return *m.LoopedCnt
	}
	return 0
}

type JunosKernelHealthKernelTypeMulticastType struct {
	IifmismatchErrCnt    *uint64  `protobuf:"varint,222,opt,name=iifmismatch_err_cnt,json=iifmismatchErrCnt" json:"iifmismatch_err_cnt,omitempty"`
	RslvReqErrCnt        *uint64  `protobuf:"varint,223,opt,name=rslv_req_err_cnt,json=rslvReqErrCnt" json:"rslv_req_err_cnt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JunosKernelHealthKernelTypeMulticastType) Reset() {
	*m = JunosKernelHealthKernelTypeMulticastType{}
}
func (m *JunosKernelHealthKernelTypeMulticastType) String() string { return proto.CompactTextString(m) }
func (*JunosKernelHealthKernelTypeMulticastType) ProtoMessage()    {}
func (*JunosKernelHealthKernelTypeMulticastType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ef45f12b88bd767, []int{0, 3, 3}
}
func (m *JunosKernelHealthKernelTypeMulticastType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosKernelHealthKernelTypeMulticastType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosKernelHealthKernelTypeMulticastType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosKernelHealthKernelTypeMulticastType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosKernelHealthKernelTypeMulticastType.Merge(m, src)
}
func (m *JunosKernelHealthKernelTypeMulticastType) XXX_Size() int {
	return m.Size()
}
func (m *JunosKernelHealthKernelTypeMulticastType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosKernelHealthKernelTypeMulticastType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosKernelHealthKernelTypeMulticastType proto.InternalMessageInfo

func (m *JunosKernelHealthKernelTypeMulticastType) GetIifmismatchErrCnt() uint64 {
	if m != nil && m.IifmismatchErrCnt != nil {
		return *m.IifmismatchErrCnt
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeMulticastType) GetRslvReqErrCnt() uint64 {
	if m != nil && m.RslvReqErrCnt != nil {
		return *m.RslvReqErrCnt
	}
	return 0
}

type JunosKernelHealthKernelTypeTnpType struct {
	TnpHelloDropCnt      *uint64  `protobuf:"varint,211,opt,name=tnp_hello_drop_cnt,json=tnpHelloDropCnt" json:"tnp_hello_drop_cnt,omitempty"`
	TnpFragDropCnt       *uint64  `protobuf:"varint,212,opt,name=tnp_frag_drop_cnt,json=tnpFragDropCnt" json:"tnp_frag_drop_cnt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JunosKernelHealthKernelTypeTnpType) Reset()         { *m = JunosKernelHealthKernelTypeTnpType{} }
func (m *JunosKernelHealthKernelTypeTnpType) String() string { return proto.CompactTextString(m) }
func (*JunosKernelHealthKernelTypeTnpType) ProtoMessage()    {}
func (*JunosKernelHealthKernelTypeTnpType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ef45f12b88bd767, []int{0, 3, 4}
}
func (m *JunosKernelHealthKernelTypeTnpType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosKernelHealthKernelTypeTnpType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosKernelHealthKernelTypeTnpType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosKernelHealthKernelTypeTnpType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosKernelHealthKernelTypeTnpType.Merge(m, src)
}
func (m *JunosKernelHealthKernelTypeTnpType) XXX_Size() int {
	return m.Size()
}
func (m *JunosKernelHealthKernelTypeTnpType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosKernelHealthKernelTypeTnpType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosKernelHealthKernelTypeTnpType proto.InternalMessageInfo

func (m *JunosKernelHealthKernelTypeTnpType) GetTnpHelloDropCnt() uint64 {
	if m != nil && m.TnpHelloDropCnt != nil {
		return *m.TnpHelloDropCnt
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTnpType) GetTnpFragDropCnt() uint64 {
	if m != nil && m.TnpFragDropCnt != nil {
		return *m.TnpFragDropCnt
	}
	return 0
}

type JunosKernelHealthKernelTypeRecordMetaDataType struct {
	RecordTime           *uint64  `protobuf:"varint,51,opt,name=record_time,json=recordTime" json:"record_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JunosKernelHealthKernelTypeRecordMetaDataType) Reset() {
	*m = JunosKernelHealthKernelTypeRecordMetaDataType{}
}
func (m *JunosKernelHealthKernelTypeRecordMetaDataType) String() string {
	return proto.CompactTextString(m)
}
func (*JunosKernelHealthKernelTypeRecordMetaDataType) ProtoMessage() {}
func (*JunosKernelHealthKernelTypeRecordMetaDataType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ef45f12b88bd767, []int{0, 3, 5}
}
func (m *JunosKernelHealthKernelTypeRecordMetaDataType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosKernelHealthKernelTypeRecordMetaDataType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosKernelHealthKernelTypeRecordMetaDataType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosKernelHealthKernelTypeRecordMetaDataType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosKernelHealthKernelTypeRecordMetaDataType.Merge(m, src)
}
func (m *JunosKernelHealthKernelTypeRecordMetaDataType) XXX_Size() int {
	return m.Size()
}
func (m *JunosKernelHealthKernelTypeRecordMetaDataType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosKernelHealthKernelTypeRecordMetaDataType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosKernelHealthKernelTypeRecordMetaDataType proto.InternalMessageInfo

func (m *JunosKernelHealthKernelTypeRecordMetaDataType) GetRecordTime() uint64 {
	if m != nil && m.RecordTime != nil {
		return *m.RecordTime
	}
	return 0
}

type JunosKernelHealthKernelTypeRtsockType struct {
	TotalVetoCnt         *uint64  `protobuf:"varint,148,opt,name=total_veto_cnt,json=totalVetoCnt" json:"total_veto_cnt,omitempty"`
	TotalErrorCnt        *uint64  `protobuf:"varint,149,opt,name=total_error_cnt,json=totalErrorCnt" json:"total_error_cnt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JunosKernelHealthKernelTypeRtsockType) Reset()         { *m = JunosKernelHealthKernelTypeRtsockType{} }
func (m *JunosKernelHealthKernelTypeRtsockType) String() string { return proto.CompactTextString(m) }
func (*JunosKernelHealthKernelTypeRtsockType) ProtoMessage()    {}
func (*JunosKernelHealthKernelTypeRtsockType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ef45f12b88bd767, []int{0, 3, 6}
}
func (m *JunosKernelHealthKernelTypeRtsockType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosKernelHealthKernelTypeRtsockType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosKernelHealthKernelTypeRtsockType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosKernelHealthKernelTypeRtsockType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosKernelHealthKernelTypeRtsockType.Merge(m, src)
}
func (m *JunosKernelHealthKernelTypeRtsockType) XXX_Size() int {
	return m.Size()
}
func (m *JunosKernelHealthKernelTypeRtsockType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosKernelHealthKernelTypeRtsockType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosKernelHealthKernelTypeRtsockType proto.InternalMessageInfo

func (m *JunosKernelHealthKernelTypeRtsockType) GetTotalVetoCnt() uint64 {
	if m != nil && m.TotalVetoCnt != nil {
		return *m.TotalVetoCnt
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeRtsockType) GetTotalErrorCnt() uint64 {
	if m != nil && m.TotalErrorCnt != nil {
		return *m.TotalErrorCnt
	}
	return 0
}

type JunosKernelHealthKernelTypeTcpipType struct {
	Tcp                  *JunosKernelHealthKernelTypeTcpipTypeTcpType    `protobuf:"bytes,511,opt,name=tcp" json:"tcp,omitempty"`
	Nhidx                *JunosKernelHealthKernelTypeTcpipTypeNhidxType  `protobuf:"bytes,593,opt,name=nhidx" json:"nhidx,omitempty"`
	Rtb                  *JunosKernelHealthKernelTypeTcpipTypeRtbType    `protobuf:"bytes,594,opt,name=rtb" json:"rtb,omitempty"`
	Arp                  *JunosKernelHealthKernelTypeTcpipTypeArpType    `protobuf:"bytes,595,opt,name=arp" json:"arp,omitempty"`
	Ndp                  *JunosKernelHealthKernelTypeTcpipTypeNdpType    `protobuf:"bytes,596,opt,name=ndp" json:"ndp,omitempty"`
	Netisr               *JunosKernelHealthKernelTypeTcpipTypeNetisrType `protobuf:"bytes,597,opt,name=netisr" json:"netisr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                        `json:"-"`
	XXX_unrecognized     []byte                                          `json:"-"`
	XXX_sizecache        int32                                           `json:"-"`
}

func (m *JunosKernelHealthKernelTypeTcpipType) Reset()         { *m = JunosKernelHealthKernelTypeTcpipType{} }
func (m *JunosKernelHealthKernelTypeTcpipType) String() string { return proto.CompactTextString(m) }
func (*JunosKernelHealthKernelTypeTcpipType) ProtoMessage()    {}
func (*JunosKernelHealthKernelTypeTcpipType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ef45f12b88bd767, []int{0, 3, 7}
}
func (m *JunosKernelHealthKernelTypeTcpipType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosKernelHealthKernelTypeTcpipType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosKernelHealthKernelTypeTcpipType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosKernelHealthKernelTypeTcpipType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosKernelHealthKernelTypeTcpipType.Merge(m, src)
}
func (m *JunosKernelHealthKernelTypeTcpipType) XXX_Size() int {
	return m.Size()
}
func (m *JunosKernelHealthKernelTypeTcpipType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosKernelHealthKernelTypeTcpipType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosKernelHealthKernelTypeTcpipType proto.InternalMessageInfo

func (m *JunosKernelHealthKernelTypeTcpipType) GetTcp() *JunosKernelHealthKernelTypeTcpipTypeTcpType {
	if m != nil {
		return m.Tcp
	}
	return nil
}

func (m *JunosKernelHealthKernelTypeTcpipType) GetNhidx() *JunosKernelHealthKernelTypeTcpipTypeNhidxType {
	if m != nil {
		return m.Nhidx
	}
	return nil
}

func (m *JunosKernelHealthKernelTypeTcpipType) GetRtb() *JunosKernelHealthKernelTypeTcpipTypeRtbType {
	if m != nil {
		return m.Rtb
	}
	return nil
}

func (m *JunosKernelHealthKernelTypeTcpipType) GetArp() *JunosKernelHealthKernelTypeTcpipTypeArpType {
	if m != nil {
		return m.Arp
	}
	return nil
}

func (m *JunosKernelHealthKernelTypeTcpipType) GetNdp() *JunosKernelHealthKernelTypeTcpipTypeNdpType {
	if m != nil {
		return m.Ndp
	}
	return nil
}

func (m *JunosKernelHealthKernelTypeTcpipType) GetNetisr() *JunosKernelHealthKernelTypeTcpipTypeNetisrType {
	if m != nil {
		return m.Netisr
	}
	return nil
}

type JunosKernelHealthKernelTypeTcpipTypeTcpType struct {
	TcpDdosAttackCnt     *uint32  `protobuf:"varint,502,opt,name=tcp_ddos_attack_cnt,json=tcpDdosAttackCnt" json:"tcp_ddos_attack_cnt,omitempty"`
	TcpConndropsCnt      *uint32  `protobuf:"varint,503,opt,name=tcp_conndrops_cnt,json=tcpConndropsCnt" json:"tcp_conndrops_cnt,omitempty"`
	TcpTimeWaitConn      *uint64  `protobuf:"varint,504,opt,name=tcp_time_wait_conn,json=tcpTimeWaitConn" json:"tcp_time_wait_conn,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JunosKernelHealthKernelTypeTcpipTypeTcpType) Reset() {
	*m = JunosKernelHealthKernelTypeTcpipTypeTcpType{}
}
func (m *JunosKernelHealthKernelTypeTcpipTypeTcpType) String() string {
	return proto.CompactTextString(m)
}
func (*JunosKernelHealthKernelTypeTcpipTypeTcpType) ProtoMessage() {}
func (*JunosKernelHealthKernelTypeTcpipTypeTcpType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ef45f12b88bd767, []int{0, 3, 7, 0}
}
func (m *JunosKernelHealthKernelTypeTcpipTypeTcpType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosKernelHealthKernelTypeTcpipTypeTcpType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosKernelHealthKernelTypeTcpipTypeTcpType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosKernelHealthKernelTypeTcpipTypeTcpType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosKernelHealthKernelTypeTcpipTypeTcpType.Merge(m, src)
}
func (m *JunosKernelHealthKernelTypeTcpipTypeTcpType) XXX_Size() int {
	return m.Size()
}
func (m *JunosKernelHealthKernelTypeTcpipTypeTcpType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosKernelHealthKernelTypeTcpipTypeTcpType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosKernelHealthKernelTypeTcpipTypeTcpType proto.InternalMessageInfo

func (m *JunosKernelHealthKernelTypeTcpipTypeTcpType) GetTcpDdosAttackCnt() uint32 {
	if m != nil && m.TcpDdosAttackCnt != nil {
		return *m.TcpDdosAttackCnt
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTcpipTypeTcpType) GetTcpConndropsCnt() uint32 {
	if m != nil && m.TcpConndropsCnt != nil {
		return *m.TcpConndropsCnt
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTcpipTypeTcpType) GetTcpTimeWaitConn() uint64 {
	if m != nil && m.TcpTimeWaitConn != nil {
		return *m.TcpTimeWaitConn
	}
	return 0
}

type JunosKernelHealthKernelTypeTcpipTypeNhidxType struct {
	NexthopPubMax        *uint32  `protobuf:"varint,401,opt,name=nexthop_pub_max,json=nexthopPubMax" json:"nexthop_pub_max,omitempty"`
	NexthopPrivMax       *uint32  `protobuf:"varint,402,opt,name=nexthop_priv_max,json=nexthopPrivMax" json:"nexthop_priv_max,omitempty"`
	NexthopPubCnt        *uint32  `protobuf:"varint,403,opt,name=nexthop_pub_cnt,json=nexthopPubCnt" json:"nexthop_pub_cnt,omitempty"`
	NexthopPrivCnt       *uint32  `protobuf:"varint,404,opt,name=nexthop_priv_cnt,json=nexthopPrivCnt" json:"nexthop_priv_cnt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNhidxType) Reset() {
	*m = JunosKernelHealthKernelTypeTcpipTypeNhidxType{}
}
func (m *JunosKernelHealthKernelTypeTcpipTypeNhidxType) String() string {
	return proto.CompactTextString(m)
}
func (*JunosKernelHealthKernelTypeTcpipTypeNhidxType) ProtoMessage() {}
func (*JunosKernelHealthKernelTypeTcpipTypeNhidxType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ef45f12b88bd767, []int{0, 3, 7, 1}
}
func (m *JunosKernelHealthKernelTypeTcpipTypeNhidxType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosKernelHealthKernelTypeTcpipTypeNhidxType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosKernelHealthKernelTypeTcpipTypeNhidxType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosKernelHealthKernelTypeTcpipTypeNhidxType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosKernelHealthKernelTypeTcpipTypeNhidxType.Merge(m, src)
}
func (m *JunosKernelHealthKernelTypeTcpipTypeNhidxType) XXX_Size() int {
	return m.Size()
}
func (m *JunosKernelHealthKernelTypeTcpipTypeNhidxType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosKernelHealthKernelTypeTcpipTypeNhidxType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosKernelHealthKernelTypeTcpipTypeNhidxType proto.InternalMessageInfo

func (m *JunosKernelHealthKernelTypeTcpipTypeNhidxType) GetNexthopPubMax() uint32 {
	if m != nil && m.NexthopPubMax != nil {
		return *m.NexthopPubMax
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNhidxType) GetNexthopPrivMax() uint32 {
	if m != nil && m.NexthopPrivMax != nil {
		return *m.NexthopPrivMax
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNhidxType) GetNexthopPubCnt() uint32 {
	if m != nil && m.NexthopPubCnt != nil {
		return *m.NexthopPubCnt
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNhidxType) GetNexthopPrivCnt() uint32 {
	if m != nil && m.NexthopPrivCnt != nil {
		return *m.NexthopPrivCnt
	}
	return 0
}

type JunosKernelHealthKernelTypeTcpipTypeRtbType struct {
	RouteCloneMax        *uint32  `protobuf:"varint,405,opt,name=route_clone_max,json=routeCloneMax" json:"route_clone_max,omitempty"`
	RouteCloneCnt        *uint32  `protobuf:"varint,406,opt,name=route_clone_cnt,json=routeCloneCnt" json:"route_clone_cnt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JunosKernelHealthKernelTypeTcpipTypeRtbType) Reset() {
	*m = JunosKernelHealthKernelTypeTcpipTypeRtbType{}
}
func (m *JunosKernelHealthKernelTypeTcpipTypeRtbType) String() string {
	return proto.CompactTextString(m)
}
func (*JunosKernelHealthKernelTypeTcpipTypeRtbType) ProtoMessage() {}
func (*JunosKernelHealthKernelTypeTcpipTypeRtbType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ef45f12b88bd767, []int{0, 3, 7, 2}
}
func (m *JunosKernelHealthKernelTypeTcpipTypeRtbType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosKernelHealthKernelTypeTcpipTypeRtbType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosKernelHealthKernelTypeTcpipTypeRtbType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosKernelHealthKernelTypeTcpipTypeRtbType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosKernelHealthKernelTypeTcpipTypeRtbType.Merge(m, src)
}
func (m *JunosKernelHealthKernelTypeTcpipTypeRtbType) XXX_Size() int {
	return m.Size()
}
func (m *JunosKernelHealthKernelTypeTcpipTypeRtbType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosKernelHealthKernelTypeTcpipTypeRtbType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosKernelHealthKernelTypeTcpipTypeRtbType proto.InternalMessageInfo

func (m *JunosKernelHealthKernelTypeTcpipTypeRtbType) GetRouteCloneMax() uint32 {
	if m != nil && m.RouteCloneMax != nil {
		return *m.RouteCloneMax
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTcpipTypeRtbType) GetRouteCloneCnt() uint32 {
	if m != nil && m.RouteCloneCnt != nil {
		return *m.RouteCloneCnt
	}
	return 0
}

type JunosKernelHealthKernelTypeTcpipTypeArpType struct {
	NbrcacheIriMax        *uint32  `protobuf:"varint,407,opt,name=nbrcache_iri_max,json=nbrcacheIriMax" json:"nbrcache_iri_max,omitempty"`
	NbrcacheMgmtMax       *uint32  `protobuf:"varint,408,opt,name=nbrcache_mgmt_max,json=nbrcacheMgmtMax" json:"nbrcache_mgmt_max,omitempty"`
	NbrcachePublicMax     *uint32  `protobuf:"varint,409,opt,name=nbrcache_public_max,json=nbrcachePublicMax" json:"nbrcache_public_max,omitempty"`
	NbrcacheIriCnt        *uint32  `protobuf:"varint,410,opt,name=nbrcache_iri_cnt,json=nbrcacheIriCnt" json:"nbrcache_iri_cnt,omitempty"`
	NbrcacheMgmtCnt       *uint32  `protobuf:"varint,411,opt,name=nbrcache_mgmt_cnt,json=nbrcacheMgmtCnt" json:"nbrcache_mgmt_cnt,omitempty"`
	NbrcachePublicCnt     *uint32  `protobuf:"varint,412,opt,name=nbrcache_public_cnt,json=nbrcachePublicCnt" json:"nbrcache_public_cnt,omitempty"`
	NbrcacheIriDropCnt    *uint32  `protobuf:"varint,413,opt,name=nbrcache_iri_drop_cnt,json=nbrcacheIriDropCnt" json:"nbrcache_iri_drop_cnt,omitempty"`
	NbrcacheMgmtDropCnt   *uint32  `protobuf:"varint,414,opt,name=nbrcache_mgmt_drop_cnt,json=nbrcacheMgmtDropCnt" json:"nbrcache_mgmt_drop_cnt,omitempty"`
	NbrcachePublicDropCnt *uint32  `protobuf:"varint,415,opt,name=nbrcache_public_drop_cnt,json=nbrcachePublicDropCnt" json:"nbrcache_public_drop_cnt,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *JunosKernelHealthKernelTypeTcpipTypeArpType) Reset() {
	*m = JunosKernelHealthKernelTypeTcpipTypeArpType{}
}
func (m *JunosKernelHealthKernelTypeTcpipTypeArpType) String() string {
	return proto.CompactTextString(m)
}
func (*JunosKernelHealthKernelTypeTcpipTypeArpType) ProtoMessage() {}
func (*JunosKernelHealthKernelTypeTcpipTypeArpType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ef45f12b88bd767, []int{0, 3, 7, 3}
}
func (m *JunosKernelHealthKernelTypeTcpipTypeArpType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosKernelHealthKernelTypeTcpipTypeArpType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosKernelHealthKernelTypeTcpipTypeArpType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosKernelHealthKernelTypeTcpipTypeArpType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosKernelHealthKernelTypeTcpipTypeArpType.Merge(m, src)
}
func (m *JunosKernelHealthKernelTypeTcpipTypeArpType) XXX_Size() int {
	return m.Size()
}
func (m *JunosKernelHealthKernelTypeTcpipTypeArpType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosKernelHealthKernelTypeTcpipTypeArpType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosKernelHealthKernelTypeTcpipTypeArpType proto.InternalMessageInfo

func (m *JunosKernelHealthKernelTypeTcpipTypeArpType) GetNbrcacheIriMax() uint32 {
	if m != nil && m.NbrcacheIriMax != nil {
		return *m.NbrcacheIriMax
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTcpipTypeArpType) GetNbrcacheMgmtMax() uint32 {
	if m != nil && m.NbrcacheMgmtMax != nil {
		return *m.NbrcacheMgmtMax
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTcpipTypeArpType) GetNbrcachePublicMax() uint32 {
	if m != nil && m.NbrcachePublicMax != nil {
		return *m.NbrcachePublicMax
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTcpipTypeArpType) GetNbrcacheIriCnt() uint32 {
	if m != nil && m.NbrcacheIriCnt != nil {
		return *m.NbrcacheIriCnt
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTcpipTypeArpType) GetNbrcacheMgmtCnt() uint32 {
	if m != nil && m.NbrcacheMgmtCnt != nil {
		return *m.NbrcacheMgmtCnt
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTcpipTypeArpType) GetNbrcachePublicCnt() uint32 {
	if m != nil && m.NbrcachePublicCnt != nil {
		return *m.NbrcachePublicCnt
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTcpipTypeArpType) GetNbrcacheIriDropCnt() uint32 {
	if m != nil && m.NbrcacheIriDropCnt != nil {
		return *m.NbrcacheIriDropCnt
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTcpipTypeArpType) GetNbrcacheMgmtDropCnt() uint32 {
	if m != nil && m.NbrcacheMgmtDropCnt != nil {
		return *m.NbrcacheMgmtDropCnt
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTcpipTypeArpType) GetNbrcachePublicDropCnt() uint32 {
	if m != nil && m.NbrcachePublicDropCnt != nil {
		return *m.NbrcachePublicDropCnt
	}
	return 0
}

type JunosKernelHealthKernelTypeTcpipTypeNdpType struct {
	NbrcacheIriMax        *uint32  `protobuf:"varint,416,opt,name=nbrcache_iri_max,json=nbrcacheIriMax" json:"nbrcache_iri_max,omitempty"`
	NbrcacheMgmtMax       *uint32  `protobuf:"varint,417,opt,name=nbrcache_mgmt_max,json=nbrcacheMgmtMax" json:"nbrcache_mgmt_max,omitempty"`
	NbrcachePublicMax     *uint32  `protobuf:"varint,418,opt,name=nbrcache_public_max,json=nbrcachePublicMax" json:"nbrcache_public_max,omitempty"`
	NbrcacheIriCnt        *uint32  `protobuf:"varint,419,opt,name=nbrcache_iri_cnt,json=nbrcacheIriCnt" json:"nbrcache_iri_cnt,omitempty"`
	NbrcacheMgmtCnt       *uint32  `protobuf:"varint,420,opt,name=nbrcache_mgmt_cnt,json=nbrcacheMgmtCnt" json:"nbrcache_mgmt_cnt,omitempty"`
	NbrcachePublicCnt     *uint32  `protobuf:"varint,421,opt,name=nbrcache_public_cnt,json=nbrcachePublicCnt" json:"nbrcache_public_cnt,omitempty"`
	NbrcacheIriDropCnt    *uint32  `protobuf:"varint,422,opt,name=nbrcache_iri_drop_cnt,json=nbrcacheIriDropCnt" json:"nbrcache_iri_drop_cnt,omitempty"`
	NbrcacheMgmtDropCnt   *uint32  `protobuf:"varint,423,opt,name=nbrcache_mgmt_drop_cnt,json=nbrcacheMgmtDropCnt" json:"nbrcache_mgmt_drop_cnt,omitempty"`
	NbrcachePublicDropCnt *uint32  `protobuf:"varint,424,opt,name=nbrcache_public_drop_cnt,json=nbrcachePublicDropCnt" json:"nbrcache_public_drop_cnt,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNdpType) Reset() {
	*m = JunosKernelHealthKernelTypeTcpipTypeNdpType{}
}
func (m *JunosKernelHealthKernelTypeTcpipTypeNdpType) String() string {
	return proto.CompactTextString(m)
}
func (*JunosKernelHealthKernelTypeTcpipTypeNdpType) ProtoMessage() {}
func (*JunosKernelHealthKernelTypeTcpipTypeNdpType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ef45f12b88bd767, []int{0, 3, 7, 4}
}
func (m *JunosKernelHealthKernelTypeTcpipTypeNdpType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosKernelHealthKernelTypeTcpipTypeNdpType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosKernelHealthKernelTypeTcpipTypeNdpType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosKernelHealthKernelTypeTcpipTypeNdpType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosKernelHealthKernelTypeTcpipTypeNdpType.Merge(m, src)
}
func (m *JunosKernelHealthKernelTypeTcpipTypeNdpType) XXX_Size() int {
	return m.Size()
}
func (m *JunosKernelHealthKernelTypeTcpipTypeNdpType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosKernelHealthKernelTypeTcpipTypeNdpType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosKernelHealthKernelTypeTcpipTypeNdpType proto.InternalMessageInfo

func (m *JunosKernelHealthKernelTypeTcpipTypeNdpType) GetNbrcacheIriMax() uint32 {
	if m != nil && m.NbrcacheIriMax != nil {
		return *m.NbrcacheIriMax
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNdpType) GetNbrcacheMgmtMax() uint32 {
	if m != nil && m.NbrcacheMgmtMax != nil {
		return *m.NbrcacheMgmtMax
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNdpType) GetNbrcachePublicMax() uint32 {
	if m != nil && m.NbrcachePublicMax != nil {
		return *m.NbrcachePublicMax
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNdpType) GetNbrcacheIriCnt() uint32 {
	if m != nil && m.NbrcacheIriCnt != nil {
		return *m.NbrcacheIriCnt
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNdpType) GetNbrcacheMgmtCnt() uint32 {
	if m != nil && m.NbrcacheMgmtCnt != nil {
		return *m.NbrcacheMgmtCnt
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNdpType) GetNbrcachePublicCnt() uint32 {
	if m != nil && m.NbrcachePublicCnt != nil {
		return *m.NbrcachePublicCnt
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNdpType) GetNbrcacheIriDropCnt() uint32 {
	if m != nil && m.NbrcacheIriDropCnt != nil {
		return *m.NbrcacheIriDropCnt
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNdpType) GetNbrcacheMgmtDropCnt() uint32 {
	if m != nil && m.NbrcacheMgmtDropCnt != nil {
		return *m.NbrcacheMgmtDropCnt
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNdpType) GetNbrcachePublicDropCnt() uint32 {
	if m != nil && m.NbrcachePublicDropCnt != nil {
		return *m.NbrcachePublicDropCnt
	}
	return 0
}

type JunosKernelHealthKernelTypeTcpipTypeNetisrType struct {
	EtherWmCnt           *uint32  `protobuf:"varint,425,opt,name=ether_wm_cnt,json=etherWmCnt" json:"ether_wm_cnt,omitempty"`
	EtherDropCnt         *uint32  `protobuf:"varint,426,opt,name=ether_drop_cnt,json=etherDropCnt" json:"ether_drop_cnt,omitempty"`
	EtherPktHandled      *uint64  `protobuf:"varint,427,opt,name=ether_pkt_handled,json=etherPktHandled" json:"ether_pkt_handled,omitempty"`
	EtherPktQueued       *uint64  `protobuf:"varint,428,opt,name=ether_pkt_queued,json=etherPktQueued" json:"ether_pkt_queued,omitempty"`
	IpWmCnt              *uint32  `protobuf:"varint,429,opt,name=ip_wm_cnt,json=ipWmCnt" json:"ip_wm_cnt,omitempty"`
	IpDropCnt            *uint32  `protobuf:"varint,430,opt,name=ip_drop_cnt,json=ipDropCnt" json:"ip_drop_cnt,omitempty"`
	IpPktHandled         *uint64  `protobuf:"varint,431,opt,name=ip_pkt_handled,json=ipPktHandled" json:"ip_pkt_handled,omitempty"`
	IpPktQueued          *uint64  `protobuf:"varint,432,opt,name=ip_pkt_queued,json=ipPktQueued" json:"ip_pkt_queued,omitempty"`
	Ip6WmCnt             *uint32  `protobuf:"varint,433,opt,name=ip6_wm_cnt,json=ip6WmCnt" json:"ip6_wm_cnt,omitempty"`
	Ip6DropCnt           *uint32  `protobuf:"varint,434,opt,name=ip6_drop_cnt,json=ip6DropCnt" json:"ip6_drop_cnt,omitempty"`
	Ip6PktHandled        *uint64  `protobuf:"varint,435,opt,name=ip6_pkt_handled,json=ip6PktHandled" json:"ip6_pkt_handled,omitempty"`
	Ip6PktQueued         *uint64  `protobuf:"varint,436,opt,name=ip6_pkt_queued,json=ip6PktQueued" json:"ip6_pkt_queued,omitempty"`
	ArpWmCnt             *uint32  `protobuf:"varint,437,opt,name=arp_wm_cnt,json=arpWmCnt" json:"arp_wm_cnt,omitempty"`
	ArpDropCnt           *uint32  `protobuf:"varint,438,opt,name=arp_drop_cnt,json=arpDropCnt" json:"arp_drop_cnt,omitempty"`
	ArpPktHandled        *uint64  `protobuf:"varint,439,opt,name=arp_pkt_handled,json=arpPktHandled" json:"arp_pkt_handled,omitempty"`
	ArpPktQueued         *uint64  `protobuf:"varint,440,opt,name=arp_pkt_queued,json=arpPktQueued" json:"arp_pkt_queued,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNetisrType) Reset() {
	*m = JunosKernelHealthKernelTypeTcpipTypeNetisrType{}
}
func (m *JunosKernelHealthKernelTypeTcpipTypeNetisrType) String() string {
	return proto.CompactTextString(m)
}
func (*JunosKernelHealthKernelTypeTcpipTypeNetisrType) ProtoMessage() {}
func (*JunosKernelHealthKernelTypeTcpipTypeNetisrType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ef45f12b88bd767, []int{0, 3, 7, 5}
}
func (m *JunosKernelHealthKernelTypeTcpipTypeNetisrType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosKernelHealthKernelTypeTcpipTypeNetisrType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosKernelHealthKernelTypeTcpipTypeNetisrType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosKernelHealthKernelTypeTcpipTypeNetisrType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosKernelHealthKernelTypeTcpipTypeNetisrType.Merge(m, src)
}
func (m *JunosKernelHealthKernelTypeTcpipTypeNetisrType) XXX_Size() int {
	return m.Size()
}
func (m *JunosKernelHealthKernelTypeTcpipTypeNetisrType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosKernelHealthKernelTypeTcpipTypeNetisrType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosKernelHealthKernelTypeTcpipTypeNetisrType proto.InternalMessageInfo

func (m *JunosKernelHealthKernelTypeTcpipTypeNetisrType) GetEtherWmCnt() uint32 {
	if m != nil && m.EtherWmCnt != nil {
		return *m.EtherWmCnt
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNetisrType) GetEtherDropCnt() uint32 {
	if m != nil && m.EtherDropCnt != nil {
		return *m.EtherDropCnt
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNetisrType) GetEtherPktHandled() uint64 {
	if m != nil && m.EtherPktHandled != nil {
		return *m.EtherPktHandled
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNetisrType) GetEtherPktQueued() uint64 {
	if m != nil && m.EtherPktQueued != nil {
		return *m.EtherPktQueued
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNetisrType) GetIpWmCnt() uint32 {
	if m != nil && m.IpWmCnt != nil {
		return *m.IpWmCnt
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNetisrType) GetIpDropCnt() uint32 {
	if m != nil && m.IpDropCnt != nil {
		return *m.IpDropCnt
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNetisrType) GetIpPktHandled() uint64 {
	if m != nil && m.IpPktHandled != nil {
		return *m.IpPktHandled
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNetisrType) GetIpPktQueued() uint64 {
	if m != nil && m.IpPktQueued != nil {
		return *m.IpPktQueued
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNetisrType) GetIp6WmCnt() uint32 {
	if m != nil && m.Ip6WmCnt != nil {
		return *m.Ip6WmCnt
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNetisrType) GetIp6DropCnt() uint32 {
	if m != nil && m.Ip6DropCnt != nil {
		return *m.Ip6DropCnt
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNetisrType) GetIp6PktHandled() uint64 {
	if m != nil && m.Ip6PktHandled != nil {
		return *m.Ip6PktHandled
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNetisrType) GetIp6PktQueued() uint64 {
	if m != nil && m.Ip6PktQueued != nil {
		return *m.Ip6PktQueued
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNetisrType) GetArpWmCnt() uint32 {
	if m != nil && m.ArpWmCnt != nil {
		return *m.ArpWmCnt
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNetisrType) GetArpDropCnt() uint32 {
	if m != nil && m.ArpDropCnt != nil {
		return *m.ArpDropCnt
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNetisrType) GetArpPktHandled() uint64 {
	if m != nil && m.ArpPktHandled != nil {
		return *m.ArpPktHandled
	}
	return 0
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNetisrType) GetArpPktQueued() uint64 {
	if m != nil && m.ArpPktQueued != nil {
		return *m.ArpPktQueued
	}
	return 0
}

type JunosKernelHealthKernelIfstateType struct {
	DeadIfstatesCnt      *uint32  `protobuf:"varint,51,opt,name=dead_ifstates_cnt,json=deadIfstatesCnt" json:"dead_ifstates_cnt,omitempty"`
	AliveIfstatesCnt     *uint32  `protobuf:"varint,52,opt,name=alive_ifstates_cnt,json=aliveIfstatesCnt" json:"alive_ifstates_cnt,omitempty"`
	DelayedUnrefsCnt     *uint32  `protobuf:"varint,53,opt,name=delayed_unrefs_cnt,json=delayedUnrefsCnt" json:"delayed_unrefs_cnt,omitempty"`
	DelayedUnrefsMax     *uint32  `protobuf:"varint,54,opt,name=delayed_unrefs_max,json=delayedUnrefsMax" json:"delayed_unrefs_max,omitempty"`
	StuckClientsCnt      *uint32  `protobuf:"varint,55,opt,name=stuck_clients_cnt,json=stuckClientsCnt" json:"stuck_clients_cnt,omitempty"`
	DeadClientsCnt       *uint32  `protobuf:"varint,56,opt,name=dead_clients_cnt,json=deadClientsCnt" json:"dead_clients_cnt,omitempty"`
	AliveClientsCnt      *uint32  `protobuf:"varint,57,opt,name=alive_clients_cnt,json=aliveClientsCnt" json:"alive_clients_cnt,omitempty"`
	ClientLimitReached   *uint32  `protobuf:"varint,58,opt,name=client_limit_reached,json=clientLimitReached" json:"client_limit_reached,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JunosKernelHealthKernelIfstateType) Reset()         { *m = JunosKernelHealthKernelIfstateType{} }
func (m *JunosKernelHealthKernelIfstateType) String() string { return proto.CompactTextString(m) }
func (*JunosKernelHealthKernelIfstateType) ProtoMessage()    {}
func (*JunosKernelHealthKernelIfstateType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ef45f12b88bd767, []int{0, 4}
}
func (m *JunosKernelHealthKernelIfstateType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosKernelHealthKernelIfstateType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosKernelHealthKernelIfstateType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosKernelHealthKernelIfstateType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosKernelHealthKernelIfstateType.Merge(m, src)
}
func (m *JunosKernelHealthKernelIfstateType) XXX_Size() int {
	return m.Size()
}
func (m *JunosKernelHealthKernelIfstateType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosKernelHealthKernelIfstateType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosKernelHealthKernelIfstateType proto.InternalMessageInfo

func (m *JunosKernelHealthKernelIfstateType) GetDeadIfstatesCnt() uint32 {
	if m != nil && m.DeadIfstatesCnt != nil {
		return *m.DeadIfstatesCnt
	}
	return 0
}

func (m *JunosKernelHealthKernelIfstateType) GetAliveIfstatesCnt() uint32 {
	if m != nil && m.AliveIfstatesCnt != nil {
		return *m.AliveIfstatesCnt
	}
	return 0
}

func (m *JunosKernelHealthKernelIfstateType) GetDelayedUnrefsCnt() uint32 {
	if m != nil && m.DelayedUnrefsCnt != nil {
		return *m.DelayedUnrefsCnt
	}
	return 0
}

func (m *JunosKernelHealthKernelIfstateType) GetDelayedUnrefsMax() uint32 {
	if m != nil && m.DelayedUnrefsMax != nil {
		return *m.DelayedUnrefsMax
	}
	return 0
}

func (m *JunosKernelHealthKernelIfstateType) GetStuckClientsCnt() uint32 {
	if m != nil && m.StuckClientsCnt != nil {
		return *m.StuckClientsCnt
	}
	return 0
}

func (m *JunosKernelHealthKernelIfstateType) GetDeadClientsCnt() uint32 {
	if m != nil && m.DeadClientsCnt != nil {
		return *m.DeadClientsCnt
	}
	return 0
}

func (m *JunosKernelHealthKernelIfstateType) GetAliveClientsCnt() uint32 {
	if m != nil && m.AliveClientsCnt != nil {
		return *m.AliveClientsCnt
	}
	return 0
}

func (m *JunosKernelHealthKernelIfstateType) GetClientLimitReached() uint32 {
	if m != nil && m.ClientLimitReached != nil {
		return *m.ClientLimitReached
	}
	return 0
}

var E_JnprJunosKernelHealthExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*JunosKernelHealth)(nil),
	Field:         85,
	Name:          "jnpr_junos_kernel_health_ext",
	Tag:           "bytes,85,opt,name=jnpr_junos_kernel_health_ext",
	Filename:      "jkhmd_oc.proto",
}

func init() {
	proto.RegisterType((*JunosKernelHealth)(nil), "junos_kernel_health")
	proto.RegisterType((*JunosKernelHealthChassisType)(nil), "junos_kernel_health.chassis_type")
	proto.RegisterType((*JunosKernelHealthChassisTypeGresType)(nil), "junos_kernel_health.chassis_type.gres_type")
	proto.RegisterType((*JunosKernelHealthChassisTypeIssuType)(nil), "junos_kernel_health.chassis_type.issu_type")
	proto.RegisterType((*JunosKernelHealthChassisTypeAggregatedDevicesType)(nil), "junos_kernel_health.chassis_type.aggregated_devices_type")
	proto.RegisterType((*JunosKernelHealthRoutingOptionsType)(nil), "junos_kernel_health.routing_options_type")
	proto.RegisterType((*JunosKernelHealthRoutingOptionsTypeNonstopRoutingType)(nil), "junos_kernel_health.routing_options_type.nonstop_routing_type")
	proto.RegisterType((*JunosKernelHealthSecurityType)(nil), "junos_kernel_health.security_type")
	proto.RegisterType((*JunosKernelHealthKernelType)(nil), "junos_kernel_health.kernel_type")
	proto.RegisterType((*JunosKernelHealthKernelTypePeerInfraType)(nil), "junos_kernel_health.kernel_type.peer_infra_type")
	proto.RegisterType((*JunosKernelHealthKernelTypeVplsType)(nil), "junos_kernel_health.kernel_type.vpls_type")
	proto.RegisterType((*JunosKernelHealthKernelTypeTunnelType)(nil), "junos_kernel_health.kernel_type.tunnel_type")
	proto.RegisterType((*JunosKernelHealthKernelTypeMulticastType)(nil), "junos_kernel_health.kernel_type.multicast_type")
	proto.RegisterType((*JunosKernelHealthKernelTypeTnpType)(nil), "junos_kernel_health.kernel_type.tnp_type")
	proto.RegisterType((*JunosKernelHealthKernelTypeRecordMetaDataType)(nil), "junos_kernel_health.kernel_type.record_meta_data_type")
	proto.RegisterType((*JunosKernelHealthKernelTypeRtsockType)(nil), "junos_kernel_health.kernel_type.rtsock_type")
	proto.RegisterType((*JunosKernelHealthKernelTypeTcpipType)(nil), "junos_kernel_health.kernel_type.tcpip_type")
	proto.RegisterType((*JunosKernelHealthKernelTypeTcpipTypeTcpType)(nil), "junos_kernel_health.kernel_type.tcpip_type.tcp_type")
	proto.RegisterType((*JunosKernelHealthKernelTypeTcpipTypeNhidxType)(nil), "junos_kernel_health.kernel_type.tcpip_type.nhidx_type")
	proto.RegisterType((*JunosKernelHealthKernelTypeTcpipTypeRtbType)(nil), "junos_kernel_health.kernel_type.tcpip_type.rtb_type")
	proto.RegisterType((*JunosKernelHealthKernelTypeTcpipTypeArpType)(nil), "junos_kernel_health.kernel_type.tcpip_type.arp_type")
	proto.RegisterType((*JunosKernelHealthKernelTypeTcpipTypeNdpType)(nil), "junos_kernel_health.kernel_type.tcpip_type.ndp_type")
	proto.RegisterType((*JunosKernelHealthKernelTypeTcpipTypeNetisrType)(nil), "junos_kernel_health.kernel_type.tcpip_type.netisr_type")
	proto.RegisterType((*JunosKernelHealthKernelIfstateType)(nil), "junos_kernel_health.kernel_ifstate_type")
	proto.RegisterExtension(E_JnprJunosKernelHealthExt)
}

func init() { proto.RegisterFile("jkhmd_oc.proto", fileDescriptor_0ef45f12b88bd767) }

var fileDescriptor_0ef45f12b88bd767 = []byte{
	// 2330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x98, 0xdb, 0x73, 0x1c, 0x47,
	0xf5, 0xc7, 0x6b, 0x2d, 0xc5, 0x96, 0x8e, 0xb4, 0x2b, 0xed, 0xc8, 0x4e, 0xa6, 0x36, 0xbf, 0x9f,
	0x63, 0x27, 0xe5, 0x8a, 0x2f, 0xb1, 0x94, 0x4a, 0x1c, 0xd9, 0x4e, 0xa5, 0x08, 0x89, 0x6c, 0x63,
	0x07, 0x2b, 0x88, 0xb5, 0x8d, 0xab, 0x28, 0xa0, 0x69, 0xcd, 0xf4, 0xee, 0xb6, 0x76, 0x76, 0xa6,
	0xdd, 0xd3, 0x23, 0xc9, 0x8f, 0xfc, 0x09, 0x5c, 0x4c, 0x12, 0x08, 0x77, 0xc2, 0xfd, 0x9e, 0xc4,
	0x76, 0xc2, 0x03, 0x79, 0xe4, 0x52, 0x45, 0x01, 0xb9, 0x70, 0x0d, 0x06, 0x17, 0xfc, 0x0b, 0x40,
	0x11, 0x20, 0xd4, 0xe9, 0xd3, 0xb3, 0x3b, 0x2b, 0x2d, 0x96, 0xe5, 0xb7, 0xdd, 0x73, 0x3e, 0xe7,
	0xdb, 0xdf, 0x99, 0xee, 0x3e, 0xdd, 0xbb, 0x50, 0x59, 0x6a, 0xb7, 0x3a, 0x21, 0x4b, 0x82, 0x69,
	0xa5, 0x13, 0x93, 0xd4, 0xa6, 0x8c, 0x88, 0x44, 0x47, 0x18, 0x7d, 0x91, 0x99, 0x44, 0x51, 0xf0,
	0xee, 0x67, 0x67, 0x60, 0x6a, 0x29, 0x8b, 0x93, 0x94, 0xb5, 0x85, 0x8e, 0x45, 0xc4, 0x5a, 0x82,
	0x47, 0xa6, 0xe5, 0x3d, 0x02, 0xdb, 0x82, 0x16, 0x4f, 0x53, 0x99, 0xfa, 0x3f, 0x2a, 0xed, 0x2a,
	0xed, 0x1d, 0x7b, 0x60, 0xf7, 0xf4, 0x00, 0x6e, 0xda, 0x41, 0xcc, 0x5c, 0x54, 0xa2, 0x9e, 0x97,
	0x78, 0x67, 0x60, 0x42, 0x27, 0x99, 0x91, 0x71, 0x93, 0x25, 0xca, 0xc8, 0x24, 0x4e, 0xfd, 0x7f,
	0x0f, 0x59, 0x95, 0x7d, 0x03, 0x55, 0xd6, 0xc0, 0xa4, 0x56, 0x71, 0xd1, 0xf7, 0x50, 0xd0, 0x7b,
	0x14, 0x46, 0x52, 0x11, 0x64, 0x5a, 0x9a, 0x8b, 0xfe, 0x15, 0xf2, 0x74, 0xf7, 0x40, 0xb5, 0x9c,
	0x22, 0x99, 0x6e, 0x91, 0x77, 0x14, 0xb6, 0x12, 0xe8, 0xbf, 0x42, 0xe5, 0xbb, 0x06, 0x96, 0xbb,
	0x6f, 0xb6, 0xd8, 0x15, 0x78, 0x0b, 0x50, 0x71, 0x61, 0xd9, 0x48, 0x0d, 0x37, 0xc2, 0x7f, 0x99,
	0x24, 0xf6, 0xde, 0x48, 0xc2, 0xb1, 0x24, 0x55, 0xa6, 0xe0, 0x29, 0x8a, 0xd5, 0xae, 0x6d, 0x83,
	0xf1, 0xe2, 0xcb, 0xf3, 0xde, 0x09, 0xc3, 0x4d, 0x2d, 0x52, 0xff, 0x45, 0x12, 0x3e, 0xb0, 0xe1,
	0xeb, 0x9e, 0x46, 0x9c, 0xb4, 0x6d, 0x25, 0x2a, 0xc8, 0x34, 0xcd, 0xfc, 0xcb, 0x37, 0xad, 0x80,
	0xb8, 0x53, 0xc0, 0x8f, 0x9e, 0x04, 0x8f, 0x37, 0x9b, 0x5a, 0x34, 0xb9, 0x11, 0x21, 0x0b, 0xc5,
	0xb2, 0x0c, 0x44, 0xea, 0x5f, 0xdb, 0x62, 0xf5, 0x8e, 0x6e, 0xac, 0xb7, 0xbe, 0x98, 0xd4, 0xab,
	0xbd, 0xc4, 0x31, 0x8a, 0xd7, 0x3e, 0x32, 0x04, 0xa3, 0xdd, 0x07, 0xf0, 0xee, 0xcc, 0xbf, 0xc8,
	0x8e, 0xf0, 0x1f, 0xdc, 0x55, 0xda, 0x3b, 0x5c, 0x1f, 0xc1, 0xc0, 0x59, 0xd9, 0x11, 0xde, 0x7d,
	0xe0, 0xa5, 0x11, 0x5f, 0x16, 0x2c, 0x48, 0xe2, 0x58, 0x04, 0x86, 0xa8, 0x43, 0x96, 0x9a, 0xb4,
	0x99, 0x39, 0x4a, 0x58, 0x7a, 0x1f, 0x4c, 0x06, 0x49, 0xdc, 0x90, 0xcd, 0x4c, 0x8b, 0x90, 0xd1,
	0x64, 0x3d, 0xb4, 0xab, 0xb4, 0x77, 0xb4, 0x3e, 0xd1, 0x8b, 0x9f, 0xc1, 0xb0, 0x37, 0x0d, 0x53,
	0x1d, 0x9e, 0x1a, 0xa1, 0xf3, 0x67, 0xd2, 0x82, 0x87, 0x17, 0xfd, 0x59, 0x4b, 0x57, 0x29, 0xf5,
	0x6e, 0x9b, 0xa9, 0x63, 0xa2, 0x67, 0xa4, 0x0f, 0x3f, 0x6c, 0x71, 0x32, 0x52, 0xa4, 0xef, 0x82,
	0x31, 0xa1, 0x75, 0xa2, 0x9d, 0x87, 0x23, 0x16, 0x03, 0x1b, 0xa2, 0xe1, 0xf7, 0xc1, 0x64, 0x62,
	0x5a, 0x42, 0x33, 0x2d, 0x98, 0xd2, 0x22, 0x15, 0xb1, 0xf1, 0x9f, 0x2a, 0x59, 0xac, 0x62, 0x13,
	0x75, 0xb1, 0x40, 0x61, 0x6f, 0x0f, 0x54, 0xba, 0x28, 0x8f, 0xe4, 0xb2, 0xf0, 0x9f, 0x26, 0x70,
	0xdc, 0x81, 0x8f, 0x61, 0xd0, 0x3b, 0x08, 0x9e, 0x4c, 0x99, 0xdd, 0xd9, 0x41, 0x12, 0x31, 0x7a,
	0x02, 0xff, 0x39, 0x42, 0x27, 0x65, 0xba, 0xe0, 0x32, 0xf3, 0x36, 0x51, 0xfb, 0x10, 0x8c, 0x76,
	0x57, 0x80, 0x77, 0x0f, 0x94, 0x1b, 0x5c, 0x46, 0x99, 0x16, 0x68, 0xb8, 0x49, 0xd3, 0x30, 0x5a,
	0x1f, 0x77, 0xc1, 0x33, 0x18, 0xc3, 0x37, 0x10, 0x64, 0x5a, 0x8b, 0xd8, 0x30, 0x5b, 0x49, 0xe4,
	0x21, 0xd2, 0x77, 0x99, 0x53, 0x69, 0x9a, 0x59, 0xba, 0xf6, 0x56, 0x09, 0xee, 0xf8, 0x1f, 0x4b,
	0xc2, 0xdb, 0x0f, 0x55, 0x95, 0xb2, 0xc8, 0xb0, 0x2c, 0x4e, 0x0d, 0x0f, 0xda, 0x2c, 0x88, 0x8d,
	0x7f, 0x05, 0x57, 0x5a, 0xb9, 0x5e, 0x51, 0xe9, 0x69, 0x73, 0x8e, 0xe2, 0x73, 0xb1, 0xf1, 0x0e,
	0xc2, 0x94, 0x4a, 0x99, 0x6c, 0x44, 0x2c, 0x08, 0x02, 0x16, 0x26, 0x2b, 0xb1, 0xa5, 0xaf, 0x12,
	0x3d, 0xa1, 0xd2, 0x53, 0x8d, 0x68, 0x2e, 0x08, 0x8e, 0x25, 0x2b, 0x31, 0xe2, 0x33, 0xb0, 0x5d,
	0x47, 0x86, 0x45, 0x8a, 0x45, 0x32, 0x6e, 0xf7, 0xf8, 0x97, 0x88, 0x9f, 0xd4, 0x91, 0x39, 0xad,
	0x4e, 0xcb, 0xb8, 0x9d, 0x17, 0xec, 0x81, 0x0a, 0x17, 0x7d, 0x46, 0x5e, 0x26, 0x74, 0x9c, 0x8b,
	0x7e, 0x1b, 0x5c, 0xac, 0x97, 0xfd, 0xa1, 0xb3, 0xc1, 0x45, 0x9f, 0x6a, 0xed, 0xf2, 0x16, 0xd8,
	0x3e, 0xa8, 0xb1, 0x79, 0x2d, 0x98, 0x88, 0x93, 0x38, 0x35, 0x89, 0x62, 0x2e, 0xef, 0xff, 0x87,
	0xba, 0xe3, 0x3b, 0x6e, 0xba, 0x3b, 0x4e, 0xaf, 0x51, 0x70, 0x2d, 0xd3, 0x45, 0xeb, 0x14, 0xac,
	0x3d, 0x5f, 0x82, 0xed, 0x83, 0x40, 0xef, 0x01, 0xd8, 0xb1, 0x94, 0x6a, 0x96, 0xaa, 0x48, 0x1a,
	0x96, 0x4f, 0x3b, 0x3e, 0xcc, 0x3f, 0x87, 0xec, 0xc3, 0x78, 0x4b, 0xa9, 0x3e, 0x83, 0xc9, 0x13,
	0x94, 0xc3, 0xc7, 0x77, 0x35, 0x1d, 0xa1, 0x9b, 0xa2, 0xaf, 0xe6, 0xad, 0x5e, 0xcd, 0x3c, 0x26,
	0x0b, 0x35, 0x0f, 0xc2, 0xed, 0x58, 0xa3, 0x74, 0xc4, 0x2e, 0x64, 0x22, 0x13, 0xac, 0x91, 0x45,
	0x91, 0x2d, 0xfa, 0x57, 0xaf, 0x68, 0x41, 0x47, 0xef, 0xc5, 0xe4, 0x89, 0x2c, 0x8a, 0xf0, 0xc5,
	0xcd, 0x42, 0xb9, 0xaf, 0x85, 0xe3, 0xfc, 0x2c, 0x0b, 0x2d, 0xc5, 0xaa, 0x08, 0xdc, 0x66, 0xa2,
	0xb5, 0x59, 0xce, 0xa3, 0x76, 0x3f, 0xd5, 0x7e, 0xbe, 0x13, 0xc6, 0x0a, 0xcd, 0xdb, 0x5b, 0x00,
	0x50, 0x42, 0x68, 0x26, 0xe3, 0x86, 0xe6, 0xfe, 0x55, 0xea, 0x8a, 0xf7, 0x6f, 0xd4, 0xf3, 0xa7,
	0x7b, 0x35, 0xf4, 0x52, 0x47, 0x31, 0x70, 0x0a, 0xbf, 0x7b, 0x8f, 0xc2, 0xf0, 0xb2, 0x8a, 0x52,
	0xff, 0x27, 0xa4, 0xb5, 0x7f, 0x43, 0x2d, 0xa4, 0x5d, 0x83, 0xc5, 0x8f, 0xde, 0x71, 0xd8, 0x6a,
	0xb2, 0x18, 0x8f, 0xa0, 0x9f, 0x92, 0xc4, 0x7d, 0x1b, 0x4a, 0x10, 0xef, 0x8e, 0x23, 0xfa, 0xe2,
	0x3d, 0x09, 0xa3, 0x9d, 0x2c, 0x32, 0x32, 0xe0, 0xa9, 0xf1, 0x7f, 0x46, 0x4a, 0x33, 0x1b, 0x2a,
	0x75, 0x4b, 0xdc, 0x73, 0x75, 0xbf, 0x7b, 0x8f, 0xc0, 0x90, 0x89, 0x95, 0xff, 0xe7, 0xd2, 0x0d,
	0xce, 0xe8, 0x3e, 0x4f, 0xb1, 0x22, 0x0d, 0x2c, 0xf3, 0x38, 0x4c, 0x6a, 0x11, 0x24, 0x3a, 0x64,
	0x1d, 0x61, 0x38, 0x0b, 0xb9, 0xe1, 0xfe, 0x4b, 0x24, 0x35, 0xbb, 0xa1, 0xd4, 0xda, 0xca, 0xfc,
	0xec, 0xb7, 0xe1, 0x79, 0x61, 0xf8, 0x31, 0x6e, 0x38, 0xbe, 0x37, 0x6d, 0xd2, 0x24, 0x68, 0xfb,
	0xcf, 0xdc, 0xec, 0x7b, 0x23, 0xde, 0xbd, 0x37, 0xfa, 0xe2, 0x3d, 0x0e, 0xb7, 0x99, 0x40, 0x49,
	0xe5, 0xbf, 0x31, 0x7c, 0x83, 0x23, 0xb2, 0xef, 0x49, 0x11, 0x27, 0x11, 0x2a, 0xad, 0x19, 0x98,
	0x58, 0xb3, 0x42, 0x70, 0x95, 0xdb, 0x90, 0x6a, 0x88, 0x0e, 0x8f, 0xed, 0x31, 0xc5, 0x42, 0x9d,
	0xa8, 0xd4, 0xae, 0xd3, 0x72, 0x7d, 0x0a, 0xb3, 0x0b, 0x36, 0x89, 0x27, 0xd5, 0x31, 0x4c, 0xd9,
	0xc3, 0x44, 0x65, 0x5a, 0x26, 0x59, 0xca, 0x94, 0x32, 0x6c, 0xa5, 0x9d, 0xa9, 0xd4, 0xb6, 0xd2,
	0x72, 0x7d, 0x32, 0xcf, 0x2c, 0x28, 0x73, 0x1e, 0xe3, 0xb5, 0x2b, 0x25, 0x18, 0xed, 0x2e, 0x26,
	0xef, 0x00, 0x54, 0xb3, 0xd8, 0x4d, 0x65, 0xd2, 0x16, 0xd4, 0x87, 0x5e, 0x2f, 0x51, 0x1f, 0x72,
	0x99, 0xb3, 0x98, 0xc0, 0x3d, 0xb8, 0x0e, 0xee, 0xf0, 0x55, 0xff, 0x8d, 0x01, 0xf0, 0x3c, 0x5f,
	0xf5, 0xee, 0x85, 0x89, 0x46, 0x94, 0x24, 0x61, 0x41, 0xf7, 0xd7, 0x84, 0x96, 0x6d, 0xbc, 0xab,
	0xba, 0x06, 0x44, 0xcd, 0xdf, 0xac, 0x03, 0xe7, 0xf9, 0x6a, 0xed, 0xaf, 0x25, 0x18, 0x2b, 0xac,
	0x61, 0x3c, 0xf5, 0xb4, 0x6a, 0x30, 0x0a, 0xc9, 0xd0, 0x0e, 0xf1, 0x5b, 0xaa, 0xac, 0x68, 0xd5,
	0x38, 0xeb, 0xe2, 0x38, 0xc6, 0x5a, 0x14, 0x07, 0xf9, 0xdd, 0x7a, 0x14, 0x7d, 0xcf, 0xc0, 0x54,
	0x9c, 0xc4, 0xeb, 0x84, 0x7f, 0x4f, 0x74, 0x95, 0x72, 0x45, 0xed, 0x01, 0x05, 0x28, 0xff, 0x87,
	0x81, 0x05, 0x38, 0xc2, 0x4e, 0x80, 0x28, 0x49, 0x94, 0x20, 0xe1, 0x37, 0x89, 0x1b, 0xa5, 0x10,
	0x76, 0xad, 0x36, 0x54, 0xfa, 0x37, 0x18, 0x0e, 0x21, 0x65, 0xa3, 0x23, 0xd3, 0x0e, 0x37, 0x41,
	0x8b, 0x09, 0xad, 0x6d, 0xe9, 0x1f, 0x4b, 0xf6, 0xe6, 0x52, 0x2d, 0xe4, 0x8e, 0x6b, 0x8d, 0x9e,
	0xf6, 0xc2, 0xa4, 0x4e, 0xa3, 0x65, 0xa6, 0xc5, 0x85, 0x2e, 0x7d, 0x8d, 0xe8, 0x32, 0x26, 0xea,
	0xe2, 0x02, 0x91, 0xb5, 0x10, 0x46, 0xf2, 0x3d, 0x88, 0x0b, 0x09, 0x3f, 0xb7, 0x44, 0x14, 0x25,
	0x76, 0xd9, 0xd9, 0xba, 0x57, 0xa9, 0x6e, 0xc2, 0xc4, 0xea, 0x24, 0x66, 0x70, 0xd1, 0xe1, 0x18,
	0xfb, 0xa1, 0x8a, 0x74, 0x43, 0xf3, 0x66, 0x0f, 0x7e, 0x8d, 0xe0, 0x8a, 0x89, 0xd5, 0x09, 0xcd,
	0x9b, 0x8e, 0xad, 0x1d, 0x81, 0x1d, 0x03, 0xb7, 0x27, 0x5e, 0x6d, 0x5c, 0xa2, 0x70, 0x61, 0x03,
	0x0a, 0xe1, 0x25, 0xac, 0xf6, 0x41, 0x18, 0x2b, 0xec, 0x3f, 0x6c, 0xe0, 0x26, 0x31, 0x3c, 0x62,
	0xcb, 0xc2, 0x24, 0x76, 0xc4, 0x4f, 0xd0, 0x88, 0xe3, 0x36, 0xfc, 0x3e, 0x61, 0x12, 0xb7, 0xa6,
	0x08, 0xa3, 0x7b, 0x13, 0x72, 0x97, 0xdc, 0xe3, 0xdb, 0xf8, 0x71, 0x0c, 0xa3, 0xb1, 0xbf, 0x78,
	0x00, 0xbd, 0x9d, 0xe9, 0xbd, 0x0b, 0x86, 0x4c, 0xa0, 0xfc, 0xb7, 0xe9, 0x10, 0x3d, 0xb4, 0x89,
	0x4d, 0x8d, 0x1f, 0xf3, 0x4e, 0x16, 0x28, 0x6f, 0x1e, 0x6e, 0x8b, 0x5b, 0x32, 0x5c, 0xf5, 0x7f,
	0x39, 0x7c, 0x93, 0xed, 0xab, 0x20, 0x65, 0x2b, 0x5d, 0xab, 0xb0, 0x9f, 0xd1, 0x97, 0x36, 0x8b,
	0xfe, 0xaf, 0x86, 0x37, 0xef, 0x4b, 0x9b, 0x45, 0xe7, 0x4b, 0x9b, 0x45, 0x14, 0xe2, 0x5a, 0xf9,
	0xaf, 0xde, 0x82, 0x10, 0xd7, 0xf9, 0x03, 0x72, 0xad, 0x50, 0x28, 0x0e, 0x95, 0xff, 0xda, 0x2d,
	0x08, 0xc5, 0x61, 0x2e, 0x14, 0x87, 0xca, 0x5b, 0x80, 0xad, 0xb1, 0x30, 0x32, 0xd5, 0xfe, 0xeb,
	0xa4, 0x75, 0x78, 0x53, 0x5a, 0xb6, 0xd4, 0xf5, 0x66, 0xfa, 0x52, 0xbb, 0x54, 0x82, 0x91, 0x7c,
	0x36, 0xf0, 0x66, 0x8e, 0x9f, 0xc3, 0x30, 0x49, 0x19, 0x37, 0xdd, 0x6b, 0xd9, 0xdf, 0xe8, 0xd2,
	0x30, 0x69, 0x02, 0x75, 0x2c, 0x4c, 0xd2, 0xc7, 0x4c, 0x7e, 0x35, 0x3b, 0x00, 0x55, 0xe4, 0xb1,
	0xf3, 0xda, 0xc6, 0x6b, 0xe9, 0xbf, 0x13, 0x3d, 0x61, 0x02, 0x35, 0x97, 0x27, 0x10, 0xc6, 0x0d,
	0x83, 0x03, 0xc9, 0x8e, 0x60, 0x2b, 0x5c, 0x1a, 0x5b, 0xe6, 0xff, 0x63, 0xc8, 0x6d, 0x98, 0x40,
	0xe1, 0x12, 0x3e, 0xcf, 0xa5, 0xc1, 0xaa, 0xda, 0x0b, 0x25, 0x80, 0xde, 0xd4, 0xe2, 0x1a, 0x8d,
	0xc5, 0xaa, 0x69, 0x25, 0x8a, 0xa9, 0x6c, 0xd1, 0xf6, 0x8c, 0x8f, 0xd2, 0x38, 0x65, 0x17, 0x5f,
	0xc8, 0x16, 0xb1, 0x5f, 0xec, 0x83, 0xc9, 0x2e, 0xa8, 0xe5, 0xb2, 0x25, 0x3f, 0x46, 0x64, 0x25,
	0x27, 0xb5, 0x5c, 0x76, 0x4d, 0xb7, 0xa8, 0x89, 0xde, 0x3f, 0xbe, 0x4e, 0xd3, 0x35, 0xc4, 0x3e,
	0x4d, 0xbb, 0x93, 0xd6, 0x6b, 0xe2, 0x16, 0xf9, 0x00, 0x8c, 0xe4, 0x6b, 0x08, 0xf5, 0xf1, 0xf6,
	0x27, 0x58, 0x10, 0x25, 0xb1, 0xb0, 0x4e, 0x2e, 0x39, 0x7d, 0x1b, 0x9f, 0xc3, 0xb0, 0x33, 0x52,
	0x04, 0x51, 0xfe, 0x93, 0xeb, 0x40, 0x54, 0x7f, 0x65, 0x08, 0x46, 0xf2, 0x95, 0x65, 0x5d, 0x2d,
	0xea, 0x80, 0x07, 0x2d, 0xc1, 0xa4, 0x96, 0x56, 0xff, 0xa9, 0xdc, 0x95, 0x4b, 0x9c, 0xd2, 0x12,
	0x07, 0x38, 0x00, 0xd5, 0x2e, 0xda, 0x69, 0x76, 0x8c, 0x65, 0x9f, 0x76, 0xf3, 0x94, 0x67, 0xe6,
	0x9b, 0x1d, 0x93, 0xf7, 0xf4, 0x1c, 0x56, 0xd9, 0x62, 0x24, 0x03, 0x8b, 0x3f, 0x33, 0xe4, 0x5a,
	0xb4, 0xcb, 0x2d, 0xd8, 0x54, 0xfe, 0xca, 0x8b, 0x46, 0xd0, 0xff, 0xa7, 0xd6, 0x1b, 0x71, 0x0b,
	0xa6, 0xdf, 0x08, 0xb2, 0x9f, 0x1e, 0x60, 0x24, 0x3f, 0x2b, 0xd6, 0x18, 0x41, 0xfc, 0xd9, 0x81,
	0x46, 0xdc, 0x55, 0xb9, 0xcf, 0x48, 0xb7, 0xd1, 0x7e, 0xc6, 0xdd, 0x7a, 0x0b, 0x6e, 0xf2, 0xc6,
	0x7c, 0x08, 0x6e, 0xef, 0x77, 0xd4, 0x2d, 0xfa, 0x2c, 0x15, 0x4d, 0x15, 0x6d, 0xe5, 0x55, 0x47,
	0xc0, 0x5f, 0x6b, 0xad, 0x5b, 0xf7, 0x39, 0xaa, 0xdb, 0xd1, 0xef, 0x2f, 0x6f, 0xee, 0x38, 0x85,
	0xf9, 0x9e, 0x1e, 0x38, 0x85, 0x9f, 0xdf, 0xc4, 0x14, 0x7e, 0x61, 0x73, 0x53, 0xf8, 0xc5, 0x4d,
	0x4d, 0xe1, 0x97, 0x36, 0x31, 0x85, 0x5f, 0xde, 0xdc, 0x14, 0x3e, 0xb7, 0xf9, 0x29, 0xfc, 0xca,
	0xad, 0x4c, 0xe1, 0x57, 0x6f, 0x71, 0x0a, 0xbf, 0x76, 0xc3, 0x29, 0x7c, 0x73, 0x18, 0xc6, 0x0a,
	0xad, 0xd4, 0xdb, 0x0d, 0xe3, 0xc2, 0xfe, 0x4b, 0xb0, 0xd2, 0xb1, 0xd5, 0x5f, 0xa7, 0x6a, 0xb0,
	0xc1, 0xf3, 0x1d, 0xf7, 0x53, 0x97, 0x90, 0xee, 0x10, 0xdf, 0x20, 0x88, 0x2a, 0x73, 0x4f, 0x07,
	0xa0, 0x4a, 0x98, 0x6a, 0x1b, 0xd6, 0xe2, 0x71, 0x18, 0x89, 0xd0, 0xff, 0xa6, 0xeb, 0x90, 0x36,
	0xb3, 0xd0, 0x36, 0x27, 0x29, 0x8e, 0x73, 0xd6, 0x83, 0xed, 0xcf, 0xbc, 0xd0, 0xff, 0x16, 0xb1,
	0x95, 0x9c, 0xb5, 0x3f, 0xf0, 0x42, 0xef, 0x4e, 0x18, 0x95, 0x2a, 0xb7, 0xf7, 0x6d, 0x1a, 0x79,
	0x9b, 0x54, 0xe4, 0xed, 0x2e, 0x18, 0x93, 0xaa, 0x67, 0xec, 0x3b, 0x94, 0x1e, 0x95, 0x2a, 0x77,
	0xb5, 0x07, 0x2a, 0x52, 0xf5, 0x59, 0xfa, 0x2e, 0x0d, 0x33, 0x2e, 0x55, 0xc1, 0xcf, 0x3d, 0x50,
	0x76, 0x98, 0x33, 0xf3, 0x3d, 0xa2, 0xc6, 0x2c, 0xe5, 0x9c, 0xfc, 0x3f, 0x80, 0x54, 0xb3, 0xb9,
	0x95, 0xef, 0xd3, 0x58, 0x23, 0x52, 0xcd, 0x92, 0x97, 0xdd, 0x30, 0x8e, 0xe9, 0xae, 0x99, 0x1f,
	0xb8, 0x57, 0x29, 0xd5, 0x6c, 0xee, 0xe6, 0x5e, 0x98, 0x40, 0xa4, 0x68, 0xe7, 0x79, 0x1a, 0xa8,
	0x2c, 0xd5, 0x6c, 0xc1, 0x8f, 0xb5, 0x3d, 0x5b, 0x34, 0xf4, 0x42, 0xd7, 0xf6, 0x6c, 0x9f, 0x23,
	0x6c, 0xa9, 0xce, 0xd1, 0x8b, 0xce, 0x11, 0xd7, 0xaa, 0xeb, 0x08, 0xd3, 0x5d, 0x47, 0x97, 0x9d,
	0x23, 0xae, 0x55, 0xc1, 0x11, 0x22, 0x45, 0x47, 0x57, 0x9c, 0x23, 0xae, 0x55, 0xbf, 0xa3, 0x1c,
	0x74, 0x8e, 0xae, 0x3a, 0x47, 0xc4, 0x91, 0xa3, 0xda, 0xdb, 0x5b, 0x60, 0x6a, 0xc0, 0x5f, 0x99,
	0x78, 0x87, 0x0c, 0x05, 0x0f, 0xf3, 0x20, 0x9d, 0xb6, 0xf4, 0x53, 0x67, 0x02, 0x13, 0xee, 0x3f,
	0xce, 0xfc, 0xb0, 0xb5, 0x7f, 0x58, 0xf5, 0xc3, 0xee, 0x67, 0x8e, 0xcd, 0xac, 0xa1, 0x43, 0x11,
	0xf1, 0x8b, 0x22, 0x64, 0x59, 0xac, 0x45, 0x83, 0xe8, 0x87, 0x88, 0x76, 0x99, 0x73, 0x36, 0x31,
	0x98, 0xc6, 0xe6, 0x32, 0x3b, 0x80, 0xc6, 0xd6, 0xb2, 0x1f, 0xaa, 0xa9, 0xc9, 0xf0, 0x26, 0x11,
	0x49, 0x11, 0x1b, 0x92, 0x3e, 0x4c, 0xae, 0x6d, 0x62, 0x8e, 0xe2, 0xee, 0x26, 0x6e, 0x9f, 0xb0,
	0x88, 0x1e, 0xa1, 0x2e, 0x84, 0xf1, 0x02, 0xb9, 0x1f, 0xaa, 0xf4, 0x7c, 0x45, 0xf4, 0xa8, 0xfb,
	0x47, 0x08, 0x13, 0x05, 0xf6, 0x7e, 0xd8, 0x4e, 0x14, 0x8b, 0x64, 0x47, 0x1a, 0xa6, 0x05, 0xee,
	0xe9, 0xd0, 0x7f, 0x98, 0x3a, 0x0a, 0xe5, 0x4e, 0x63, 0xaa, 0x4e, 0x99, 0x87, 0x3b, 0xf0, 0x7f,
	0x4b, 0xb1, 0xd2, 0x6c, 0xc0, 0xdd, 0x8a, 0x89, 0x55, 0xe3, 0xdd, 0x31, 0xfd, 0x44, 0x16, 0x4b,
	0x25, 0xf4, 0x93, 0xc2, 0xac, 0x24, 0xba, 0x9d, 0x9e, 0x11, 0x71, 0x9a, 0xe8, 0xd4, 0x3f, 0x67,
	0x2f, 0x65, 0xdb, 0x07, 0x5d, 0xca, 0xea, 0x3e, 0x4a, 0x3e, 0x81, 0x09, 0xfa, 0xbb, 0xf2, 0xa4,
	0x0d, 0x1f, 0x5f, 0x35, 0x8f, 0x7f, 0xf8, 0xc7, 0xd7, 0x77, 0x96, 0x7e, 0x71, 0x7d, 0x67, 0xe9,
	0x4f, 0xd7, 0x77, 0x96, 0xde, 0x5f, 0x6f, 0x4a, 0x83, 0x02, 0xa8, 0x8f, 0x57, 0xb6, 0x19, 0x19,
	0x88, 0x45, 0xa1, 0x9b, 0x33, 0xa4, 0xb3, 0x98, 0x98, 0x83, 0x32, 0x6e, 0x8a, 0xd4, 0x1c, 0x5c,
	0x32, 0xf2, 0x60, 0xcc, 0x8d, 0x5c, 0x16, 0x33, 0xaa, 0xdd, 0x9c, 0x59, 0x32, 0x72, 0x86, 0x87,
	0x5c, 0x19, 0xa1, 0xd3, 0x19, 0xf2, 0x3e, 0x93, 0x06, 0x2d, 0xd1, 0xe1, 0xff, 0x0d, 0x00, 0x00,
	0xff, 0xff, 0xc3, 0x01, 0x08, 0x4d, 0x95, 0x18, 0x00, 0x00,
}

func (m *JunosKernelHealth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosKernelHealth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosKernelHealth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoutingOptions != nil {
		{
			size, err := m.RoutingOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJkhmdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1f
		i--
		dAtA[i] = 0xea
	}
	if m.Kernel != nil {
		{
			size, err := m.Kernel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJkhmdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0x82
	}
	if m.Chassis != nil {
		{
			size, err := m.Chassis.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJkhmdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xfa
	}
	if m.KernelIfstate != nil {
		{
			size, err := m.KernelIfstate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJkhmdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xd2
	}
	if m.Security != nil {
		{
			size, err := m.Security.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJkhmdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *JunosKernelHealthChassisType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosKernelHealthChassisType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosKernelHealthChassisType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AggregatedDevices != nil {
		{
			size, err := m.AggregatedDevices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJkhmdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x15
		i--
		dAtA[i] = 0xfa
	}
	if m.Issu != nil {
		{
			size, err := m.Issu.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJkhmdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xb2
	}
	if m.Gres != nil {
		{
			size, err := m.Gres.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJkhmdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}

func (m *JunosKernelHealthChassisTypeGresType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosKernelHealthChassisTypeGresType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosKernelHealthChassisTypeGresType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsProtocolMaster != nil {
		i -= len(*m.IsProtocolMaster)
		copy(dAtA[i:], *m.IsProtocolMaster)
		i = encodeVarintJkhmdOc(dAtA, i, uint64(len(*m.IsProtocolMaster)))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xaa
	}
	if m.OtherReAlive != nil {
		i -= len(*m.OtherReAlive)
		copy(dAtA[i:], *m.OtherReAlive)
		i = encodeVarintJkhmdOc(dAtA, i, uint64(len(*m.OtherReAlive)))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xc2
	}
	if m.OtherRePresent != nil {
		i -= len(*m.OtherRePresent)
		copy(dAtA[i:], *m.OtherRePresent)
		i = encodeVarintJkhmdOc(dAtA, i, uint64(len(*m.OtherRePresent)))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	if m.ErrorState != nil {
		i -= len(*m.ErrorState)
		copy(dAtA[i:], *m.ErrorState)
		i = encodeVarintJkhmdOc(dAtA, i, uint64(len(*m.ErrorState)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc2
	}
	if m.SlaveKernelReady != nil {
		i -= len(*m.SlaveKernelReady)
		copy(dAtA[i:], *m.SlaveKernelReady)
		i = encodeVarintJkhmdOc(dAtA, i, uint64(len(*m.SlaveKernelReady)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	if m.MasterKernelReady != nil {
		i -= len(*m.MasterKernelReady)
		copy(dAtA[i:], *m.MasterKernelReady)
		i = encodeVarintJkhmdOc(dAtA, i, uint64(len(*m.MasterKernelReady)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	if m.ConfiguredState != nil {
		i -= len(*m.ConfiguredState)
		copy(dAtA[i:], *m.ConfiguredState)
		i = encodeVarintJkhmdOc(dAtA, i, uint64(len(*m.ConfiguredState)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	if m.SlaveConnectTime != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.SlaveConnectTime))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.GresTime != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.GresTime))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func (m *JunosKernelHealthChassisTypeIssuType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosKernelHealthChassisTypeIssuType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosKernelHealthChassisTypeIssuType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CurrentIssuStage != nil {
		i -= len(*m.CurrentIssuStage)
		copy(dAtA[i:], *m.CurrentIssuStage)
		i = encodeVarintJkhmdOc(dAtA, i, uint64(len(*m.CurrentIssuStage)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	if m.FailureStage != nil {
		i -= len(*m.FailureStage)
		copy(dAtA[i:], *m.FailureStage)
		i = encodeVarintJkhmdOc(dAtA, i, uint64(len(*m.FailureStage)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *JunosKernelHealthChassisTypeAggregatedDevicesType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosKernelHealthChassisTypeAggregatedDevicesType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosKernelHealthChassisTypeAggregatedDevicesType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AeLpLinkDownCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.AeLpLinkDownCnt))
		i--
		dAtA[i] = 0x13
		i--
		dAtA[i] = 0xd8
	}
	if m.AeUnstackCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.AeUnstackCnt))
		i--
		dAtA[i] = 0x13
		i--
		dAtA[i] = 0xd0
	}
	if m.RltLpLinkDownCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.RltLpLinkDownCnt))
		i--
		dAtA[i] = 0x13
		i--
		dAtA[i] = 0xc8
	}
	if m.PsIflCccDownCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.PsIflCccDownCnt))
		i--
		dAtA[i] = 0x13
		i--
		dAtA[i] = 0xc0
	}
	if m.PsLtUnstackCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.PsLtUnstackCnt))
		i--
		dAtA[i] = 0x13
		i--
		dAtA[i] = 0xb8
	}
	return len(dAtA) - i, nil
}

func (m *JunosKernelHealthRoutingOptionsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosKernelHealthRoutingOptionsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosKernelHealthRoutingOptionsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NonstopRouting != nil {
		{
			size, err := m.NonstopRouting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJkhmdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1f
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}

func (m *JunosKernelHealthRoutingOptionsTypeNonstopRoutingType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosKernelHealthRoutingOptionsTypeNonstopRoutingType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosKernelHealthRoutingOptionsTypeNonstopRoutingType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.JsrPrlQueueFullCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.JsrPrlQueueFullCnt))
		i--
		dAtA[i] = 0x1f
		i--
		dAtA[i] = 0xe0
	}
	if m.JsrMergeFailureCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.JsrMergeFailureCnt))
		i--
		dAtA[i] = 0x1f
		i--
		dAtA[i] = 0xd8
	}
	if m.JsrSplitFailureCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.JsrSplitFailureCnt))
		i--
		dAtA[i] = 0x1f
		i--
		dAtA[i] = 0xd0
	}
	return len(dAtA) - i, nil
}

func (m *JunosKernelHealthSecurityType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosKernelHealthSecurityType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosKernelHealthSecurityType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.VeriexecState != nil {
		i -= len(*m.VeriexecState)
		copy(dAtA[i:], *m.VeriexecState)
		i = encodeVarintJkhmdOc(dAtA, i, uint64(len(*m.VeriexecState)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *JunosKernelHealthKernelType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosKernelHealthKernelType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosKernelHealthKernelType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Tcpip != nil {
		{
			size, err := m.Tcpip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJkhmdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x25
		i--
		dAtA[i] = 0xb2
	}
	if m.Tnp != nil {
		{
			size, err := m.Tnp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJkhmdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xe
		i--
		dAtA[i] = 0x8a
	}
	if m.Multicast != nil {
		{
			size, err := m.Multicast.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJkhmdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xda
	}
	if m.Tunnel != nil {
		{
			size, err := m.Tunnel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJkhmdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xd2
	}
	if m.Vpls != nil {
		{
			size, err := m.Vpls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJkhmdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xca
	}
	if m.RecordMetaData != nil {
		{
			size, err := m.RecordMetaData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJkhmdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xca
	}
	if m.PeerInfra != nil {
		{
			size, err := m.PeerInfra.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJkhmdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xc2
	}
	if m.Rtsock != nil {
		{
			size, err := m.Rtsock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJkhmdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}

func (m *JunosKernelHealthKernelTypePeerInfraType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosKernelHealthKernelTypePeerInfraType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosKernelHealthKernelTypePeerInfraType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SpuriousPptWkups != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.SpuriousPptWkups))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.PeerPfemanConnDrops != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.PeerPfemanConnDrops))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func (m *JunosKernelHealthKernelTypeVplsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosKernelHealthKernelTypeVplsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosKernelHealthKernelTypeVplsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FloodTokenMax != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.FloodTokenMax))
		i--
		dAtA[i] = 0xd
		i--
		dAtA[i] = 0xc0
	}
	if m.FloodTokenCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.FloodTokenCnt))
		i--
		dAtA[i] = 0xd
		i--
		dAtA[i] = 0xb8
	}
	if m.UnicastTokenMax != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.UnicastTokenMax))
		i--
		dAtA[i] = 0xd
		i--
		dAtA[i] = 0xb0
	}
	if m.UnicastTokenCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.UnicastTokenCnt))
		i--
		dAtA[i] = 0xd
		i--
		dAtA[i] = 0xa8
	}
	return len(dAtA) - i, nil
}

func (m *JunosKernelHealthKernelTypeTunnelType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosKernelHealthKernelTypeTunnelType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosKernelHealthKernelTypeTunnelType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LoopedCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.LoopedCnt))
		i--
		dAtA[i] = 0xd
		i--
		dAtA[i] = 0xe8
	}
	if m.NonrpfTunnelidMax != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.NonrpfTunnelidMax))
		i--
		dAtA[i] = 0xd
		i--
		dAtA[i] = 0xe0
	}
	if m.NonrpfTunnelidCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.NonrpfTunnelidCnt))
		i--
		dAtA[i] = 0xd
		i--
		dAtA[i] = 0xd8
	}
	if m.RpfTunnelidMax != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.RpfTunnelidMax))
		i--
		dAtA[i] = 0xd
		i--
		dAtA[i] = 0xd0
	}
	if m.RpfTunnelidCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.RpfTunnelidCnt))
		i--
		dAtA[i] = 0xd
		i--
		dAtA[i] = 0xc8
	}
	return len(dAtA) - i, nil
}

func (m *JunosKernelHealthKernelTypeMulticastType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosKernelHealthKernelTypeMulticastType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosKernelHealthKernelTypeMulticastType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RslvReqErrCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.RslvReqErrCnt))
		i--
		dAtA[i] = 0xd
		i--
		dAtA[i] = 0xf8
	}
	if m.IifmismatchErrCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.IifmismatchErrCnt))
		i--
		dAtA[i] = 0xd
		i--
		dAtA[i] = 0xf0
	}
	return len(dAtA) - i, nil
}

func (m *JunosKernelHealthKernelTypeTnpType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosKernelHealthKernelTypeTnpType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosKernelHealthKernelTypeTnpType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TnpFragDropCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.TnpFragDropCnt))
		i--
		dAtA[i] = 0xd
		i--
		dAtA[i] = 0xa0
	}
	if m.TnpHelloDropCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.TnpHelloDropCnt))
		i--
		dAtA[i] = 0xd
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func (m *JunosKernelHealthKernelTypeRecordMetaDataType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosKernelHealthKernelTypeRecordMetaDataType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosKernelHealthKernelTypeRecordMetaDataType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RecordTime != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.RecordTime))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func (m *JunosKernelHealthKernelTypeRtsockType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosKernelHealthKernelTypeRtsockType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosKernelHealthKernelTypeRtsockType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TotalErrorCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.TotalErrorCnt))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xa8
	}
	if m.TotalVetoCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.TotalVetoCnt))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xa0
	}
	return len(dAtA) - i, nil
}

func (m *JunosKernelHealthKernelTypeTcpipType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosKernelHealthKernelTypeTcpipType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosKernelHealthKernelTypeTcpipType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Netisr != nil {
		{
			size, err := m.Netisr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJkhmdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x25
		i--
		dAtA[i] = 0xaa
	}
	if m.Ndp != nil {
		{
			size, err := m.Ndp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJkhmdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x25
		i--
		dAtA[i] = 0xa2
	}
	if m.Arp != nil {
		{
			size, err := m.Arp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJkhmdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x25
		i--
		dAtA[i] = 0x9a
	}
	if m.Rtb != nil {
		{
			size, err := m.Rtb.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJkhmdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x25
		i--
		dAtA[i] = 0x92
	}
	if m.Nhidx != nil {
		{
			size, err := m.Nhidx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJkhmdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x25
		i--
		dAtA[i] = 0x8a
	}
	if m.Tcp != nil {
		{
			size, err := m.Tcp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJkhmdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1f
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}

func (m *JunosKernelHealthKernelTypeTcpipTypeTcpType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosKernelHealthKernelTypeTcpipTypeTcpType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosKernelHealthKernelTypeTcpipTypeTcpType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TcpTimeWaitConn != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.TcpTimeWaitConn))
		i--
		dAtA[i] = 0x1f
		i--
		dAtA[i] = 0xc0
	}
	if m.TcpConndropsCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.TcpConndropsCnt))
		i--
		dAtA[i] = 0x1f
		i--
		dAtA[i] = 0xb8
	}
	if m.TcpDdosAttackCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.TcpDdosAttackCnt))
		i--
		dAtA[i] = 0x1f
		i--
		dAtA[i] = 0xb0
	}
	return len(dAtA) - i, nil
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNhidxType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNhidxType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNhidxType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NexthopPrivCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.NexthopPrivCnt))
		i--
		dAtA[i] = 0x19
		i--
		dAtA[i] = 0xa0
	}
	if m.NexthopPubCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.NexthopPubCnt))
		i--
		dAtA[i] = 0x19
		i--
		dAtA[i] = 0x98
	}
	if m.NexthopPrivMax != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.NexthopPrivMax))
		i--
		dAtA[i] = 0x19
		i--
		dAtA[i] = 0x90
	}
	if m.NexthopPubMax != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.NexthopPubMax))
		i--
		dAtA[i] = 0x19
		i--
		dAtA[i] = 0x88
	}
	return len(dAtA) - i, nil
}

func (m *JunosKernelHealthKernelTypeTcpipTypeRtbType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosKernelHealthKernelTypeTcpipTypeRtbType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosKernelHealthKernelTypeTcpipTypeRtbType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RouteCloneCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.RouteCloneCnt))
		i--
		dAtA[i] = 0x19
		i--
		dAtA[i] = 0xb0
	}
	if m.RouteCloneMax != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.RouteCloneMax))
		i--
		dAtA[i] = 0x19
		i--
		dAtA[i] = 0xa8
	}
	return len(dAtA) - i, nil
}

func (m *JunosKernelHealthKernelTypeTcpipTypeArpType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosKernelHealthKernelTypeTcpipTypeArpType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosKernelHealthKernelTypeTcpipTypeArpType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NbrcachePublicDropCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.NbrcachePublicDropCnt))
		i--
		dAtA[i] = 0x19
		i--
		dAtA[i] = 0xf8
	}
	if m.NbrcacheMgmtDropCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.NbrcacheMgmtDropCnt))
		i--
		dAtA[i] = 0x19
		i--
		dAtA[i] = 0xf0
	}
	if m.NbrcacheIriDropCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.NbrcacheIriDropCnt))
		i--
		dAtA[i] = 0x19
		i--
		dAtA[i] = 0xe8
	}
	if m.NbrcachePublicCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.NbrcachePublicCnt))
		i--
		dAtA[i] = 0x19
		i--
		dAtA[i] = 0xe0
	}
	if m.NbrcacheMgmtCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.NbrcacheMgmtCnt))
		i--
		dAtA[i] = 0x19
		i--
		dAtA[i] = 0xd8
	}
	if m.NbrcacheIriCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.NbrcacheIriCnt))
		i--
		dAtA[i] = 0x19
		i--
		dAtA[i] = 0xd0
	}
	if m.NbrcachePublicMax != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.NbrcachePublicMax))
		i--
		dAtA[i] = 0x19
		i--
		dAtA[i] = 0xc8
	}
	if m.NbrcacheMgmtMax != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.NbrcacheMgmtMax))
		i--
		dAtA[i] = 0x19
		i--
		dAtA[i] = 0xc0
	}
	if m.NbrcacheIriMax != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.NbrcacheIriMax))
		i--
		dAtA[i] = 0x19
		i--
		dAtA[i] = 0xb8
	}
	return len(dAtA) - i, nil
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNdpType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNdpType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNdpType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NbrcachePublicDropCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.NbrcachePublicDropCnt))
		i--
		dAtA[i] = 0x1a
		i--
		dAtA[i] = 0xc0
	}
	if m.NbrcacheMgmtDropCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.NbrcacheMgmtDropCnt))
		i--
		dAtA[i] = 0x1a
		i--
		dAtA[i] = 0xb8
	}
	if m.NbrcacheIriDropCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.NbrcacheIriDropCnt))
		i--
		dAtA[i] = 0x1a
		i--
		dAtA[i] = 0xb0
	}
	if m.NbrcachePublicCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.NbrcachePublicCnt))
		i--
		dAtA[i] = 0x1a
		i--
		dAtA[i] = 0xa8
	}
	if m.NbrcacheMgmtCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.NbrcacheMgmtCnt))
		i--
		dAtA[i] = 0x1a
		i--
		dAtA[i] = 0xa0
	}
	if m.NbrcacheIriCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.NbrcacheIriCnt))
		i--
		dAtA[i] = 0x1a
		i--
		dAtA[i] = 0x98
	}
	if m.NbrcachePublicMax != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.NbrcachePublicMax))
		i--
		dAtA[i] = 0x1a
		i--
		dAtA[i] = 0x90
	}
	if m.NbrcacheMgmtMax != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.NbrcacheMgmtMax))
		i--
		dAtA[i] = 0x1a
		i--
		dAtA[i] = 0x88
	}
	if m.NbrcacheIriMax != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.NbrcacheIriMax))
		i--
		dAtA[i] = 0x1a
		i--
		dAtA[i] = 0x80
	}
	return len(dAtA) - i, nil
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNetisrType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNetisrType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNetisrType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ArpPktQueued != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.ArpPktQueued))
		i--
		dAtA[i] = 0x1b
		i--
		dAtA[i] = 0xc0
	}
	if m.ArpPktHandled != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.ArpPktHandled))
		i--
		dAtA[i] = 0x1b
		i--
		dAtA[i] = 0xb8
	}
	if m.ArpDropCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.ArpDropCnt))
		i--
		dAtA[i] = 0x1b
		i--
		dAtA[i] = 0xb0
	}
	if m.ArpWmCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.ArpWmCnt))
		i--
		dAtA[i] = 0x1b
		i--
		dAtA[i] = 0xa8
	}
	if m.Ip6PktQueued != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.Ip6PktQueued))
		i--
		dAtA[i] = 0x1b
		i--
		dAtA[i] = 0xa0
	}
	if m.Ip6PktHandled != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.Ip6PktHandled))
		i--
		dAtA[i] = 0x1b
		i--
		dAtA[i] = 0x98
	}
	if m.Ip6DropCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.Ip6DropCnt))
		i--
		dAtA[i] = 0x1b
		i--
		dAtA[i] = 0x90
	}
	if m.Ip6WmCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.Ip6WmCnt))
		i--
		dAtA[i] = 0x1b
		i--
		dAtA[i] = 0x88
	}
	if m.IpPktQueued != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.IpPktQueued))
		i--
		dAtA[i] = 0x1b
		i--
		dAtA[i] = 0x80
	}
	if m.IpPktHandled != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.IpPktHandled))
		i--
		dAtA[i] = 0x1a
		i--
		dAtA[i] = 0xf8
	}
	if m.IpDropCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.IpDropCnt))
		i--
		dAtA[i] = 0x1a
		i--
		dAtA[i] = 0xf0
	}
	if m.IpWmCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.IpWmCnt))
		i--
		dAtA[i] = 0x1a
		i--
		dAtA[i] = 0xe8
	}
	if m.EtherPktQueued != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.EtherPktQueued))
		i--
		dAtA[i] = 0x1a
		i--
		dAtA[i] = 0xe0
	}
	if m.EtherPktHandled != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.EtherPktHandled))
		i--
		dAtA[i] = 0x1a
		i--
		dAtA[i] = 0xd8
	}
	if m.EtherDropCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.EtherDropCnt))
		i--
		dAtA[i] = 0x1a
		i--
		dAtA[i] = 0xd0
	}
	if m.EtherWmCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.EtherWmCnt))
		i--
		dAtA[i] = 0x1a
		i--
		dAtA[i] = 0xc8
	}
	return len(dAtA) - i, nil
}

func (m *JunosKernelHealthKernelIfstateType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosKernelHealthKernelIfstateType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosKernelHealthKernelIfstateType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ClientLimitReached != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.ClientLimitReached))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd0
	}
	if m.AliveClientsCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.AliveClientsCnt))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc8
	}
	if m.DeadClientsCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.DeadClientsCnt))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc0
	}
	if m.StuckClientsCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.StuckClientsCnt))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.DelayedUnrefsMax != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.DelayedUnrefsMax))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.DelayedUnrefsCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.DelayedUnrefsCnt))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.AliveIfstatesCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.AliveIfstatesCnt))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.DeadIfstatesCnt != nil {
		i = encodeVarintJkhmdOc(dAtA, i, uint64(*m.DeadIfstatesCnt))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func encodeVarintJkhmdOc(dAtA []byte, offset int, v uint64) int {
	offset -= sovJkhmdOc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *JunosKernelHealth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Security != nil {
		l = m.Security.Size()
		n += 2 + l + sovJkhmdOc(uint64(l))
	}
	if m.KernelIfstate != nil {
		l = m.KernelIfstate.Size()
		n += 2 + l + sovJkhmdOc(uint64(l))
	}
	if m.Chassis != nil {
		l = m.Chassis.Size()
		n += 2 + l + sovJkhmdOc(uint64(l))
	}
	if m.Kernel != nil {
		l = m.Kernel.Size()
		n += 2 + l + sovJkhmdOc(uint64(l))
	}
	if m.RoutingOptions != nil {
		l = m.RoutingOptions.Size()
		n += 2 + l + sovJkhmdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosKernelHealthChassisType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Gres != nil {
		l = m.Gres.Size()
		n += 2 + l + sovJkhmdOc(uint64(l))
	}
	if m.Issu != nil {
		l = m.Issu.Size()
		n += 2 + l + sovJkhmdOc(uint64(l))
	}
	if m.AggregatedDevices != nil {
		l = m.AggregatedDevices.Size()
		n += 2 + l + sovJkhmdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosKernelHealthChassisTypeGresType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GresTime != nil {
		n += 2 + sovJkhmdOc(uint64(*m.GresTime))
	}
	if m.SlaveConnectTime != nil {
		n += 2 + sovJkhmdOc(uint64(*m.SlaveConnectTime))
	}
	if m.ConfiguredState != nil {
		l = len(*m.ConfiguredState)
		n += 2 + l + sovJkhmdOc(uint64(l))
	}
	if m.MasterKernelReady != nil {
		l = len(*m.MasterKernelReady)
		n += 2 + l + sovJkhmdOc(uint64(l))
	}
	if m.SlaveKernelReady != nil {
		l = len(*m.SlaveKernelReady)
		n += 2 + l + sovJkhmdOc(uint64(l))
	}
	if m.ErrorState != nil {
		l = len(*m.ErrorState)
		n += 2 + l + sovJkhmdOc(uint64(l))
	}
	if m.OtherRePresent != nil {
		l = len(*m.OtherRePresent)
		n += 2 + l + sovJkhmdOc(uint64(l))
	}
	if m.OtherReAlive != nil {
		l = len(*m.OtherReAlive)
		n += 2 + l + sovJkhmdOc(uint64(l))
	}
	if m.IsProtocolMaster != nil {
		l = len(*m.IsProtocolMaster)
		n += 2 + l + sovJkhmdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosKernelHealthChassisTypeIssuType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FailureStage != nil {
		l = len(*m.FailureStage)
		n += 2 + l + sovJkhmdOc(uint64(l))
	}
	if m.CurrentIssuStage != nil {
		l = len(*m.CurrentIssuStage)
		n += 2 + l + sovJkhmdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosKernelHealthChassisTypeAggregatedDevicesType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PsLtUnstackCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.PsLtUnstackCnt))
	}
	if m.PsIflCccDownCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.PsIflCccDownCnt))
	}
	if m.RltLpLinkDownCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.RltLpLinkDownCnt))
	}
	if m.AeUnstackCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.AeUnstackCnt))
	}
	if m.AeLpLinkDownCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.AeLpLinkDownCnt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosKernelHealthRoutingOptionsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NonstopRouting != nil {
		l = m.NonstopRouting.Size()
		n += 2 + l + sovJkhmdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosKernelHealthRoutingOptionsTypeNonstopRoutingType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JsrSplitFailureCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.JsrSplitFailureCnt))
	}
	if m.JsrMergeFailureCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.JsrMergeFailureCnt))
	}
	if m.JsrPrlQueueFullCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.JsrPrlQueueFullCnt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosKernelHealthSecurityType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VeriexecState != nil {
		l = len(*m.VeriexecState)
		n += 2 + l + sovJkhmdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosKernelHealthKernelType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rtsock != nil {
		l = m.Rtsock.Size()
		n += 2 + l + sovJkhmdOc(uint64(l))
	}
	if m.PeerInfra != nil {
		l = m.PeerInfra.Size()
		n += 2 + l + sovJkhmdOc(uint64(l))
	}
	if m.RecordMetaData != nil {
		l = m.RecordMetaData.Size()
		n += 2 + l + sovJkhmdOc(uint64(l))
	}
	if m.Vpls != nil {
		l = m.Vpls.Size()
		n += 2 + l + sovJkhmdOc(uint64(l))
	}
	if m.Tunnel != nil {
		l = m.Tunnel.Size()
		n += 2 + l + sovJkhmdOc(uint64(l))
	}
	if m.Multicast != nil {
		l = m.Multicast.Size()
		n += 2 + l + sovJkhmdOc(uint64(l))
	}
	if m.Tnp != nil {
		l = m.Tnp.Size()
		n += 2 + l + sovJkhmdOc(uint64(l))
	}
	if m.Tcpip != nil {
		l = m.Tcpip.Size()
		n += 2 + l + sovJkhmdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosKernelHealthKernelTypePeerInfraType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PeerPfemanConnDrops != nil {
		n += 2 + sovJkhmdOc(uint64(*m.PeerPfemanConnDrops))
	}
	if m.SpuriousPptWkups != nil {
		n += 2 + sovJkhmdOc(uint64(*m.SpuriousPptWkups))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosKernelHealthKernelTypeVplsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnicastTokenCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.UnicastTokenCnt))
	}
	if m.UnicastTokenMax != nil {
		n += 2 + sovJkhmdOc(uint64(*m.UnicastTokenMax))
	}
	if m.FloodTokenCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.FloodTokenCnt))
	}
	if m.FloodTokenMax != nil {
		n += 2 + sovJkhmdOc(uint64(*m.FloodTokenMax))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosKernelHealthKernelTypeTunnelType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RpfTunnelidCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.RpfTunnelidCnt))
	}
	if m.RpfTunnelidMax != nil {
		n += 2 + sovJkhmdOc(uint64(*m.RpfTunnelidMax))
	}
	if m.NonrpfTunnelidCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.NonrpfTunnelidCnt))
	}
	if m.NonrpfTunnelidMax != nil {
		n += 2 + sovJkhmdOc(uint64(*m.NonrpfTunnelidMax))
	}
	if m.LoopedCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.LoopedCnt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosKernelHealthKernelTypeMulticastType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IifmismatchErrCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.IifmismatchErrCnt))
	}
	if m.RslvReqErrCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.RslvReqErrCnt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosKernelHealthKernelTypeTnpType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TnpHelloDropCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.TnpHelloDropCnt))
	}
	if m.TnpFragDropCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.TnpFragDropCnt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosKernelHealthKernelTypeRecordMetaDataType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RecordTime != nil {
		n += 2 + sovJkhmdOc(uint64(*m.RecordTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosKernelHealthKernelTypeRtsockType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalVetoCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.TotalVetoCnt))
	}
	if m.TotalErrorCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.TotalErrorCnt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosKernelHealthKernelTypeTcpipType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tcp != nil {
		l = m.Tcp.Size()
		n += 2 + l + sovJkhmdOc(uint64(l))
	}
	if m.Nhidx != nil {
		l = m.Nhidx.Size()
		n += 2 + l + sovJkhmdOc(uint64(l))
	}
	if m.Rtb != nil {
		l = m.Rtb.Size()
		n += 2 + l + sovJkhmdOc(uint64(l))
	}
	if m.Arp != nil {
		l = m.Arp.Size()
		n += 2 + l + sovJkhmdOc(uint64(l))
	}
	if m.Ndp != nil {
		l = m.Ndp.Size()
		n += 2 + l + sovJkhmdOc(uint64(l))
	}
	if m.Netisr != nil {
		l = m.Netisr.Size()
		n += 2 + l + sovJkhmdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosKernelHealthKernelTypeTcpipTypeTcpType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TcpDdosAttackCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.TcpDdosAttackCnt))
	}
	if m.TcpConndropsCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.TcpConndropsCnt))
	}
	if m.TcpTimeWaitConn != nil {
		n += 2 + sovJkhmdOc(uint64(*m.TcpTimeWaitConn))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNhidxType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NexthopPubMax != nil {
		n += 2 + sovJkhmdOc(uint64(*m.NexthopPubMax))
	}
	if m.NexthopPrivMax != nil {
		n += 2 + sovJkhmdOc(uint64(*m.NexthopPrivMax))
	}
	if m.NexthopPubCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.NexthopPubCnt))
	}
	if m.NexthopPrivCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.NexthopPrivCnt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosKernelHealthKernelTypeTcpipTypeRtbType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RouteCloneMax != nil {
		n += 2 + sovJkhmdOc(uint64(*m.RouteCloneMax))
	}
	if m.RouteCloneCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.RouteCloneCnt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosKernelHealthKernelTypeTcpipTypeArpType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NbrcacheIriMax != nil {
		n += 2 + sovJkhmdOc(uint64(*m.NbrcacheIriMax))
	}
	if m.NbrcacheMgmtMax != nil {
		n += 2 + sovJkhmdOc(uint64(*m.NbrcacheMgmtMax))
	}
	if m.NbrcachePublicMax != nil {
		n += 2 + sovJkhmdOc(uint64(*m.NbrcachePublicMax))
	}
	if m.NbrcacheIriCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.NbrcacheIriCnt))
	}
	if m.NbrcacheMgmtCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.NbrcacheMgmtCnt))
	}
	if m.NbrcachePublicCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.NbrcachePublicCnt))
	}
	if m.NbrcacheIriDropCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.NbrcacheIriDropCnt))
	}
	if m.NbrcacheMgmtDropCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.NbrcacheMgmtDropCnt))
	}
	if m.NbrcachePublicDropCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.NbrcachePublicDropCnt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNdpType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NbrcacheIriMax != nil {
		n += 2 + sovJkhmdOc(uint64(*m.NbrcacheIriMax))
	}
	if m.NbrcacheMgmtMax != nil {
		n += 2 + sovJkhmdOc(uint64(*m.NbrcacheMgmtMax))
	}
	if m.NbrcachePublicMax != nil {
		n += 2 + sovJkhmdOc(uint64(*m.NbrcachePublicMax))
	}
	if m.NbrcacheIriCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.NbrcacheIriCnt))
	}
	if m.NbrcacheMgmtCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.NbrcacheMgmtCnt))
	}
	if m.NbrcachePublicCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.NbrcachePublicCnt))
	}
	if m.NbrcacheIriDropCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.NbrcacheIriDropCnt))
	}
	if m.NbrcacheMgmtDropCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.NbrcacheMgmtDropCnt))
	}
	if m.NbrcachePublicDropCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.NbrcachePublicDropCnt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosKernelHealthKernelTypeTcpipTypeNetisrType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EtherWmCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.EtherWmCnt))
	}
	if m.EtherDropCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.EtherDropCnt))
	}
	if m.EtherPktHandled != nil {
		n += 2 + sovJkhmdOc(uint64(*m.EtherPktHandled))
	}
	if m.EtherPktQueued != nil {
		n += 2 + sovJkhmdOc(uint64(*m.EtherPktQueued))
	}
	if m.IpWmCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.IpWmCnt))
	}
	if m.IpDropCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.IpDropCnt))
	}
	if m.IpPktHandled != nil {
		n += 2 + sovJkhmdOc(uint64(*m.IpPktHandled))
	}
	if m.IpPktQueued != nil {
		n += 2 + sovJkhmdOc(uint64(*m.IpPktQueued))
	}
	if m.Ip6WmCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.Ip6WmCnt))
	}
	if m.Ip6DropCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.Ip6DropCnt))
	}
	if m.Ip6PktHandled != nil {
		n += 2 + sovJkhmdOc(uint64(*m.Ip6PktHandled))
	}
	if m.Ip6PktQueued != nil {
		n += 2 + sovJkhmdOc(uint64(*m.Ip6PktQueued))
	}
	if m.ArpWmCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.ArpWmCnt))
	}
	if m.ArpDropCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.ArpDropCnt))
	}
	if m.ArpPktHandled != nil {
		n += 2 + sovJkhmdOc(uint64(*m.ArpPktHandled))
	}
	if m.ArpPktQueued != nil {
		n += 2 + sovJkhmdOc(uint64(*m.ArpPktQueued))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosKernelHealthKernelIfstateType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeadIfstatesCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.DeadIfstatesCnt))
	}
	if m.AliveIfstatesCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.AliveIfstatesCnt))
	}
	if m.DelayedUnrefsCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.DelayedUnrefsCnt))
	}
	if m.DelayedUnrefsMax != nil {
		n += 2 + sovJkhmdOc(uint64(*m.DelayedUnrefsMax))
	}
	if m.StuckClientsCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.StuckClientsCnt))
	}
	if m.DeadClientsCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.DeadClientsCnt))
	}
	if m.AliveClientsCnt != nil {
		n += 2 + sovJkhmdOc(uint64(*m.AliveClientsCnt))
	}
	if m.ClientLimitReached != nil {
		n += 2 + sovJkhmdOc(uint64(*m.ClientLimitReached))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovJkhmdOc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozJkhmdOc(x uint64) (n int) {
	return sovJkhmdOc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *JunosKernelHealth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJkhmdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: junos_kernel_health: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: junos_kernel_health: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 183:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Security", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Security == nil {
				m.Security = &JunosKernelHealthSecurityType{}
			}
			if err := m.Security.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 186:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KernelIfstate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KernelIfstate == nil {
				m.KernelIfstate = &JunosKernelHealthKernelIfstateType{}
			}
			if err := m.KernelIfstate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 191:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chassis", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Chassis == nil {
				m.Chassis = &JunosKernelHealthChassisType{}
			}
			if err := m.Chassis.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 192:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kernel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Kernel == nil {
				m.Kernel = &JunosKernelHealthKernelType{}
			}
			if err := m.Kernel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 509:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoutingOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoutingOptions == nil {
				m.RoutingOptions = &JunosKernelHealthRoutingOptionsType{}
			}
			if err := m.RoutingOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJkhmdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosKernelHealthChassisType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJkhmdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: chassis_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: chassis_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 181:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gres", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gres == nil {
				m.Gres = &JunosKernelHealthChassisTypeGresType{}
			}
			if err := m.Gres.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 182:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Issu == nil {
				m.Issu = &JunosKernelHealthChassisTypeIssuType{}
			}
			if err := m.Issu.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 351:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatedDevices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AggregatedDevices == nil {
				m.AggregatedDevices = &JunosKernelHealthChassisTypeAggregatedDevicesType{}
			}
			if err := m.AggregatedDevices.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJkhmdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosKernelHealthChassisTypeGresType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJkhmdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: gres_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: gres_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GresTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GresTime = &v
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlaveConnectTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SlaveConnectTime = &v
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfiguredState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ConfiguredState = &s
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterKernelReady", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MasterKernelReady = &s
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlaveKernelReady", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SlaveKernelReady = &s
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ErrorState = &s
			iNdEx = postIndex
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherRePresent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OtherRePresent = &s
			iNdEx = postIndex
		case 152:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherReAlive", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OtherReAlive = &s
			iNdEx = postIndex
		case 165:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsProtocolMaster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.IsProtocolMaster = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJkhmdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosKernelHealthChassisTypeIssuType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJkhmdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: issu_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: issu_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailureStage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FailureStage = &s
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentIssuStage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CurrentIssuStage = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJkhmdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosKernelHealthChassisTypeAggregatedDevicesType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJkhmdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: aggregated_devices_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: aggregated_devices_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 311:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PsLtUnstackCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PsLtUnstackCnt = &v
		case 312:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PsIflCccDownCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PsIflCccDownCnt = &v
		case 313:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RltLpLinkDownCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RltLpLinkDownCnt = &v
		case 314:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AeUnstackCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AeUnstackCnt = &v
		case 315:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AeLpLinkDownCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AeLpLinkDownCnt = &v
		default:
			iNdEx = preIndex
			skippy, err := skipJkhmdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosKernelHealthRoutingOptionsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJkhmdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: routing_options_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: routing_options_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 510:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonstopRouting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NonstopRouting == nil {
				m.NonstopRouting = &JunosKernelHealthRoutingOptionsTypeNonstopRoutingType{}
			}
			if err := m.NonstopRouting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJkhmdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosKernelHealthRoutingOptionsTypeNonstopRoutingType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJkhmdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: nonstop_routing_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: nonstop_routing_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 506:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsrSplitFailureCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.JsrSplitFailureCnt = &v
		case 507:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsrMergeFailureCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.JsrMergeFailureCnt = &v
		case 508:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsrPrlQueueFullCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.JsrPrlQueueFullCnt = &v
		default:
			iNdEx = preIndex
			skippy, err := skipJkhmdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosKernelHealthSecurityType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJkhmdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: security_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: security_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VeriexecState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VeriexecState = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJkhmdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosKernelHealthKernelType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJkhmdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: kernel_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: kernel_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 153:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtsock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rtsock == nil {
				m.Rtsock = &JunosKernelHealthKernelTypeRtsockType{}
			}
			if err := m.Rtsock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 184:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerInfra", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PeerInfra == nil {
				m.PeerInfra = &JunosKernelHealthKernelTypePeerInfraType{}
			}
			if err := m.PeerInfra.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 185:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordMetaData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RecordMetaData == nil {
				m.RecordMetaData = &JunosKernelHealthKernelTypeRecordMetaDataType{}
			}
			if err := m.RecordMetaData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vpls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vpls == nil {
				m.Vpls = &JunosKernelHealthKernelTypeVplsType{}
			}
			if err := m.Vpls.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 202:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tunnel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tunnel == nil {
				m.Tunnel = &JunosKernelHealthKernelTypeTunnelType{}
			}
			if err := m.Tunnel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 203:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multicast", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Multicast == nil {
				m.Multicast = &JunosKernelHealthKernelTypeMulticastType{}
			}
			if err := m.Multicast.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 225:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tnp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tnp == nil {
				m.Tnp = &JunosKernelHealthKernelTypeTnpType{}
			}
			if err := m.Tnp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 598:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tcpip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tcpip == nil {
				m.Tcpip = &JunosKernelHealthKernelTypeTcpipType{}
			}
			if err := m.Tcpip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJkhmdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosKernelHealthKernelTypePeerInfraType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJkhmdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: peer_infra_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: peer_infra_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerPfemanConnDrops", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PeerPfemanConnDrops = &v
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpuriousPptWkups", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SpuriousPptWkups = &v
		default:
			iNdEx = preIndex
			skippy, err := skipJkhmdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosKernelHealthKernelTypeVplsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJkhmdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: vpls_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: vpls_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 213:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnicastTokenCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnicastTokenCnt = &v
		case 214:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnicastTokenMax", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnicastTokenMax = &v
		case 215:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FloodTokenCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FloodTokenCnt = &v
		case 216:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FloodTokenMax", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FloodTokenMax = &v
		default:
			iNdEx = preIndex
			skippy, err := skipJkhmdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosKernelHealthKernelTypeTunnelType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJkhmdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: tunnel_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: tunnel_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 217:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpfTunnelidCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RpfTunnelidCnt = &v
		case 218:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpfTunnelidMax", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RpfTunnelidMax = &v
		case 219:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonrpfTunnelidCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NonrpfTunnelidCnt = &v
		case 220:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonrpfTunnelidMax", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NonrpfTunnelidMax = &v
		case 221:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopedCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LoopedCnt = &v
		default:
			iNdEx = preIndex
			skippy, err := skipJkhmdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosKernelHealthKernelTypeMulticastType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJkhmdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: multicast_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: multicast_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 222:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IifmismatchErrCnt", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IifmismatchErrCnt = &v
		case 223:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RslvReqErrCnt", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RslvReqErrCnt = &v
		default:
			iNdEx = preIndex
			skippy, err := skipJkhmdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosKernelHealthKernelTypeTnpType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJkhmdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: tnp_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: tnp_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 211:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TnpHelloDropCnt", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TnpHelloDropCnt = &v
		case 212:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TnpFragDropCnt", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TnpFragDropCnt = &v
		default:
			iNdEx = preIndex
			skippy, err := skipJkhmdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosKernelHealthKernelTypeRecordMetaDataType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJkhmdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: record_meta_data_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: record_meta_data_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecordTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipJkhmdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosKernelHealthKernelTypeRtsockType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJkhmdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: rtsock_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: rtsock_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 148:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalVetoCnt", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalVetoCnt = &v
		case 149:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalErrorCnt", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalErrorCnt = &v
		default:
			iNdEx = preIndex
			skippy, err := skipJkhmdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosKernelHealthKernelTypeTcpipType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJkhmdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: tcpip_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: tcpip_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 511:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tcp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tcp == nil {
				m.Tcp = &JunosKernelHealthKernelTypeTcpipTypeTcpType{}
			}
			if err := m.Tcp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 593:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nhidx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nhidx == nil {
				m.Nhidx = &JunosKernelHealthKernelTypeTcpipTypeNhidxType{}
			}
			if err := m.Nhidx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 594:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtb", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rtb == nil {
				m.Rtb = &JunosKernelHealthKernelTypeTcpipTypeRtbType{}
			}
			if err := m.Rtb.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 595:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Arp == nil {
				m.Arp = &JunosKernelHealthKernelTypeTcpipTypeArpType{}
			}
			if err := m.Arp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 596:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ndp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ndp == nil {
				m.Ndp = &JunosKernelHealthKernelTypeTcpipTypeNdpType{}
			}
			if err := m.Ndp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 597:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Netisr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Netisr == nil {
				m.Netisr = &JunosKernelHealthKernelTypeTcpipTypeNetisrType{}
			}
			if err := m.Netisr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJkhmdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosKernelHealthKernelTypeTcpipTypeTcpType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJkhmdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: tcp_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: tcp_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 502:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpDdosAttackCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TcpDdosAttackCnt = &v
		case 503:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpConndropsCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TcpConndropsCnt = &v
		case 504:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpTimeWaitConn", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TcpTimeWaitConn = &v
		default:
			iNdEx = preIndex
			skippy, err := skipJkhmdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosKernelHealthKernelTypeTcpipTypeNhidxType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJkhmdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: nhidx_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: nhidx_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 401:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NexthopPubMax", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NexthopPubMax = &v
		case 402:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NexthopPrivMax", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NexthopPrivMax = &v
		case 403:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NexthopPubCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NexthopPubCnt = &v
		case 404:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NexthopPrivCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NexthopPrivCnt = &v
		default:
			iNdEx = preIndex
			skippy, err := skipJkhmdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosKernelHealthKernelTypeTcpipTypeRtbType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJkhmdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: rtb_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: rtb_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 405:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteCloneMax", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RouteCloneMax = &v
		case 406:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteCloneCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RouteCloneCnt = &v
		default:
			iNdEx = preIndex
			skippy, err := skipJkhmdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosKernelHealthKernelTypeTcpipTypeArpType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJkhmdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: arp_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: arp_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 407:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NbrcacheIriMax", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NbrcacheIriMax = &v
		case 408:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NbrcacheMgmtMax", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NbrcacheMgmtMax = &v
		case 409:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NbrcachePublicMax", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NbrcachePublicMax = &v
		case 410:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NbrcacheIriCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NbrcacheIriCnt = &v
		case 411:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NbrcacheMgmtCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NbrcacheMgmtCnt = &v
		case 412:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NbrcachePublicCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NbrcachePublicCnt = &v
		case 413:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NbrcacheIriDropCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NbrcacheIriDropCnt = &v
		case 414:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NbrcacheMgmtDropCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NbrcacheMgmtDropCnt = &v
		case 415:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NbrcachePublicDropCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NbrcachePublicDropCnt = &v
		default:
			iNdEx = preIndex
			skippy, err := skipJkhmdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosKernelHealthKernelTypeTcpipTypeNdpType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJkhmdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ndp_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ndp_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 416:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NbrcacheIriMax", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NbrcacheIriMax = &v
		case 417:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NbrcacheMgmtMax", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NbrcacheMgmtMax = &v
		case 418:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NbrcachePublicMax", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NbrcachePublicMax = &v
		case 419:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NbrcacheIriCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NbrcacheIriCnt = &v
		case 420:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NbrcacheMgmtCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NbrcacheMgmtCnt = &v
		case 421:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NbrcachePublicCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NbrcachePublicCnt = &v
		case 422:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NbrcacheIriDropCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NbrcacheIriDropCnt = &v
		case 423:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NbrcacheMgmtDropCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NbrcacheMgmtDropCnt = &v
		case 424:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NbrcachePublicDropCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NbrcachePublicDropCnt = &v
		default:
			iNdEx = preIndex
			skippy, err := skipJkhmdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosKernelHealthKernelTypeTcpipTypeNetisrType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJkhmdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: netisr_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: netisr_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 425:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EtherWmCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EtherWmCnt = &v
		case 426:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EtherDropCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EtherDropCnt = &v
		case 427:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EtherPktHandled", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EtherPktHandled = &v
		case 428:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EtherPktQueued", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EtherPktQueued = &v
		case 429:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpWmCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IpWmCnt = &v
		case 430:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpDropCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IpDropCnt = &v
		case 431:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpPktHandled", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IpPktHandled = &v
		case 432:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpPktQueued", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IpPktQueued = &v
		case 433:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip6WmCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ip6WmCnt = &v
		case 434:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip6DropCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ip6DropCnt = &v
		case 435:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip6PktHandled", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ip6PktHandled = &v
		case 436:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip6PktQueued", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ip6PktQueued = &v
		case 437:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArpWmCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ArpWmCnt = &v
		case 438:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArpDropCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ArpDropCnt = &v
		case 439:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArpPktHandled", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ArpPktHandled = &v
		case 440:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArpPktQueued", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ArpPktQueued = &v
		default:
			iNdEx = preIndex
			skippy, err := skipJkhmdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosKernelHealthKernelIfstateType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJkhmdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: kernel_ifstate_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: kernel_ifstate_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeadIfstatesCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeadIfstatesCnt = &v
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AliveIfstatesCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AliveIfstatesCnt = &v
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelayedUnrefsCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DelayedUnrefsCnt = &v
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelayedUnrefsMax", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DelayedUnrefsMax = &v
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StuckClientsCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StuckClientsCnt = &v
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeadClientsCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeadClientsCnt = &v
		case 57:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AliveClientsCnt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AliveClientsCnt = &v
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientLimitReached", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClientLimitReached = &v
		default:
			iNdEx = preIndex
			skippy, err := skipJkhmdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJkhmdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipJkhmdOc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowJkhmdOc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJkhmdOc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthJkhmdOc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupJkhmdOc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthJkhmdOc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthJkhmdOc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowJkhmdOc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupJkhmdOc = fmt.Errorf("proto: unexpected end of group")
)
