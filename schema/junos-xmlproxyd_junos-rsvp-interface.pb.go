// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: junos-xmlproxyd_junos-rsvp-interface.proto

package schema

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type JunosRsvpInterface struct {
	RsvpInterfaceInformation *JunosRsvpInterfaceRsvpInterfaceInformationType `protobuf:"bytes,151,opt,name=rsvp_interface_information,json=rsvpInterfaceInformation" json:"rsvp_interface_information,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                                        `json:"-"`
	XXX_unrecognized         []byte                                          `json:"-"`
	XXX_sizecache            int32                                           `json:"-"`
}

func (m *JunosRsvpInterface) Reset()         { *m = JunosRsvpInterface{} }
func (m *JunosRsvpInterface) String() string { return proto.CompactTextString(m) }
func (*JunosRsvpInterface) ProtoMessage()    {}
func (*JunosRsvpInterface) Descriptor() ([]byte, []int) {
	return fileDescriptor_df4225f46c0f8328, []int{0}
}
func (m *JunosRsvpInterface) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosRsvpInterface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosRsvpInterface.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosRsvpInterface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosRsvpInterface.Merge(m, src)
}
func (m *JunosRsvpInterface) XXX_Size() int {
	return m.Size()
}
func (m *JunosRsvpInterface) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosRsvpInterface.DiscardUnknown(m)
}

var xxx_messageInfo_JunosRsvpInterface proto.InternalMessageInfo

func (m *JunosRsvpInterface) GetRsvpInterfaceInformation() *JunosRsvpInterfaceRsvpInterfaceInformationType {
	if m != nil {
		return m.RsvpInterfaceInformation
	}
	return nil
}

type JunosRsvpInterfaceRsvpInterfaceInformationType struct {
	ActiveCount          *uint32                                                            `protobuf:"varint,51,opt,name=active_count,json=activeCount" json:"active_count,omitempty"`
	RsvpInterface        []*JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceList `protobuf:"bytes,151,rep,name=rsvp_interface,json=rsvpInterface" json:"rsvp_interface,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                           `json:"-"`
	XXX_unrecognized     []byte                                                             `json:"-"`
	XXX_sizecache        int32                                                              `json:"-"`
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationType) Reset() {
	*m = JunosRsvpInterfaceRsvpInterfaceInformationType{}
}
func (m *JunosRsvpInterfaceRsvpInterfaceInformationType) String() string {
	return proto.CompactTextString(m)
}
func (*JunosRsvpInterfaceRsvpInterfaceInformationType) ProtoMessage() {}
func (*JunosRsvpInterfaceRsvpInterfaceInformationType) Descriptor() ([]byte, []int) {
	return fileDescriptor_df4225f46c0f8328, []int{0, 0}
}
func (m *JunosRsvpInterfaceRsvpInterfaceInformationType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosRsvpInterfaceRsvpInterfaceInformationType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosRsvpInterfaceRsvpInterfaceInformationType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosRsvpInterfaceRsvpInterfaceInformationType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosRsvpInterfaceRsvpInterfaceInformationType.Merge(m, src)
}
func (m *JunosRsvpInterfaceRsvpInterfaceInformationType) XXX_Size() int {
	return m.Size()
}
func (m *JunosRsvpInterfaceRsvpInterfaceInformationType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosRsvpInterfaceRsvpInterfaceInformationType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosRsvpInterfaceRsvpInterfaceInformationType proto.InternalMessageInfo

func (m *JunosRsvpInterfaceRsvpInterfaceInformationType) GetActiveCount() uint32 {
	if m != nil && m.ActiveCount != nil {
		return *m.ActiveCount
	}
	return 0
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationType) GetRsvpInterface() []*JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceList {
	if m != nil {
		return m.RsvpInterface
	}
	return nil
}

type JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceList struct {
	InterfaceName        *string                                                                                 `protobuf:"bytes,51,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
	Index                *uint32                                                                                 `protobuf:"varint,52,opt,name=index" json:"index,omitempty"`
	RsvpStatus           *string                                                                                 `protobuf:"bytes,53,opt,name=rsvp_status,json=rsvpStatus" json:"rsvp_status,omitempty"`
	AuthenticationFlag   *string                                                                                 `protobuf:"bytes,54,opt,name=authentication_flag,json=authenticationFlag" json:"authentication_flag,omitempty"`
	AggregateFlag        *string                                                                                 `protobuf:"bytes,55,opt,name=aggregate_flag,json=aggregateFlag" json:"aggregate_flag,omitempty"`
	AckFlag              *string                                                                                 `protobuf:"bytes,56,opt,name=ack_flag,json=ackFlag" json:"ack_flag,omitempty"`
	ProtectFlag          *string                                                                                 `protobuf:"bytes,57,opt,name=protect_flag,json=protectFlag" json:"protect_flag,omitempty"`
	HelloInterval        *uint32                                                                                 `protobuf:"varint,58,opt,name=hello_interval,json=helloInterval" json:"hello_interval,omitempty"`
	InterfaceAddress     *string                                                                                 `protobuf:"bytes,59,opt,name=interface_address,json=interfaceAddress" json:"interface_address,omitempty"`
	MessageStatistics    []*JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListMessageStatisticsList `protobuf:"bytes,151,rep,name=message_statistics,json=messageStatistics" json:"message_statistics,omitempty"`
	RsvpTelink           *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkType          `protobuf:"bytes,152,opt,name=rsvp_telink,json=rsvpTelink" json:"rsvp_telink,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                                `json:"-"`
	XXX_unrecognized     []byte                                                                                  `json:"-"`
	XXX_sizecache        int32                                                                                   `json:"-"`
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceList) Reset() {
	*m = JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceList{}
}
func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceList) String() string {
	return proto.CompactTextString(m)
}
func (*JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceList) ProtoMessage() {}
func (*JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceList) Descriptor() ([]byte, []int) {
	return fileDescriptor_df4225f46c0f8328, []int{0, 0, 0}
}
func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceList.Merge(m, src)
}
func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceList) XXX_Size() int {
	return m.Size()
}
func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceList) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceList.DiscardUnknown(m)
}

var xxx_messageInfo_JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceList proto.InternalMessageInfo

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceList) GetInterfaceName() string {
	if m != nil && m.InterfaceName != nil {
		return *m.InterfaceName
	}
	return ""
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceList) GetIndex() uint32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceList) GetRsvpStatus() string {
	if m != nil && m.RsvpStatus != nil {
		return *m.RsvpStatus
	}
	return ""
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceList) GetAuthenticationFlag() string {
	if m != nil && m.AuthenticationFlag != nil {
		return *m.AuthenticationFlag
	}
	return ""
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceList) GetAggregateFlag() string {
	if m != nil && m.AggregateFlag != nil {
		return *m.AggregateFlag
	}
	return ""
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceList) GetAckFlag() string {
	if m != nil && m.AckFlag != nil {
		return *m.AckFlag
	}
	return ""
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceList) GetProtectFlag() string {
	if m != nil && m.ProtectFlag != nil {
		return *m.ProtectFlag
	}
	return ""
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceList) GetHelloInterval() uint32 {
	if m != nil && m.HelloInterval != nil {
		return *m.HelloInterval
	}
	return 0
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceList) GetInterfaceAddress() string {
	if m != nil && m.InterfaceAddress != nil {
		return *m.InterfaceAddress
	}
	return ""
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceList) GetMessageStatistics() []*JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListMessageStatisticsList {
	if m != nil {
		return m.MessageStatistics
	}
	return nil
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceList) GetRsvpTelink() *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkType {
	if m != nil {
		return m.RsvpTelink
	}
	return nil
}

type JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListMessageStatisticsList struct {
	RsvpMessage               *string  `protobuf:"bytes,51,opt,name=rsvp_message,json=rsvpMessage" json:"rsvp_message,omitempty"`
	MessagesSent              *uint32  `protobuf:"varint,52,opt,name=messages_sent,json=messagesSent" json:"messages_sent,omitempty"`
	MessagesReceived          *uint32  `protobuf:"varint,53,opt,name=messages_received,json=messagesReceived" json:"messages_received,omitempty"`
	MessagesSent_5Seconds     *uint32  `protobuf:"varint,54,opt,name=messages_sent_5seconds,json=messagesSent5seconds" json:"messages_sent_5seconds,omitempty"`
	MessagesReceived_5Seconds *uint32  `protobuf:"varint,55,opt,name=messages_received_5seconds,json=messagesReceived5seconds" json:"messages_received_5seconds,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListMessageStatisticsList) Reset() {
	*m = JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListMessageStatisticsList{}
}
func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListMessageStatisticsList) String() string {
	return proto.CompactTextString(m)
}
func (*JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListMessageStatisticsList) ProtoMessage() {
}
func (*JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListMessageStatisticsList) Descriptor() ([]byte, []int) {
	return fileDescriptor_df4225f46c0f8328, []int{0, 0, 0, 0}
}
func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListMessageStatisticsList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListMessageStatisticsList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListMessageStatisticsList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListMessageStatisticsList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListMessageStatisticsList.Merge(m, src)
}
func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListMessageStatisticsList) XXX_Size() int {
	return m.Size()
}
func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListMessageStatisticsList) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListMessageStatisticsList.DiscardUnknown(m)
}

var xxx_messageInfo_JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListMessageStatisticsList proto.InternalMessageInfo

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListMessageStatisticsList) GetRsvpMessage() string {
	if m != nil && m.RsvpMessage != nil {
		return *m.RsvpMessage
	}
	return ""
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListMessageStatisticsList) GetMessagesSent() uint32 {
	if m != nil && m.MessagesSent != nil {
		return *m.MessagesSent
	}
	return 0
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListMessageStatisticsList) GetMessagesReceived() uint32 {
	if m != nil && m.MessagesReceived != nil {
		return *m.MessagesReceived
	}
	return 0
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListMessageStatisticsList) GetMessagesSent_5Seconds() uint32 {
	if m != nil && m.MessagesSent_5Seconds != nil {
		return *m.MessagesSent_5Seconds
	}
	return 0
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListMessageStatisticsList) GetMessagesReceived_5Seconds() uint32 {
	if m != nil && m.MessagesReceived_5Seconds != nil {
		return *m.MessagesReceived_5Seconds
	}
	return 0
}

type JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkType struct {
	ActiveReservation    *uint32                                                                                               `protobuf:"varint,51,opt,name=active_reservation,json=activeReservation" json:"active_reservation,omitempty"`
	PreemptionCount      *uint32                                                                                               `protobuf:"varint,52,opt,name=preemption_count,json=preemptionCount" json:"preemption_count,omitempty"`
	UpdateThreshold      *uint32                                                                                               `protobuf:"varint,53,opt,name=update_threshold,json=updateThreshold" json:"update_threshold,omitempty"`
	Subscription         *uint32                                                                                               `protobuf:"varint,54,opt,name=subscription" json:"subscription,omitempty"`
	StaticBandwidth      *string                                                                                               `protobuf:"bytes,55,opt,name=static_bandwidth,json=staticBandwidth" json:"static_bandwidth,omitempty"`
	AvailableBandwidth   *string                                                                                               `protobuf:"bytes,56,opt,name=available_bandwidth,json=availableBandwidth" json:"available_bandwidth,omitempty"`
	ReservedBandwidth    []*JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkTypeReservedBandwidthList `protobuf:"bytes,151,rep,name=reserved_bandwidth,json=reservedBandwidth" json:"reserved_bandwidth,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                                              `json:"-"`
	XXX_unrecognized     []byte                                                                                                `json:"-"`
	XXX_sizecache        int32                                                                                                 `json:"-"`
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkType) Reset() {
	*m = JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkType{}
}
func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkType) String() string {
	return proto.CompactTextString(m)
}
func (*JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkType) ProtoMessage() {
}
func (*JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkType) Descriptor() ([]byte, []int) {
	return fileDescriptor_df4225f46c0f8328, []int{0, 0, 0, 1}
}
func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkType.Merge(m, src)
}
func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkType) XXX_Size() int {
	return m.Size()
}
func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkType proto.InternalMessageInfo

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkType) GetActiveReservation() uint32 {
	if m != nil && m.ActiveReservation != nil {
		return *m.ActiveReservation
	}
	return 0
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkType) GetPreemptionCount() uint32 {
	if m != nil && m.PreemptionCount != nil {
		return *m.PreemptionCount
	}
	return 0
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkType) GetUpdateThreshold() uint32 {
	if m != nil && m.UpdateThreshold != nil {
		return *m.UpdateThreshold
	}
	return 0
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkType) GetSubscription() uint32 {
	if m != nil && m.Subscription != nil {
		return *m.Subscription
	}
	return 0
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkType) GetStaticBandwidth() string {
	if m != nil && m.StaticBandwidth != nil {
		return *m.StaticBandwidth
	}
	return ""
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkType) GetAvailableBandwidth() string {
	if m != nil && m.AvailableBandwidth != nil {
		return *m.AvailableBandwidth
	}
	return ""
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkType) GetReservedBandwidth() []*JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkTypeReservedBandwidthList {
	if m != nil {
		return m.ReservedBandwidth
	}
	return nil
}

type JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkTypeReservedBandwidthList struct {
	BandwidthPriority      *uint32  `protobuf:"varint,51,opt,name=bandwidth_priority,json=bandwidthPriority" json:"bandwidth_priority,omitempty"`
	TotalReservedBandwidth *string  `protobuf:"bytes,52,opt,name=total_reserved_bandwidth,json=totalReservedBandwidth" json:"total_reserved_bandwidth,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkTypeReservedBandwidthList) Reset() {
	*m = JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkTypeReservedBandwidthList{}
}
func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkTypeReservedBandwidthList) String() string {
	return proto.CompactTextString(m)
}
func (*JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkTypeReservedBandwidthList) ProtoMessage() {
}
func (*JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkTypeReservedBandwidthList) Descriptor() ([]byte, []int) {
	return fileDescriptor_df4225f46c0f8328, []int{0, 0, 0, 1, 0}
}
func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkTypeReservedBandwidthList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkTypeReservedBandwidthList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkTypeReservedBandwidthList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkTypeReservedBandwidthList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkTypeReservedBandwidthList.Merge(m, src)
}
func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkTypeReservedBandwidthList) XXX_Size() int {
	return m.Size()
}
func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkTypeReservedBandwidthList) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkTypeReservedBandwidthList.DiscardUnknown(m)
}

var xxx_messageInfo_JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkTypeReservedBandwidthList proto.InternalMessageInfo

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkTypeReservedBandwidthList) GetBandwidthPriority() uint32 {
	if m != nil && m.BandwidthPriority != nil {
		return *m.BandwidthPriority
	}
	return 0
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkTypeReservedBandwidthList) GetTotalReservedBandwidth() string {
	if m != nil && m.TotalReservedBandwidth != nil {
		return *m.TotalReservedBandwidth
	}
	return ""
}

var E_JnprJunosRsvpInterfaceExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*JunosRsvpInterface)(nil),
	Field:         46,
	Name:          "jnpr_junos_rsvp_interface_ext",
	Tag:           "bytes,46,opt,name=jnpr_junos_rsvp_interface_ext",
	Filename:      "junos-xmlproxyd_junos-rsvp-interface.proto",
}

func init() {
	proto.RegisterType((*JunosRsvpInterface)(nil), "junos_rsvp_interface")
	proto.RegisterType((*JunosRsvpInterfaceRsvpInterfaceInformationType)(nil), "junos_rsvp_interface.rsvp_interface_information_type")
	proto.RegisterType((*JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceList)(nil), "junos_rsvp_interface.rsvp_interface_information_type.rsvp_interface_list")
	proto.RegisterType((*JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListMessageStatisticsList)(nil), "junos_rsvp_interface.rsvp_interface_information_type.rsvp_interface_list.message_statistics_list")
	proto.RegisterType((*JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkType)(nil), "junos_rsvp_interface.rsvp_interface_information_type.rsvp_interface_list.rsvp_telink_type")
	proto.RegisterType((*JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkTypeReservedBandwidthList)(nil), "junos_rsvp_interface.rsvp_interface_information_type.rsvp_interface_list.rsvp_telink_type.reserved_bandwidth_list")
	proto.RegisterExtension(E_JnprJunosRsvpInterfaceExt)
}

func init() {
	proto.RegisterFile("junos-xmlproxyd_junos-rsvp-interface.proto", fileDescriptor_df4225f46c0f8328)
}

var fileDescriptor_df4225f46c0f8328 = []byte{
	// 856 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xcd, 0x6f, 0x1b, 0x45,
	0x14, 0xd7, 0x16, 0x2a, 0xca, 0xb3, 0x37, 0x71, 0x26, 0xa1, 0xd9, 0x5a, 0x22, 0xfd, 0x40, 0x48,
	0x29, 0x60, 0x5b, 0x2a, 0x09, 0x0d, 0x85, 0x03, 0x04, 0x81, 0x94, 0x4a, 0x54, 0x68, 0xd3, 0x53,
	0x2f, 0xcb, 0x78, 0xf7, 0x65, 0x3d, 0xf1, 0x7a, 0x66, 0x99, 0x79, 0x76, 0x1d, 0x89, 0x13, 0x17,
	0xd4, 0x23, 0x17, 0xe0, 0xcc, 0x5f, 0xd3, 0x0b, 0x12, 0x7f, 0x02, 0xca, 0x5f, 0x82, 0x66, 0x66,
	0xd7, 0x1f, 0x89, 0x23, 0x24, 0x14, 0x8e, 0xfb, 0xfb, 0x78, 0xf3, 0xe6, 0x7d, 0xcc, 0xc2, 0x07,
	0xa7, 0x63, 0xa9, 0x4c, 0x67, 0x3a, 0x2a, 0x4a, 0xad, 0xa6, 0x67, 0x59, 0xe2, 0xbf, 0xb5, 0x99,
	0x94, 0x1d, 0x21, 0x09, 0xf5, 0x09, 0x4f, 0xb1, 0x5b, 0x6a, 0x45, 0xaa, 0xbd, 0x49, 0x58, 0xe0,
	0x08, 0x49, 0x9f, 0x25, 0xa4, 0x4a, 0x0f, 0x3e, 0xf8, 0x75, 0x0d, 0xb6, 0x9c, 0x27, 0xb1, 0x9e,
	0x64, 0xe6, 0x61, 0x04, 0xed, 0x65, 0x24, 0x11, 0xf2, 0x44, 0xe9, 0x11, 0x27, 0xa1, 0x64, 0xf4,
	0x5b, 0x70, 0x2f, 0xd8, 0x6d, 0x3c, 0xda, 0xef, 0xae, 0xf2, 0x76, 0xaf, 0x36, 0x26, 0x74, 0x56,
	0x62, 0x1c, 0x59, 0xc1, 0x51, 0xcd, 0x1f, 0xcd, 0xe9, 0xf6, 0xcf, 0x21, 0xdc, 0xfd, 0x17, 0x37,
	0xbb, 0x0f, 0x4d, 0x9e, 0x92, 0x98, 0x60, 0x92, 0xaa, 0xb1, 0xa4, 0xe8, 0xe3, 0x7b, 0xc1, 0x6e,
	0x18, 0x37, 0x3c, 0xf6, 0x95, 0x85, 0xd8, 0x0f, 0xb0, 0xb6, 0x1c, 0xc5, 0x26, 0xfc, 0xc6, 0x6e,
	0xe3, 0xd1, 0xd1, 0x7f, 0x4a, 0xf8, 0x22, 0x5f, 0x08, 0x43, 0x71, 0xb8, 0x74, 0x89, 0xf6, 0x9f,
	0x0d, 0xd8, 0x5c, 0x21, 0x63, 0x1f, 0xc1, 0xda, 0x1c, 0x91, 0x7c, 0x84, 0x2e, 0xdf, 0xb7, 0x0f,
	0x6f, 0xfe, 0xf4, 0xc5, 0x8d, 0x5b, 0x41, 0x1c, 0xce, 0xc8, 0x67, 0x7c, 0x84, 0x6c, 0x0b, 0x6e,
	0x0a, 0x99, 0xe1, 0x34, 0xda, 0x73, 0x97, 0xf2, 0x1f, 0xec, 0x2e, 0x34, 0x5c, 0x68, 0x43, 0x9c,
	0xc6, 0x26, 0xda, 0xb7, 0x01, 0x62, 0xb0, 0xd0, 0xb1, 0x43, 0x58, 0x0f, 0x36, 0xf9, 0x98, 0x06,
	0x28, 0x49, 0xa4, 0x3e, 0xed, 0x93, 0x82, 0xe7, 0xd1, 0x27, 0x4e, 0xc8, 0x96, 0xa9, 0x6f, 0x0a,
	0x9e, 0xb3, 0xf7, 0x61, 0x8d, 0xe7, 0xb9, 0xc6, 0x9c, 0x13, 0x7a, 0xed, 0x63, 0xa7, 0x0d, 0x67,
	0xa8, 0x93, 0xdd, 0x81, 0x5b, 0x3c, 0x1d, 0x7a, 0xc1, 0x81, 0x13, 0xbc, 0xc5, 0xd3, 0xa1, 0xa3,
	0xee, 0x43, 0xd3, 0x4e, 0x10, 0xa6, 0xe4, 0xe9, 0x4f, 0x1d, 0xdd, 0xa8, 0xb0, 0xfa, 0x90, 0x01,
	0x16, 0x85, 0xf2, 0x25, 0x99, 0xf0, 0x22, 0x7a, 0xe2, 0x6e, 0x15, 0x3a, 0xf4, 0xa8, 0x02, 0xd9,
	0x87, 0xb0, 0x31, 0xaf, 0x10, 0xcf, 0x32, 0x8d, 0xc6, 0x44, 0x9f, 0xb9, 0x70, 0xad, 0x19, 0xf1,
	0xa5, 0xc7, 0xd9, 0x2f, 0x01, 0xb0, 0x11, 0x1a, 0xc3, 0x73, 0x74, 0xe5, 0x10, 0x86, 0x44, 0x6a,
	0xea, 0xf6, 0xf2, 0x6b, 0x6b, 0x6f, 0xf7, 0xf2, 0x21, 0xbe, 0xed, 0x1b, 0x15, 0x71, 0x3c, 0xc3,
	0xd9, 0x8f, 0x55, 0x7b, 0x08, 0x0b, 0x21, 0x87, 0xd1, 0xef, 0x7e, 0x37, 0x5e, 0x5c, 0x5f, 0x2e,
	0x0b, 0xd1, 0xfd, 0x02, 0xb9, 0xde, 0x3f, 0x77, 0x40, 0xfb, 0xd5, 0x0d, 0xd8, 0xbe, 0x22, 0x59,
	0xb6, 0x0b, 0x4d, 0xe7, 0xad, 0xf8, 0xe5, 0xd1, 0x73, 0x49, 0x7f, 0xeb, 0x19, 0xf6, 0x1e, 0x84,
	0x95, 0xc8, 0x24, 0x06, 0x25, 0x55, 0x03, 0xd8, 0xac, 0xc1, 0x63, 0x94, 0x64, 0x3b, 0x35, 0x13,
	0x69, 0x4c, 0x51, 0x4c, 0x30, 0x73, 0xd3, 0x18, 0xc6, 0xad, 0x9a, 0x88, 0x2b, 0x9c, 0xed, 0xc1,
	0xed, 0xa5, 0x88, 0xc9, 0xbe, 0xc1, 0x54, 0xc9, 0xcc, 0xb8, 0xb1, 0x0c, 0xe3, 0xad, 0xc5, 0xd0,
	0x35, 0xc7, 0x3e, 0x87, 0xf6, 0xa5, 0x23, 0xe6, 0xce, 0xc7, 0xce, 0x19, 0x5d, 0x3c, 0xab, 0xe6,
	0xdb, 0xaf, 0xdf, 0x84, 0xd6, 0xc5, 0x62, 0xb1, 0x0e, 0xb0, 0xea, 0xbd, 0xd0, 0x68, 0xec, 0xc8,
	0xb9, 0x17, 0xcc, 0xbf, 0x1a, 0x1b, 0x9e, 0x89, 0xe7, 0x04, 0x7b, 0x08, 0xad, 0x52, 0x23, 0x8e,
	0x4a, 0xd7, 0x13, 0xff, 0xc4, 0xf8, 0x62, 0xac, 0xcf, 0x71, 0xff, 0xcc, 0x3c, 0x84, 0xd6, 0xb8,
	0xcc, 0xec, 0x0a, 0xd1, 0x40, 0xa3, 0x19, 0xa8, 0xa2, 0x2e, 0xc7, 0xba, 0xc7, 0x9f, 0xd7, 0x30,
	0x7b, 0x00, 0x4d, 0x33, 0xee, 0x9b, 0x54, 0x0b, 0xe7, 0xaf, 0x6a, 0xb0, 0x84, 0xd9, 0x70, 0xae,
	0x81, 0x69, 0xd2, 0xe7, 0x32, 0x7b, 0x29, 0x32, 0x1a, 0x54, 0x6b, 0xb9, 0xee, 0xf1, 0xc3, 0x1a,
	0x76, 0x0b, 0x3f, 0xe1, 0xa2, 0xe0, 0xfd, 0x02, 0x17, 0xd4, 0x07, 0xd5, 0xc2, 0xd7, 0xd4, 0xdc,
	0xf0, 0x47, 0x00, 0xcc, 0x5f, 0x1f, 0xb3, 0x05, 0x43, 0xb5, 0x37, 0xfa, 0xff, 0x9b, 0xd5, 0xee,
	0xe5, 0x53, 0xab, 0x45, 0xaa, 0x89, 0x59, 0x92, 0xed, 0x57, 0x01, 0x6c, 0x5f, 0x21, 0x67, 0x7b,
	0xc0, 0xe6, 0x48, 0xa9, 0x85, 0xd2, 0x82, 0xce, 0x7c, 0x17, 0xeb, 0x81, 0xde, 0x98, 0x09, 0xbe,
	0xab, 0x78, 0x76, 0x00, 0x11, 0x29, 0xe2, 0x45, 0xb2, 0xe2, 0xee, 0x7b, 0xae, 0x58, 0xb7, 0x1d,
	0x1f, 0x5f, 0xcc, 0xe5, 0x49, 0x09, 0xef, 0x9e, 0xca, 0x52, 0x27, 0xab, 0x0a, 0x93, 0xe0, 0x94,
	0xd8, 0x76, 0xf7, 0xe9, 0x58, 0x8a, 0x12, 0xf5, 0x33, 0xa4, 0x97, 0x4a, 0x0f, 0xed, 0x1c, 0x1b,
	0xa5, 0x4d, 0xd4, 0x75, 0xeb, 0xff, 0xce, 0xca, 0x92, 0xc6, 0x77, 0x6c, 0xd0, 0xa7, 0x96, 0x89,
	0x17, 0x7f, 0x1f, 0x5f, 0x4f, 0xe9, 0xf0, 0xfb, 0xd7, 0xe7, 0x3b, 0xc1, 0x5f, 0xe7, 0x3b, 0xc1,
	0xdf, 0xe7, 0x3b, 0xc1, 0x8b, 0x38, 0x17, 0x64, 0x43, 0xd8, 0x13, 0xba, 0x12, 0xa9, 0x27, 0x52,
	0xec, 0xa3, 0xce, 0x7b, 0x03, 0xe4, 0x05, 0x0d, 0xfa, 0x8a, 0x3a, 0x42, 0xe6, 0x68, 0xa8, 0x73,
	0x4a, 0xa2, 0x23, 0xb9, 0x1d, 0xe3, 0x5e, 0x39, 0xcc, 0x7b, 0xa7, 0x24, 0x7a, 0x3c, 0xe3, 0x25,
	0xa1, 0x36, 0x3d, 0x9f, 0x7e, 0xcf, 0xa4, 0x03, 0x1c, 0xf1, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x31, 0xd6, 0x71, 0x08, 0x2e, 0x08, 0x00, 0x00,
}

func (m *JunosRsvpInterface) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosRsvpInterface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosRsvpInterface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RsvpInterfaceInformation != nil {
		{
			size, err := m.RsvpInterfaceInformation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJunosXmlproxydJunosRsvpInterface(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RsvpInterface) > 0 {
		for iNdEx := len(m.RsvpInterface) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RsvpInterface[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintJunosXmlproxydJunosRsvpInterface(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	if m.ActiveCount != nil {
		i = encodeVarintJunosXmlproxydJunosRsvpInterface(dAtA, i, uint64(*m.ActiveCount))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RsvpTelink != nil {
		{
			size, err := m.RsvpTelink.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJunosXmlproxydJunosRsvpInterface(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xc2
	}
	if len(m.MessageStatistics) > 0 {
		for iNdEx := len(m.MessageStatistics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MessageStatistics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintJunosXmlproxydJunosRsvpInterface(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	if m.InterfaceAddress != nil {
		i -= len(*m.InterfaceAddress)
		copy(dAtA[i:], *m.InterfaceAddress)
		i = encodeVarintJunosXmlproxydJunosRsvpInterface(dAtA, i, uint64(len(*m.InterfaceAddress)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xda
	}
	if m.HelloInterval != nil {
		i = encodeVarintJunosXmlproxydJunosRsvpInterface(dAtA, i, uint64(*m.HelloInterval))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd0
	}
	if m.ProtectFlag != nil {
		i -= len(*m.ProtectFlag)
		copy(dAtA[i:], *m.ProtectFlag)
		i = encodeVarintJunosXmlproxydJunosRsvpInterface(dAtA, i, uint64(len(*m.ProtectFlag)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	if m.AckFlag != nil {
		i -= len(*m.AckFlag)
		copy(dAtA[i:], *m.AckFlag)
		i = encodeVarintJunosXmlproxydJunosRsvpInterface(dAtA, i, uint64(len(*m.AckFlag)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc2
	}
	if m.AggregateFlag != nil {
		i -= len(*m.AggregateFlag)
		copy(dAtA[i:], *m.AggregateFlag)
		i = encodeVarintJunosXmlproxydJunosRsvpInterface(dAtA, i, uint64(len(*m.AggregateFlag)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	if m.AuthenticationFlag != nil {
		i -= len(*m.AuthenticationFlag)
		copy(dAtA[i:], *m.AuthenticationFlag)
		i = encodeVarintJunosXmlproxydJunosRsvpInterface(dAtA, i, uint64(len(*m.AuthenticationFlag)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	if m.RsvpStatus != nil {
		i -= len(*m.RsvpStatus)
		copy(dAtA[i:], *m.RsvpStatus)
		i = encodeVarintJunosXmlproxydJunosRsvpInterface(dAtA, i, uint64(len(*m.RsvpStatus)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	if m.Index != nil {
		i = encodeVarintJunosXmlproxydJunosRsvpInterface(dAtA, i, uint64(*m.Index))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.InterfaceName != nil {
		i -= len(*m.InterfaceName)
		copy(dAtA[i:], *m.InterfaceName)
		i = encodeVarintJunosXmlproxydJunosRsvpInterface(dAtA, i, uint64(len(*m.InterfaceName)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListMessageStatisticsList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListMessageStatisticsList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListMessageStatisticsList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MessagesReceived_5Seconds != nil {
		i = encodeVarintJunosXmlproxydJunosRsvpInterface(dAtA, i, uint64(*m.MessagesReceived_5Seconds))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.MessagesSent_5Seconds != nil {
		i = encodeVarintJunosXmlproxydJunosRsvpInterface(dAtA, i, uint64(*m.MessagesSent_5Seconds))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.MessagesReceived != nil {
		i = encodeVarintJunosXmlproxydJunosRsvpInterface(dAtA, i, uint64(*m.MessagesReceived))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.MessagesSent != nil {
		i = encodeVarintJunosXmlproxydJunosRsvpInterface(dAtA, i, uint64(*m.MessagesSent))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.RsvpMessage != nil {
		i -= len(*m.RsvpMessage)
		copy(dAtA[i:], *m.RsvpMessage)
		i = encodeVarintJunosXmlproxydJunosRsvpInterface(dAtA, i, uint64(len(*m.RsvpMessage)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ReservedBandwidth) > 0 {
		for iNdEx := len(m.ReservedBandwidth) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReservedBandwidth[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintJunosXmlproxydJunosRsvpInterface(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	if m.AvailableBandwidth != nil {
		i -= len(*m.AvailableBandwidth)
		copy(dAtA[i:], *m.AvailableBandwidth)
		i = encodeVarintJunosXmlproxydJunosRsvpInterface(dAtA, i, uint64(len(*m.AvailableBandwidth)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc2
	}
	if m.StaticBandwidth != nil {
		i -= len(*m.StaticBandwidth)
		copy(dAtA[i:], *m.StaticBandwidth)
		i = encodeVarintJunosXmlproxydJunosRsvpInterface(dAtA, i, uint64(len(*m.StaticBandwidth)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	if m.Subscription != nil {
		i = encodeVarintJunosXmlproxydJunosRsvpInterface(dAtA, i, uint64(*m.Subscription))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.UpdateThreshold != nil {
		i = encodeVarintJunosXmlproxydJunosRsvpInterface(dAtA, i, uint64(*m.UpdateThreshold))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.PreemptionCount != nil {
		i = encodeVarintJunosXmlproxydJunosRsvpInterface(dAtA, i, uint64(*m.PreemptionCount))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.ActiveReservation != nil {
		i = encodeVarintJunosXmlproxydJunosRsvpInterface(dAtA, i, uint64(*m.ActiveReservation))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkTypeReservedBandwidthList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkTypeReservedBandwidthList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkTypeReservedBandwidthList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TotalReservedBandwidth != nil {
		i -= len(*m.TotalReservedBandwidth)
		copy(dAtA[i:], *m.TotalReservedBandwidth)
		i = encodeVarintJunosXmlproxydJunosRsvpInterface(dAtA, i, uint64(len(*m.TotalReservedBandwidth)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	if m.BandwidthPriority != nil {
		i = encodeVarintJunosXmlproxydJunosRsvpInterface(dAtA, i, uint64(*m.BandwidthPriority))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func encodeVarintJunosXmlproxydJunosRsvpInterface(dAtA []byte, offset int, v uint64) int {
	offset -= sovJunosXmlproxydJunosRsvpInterface(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *JunosRsvpInterface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RsvpInterfaceInformation != nil {
		l = m.RsvpInterfaceInformation.Size()
		n += 2 + l + sovJunosXmlproxydJunosRsvpInterface(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveCount != nil {
		n += 2 + sovJunosXmlproxydJunosRsvpInterface(uint64(*m.ActiveCount))
	}
	if len(m.RsvpInterface) > 0 {
		for _, e := range m.RsvpInterface {
			l = e.Size()
			n += 2 + l + sovJunosXmlproxydJunosRsvpInterface(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InterfaceName != nil {
		l = len(*m.InterfaceName)
		n += 2 + l + sovJunosXmlproxydJunosRsvpInterface(uint64(l))
	}
	if m.Index != nil {
		n += 2 + sovJunosXmlproxydJunosRsvpInterface(uint64(*m.Index))
	}
	if m.RsvpStatus != nil {
		l = len(*m.RsvpStatus)
		n += 2 + l + sovJunosXmlproxydJunosRsvpInterface(uint64(l))
	}
	if m.AuthenticationFlag != nil {
		l = len(*m.AuthenticationFlag)
		n += 2 + l + sovJunosXmlproxydJunosRsvpInterface(uint64(l))
	}
	if m.AggregateFlag != nil {
		l = len(*m.AggregateFlag)
		n += 2 + l + sovJunosXmlproxydJunosRsvpInterface(uint64(l))
	}
	if m.AckFlag != nil {
		l = len(*m.AckFlag)
		n += 2 + l + sovJunosXmlproxydJunosRsvpInterface(uint64(l))
	}
	if m.ProtectFlag != nil {
		l = len(*m.ProtectFlag)
		n += 2 + l + sovJunosXmlproxydJunosRsvpInterface(uint64(l))
	}
	if m.HelloInterval != nil {
		n += 2 + sovJunosXmlproxydJunosRsvpInterface(uint64(*m.HelloInterval))
	}
	if m.InterfaceAddress != nil {
		l = len(*m.InterfaceAddress)
		n += 2 + l + sovJunosXmlproxydJunosRsvpInterface(uint64(l))
	}
	if len(m.MessageStatistics) > 0 {
		for _, e := range m.MessageStatistics {
			l = e.Size()
			n += 2 + l + sovJunosXmlproxydJunosRsvpInterface(uint64(l))
		}
	}
	if m.RsvpTelink != nil {
		l = m.RsvpTelink.Size()
		n += 2 + l + sovJunosXmlproxydJunosRsvpInterface(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListMessageStatisticsList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RsvpMessage != nil {
		l = len(*m.RsvpMessage)
		n += 2 + l + sovJunosXmlproxydJunosRsvpInterface(uint64(l))
	}
	if m.MessagesSent != nil {
		n += 2 + sovJunosXmlproxydJunosRsvpInterface(uint64(*m.MessagesSent))
	}
	if m.MessagesReceived != nil {
		n += 2 + sovJunosXmlproxydJunosRsvpInterface(uint64(*m.MessagesReceived))
	}
	if m.MessagesSent_5Seconds != nil {
		n += 2 + sovJunosXmlproxydJunosRsvpInterface(uint64(*m.MessagesSent_5Seconds))
	}
	if m.MessagesReceived_5Seconds != nil {
		n += 2 + sovJunosXmlproxydJunosRsvpInterface(uint64(*m.MessagesReceived_5Seconds))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveReservation != nil {
		n += 2 + sovJunosXmlproxydJunosRsvpInterface(uint64(*m.ActiveReservation))
	}
	if m.PreemptionCount != nil {
		n += 2 + sovJunosXmlproxydJunosRsvpInterface(uint64(*m.PreemptionCount))
	}
	if m.UpdateThreshold != nil {
		n += 2 + sovJunosXmlproxydJunosRsvpInterface(uint64(*m.UpdateThreshold))
	}
	if m.Subscription != nil {
		n += 2 + sovJunosXmlproxydJunosRsvpInterface(uint64(*m.Subscription))
	}
	if m.StaticBandwidth != nil {
		l = len(*m.StaticBandwidth)
		n += 2 + l + sovJunosXmlproxydJunosRsvpInterface(uint64(l))
	}
	if m.AvailableBandwidth != nil {
		l = len(*m.AvailableBandwidth)
		n += 2 + l + sovJunosXmlproxydJunosRsvpInterface(uint64(l))
	}
	if len(m.ReservedBandwidth) > 0 {
		for _, e := range m.ReservedBandwidth {
			l = e.Size()
			n += 2 + l + sovJunosXmlproxydJunosRsvpInterface(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkTypeReservedBandwidthList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BandwidthPriority != nil {
		n += 2 + sovJunosXmlproxydJunosRsvpInterface(uint64(*m.BandwidthPriority))
	}
	if m.TotalReservedBandwidth != nil {
		l = len(*m.TotalReservedBandwidth)
		n += 2 + l + sovJunosXmlproxydJunosRsvpInterface(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovJunosXmlproxydJunosRsvpInterface(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozJunosXmlproxydJunosRsvpInterface(x uint64) (n int) {
	return sovJunosXmlproxydJunosRsvpInterface(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *JunosRsvpInterface) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJunosXmlproxydJunosRsvpInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: junos_rsvp_interface: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: junos_rsvp_interface: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RsvpInterfaceInformation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJunosXmlproxydJunosRsvpInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RsvpInterfaceInformation == nil {
				m.RsvpInterfaceInformation = &JunosRsvpInterfaceRsvpInterfaceInformationType{}
			}
			if err := m.RsvpInterfaceInformation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJunosXmlproxydJunosRsvpInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosRsvpInterfaceRsvpInterfaceInformationType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJunosXmlproxydJunosRsvpInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: rsvp_interface_information_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: rsvp_interface_information_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveCount", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJunosXmlproxydJunosRsvpInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActiveCount = &v
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RsvpInterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJunosXmlproxydJunosRsvpInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RsvpInterface = append(m.RsvpInterface, &JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceList{})
			if err := m.RsvpInterface[len(m.RsvpInterface)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJunosXmlproxydJunosRsvpInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJunosXmlproxydJunosRsvpInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: rsvp_interface_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: rsvp_interface_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJunosXmlproxydJunosRsvpInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.InterfaceName = &s
			iNdEx = postIndex
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJunosXmlproxydJunosRsvpInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Index = &v
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RsvpStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJunosXmlproxydJunosRsvpInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RsvpStatus = &s
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationFlag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJunosXmlproxydJunosRsvpInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AuthenticationFlag = &s
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregateFlag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJunosXmlproxydJunosRsvpInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AggregateFlag = &s
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckFlag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJunosXmlproxydJunosRsvpInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AckFlag = &s
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtectFlag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJunosXmlproxydJunosRsvpInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProtectFlag = &s
			iNdEx = postIndex
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelloInterval", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJunosXmlproxydJunosRsvpInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HelloInterval = &v
		case 59:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJunosXmlproxydJunosRsvpInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.InterfaceAddress = &s
			iNdEx = postIndex
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageStatistics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJunosXmlproxydJunosRsvpInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageStatistics = append(m.MessageStatistics, &JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListMessageStatisticsList{})
			if err := m.MessageStatistics[len(m.MessageStatistics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 152:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RsvpTelink", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJunosXmlproxydJunosRsvpInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RsvpTelink == nil {
				m.RsvpTelink = &JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkType{}
			}
			if err := m.RsvpTelink.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJunosXmlproxydJunosRsvpInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListMessageStatisticsList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJunosXmlproxydJunosRsvpInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: message_statistics_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: message_statistics_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RsvpMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJunosXmlproxydJunosRsvpInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RsvpMessage = &s
			iNdEx = postIndex
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessagesSent", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJunosXmlproxydJunosRsvpInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MessagesSent = &v
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessagesReceived", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJunosXmlproxydJunosRsvpInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MessagesReceived = &v
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessagesSent_5Seconds", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJunosXmlproxydJunosRsvpInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MessagesSent_5Seconds = &v
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessagesReceived_5Seconds", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJunosXmlproxydJunosRsvpInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MessagesReceived_5Seconds = &v
		default:
			iNdEx = preIndex
			skippy, err := skipJunosXmlproxydJunosRsvpInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJunosXmlproxydJunosRsvpInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: rsvp_telink_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: rsvp_telink_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveReservation", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJunosXmlproxydJunosRsvpInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActiveReservation = &v
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreemptionCount", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJunosXmlproxydJunosRsvpInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PreemptionCount = &v
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateThreshold", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJunosXmlproxydJunosRsvpInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateThreshold = &v
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscription", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJunosXmlproxydJunosRsvpInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Subscription = &v
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticBandwidth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJunosXmlproxydJunosRsvpInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.StaticBandwidth = &s
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableBandwidth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJunosXmlproxydJunosRsvpInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AvailableBandwidth = &s
			iNdEx = postIndex
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservedBandwidth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJunosXmlproxydJunosRsvpInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReservedBandwidth = append(m.ReservedBandwidth, &JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkTypeReservedBandwidthList{})
			if err := m.ReservedBandwidth[len(m.ReservedBandwidth)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJunosXmlproxydJunosRsvpInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosRsvpInterfaceRsvpInterfaceInformationTypeRsvpInterfaceListRsvpTelinkTypeReservedBandwidthList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJunosXmlproxydJunosRsvpInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: reserved_bandwidth_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: reserved_bandwidth_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BandwidthPriority", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJunosXmlproxydJunosRsvpInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BandwidthPriority = &v
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalReservedBandwidth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJunosXmlproxydJunosRsvpInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TotalReservedBandwidth = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJunosXmlproxydJunosRsvpInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipJunosXmlproxydJunosRsvpInterface(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowJunosXmlproxydJunosRsvpInterface
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJunosXmlproxydJunosRsvpInterface
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJunosXmlproxydJunosRsvpInterface
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupJunosXmlproxydJunosRsvpInterface
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthJunosXmlproxydJunosRsvpInterface
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthJunosXmlproxydJunosRsvpInterface        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowJunosXmlproxydJunosRsvpInterface          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupJunosXmlproxydJunosRsvpInterface = fmt.Errorf("proto: unexpected end of group")
)
