// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: l2ald_bd_render.proto

package schema

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NetworkInstancesBridgeDomain struct {
	NetworkInstance      []*NetworkInstancesBridgeDomainNetworkInstanceList `protobuf:"bytes,151,rep,name=network_instance,json=networkInstance" json:"network_instance,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_unrecognized     []byte                                             `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *NetworkInstancesBridgeDomain) Reset()         { *m = NetworkInstancesBridgeDomain{} }
func (m *NetworkInstancesBridgeDomain) String() string { return proto.CompactTextString(m) }
func (*NetworkInstancesBridgeDomain) ProtoMessage()    {}
func (*NetworkInstancesBridgeDomain) Descriptor() ([]byte, []int) {
	return fileDescriptor_90265904e384351a, []int{0}
}
func (m *NetworkInstancesBridgeDomain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkInstancesBridgeDomain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkInstancesBridgeDomain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkInstancesBridgeDomain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInstancesBridgeDomain.Merge(m, src)
}
func (m *NetworkInstancesBridgeDomain) XXX_Size() int {
	return m.Size()
}
func (m *NetworkInstancesBridgeDomain) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInstancesBridgeDomain.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInstancesBridgeDomain proto.InternalMessageInfo

func (m *NetworkInstancesBridgeDomain) GetNetworkInstance() []*NetworkInstancesBridgeDomainNetworkInstanceList {
	if m != nil {
		return m.NetworkInstance
	}
	return nil
}

type NetworkInstancesBridgeDomainNetworkInstanceList struct {
	Name                 *string                                                    `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	Vlan                 []*NetworkInstancesBridgeDomainNetworkInstanceListVlanList `protobuf:"bytes,151,rep,name=vlan" json:"vlan,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                   `json:"-"`
	XXX_unrecognized     []byte                                                     `json:"-"`
	XXX_sizecache        int32                                                      `json:"-"`
}

func (m *NetworkInstancesBridgeDomainNetworkInstanceList) Reset() {
	*m = NetworkInstancesBridgeDomainNetworkInstanceList{}
}
func (m *NetworkInstancesBridgeDomainNetworkInstanceList) String() string {
	return proto.CompactTextString(m)
}
func (*NetworkInstancesBridgeDomainNetworkInstanceList) ProtoMessage() {}
func (*NetworkInstancesBridgeDomainNetworkInstanceList) Descriptor() ([]byte, []int) {
	return fileDescriptor_90265904e384351a, []int{0, 0}
}
func (m *NetworkInstancesBridgeDomainNetworkInstanceList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkInstancesBridgeDomainNetworkInstanceList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkInstancesBridgeDomainNetworkInstanceList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkInstancesBridgeDomainNetworkInstanceList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInstancesBridgeDomainNetworkInstanceList.Merge(m, src)
}
func (m *NetworkInstancesBridgeDomainNetworkInstanceList) XXX_Size() int {
	return m.Size()
}
func (m *NetworkInstancesBridgeDomainNetworkInstanceList) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInstancesBridgeDomainNetworkInstanceList.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInstancesBridgeDomainNetworkInstanceList proto.InternalMessageInfo

func (m *NetworkInstancesBridgeDomainNetworkInstanceList) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *NetworkInstancesBridgeDomainNetworkInstanceList) GetVlan() []*NetworkInstancesBridgeDomainNetworkInstanceListVlanList {
	if m != nil {
		return m.Vlan
	}
	return nil
}

type NetworkInstancesBridgeDomainNetworkInstanceListVlanList struct {
	VlanName               *string                                                              `protobuf:"bytes,51,opt,name=vlan_name,json=vlanName" json:"vlan_name,omitempty"`
	VlanId                 *uint32                                                              `protobuf:"varint,52,opt,name=vlan_id,json=vlanId" json:"vlan_id,omitempty"`
	Status                 *string                                                              `protobuf:"bytes,53,opt,name=status" json:"status,omitempty"`
	Vni                    *uint32                                                              `protobuf:"varint,54,opt,name=vni" json:"vni,omitempty"`
	L3Interface            *string                                                              `protobuf:"bytes,55,opt,name=l3_interface,json=l3Interface" json:"l3_interface,omitempty"`
	NumLocalMacEntries     *uint32                                                              `protobuf:"varint,56,opt,name=num_local_mac_entries,json=numLocalMacEntries" json:"num_local_mac_entries,omitempty"`
	NumArReplicatorEntries *uint32                                                              `protobuf:"varint,57,opt,name=num_ar_replicator_entries,json=numArReplicatorEntries" json:"num_ar_replicator_entries,omitempty"`
	EthernetTagId          *uint32                                                              `protobuf:"varint,58,opt,name=ethernet_tag_id,json=ethernetTagId" json:"ethernet_tag_id,omitempty"`
	Member                 []*NetworkInstancesBridgeDomainNetworkInstanceListVlanListMemberList `protobuf:"bytes,161,rep,name=member" json:"member,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                                                             `json:"-"`
	XXX_unrecognized       []byte                                                               `json:"-"`
	XXX_sizecache          int32                                                                `json:"-"`
}

func (m *NetworkInstancesBridgeDomainNetworkInstanceListVlanList) Reset() {
	*m = NetworkInstancesBridgeDomainNetworkInstanceListVlanList{}
}
func (m *NetworkInstancesBridgeDomainNetworkInstanceListVlanList) String() string {
	return proto.CompactTextString(m)
}
func (*NetworkInstancesBridgeDomainNetworkInstanceListVlanList) ProtoMessage() {}
func (*NetworkInstancesBridgeDomainNetworkInstanceListVlanList) Descriptor() ([]byte, []int) {
	return fileDescriptor_90265904e384351a, []int{0, 0, 0}
}
func (m *NetworkInstancesBridgeDomainNetworkInstanceListVlanList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkInstancesBridgeDomainNetworkInstanceListVlanList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkInstancesBridgeDomainNetworkInstanceListVlanList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkInstancesBridgeDomainNetworkInstanceListVlanList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInstancesBridgeDomainNetworkInstanceListVlanList.Merge(m, src)
}
func (m *NetworkInstancesBridgeDomainNetworkInstanceListVlanList) XXX_Size() int {
	return m.Size()
}
func (m *NetworkInstancesBridgeDomainNetworkInstanceListVlanList) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInstancesBridgeDomainNetworkInstanceListVlanList.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInstancesBridgeDomainNetworkInstanceListVlanList proto.InternalMessageInfo

func (m *NetworkInstancesBridgeDomainNetworkInstanceListVlanList) GetVlanName() string {
	if m != nil && m.VlanName != nil {
		return *m.VlanName
	}
	return ""
}

func (m *NetworkInstancesBridgeDomainNetworkInstanceListVlanList) GetVlanId() uint32 {
	if m != nil && m.VlanId != nil {
		return *m.VlanId
	}
	return 0
}

func (m *NetworkInstancesBridgeDomainNetworkInstanceListVlanList) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *NetworkInstancesBridgeDomainNetworkInstanceListVlanList) GetVni() uint32 {
	if m != nil && m.Vni != nil {
		return *m.Vni
	}
	return 0
}

func (m *NetworkInstancesBridgeDomainNetworkInstanceListVlanList) GetL3Interface() string {
	if m != nil && m.L3Interface != nil {
		return *m.L3Interface
	}
	return ""
}

func (m *NetworkInstancesBridgeDomainNetworkInstanceListVlanList) GetNumLocalMacEntries() uint32 {
	if m != nil && m.NumLocalMacEntries != nil {
		return *m.NumLocalMacEntries
	}
	return 0
}

func (m *NetworkInstancesBridgeDomainNetworkInstanceListVlanList) GetNumArReplicatorEntries() uint32 {
	if m != nil && m.NumArReplicatorEntries != nil {
		return *m.NumArReplicatorEntries
	}
	return 0
}

func (m *NetworkInstancesBridgeDomainNetworkInstanceListVlanList) GetEthernetTagId() uint32 {
	if m != nil && m.EthernetTagId != nil {
		return *m.EthernetTagId
	}
	return 0
}

func (m *NetworkInstancesBridgeDomainNetworkInstanceListVlanList) GetMember() []*NetworkInstancesBridgeDomainNetworkInstanceListVlanListMemberList {
	if m != nil {
		return m.Member
	}
	return nil
}

type NetworkInstancesBridgeDomainNetworkInstanceListVlanListMemberList struct {
	Interface            *string  `protobuf:"bytes,61,opt,name=interface" json:"interface,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkInstancesBridgeDomainNetworkInstanceListVlanListMemberList) Reset() {
	*m = NetworkInstancesBridgeDomainNetworkInstanceListVlanListMemberList{}
}
func (m *NetworkInstancesBridgeDomainNetworkInstanceListVlanListMemberList) String() string {
	return proto.CompactTextString(m)
}
func (*NetworkInstancesBridgeDomainNetworkInstanceListVlanListMemberList) ProtoMessage() {}
func (*NetworkInstancesBridgeDomainNetworkInstanceListVlanListMemberList) Descriptor() ([]byte, []int) {
	return fileDescriptor_90265904e384351a, []int{0, 0, 0, 0}
}
func (m *NetworkInstancesBridgeDomainNetworkInstanceListVlanListMemberList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkInstancesBridgeDomainNetworkInstanceListVlanListMemberList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkInstancesBridgeDomainNetworkInstanceListVlanListMemberList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkInstancesBridgeDomainNetworkInstanceListVlanListMemberList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInstancesBridgeDomainNetworkInstanceListVlanListMemberList.Merge(m, src)
}
func (m *NetworkInstancesBridgeDomainNetworkInstanceListVlanListMemberList) XXX_Size() int {
	return m.Size()
}
func (m *NetworkInstancesBridgeDomainNetworkInstanceListVlanListMemberList) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInstancesBridgeDomainNetworkInstanceListVlanListMemberList.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInstancesBridgeDomainNetworkInstanceListVlanListMemberList proto.InternalMessageInfo

func (m *NetworkInstancesBridgeDomainNetworkInstanceListVlanListMemberList) GetInterface() string {
	if m != nil && m.Interface != nil {
		return *m.Interface
	}
	return ""
}

var E_JnprNetworkInstancesBridgeDomainExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*NetworkInstancesBridgeDomain)(nil),
	Field:         115,
	Name:          "jnpr_network_instances_bridge_domain_ext",
	Tag:           "bytes,115,opt,name=jnpr_network_instances_bridge_domain_ext",
	Filename:      "l2ald_bd_render.proto",
}

func init() {
	proto.RegisterType((*NetworkInstancesBridgeDomain)(nil), "network_instances_bridge_domain")
	proto.RegisterType((*NetworkInstancesBridgeDomainNetworkInstanceList)(nil), "network_instances_bridge_domain.network_instance_list")
	proto.RegisterType((*NetworkInstancesBridgeDomainNetworkInstanceListVlanList)(nil), "network_instances_bridge_domain.network_instance_list.vlan_list")
	proto.RegisterType((*NetworkInstancesBridgeDomainNetworkInstanceListVlanListMemberList)(nil), "network_instances_bridge_domain.network_instance_list.vlan_list.member_list")
	proto.RegisterExtension(E_JnprNetworkInstancesBridgeDomainExt)
}

func init() { proto.RegisterFile("l2ald_bd_render.proto", fileDescriptor_90265904e384351a) }

var fileDescriptor_90265904e384351a = []byte{
	// 542 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0x41, 0x6f, 0xd3, 0x3e,
	0x18, 0xc6, 0x95, 0xff, 0xba, 0xfe, 0x57, 0x97, 0x69, 0x93, 0x51, 0xb7, 0xac, 0x42, 0xa5, 0x0c,
	0x09, 0x55, 0x42, 0x4d, 0x44, 0x0b, 0x83, 0x4d, 0x42, 0x1a, 0x15, 0x3b, 0x14, 0x8d, 0x1e, 0x02,
	0x5c, 0xb8, 0x18, 0x27, 0x79, 0x49, 0xdd, 0x25, 0x4e, 0x64, 0xbf, 0x29, 0xe3, 0xca, 0x27, 0xe0,
	0xc6, 0x99, 0x4f, 0xc2, 0x15, 0x89, 0x0b, 0x12, 0x5f, 0x00, 0xf5, 0x93, 0xa0, 0x38, 0x6d, 0x07,
	0x0c, 0xa9, 0x12, 0xdc, 0xe2, 0xdf, 0xfb, 0x3c, 0x8f, 0x1f, 0xdb, 0x21, 0x8d, 0xb8, 0xc7, 0xe3,
	0x90, 0xf9, 0x21, 0x53, 0x20, 0x43, 0x50, 0x4e, 0xa6, 0x52, 0x4c, 0x9b, 0x57, 0x11, 0x62, 0x48,
	0x00, 0xd5, 0x5b, 0x86, 0x69, 0x56, 0xc2, 0xfd, 0x6f, 0xeb, 0xe4, 0xba, 0x04, 0x7c, 0x93, 0xaa,
	0x33, 0x26, 0xa4, 0x46, 0x2e, 0x03, 0xd0, 0xcc, 0x57, 0x22, 0x8c, 0x80, 0x85, 0x69, 0xc2, 0x85,
	0xa4, 0x3e, 0xd9, 0xfe, 0x5d, 0x62, 0x7f, 0xb0, 0xda, 0x6b, 0x9d, 0x7a, 0xef, 0xc0, 0x59, 0x61,
	0xbe, 0x34, 0x67, 0xb1, 0xd0, 0xe8, 0x6d, 0xcd, 0xf1, 0x70, 0x4e, 0x9b, 0x5f, 0x2a, 0xa4, 0xf1,
	0x47, 0x29, 0xdd, 0x23, 0x15, 0xc9, 0x13, 0xb0, 0xfb, 0x6d, 0xab, 0x53, 0x1b, 0xac, 0xbf, 0x3b,
	0xfe, 0x6f, 0xc3, 0xf2, 0x0c, 0xa2, 0x2f, 0x48, 0x65, 0x1a, 0x73, 0xb9, 0x28, 0x73, 0xfc, 0x77,
	0x65, 0x9c, 0x22, 0xa3, 0xac, 0x65, 0xe2, 0x9a, 0x9f, 0xd6, 0x48, 0x6d, 0xc9, 0xe8, 0xfe, 0x7c,
	0x71, 0xb9, 0xc4, 0x46, 0xc1, 0x47, 0x45, 0x91, 0x5d, 0xf2, 0xbf, 0xd1, 0x88, 0xd0, 0xbe, 0xdb,
	0xb6, 0x3a, 0x9b, 0x5e, 0xb5, 0x58, 0x0e, 0x43, 0xba, 0x43, 0xaa, 0x1a, 0x39, 0xe6, 0xda, 0xbe,
	0x57, 0x38, 0xbd, 0xf9, 0x8a, 0x6e, 0x93, 0xb5, 0xa9, 0x14, 0xf6, 0x81, 0x11, 0x17, 0x9f, 0xf4,
	0x06, 0xb9, 0x12, 0xf7, 0x99, 0x90, 0x08, 0xea, 0x35, 0x0f, 0xc0, 0xbe, 0x6f, 0xf4, 0xf5, 0xb8,
	0x3f, 0x5c, 0x20, 0x7a, 0x87, 0x34, 0x64, 0x9e, 0xb0, 0x38, 0x0d, 0x78, 0xcc, 0x12, 0x1e, 0x30,
	0x90, 0xa8, 0x04, 0x68, 0xfb, 0x81, 0x89, 0xa1, 0x32, 0x4f, 0x4e, 0x8b, 0xd9, 0x53, 0x1e, 0x9c,
	0x94, 0x13, 0x7a, 0x48, 0xf6, 0x0a, 0x0b, 0x57, 0x4c, 0x41, 0x16, 0x8b, 0x80, 0x63, 0xaa, 0x96,
	0xb6, 0x43, 0x63, 0xdb, 0x91, 0x79, 0xf2, 0x48, 0x79, 0xcb, 0xf1, 0xc2, 0x7a, 0x8b, 0x6c, 0x01,
	0x8e, 0x41, 0x49, 0x40, 0x86, 0x3c, 0x2a, 0xce, 0x76, 0x64, 0x0c, 0x9b, 0x0b, 0xfc, 0x9c, 0x47,
	0xc3, 0x90, 0x02, 0xa9, 0x26, 0x90, 0xf8, 0xa0, 0xec, 0x8f, 0xe5, 0x33, 0x9c, 0xfe, 0xeb, 0x33,
	0x38, 0x65, 0x5e, 0xf9, 0x24, 0xf3, 0xf0, 0xe6, 0x6d, 0x52, 0xff, 0x09, 0xd3, 0x6b, 0xa4, 0x76,
	0x71, 0x57, 0x0f, 0xcd, 0x5d, 0x5d, 0x80, 0xa3, 0xf7, 0x16, 0xe9, 0x4c, 0x64, 0xa6, 0xd8, 0x8a,
	0x26, 0x0c, 0xce, 0x91, 0xee, 0x3a, 0x4f, 0x72, 0x29, 0x32, 0x50, 0xa3, 0x52, 0xac, 0x9f, 0x81,
	0xd4, 0xa9, 0xd2, 0xb6, 0x6e, 0x5b, 0x9d, 0x7a, 0xaf, 0xbd, 0xea, 0x38, 0xde, 0xcd, 0x62, 0xab,
	0xd1, 0xaf, 0x3f, 0xb4, 0x1e, 0x18, 0xc9, 0x63, 0xa3, 0x38, 0x39, 0xc7, 0xc1, 0xab, 0xcf, 0xb3,
	0x96, 0xf5, 0x75, 0xd6, 0xb2, 0xbe, 0xcf, 0x5a, 0xd6, 0x4b, 0x2f, 0x12, 0xe8, 0x4c, 0xca, 0x6d,
	0x8b, 0x7c, 0x57, 0x04, 0xe0, 0x83, 0x8a, 0xdc, 0x31, 0xf0, 0x18, 0xc7, 0x7e, 0x8a, 0x5d, 0x21,
	0x23, 0xd0, 0xd8, 0x9d, 0xa0, 0xe8, 0x4a, 0x8e, 0x62, 0x0a, 0x6e, 0x76, 0x16, 0xb9, 0x13, 0x14,
	0x2e, 0x0f, 0x79, 0x86, 0xa0, 0xb4, 0xcb, 0x26, 0xb9, 0x4c, 0xb5, 0xab, 0x83, 0x31, 0x24, 0xfc,
	0x47, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x50, 0x2a, 0xd0, 0xf7, 0x03, 0x00, 0x00,
}

func (m *NetworkInstancesBridgeDomain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInstancesBridgeDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkInstancesBridgeDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NetworkInstance) > 0 {
		for iNdEx := len(m.NetworkInstance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NetworkInstance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintL2AldBdRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *NetworkInstancesBridgeDomainNetworkInstanceList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInstancesBridgeDomainNetworkInstanceList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkInstancesBridgeDomainNetworkInstanceList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Vlan) > 0 {
		for iNdEx := len(m.Vlan) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vlan[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintL2AldBdRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintL2AldBdRender(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *NetworkInstancesBridgeDomainNetworkInstanceListVlanList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInstancesBridgeDomainNetworkInstanceListVlanList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkInstancesBridgeDomainNetworkInstanceListVlanList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Member) > 0 {
		for iNdEx := len(m.Member) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Member[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintL2AldBdRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.EthernetTagId != nil {
		i = encodeVarintL2AldBdRender(dAtA, i, uint64(*m.EthernetTagId))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd0
	}
	if m.NumArReplicatorEntries != nil {
		i = encodeVarintL2AldBdRender(dAtA, i, uint64(*m.NumArReplicatorEntries))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc8
	}
	if m.NumLocalMacEntries != nil {
		i = encodeVarintL2AldBdRender(dAtA, i, uint64(*m.NumLocalMacEntries))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc0
	}
	if m.L3Interface != nil {
		i -= len(*m.L3Interface)
		copy(dAtA[i:], *m.L3Interface)
		i = encodeVarintL2AldBdRender(dAtA, i, uint64(len(*m.L3Interface)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	if m.Vni != nil {
		i = encodeVarintL2AldBdRender(dAtA, i, uint64(*m.Vni))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.Status != nil {
		i -= len(*m.Status)
		copy(dAtA[i:], *m.Status)
		i = encodeVarintL2AldBdRender(dAtA, i, uint64(len(*m.Status)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	if m.VlanId != nil {
		i = encodeVarintL2AldBdRender(dAtA, i, uint64(*m.VlanId))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.VlanName != nil {
		i -= len(*m.VlanName)
		copy(dAtA[i:], *m.VlanName)
		i = encodeVarintL2AldBdRender(dAtA, i, uint64(len(*m.VlanName)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *NetworkInstancesBridgeDomainNetworkInstanceListVlanListMemberList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInstancesBridgeDomainNetworkInstanceListVlanListMemberList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkInstancesBridgeDomainNetworkInstanceListVlanListMemberList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Interface != nil {
		i -= len(*m.Interface)
		copy(dAtA[i:], *m.Interface)
		i = encodeVarintL2AldBdRender(dAtA, i, uint64(len(*m.Interface)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}

func encodeVarintL2AldBdRender(dAtA []byte, offset int, v uint64) int {
	offset -= sovL2AldBdRender(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NetworkInstancesBridgeDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NetworkInstance) > 0 {
		for _, e := range m.NetworkInstance {
			l = e.Size()
			n += 2 + l + sovL2AldBdRender(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkInstancesBridgeDomainNetworkInstanceList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 2 + l + sovL2AldBdRender(uint64(l))
	}
	if len(m.Vlan) > 0 {
		for _, e := range m.Vlan {
			l = e.Size()
			n += 2 + l + sovL2AldBdRender(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkInstancesBridgeDomainNetworkInstanceListVlanList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VlanName != nil {
		l = len(*m.VlanName)
		n += 2 + l + sovL2AldBdRender(uint64(l))
	}
	if m.VlanId != nil {
		n += 2 + sovL2AldBdRender(uint64(*m.VlanId))
	}
	if m.Status != nil {
		l = len(*m.Status)
		n += 2 + l + sovL2AldBdRender(uint64(l))
	}
	if m.Vni != nil {
		n += 2 + sovL2AldBdRender(uint64(*m.Vni))
	}
	if m.L3Interface != nil {
		l = len(*m.L3Interface)
		n += 2 + l + sovL2AldBdRender(uint64(l))
	}
	if m.NumLocalMacEntries != nil {
		n += 2 + sovL2AldBdRender(uint64(*m.NumLocalMacEntries))
	}
	if m.NumArReplicatorEntries != nil {
		n += 2 + sovL2AldBdRender(uint64(*m.NumArReplicatorEntries))
	}
	if m.EthernetTagId != nil {
		n += 2 + sovL2AldBdRender(uint64(*m.EthernetTagId))
	}
	if len(m.Member) > 0 {
		for _, e := range m.Member {
			l = e.Size()
			n += 2 + l + sovL2AldBdRender(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkInstancesBridgeDomainNetworkInstanceListVlanListMemberList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Interface != nil {
		l = len(*m.Interface)
		n += 2 + l + sovL2AldBdRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovL2AldBdRender(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozL2AldBdRender(x uint64) (n int) {
	return sovL2AldBdRender(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NetworkInstancesBridgeDomain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowL2AldBdRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: network_instances_bridge_domain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: network_instances_bridge_domain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkInstance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldBdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthL2AldBdRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldBdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkInstance = append(m.NetworkInstance, &NetworkInstancesBridgeDomainNetworkInstanceList{})
			if err := m.NetworkInstance[len(m.NetworkInstance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipL2AldBdRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthL2AldBdRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthL2AldBdRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInstancesBridgeDomainNetworkInstanceList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowL2AldBdRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: network_instance_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: network_instance_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldBdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthL2AldBdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldBdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldBdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthL2AldBdRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldBdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vlan = append(m.Vlan, &NetworkInstancesBridgeDomainNetworkInstanceListVlanList{})
			if err := m.Vlan[len(m.Vlan)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipL2AldBdRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthL2AldBdRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthL2AldBdRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInstancesBridgeDomainNetworkInstanceListVlanList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowL2AldBdRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: vlan_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: vlan_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VlanName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldBdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthL2AldBdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldBdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VlanName = &s
			iNdEx = postIndex
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VlanId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldBdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VlanId = &v
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldBdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthL2AldBdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldBdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Status = &s
			iNdEx = postIndex
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vni", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldBdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Vni = &v
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L3Interface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldBdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthL2AldBdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldBdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.L3Interface = &s
			iNdEx = postIndex
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumLocalMacEntries", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldBdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumLocalMacEntries = &v
		case 57:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumArReplicatorEntries", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldBdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumArReplicatorEntries = &v
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthernetTagId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldBdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EthernetTagId = &v
		case 161:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Member", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldBdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthL2AldBdRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldBdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Member = append(m.Member, &NetworkInstancesBridgeDomainNetworkInstanceListVlanListMemberList{})
			if err := m.Member[len(m.Member)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipL2AldBdRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthL2AldBdRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthL2AldBdRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInstancesBridgeDomainNetworkInstanceListVlanListMemberList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowL2AldBdRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: member_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: member_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldBdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthL2AldBdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldBdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Interface = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipL2AldBdRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthL2AldBdRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthL2AldBdRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipL2AldBdRender(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowL2AldBdRender
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowL2AldBdRender
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowL2AldBdRender
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthL2AldBdRender
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupL2AldBdRender
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthL2AldBdRender
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthL2AldBdRender        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowL2AldBdRender          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupL2AldBdRender = fmt.Errorf("proto: unexpected end of group")
)
