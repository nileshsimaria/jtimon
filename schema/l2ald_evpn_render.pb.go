// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: l2ald_evpn_render.proto

package schema

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NetworkInstancesL2Evpn struct {
	NetworkInstance      []*NetworkInstancesL2EvpnNetworkInstanceList `protobuf:"bytes,161,rep,name=network_instance,json=networkInstance" json:"network_instance,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *NetworkInstancesL2Evpn) Reset()         { *m = NetworkInstancesL2Evpn{} }
func (m *NetworkInstancesL2Evpn) String() string { return proto.CompactTextString(m) }
func (*NetworkInstancesL2Evpn) ProtoMessage()    {}
func (*NetworkInstancesL2Evpn) Descriptor() ([]byte, []int) {
	return fileDescriptor_68cd9c60450fccb8, []int{0}
}
func (m *NetworkInstancesL2Evpn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkInstancesL2Evpn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkInstancesL2Evpn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkInstancesL2Evpn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInstancesL2Evpn.Merge(m, src)
}
func (m *NetworkInstancesL2Evpn) XXX_Size() int {
	return m.Size()
}
func (m *NetworkInstancesL2Evpn) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInstancesL2Evpn.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInstancesL2Evpn proto.InternalMessageInfo

func (m *NetworkInstancesL2Evpn) GetNetworkInstance() []*NetworkInstancesL2EvpnNetworkInstanceList {
	if m != nil {
		return m.NetworkInstance
	}
	return nil
}

type NetworkInstancesL2EvpnNetworkInstanceList struct {
	Name                 *string                                                 `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	Protocols            *NetworkInstancesL2EvpnNetworkInstanceListProtocolsType `protobuf:"bytes,151,opt,name=protocols" json:"protocols,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                `json:"-"`
	XXX_unrecognized     []byte                                                  `json:"-"`
	XXX_sizecache        int32                                                   `json:"-"`
}

func (m *NetworkInstancesL2EvpnNetworkInstanceList) Reset() {
	*m = NetworkInstancesL2EvpnNetworkInstanceList{}
}
func (m *NetworkInstancesL2EvpnNetworkInstanceList) String() string {
	return proto.CompactTextString(m)
}
func (*NetworkInstancesL2EvpnNetworkInstanceList) ProtoMessage() {}
func (*NetworkInstancesL2EvpnNetworkInstanceList) Descriptor() ([]byte, []int) {
	return fileDescriptor_68cd9c60450fccb8, []int{0, 0}
}
func (m *NetworkInstancesL2EvpnNetworkInstanceList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkInstancesL2EvpnNetworkInstanceList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkInstancesL2EvpnNetworkInstanceList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkInstancesL2EvpnNetworkInstanceList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInstancesL2EvpnNetworkInstanceList.Merge(m, src)
}
func (m *NetworkInstancesL2EvpnNetworkInstanceList) XXX_Size() int {
	return m.Size()
}
func (m *NetworkInstancesL2EvpnNetworkInstanceList) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInstancesL2EvpnNetworkInstanceList.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInstancesL2EvpnNetworkInstanceList proto.InternalMessageInfo

func (m *NetworkInstancesL2EvpnNetworkInstanceList) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *NetworkInstancesL2EvpnNetworkInstanceList) GetProtocols() *NetworkInstancesL2EvpnNetworkInstanceListProtocolsType {
	if m != nil {
		return m.Protocols
	}
	return nil
}

type NetworkInstancesL2EvpnNetworkInstanceListProtocolsType struct {
	Protocol             *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolType `protobuf:"bytes,151,opt,name=protocol" json:"protocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                            `json:"-"`
	XXX_unrecognized     []byte                                                              `json:"-"`
	XXX_sizecache        int32                                                               `json:"-"`
}

func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsType) Reset() {
	*m = NetworkInstancesL2EvpnNetworkInstanceListProtocolsType{}
}
func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsType) String() string {
	return proto.CompactTextString(m)
}
func (*NetworkInstancesL2EvpnNetworkInstanceListProtocolsType) ProtoMessage() {}
func (*NetworkInstancesL2EvpnNetworkInstanceListProtocolsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_68cd9c60450fccb8, []int{0, 0, 0}
}
func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkInstancesL2EvpnNetworkInstanceListProtocolsType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInstancesL2EvpnNetworkInstanceListProtocolsType.Merge(m, src)
}
func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsType) XXX_Size() int {
	return m.Size()
}
func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsType) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInstancesL2EvpnNetworkInstanceListProtocolsType.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInstancesL2EvpnNetworkInstanceListProtocolsType proto.InternalMessageInfo

func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsType) GetProtocol() *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolType {
	if m != nil {
		return m.Protocol
	}
	return nil
}

type NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolType struct {
	Evpn                 *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType `protobuf:"bytes,151,opt,name=evpn" json:"evpn,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                    `json:"-"`
	XXX_unrecognized     []byte                                                                      `json:"-"`
	XXX_sizecache        int32                                                                       `json:"-"`
}

func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolType) Reset() {
	*m = NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolType{}
}
func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolType) String() string {
	return proto.CompactTextString(m)
}
func (*NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolType) ProtoMessage() {}
func (*NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolType) Descriptor() ([]byte, []int) {
	return fileDescriptor_68cd9c60450fccb8, []int{0, 0, 0, 0}
}
func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolType.Merge(m, src)
}
func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolType) XXX_Size() int {
	return m.Size()
}
func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolType) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolType.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolType proto.InternalMessageInfo

func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolType) GetEvpn() *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType {
	if m != nil {
		return m.Evpn
	}
	return nil
}

type NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType struct {
	VxlanTunnelEndPoint  []*NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList `protobuf:"bytes,152,rep,name=vxlan_tunnel_end_point,json=vxlanTunnelEndPoint" json:"vxlan_tunnel_end_point,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                                             `json:"-"`
	XXX_unrecognized     []byte                                                                                               `json:"-"`
	XXX_sizecache        int32                                                                                                `json:"-"`
}

func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) Reset() {
	*m = NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType{}
}
func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) String() string {
	return proto.CompactTextString(m)
}
func (*NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) ProtoMessage() {}
func (*NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) Descriptor() ([]byte, []int) {
	return fileDescriptor_68cd9c60450fccb8, []int{0, 0, 0, 0, 0}
}
func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType.Merge(m, src)
}
func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) XXX_Size() int {
	return m.Size()
}
func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType proto.InternalMessageInfo

func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) GetVxlanTunnelEndPoint() []*NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList {
	if m != nil {
		return m.VxlanTunnelEndPoint
	}
	return nil
}

type NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList struct {
	SourceIpAddress      *string  `protobuf:"bytes,51,opt,name=source_ip_address,json=sourceIpAddress" json:"source_ip_address,omitempty"`
	RemoteIpAddress      *string  `protobuf:"bytes,52,opt,name=remote_ip_address,json=remoteIpAddress" json:"remote_ip_address,omitempty"`
	Status               *string  `protobuf:"bytes,53,opt,name=status" json:"status,omitempty"`
	Mode                 *string  `protobuf:"bytes,54,opt,name=mode" json:"mode,omitempty"`
	NexthopIndex         *uint32  `protobuf:"varint,55,opt,name=nexthop_index,json=nexthopIndex" json:"nexthop_index,omitempty"`
	SourceInterface      *string  `protobuf:"bytes,56,opt,name=source_interface,json=sourceInterface" json:"source_interface,omitempty"`
	EventType            *string  `protobuf:"bytes,57,opt,name=event_type,json=eventType" json:"event_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList) Reset() {
	*m = NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList{}
}
func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList) String() string {
	return proto.CompactTextString(m)
}
func (*NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList) ProtoMessage() {
}
func (*NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList) Descriptor() ([]byte, []int) {
	return fileDescriptor_68cd9c60450fccb8, []int{0, 0, 0, 0, 0, 0}
}
func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList.Merge(m, src)
}
func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList) XXX_Size() int {
	return m.Size()
}
func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList proto.InternalMessageInfo

func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList) GetSourceIpAddress() string {
	if m != nil && m.SourceIpAddress != nil {
		return *m.SourceIpAddress
	}
	return ""
}

func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList) GetRemoteIpAddress() string {
	if m != nil && m.RemoteIpAddress != nil {
		return *m.RemoteIpAddress
	}
	return ""
}

func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList) GetMode() string {
	if m != nil && m.Mode != nil {
		return *m.Mode
	}
	return ""
}

func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList) GetNexthopIndex() uint32 {
	if m != nil && m.NexthopIndex != nil {
		return *m.NexthopIndex
	}
	return 0
}

func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList) GetSourceInterface() string {
	if m != nil && m.SourceInterface != nil {
		return *m.SourceInterface
	}
	return ""
}

func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList) GetEventType() string {
	if m != nil && m.EventType != nil {
		return *m.EventType
	}
	return ""
}

var E_JnprNetworkInstancesL2EvpnExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*NetworkInstancesL2Evpn)(nil),
	Field:         116,
	Name:          "jnpr_network_instances_l2evpn_ext",
	Tag:           "bytes,116,opt,name=jnpr_network_instances_l2evpn_ext",
	Filename:      "l2ald_evpn_render.proto",
}

func init() {
	proto.RegisterType((*NetworkInstancesL2Evpn)(nil), "network_instances_l2evpn")
	proto.RegisterType((*NetworkInstancesL2EvpnNetworkInstanceList)(nil), "network_instances_l2evpn.network_instance_list")
	proto.RegisterType((*NetworkInstancesL2EvpnNetworkInstanceListProtocolsType)(nil), "network_instances_l2evpn.network_instance_list.protocols_type")
	proto.RegisterType((*NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolType)(nil), "network_instances_l2evpn.network_instance_list.protocols_type.protocol_type")
	proto.RegisterType((*NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType)(nil), "network_instances_l2evpn.network_instance_list.protocols_type.protocol_type.evpn_type")
	proto.RegisterType((*NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList)(nil), "network_instances_l2evpn.network_instance_list.protocols_type.protocol_type.evpn_type.vxlan_tunnel_end_point_list")
	proto.RegisterExtension(E_JnprNetworkInstancesL2EvpnExt)
}

func init() { proto.RegisterFile("l2ald_evpn_render.proto", fileDescriptor_68cd9c60450fccb8) }

var fileDescriptor_68cd9c60450fccb8 = []byte{
	// 567 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0xcf, 0x4f, 0x13, 0x41,
	0x14, 0xc7, 0xb3, 0x50, 0x90, 0x0e, 0x22, 0x30, 0x44, 0x58, 0xd6, 0x40, 0xaa, 0x5e, 0xaa, 0x09,
	0xbb, 0xb1, 0xfe, 0xf6, 0x60, 0x94, 0x84, 0x03, 0x86, 0x10, 0xb3, 0x12, 0x0f, 0x1a, 0x33, 0x0e,
	0xbb, 0xcf, 0x76, 0xca, 0x76, 0x66, 0x32, 0xf3, 0x5a, 0x4b, 0xe2, 0xc9, 0x7f, 0x02, 0xaf, 0xde,
	0xfc, 0x53, 0xbc, 0x18, 0xb9, 0x7b, 0xd1, 0xfe, 0x25, 0x66, 0x67, 0xdb, 0x62, 0x95, 0x9a, 0x18,
	0xf5, 0xb6, 0xf3, 0xf9, 0xbe, 0xf7, 0xfd, 0xbe, 0xec, 0xbc, 0x21, 0x2b, 0x59, 0x8d, 0x67, 0x29,
	0x83, 0x8e, 0x96, 0xcc, 0x80, 0x4c, 0xc1, 0x84, 0xda, 0x28, 0x54, 0xc1, 0x12, 0x42, 0x06, 0x2d,
	0x40, 0x73, 0xc8, 0x50, 0xe9, 0x02, 0x5e, 0xfa, 0x72, 0x86, 0xf8, 0x12, 0xf0, 0xb5, 0x32, 0x07,
	0x4c, 0x48, 0x8b, 0x5c, 0x26, 0x60, 0x59, 0x56, 0xcb, 0xdb, 0xe9, 0x73, 0xb2, 0xf0, 0xb3, 0xe6,
	0xbf, 0xf7, 0x2a, 0x93, 0xd5, 0xd9, 0x5a, 0x14, 0x8e, 0xeb, 0xfa, 0x45, 0x60, 0x99, 0xb0, 0x18,
	0xcf, 0xf7, 0xf1, 0x76, 0x9f, 0x06, 0xdf, 0xa6, 0xc9, 0xf9, 0x53, 0x4b, 0xe9, 0x2a, 0x29, 0x49,
	0xde, 0x02, 0xff, 0x7a, 0xc5, 0xab, 0x96, 0x37, 0xa7, 0xde, 0x3e, 0x98, 0x98, 0xf1, 0x62, 0x87,
	0xe8, 0x0b, 0x52, 0x76, 0x73, 0x27, 0x2a, 0xb3, 0xfe, 0x91, 0x57, 0xf1, 0xaa, 0xb3, 0xb5, 0xfb,
	0x7f, 0x38, 0x4a, 0x38, 0x74, 0x60, 0x78, 0xa8, 0x21, 0x3e, 0x71, 0x0c, 0x3e, 0x4d, 0x91, 0x73,
	0xa3, 0x2a, 0x15, 0x64, 0x66, 0x40, 0x06, 0x81, 0x3b, 0x7f, 0x17, 0x38, 0x3c, 0x16, 0xf1, 0x43,
	0xfb, 0xe0, 0x73, 0x89, 0xcc, 0x8d, 0x68, 0xf4, 0x80, 0x94, 0x72, 0xdb, 0x41, 0xf0, 0xd3, 0x7f,
	0x19, 0x1c, 0xba, 0x0d, 0x71, 0x23, 0xb8, 0x90, 0xe0, 0x78, 0x92, 0x94, 0x87, 0x8c, 0x7e, 0xf0,
	0xc8, 0x72, 0xa7, 0x9b, 0x71, 0xc9, 0xb0, 0x2d, 0x25, 0x64, 0x0c, 0x64, 0xca, 0xb4, 0x12, 0x12,
	0xfd, 0x77, 0xc5, 0x0a, 0x98, 0xff, 0x33, 0x4d, 0x78, 0x7a, 0x6a, 0xb1, 0x45, 0x4b, 0x4e, 0xdc,
	0x73, 0xda, 0x96, 0x4c, 0x1f, 0xe7, 0x4a, 0x70, 0x34, 0x41, 0x2e, 0xfc, 0xa6, 0x89, 0x5e, 0x25,
	0x8b, 0x56, 0xb5, 0x4d, 0x02, 0x4c, 0x68, 0xc6, 0xd3, 0xd4, 0x80, 0xb5, 0xc5, 0x72, 0xc5, 0xf3,
	0x85, 0xb0, 0xad, 0x1f, 0x16, 0x98, 0x5e, 0x23, 0x8b, 0x06, 0x5a, 0x0a, 0x47, 0x6a, 0x6f, 0xfc,
	0xb8, 0x88, 0xf3, 0x85, 0x7e, 0xd2, 0xb2, 0x4c, 0xa6, 0x2d, 0x72, 0x6c, 0x5b, 0xff, 0xa6, 0xf3,
	0xec, 0x9f, 0x28, 0x25, 0xa5, 0x96, 0x4a, 0xc1, 0xbf, 0xe5, 0xa8, 0xfb, 0xa6, 0x97, 0xc9, 0x9c,
	0x84, 0x2e, 0x36, 0x94, 0x66, 0x42, 0xa6, 0xd0, 0xf5, 0x6f, 0x57, 0xbc, 0xea, 0x5c, 0x7c, 0xb6,
	0x0f, 0xb7, 0x73, 0x46, 0xaf, 0x90, 0x85, 0xc1, 0xbc, 0x12, 0xc1, 0xbc, 0xe2, 0x09, 0xf8, 0x77,
	0x46, 0xc6, 0x1d, 0x60, 0xba, 0x46, 0x08, 0x74, 0x40, 0xa2, 0xfb, 0x73, 0xfe, 0x5d, 0x57, 0x54,
	0x76, 0x64, 0xef, 0x50, 0xc3, 0xbd, 0x37, 0xe4, 0x62, 0x53, 0x6a, 0xc3, 0xc6, 0x5d, 0x14, 0x83,
	0x2e, 0xd2, 0x95, 0xf0, 0x51, 0x5b, 0x0a, 0x0d, 0x66, 0xb7, 0xa8, 0xb2, 0x4f, 0x40, 0x5a, 0x65,
	0xac, 0x8f, 0x6e, 0xe9, 0x56, 0xc7, 0x5e, 0x73, 0xbc, 0x96, 0x9b, 0xef, 0x8e, 0xbe, 0x6b, 0xbb,
	0xe3, 0xb4, 0xad, 0x2e, 0x6e, 0xbe, 0xfc, 0xd8, 0x5b, 0xf7, 0x8e, 0x7b, 0xeb, 0xde, 0xd7, 0xde,
	0xba, 0xf7, 0x2c, 0xae, 0x0b, 0x0c, 0x9b, 0x45, 0x52, 0x6e, 0x19, 0x89, 0x04, 0xf6, 0xc1, 0xd4,
	0xa3, 0x06, 0xf0, 0x0c, 0x1b, 0xfb, 0x0a, 0x37, 0x84, 0xac, 0x83, 0xc5, 0x8d, 0x26, 0x8a, 0x0d,
	0xc9, 0x51, 0x74, 0x20, 0xd2, 0x07, 0xf5, 0xa8, 0x89, 0x22, 0xe2, 0x29, 0xd7, 0x08, 0xc6, 0x46,
	0xac, 0xd9, 0x96, 0xca, 0x46, 0x36, 0x69, 0x40, 0x8b, 0x7f, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x30,
	0xfb, 0x8f, 0x27, 0xec, 0x04, 0x00, 0x00,
}

func (m *NetworkInstancesL2Evpn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInstancesL2Evpn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkInstancesL2Evpn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NetworkInstance) > 0 {
		for iNdEx := len(m.NetworkInstance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NetworkInstance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintL2AldEvpnRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
			i--
			dAtA[i] = 0x8a
		}
	}
	return len(dAtA) - i, nil
}

func (m *NetworkInstancesL2EvpnNetworkInstanceList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInstancesL2EvpnNetworkInstanceList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkInstancesL2EvpnNetworkInstanceList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Protocols != nil {
		{
			size, err := m.Protocols.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintL2AldEvpnRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintL2AldEvpnRender(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Protocol != nil {
		{
			size, err := m.Protocol.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintL2AldEvpnRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Evpn != nil {
		{
			size, err := m.Evpn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintL2AldEvpnRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.VxlanTunnelEndPoint) > 0 {
		for iNdEx := len(m.VxlanTunnelEndPoint) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VxlanTunnelEndPoint[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintL2AldEvpnRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xc2
		}
	}
	return len(dAtA) - i, nil
}

func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EventType != nil {
		i -= len(*m.EventType)
		copy(dAtA[i:], *m.EventType)
		i = encodeVarintL2AldEvpnRender(dAtA, i, uint64(len(*m.EventType)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	if m.SourceInterface != nil {
		i -= len(*m.SourceInterface)
		copy(dAtA[i:], *m.SourceInterface)
		i = encodeVarintL2AldEvpnRender(dAtA, i, uint64(len(*m.SourceInterface)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc2
	}
	if m.NexthopIndex != nil {
		i = encodeVarintL2AldEvpnRender(dAtA, i, uint64(*m.NexthopIndex))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.Mode != nil {
		i -= len(*m.Mode)
		copy(dAtA[i:], *m.Mode)
		i = encodeVarintL2AldEvpnRender(dAtA, i, uint64(len(*m.Mode)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	if m.Status != nil {
		i -= len(*m.Status)
		copy(dAtA[i:], *m.Status)
		i = encodeVarintL2AldEvpnRender(dAtA, i, uint64(len(*m.Status)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	if m.RemoteIpAddress != nil {
		i -= len(*m.RemoteIpAddress)
		copy(dAtA[i:], *m.RemoteIpAddress)
		i = encodeVarintL2AldEvpnRender(dAtA, i, uint64(len(*m.RemoteIpAddress)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	if m.SourceIpAddress != nil {
		i -= len(*m.SourceIpAddress)
		copy(dAtA[i:], *m.SourceIpAddress)
		i = encodeVarintL2AldEvpnRender(dAtA, i, uint64(len(*m.SourceIpAddress)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func encodeVarintL2AldEvpnRender(dAtA []byte, offset int, v uint64) int {
	offset -= sovL2AldEvpnRender(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NetworkInstancesL2Evpn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NetworkInstance) > 0 {
		for _, e := range m.NetworkInstance {
			l = e.Size()
			n += 2 + l + sovL2AldEvpnRender(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkInstancesL2EvpnNetworkInstanceList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 2 + l + sovL2AldEvpnRender(uint64(l))
	}
	if m.Protocols != nil {
		l = m.Protocols.Size()
		n += 2 + l + sovL2AldEvpnRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Protocol != nil {
		l = m.Protocol.Size()
		n += 2 + l + sovL2AldEvpnRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Evpn != nil {
		l = m.Evpn.Size()
		n += 2 + l + sovL2AldEvpnRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VxlanTunnelEndPoint) > 0 {
		for _, e := range m.VxlanTunnelEndPoint {
			l = e.Size()
			n += 2 + l + sovL2AldEvpnRender(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceIpAddress != nil {
		l = len(*m.SourceIpAddress)
		n += 2 + l + sovL2AldEvpnRender(uint64(l))
	}
	if m.RemoteIpAddress != nil {
		l = len(*m.RemoteIpAddress)
		n += 2 + l + sovL2AldEvpnRender(uint64(l))
	}
	if m.Status != nil {
		l = len(*m.Status)
		n += 2 + l + sovL2AldEvpnRender(uint64(l))
	}
	if m.Mode != nil {
		l = len(*m.Mode)
		n += 2 + l + sovL2AldEvpnRender(uint64(l))
	}
	if m.NexthopIndex != nil {
		n += 2 + sovL2AldEvpnRender(uint64(*m.NexthopIndex))
	}
	if m.SourceInterface != nil {
		l = len(*m.SourceInterface)
		n += 2 + l + sovL2AldEvpnRender(uint64(l))
	}
	if m.EventType != nil {
		l = len(*m.EventType)
		n += 2 + l + sovL2AldEvpnRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovL2AldEvpnRender(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozL2AldEvpnRender(x uint64) (n int) {
	return sovL2AldEvpnRender(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NetworkInstancesL2Evpn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowL2AldEvpnRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: network_instances_l2evpn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: network_instances_l2evpn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 161:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkInstance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthL2AldEvpnRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkInstance = append(m.NetworkInstance, &NetworkInstancesL2EvpnNetworkInstanceList{})
			if err := m.NetworkInstance[len(m.NetworkInstance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipL2AldEvpnRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthL2AldEvpnRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthL2AldEvpnRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInstancesL2EvpnNetworkInstanceList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowL2AldEvpnRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: network_instance_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: network_instance_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthL2AldEvpnRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocols", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthL2AldEvpnRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Protocols == nil {
				m.Protocols = &NetworkInstancesL2EvpnNetworkInstanceListProtocolsType{}
			}
			if err := m.Protocols.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipL2AldEvpnRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthL2AldEvpnRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthL2AldEvpnRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowL2AldEvpnRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: protocols_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: protocols_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthL2AldEvpnRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Protocol == nil {
				m.Protocol = &NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolType{}
			}
			if err := m.Protocol.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipL2AldEvpnRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthL2AldEvpnRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthL2AldEvpnRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowL2AldEvpnRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: protocol_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: protocol_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evpn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthL2AldEvpnRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Evpn == nil {
				m.Evpn = &NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType{}
			}
			if err := m.Evpn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipL2AldEvpnRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthL2AldEvpnRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthL2AldEvpnRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowL2AldEvpnRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: evpn_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: evpn_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 152:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VxlanTunnelEndPoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthL2AldEvpnRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VxlanTunnelEndPoint = append(m.VxlanTunnelEndPoint, &NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList{})
			if err := m.VxlanTunnelEndPoint[len(m.VxlanTunnelEndPoint)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipL2AldEvpnRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthL2AldEvpnRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthL2AldEvpnRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInstancesL2EvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeVxlanTunnelEndPointList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowL2AldEvpnRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: vxlan_tunnel_end_point_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: vxlan_tunnel_end_point_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceIpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthL2AldEvpnRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SourceIpAddress = &s
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteIpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthL2AldEvpnRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RemoteIpAddress = &s
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthL2AldEvpnRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Status = &s
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthL2AldEvpnRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Mode = &s
			iNdEx = postIndex
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NexthopIndex", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NexthopIndex = &v
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceInterface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthL2AldEvpnRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SourceInterface = &s
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthL2AldEvpnRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.EventType = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipL2AldEvpnRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthL2AldEvpnRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthL2AldEvpnRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipL2AldEvpnRender(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowL2AldEvpnRender
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowL2AldEvpnRender
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowL2AldEvpnRender
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthL2AldEvpnRender
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupL2AldEvpnRender
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthL2AldEvpnRender
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthL2AldEvpnRender        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowL2AldEvpnRender          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupL2AldEvpnRender = fmt.Errorf("proto: unexpected end of group")
)
