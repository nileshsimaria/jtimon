// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: l2ald_fdb_render.proto

package schema

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NetworkInstancesFdb struct {
	NetworkInstance      []*NetworkInstancesFdbNetworkInstanceList `protobuf:"bytes,151,rep,name=network_instance,json=networkInstance" json:"network_instance,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *NetworkInstancesFdb) Reset()         { *m = NetworkInstancesFdb{} }
func (m *NetworkInstancesFdb) String() string { return proto.CompactTextString(m) }
func (*NetworkInstancesFdb) ProtoMessage()    {}
func (*NetworkInstancesFdb) Descriptor() ([]byte, []int) {
	return fileDescriptor_1194cdb0d4efc56b, []int{0}
}
func (m *NetworkInstancesFdb) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkInstancesFdb) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkInstancesFdb.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkInstancesFdb) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInstancesFdb.Merge(m, src)
}
func (m *NetworkInstancesFdb) XXX_Size() int {
	return m.Size()
}
func (m *NetworkInstancesFdb) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInstancesFdb.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInstancesFdb proto.InternalMessageInfo

func (m *NetworkInstancesFdb) GetNetworkInstance() []*NetworkInstancesFdbNetworkInstanceList {
	if m != nil {
		return m.NetworkInstance
	}
	return nil
}

type NetworkInstancesFdbNetworkInstanceList struct {
	Name                 *string                                                   `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	MacTableInfo         *NetworkInstancesFdbNetworkInstanceListMacTableInfoType   `protobuf:"bytes,171,opt,name=mac_table_info,json=macTableInfo" json:"mac_table_info,omitempty"`
	MacTable             *NetworkInstancesFdbNetworkInstanceListMacTableType       `protobuf:"bytes,151,opt,name=mac_table,json=macTable" json:"mac_table,omitempty"`
	MacipTableInfo       *NetworkInstancesFdbNetworkInstanceListMacipTableInfoType `protobuf:"bytes,181,opt,name=macip_table_info,json=macipTableInfo" json:"macip_table_info,omitempty"`
	MacipTable           *NetworkInstancesFdbNetworkInstanceListMacipTableType     `protobuf:"bytes,161,opt,name=macip_table,json=macipTable" json:"macip_table,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                  `json:"-"`
	XXX_unrecognized     []byte                                                    `json:"-"`
	XXX_sizecache        int32                                                     `json:"-"`
}

func (m *NetworkInstancesFdbNetworkInstanceList) Reset() {
	*m = NetworkInstancesFdbNetworkInstanceList{}
}
func (m *NetworkInstancesFdbNetworkInstanceList) String() string { return proto.CompactTextString(m) }
func (*NetworkInstancesFdbNetworkInstanceList) ProtoMessage()    {}
func (*NetworkInstancesFdbNetworkInstanceList) Descriptor() ([]byte, []int) {
	return fileDescriptor_1194cdb0d4efc56b, []int{0, 0}
}
func (m *NetworkInstancesFdbNetworkInstanceList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkInstancesFdbNetworkInstanceList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkInstancesFdbNetworkInstanceList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkInstancesFdbNetworkInstanceList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInstancesFdbNetworkInstanceList.Merge(m, src)
}
func (m *NetworkInstancesFdbNetworkInstanceList) XXX_Size() int {
	return m.Size()
}
func (m *NetworkInstancesFdbNetworkInstanceList) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInstancesFdbNetworkInstanceList.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInstancesFdbNetworkInstanceList proto.InternalMessageInfo

func (m *NetworkInstancesFdbNetworkInstanceList) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *NetworkInstancesFdbNetworkInstanceList) GetMacTableInfo() *NetworkInstancesFdbNetworkInstanceListMacTableInfoType {
	if m != nil {
		return m.MacTableInfo
	}
	return nil
}

func (m *NetworkInstancesFdbNetworkInstanceList) GetMacTable() *NetworkInstancesFdbNetworkInstanceListMacTableType {
	if m != nil {
		return m.MacTable
	}
	return nil
}

func (m *NetworkInstancesFdbNetworkInstanceList) GetMacipTableInfo() *NetworkInstancesFdbNetworkInstanceListMacipTableInfoType {
	if m != nil {
		return m.MacipTableInfo
	}
	return nil
}

func (m *NetworkInstancesFdbNetworkInstanceList) GetMacipTable() *NetworkInstancesFdbNetworkInstanceListMacipTableType {
	if m != nil {
		return m.MacipTable
	}
	return nil
}

type NetworkInstancesFdbNetworkInstanceListMacTableInfoType struct {
	Learning             *bool    `protobuf:"varint,71,opt,name=learning" json:"learning,omitempty"`
	AgingTime            *uint32  `protobuf:"varint,72,opt,name=aging_time,json=agingTime" json:"aging_time,omitempty"`
	TableSize            *uint32  `protobuf:"varint,73,opt,name=table_size,json=tableSize" json:"table_size,omitempty"`
	NumLocalEntries      *uint32  `protobuf:"varint,74,opt,name=num_local_entries,json=numLocalEntries" json:"num_local_entries,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkInstancesFdbNetworkInstanceListMacTableInfoType) Reset() {
	*m = NetworkInstancesFdbNetworkInstanceListMacTableInfoType{}
}
func (m *NetworkInstancesFdbNetworkInstanceListMacTableInfoType) String() string {
	return proto.CompactTextString(m)
}
func (*NetworkInstancesFdbNetworkInstanceListMacTableInfoType) ProtoMessage() {}
func (*NetworkInstancesFdbNetworkInstanceListMacTableInfoType) Descriptor() ([]byte, []int) {
	return fileDescriptor_1194cdb0d4efc56b, []int{0, 0, 0}
}
func (m *NetworkInstancesFdbNetworkInstanceListMacTableInfoType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkInstancesFdbNetworkInstanceListMacTableInfoType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkInstancesFdbNetworkInstanceListMacTableInfoType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkInstancesFdbNetworkInstanceListMacTableInfoType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInstancesFdbNetworkInstanceListMacTableInfoType.Merge(m, src)
}
func (m *NetworkInstancesFdbNetworkInstanceListMacTableInfoType) XXX_Size() int {
	return m.Size()
}
func (m *NetworkInstancesFdbNetworkInstanceListMacTableInfoType) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInstancesFdbNetworkInstanceListMacTableInfoType.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInstancesFdbNetworkInstanceListMacTableInfoType proto.InternalMessageInfo

func (m *NetworkInstancesFdbNetworkInstanceListMacTableInfoType) GetLearning() bool {
	if m != nil && m.Learning != nil {
		return *m.Learning
	}
	return false
}

func (m *NetworkInstancesFdbNetworkInstanceListMacTableInfoType) GetAgingTime() uint32 {
	if m != nil && m.AgingTime != nil {
		return *m.AgingTime
	}
	return 0
}

func (m *NetworkInstancesFdbNetworkInstanceListMacTableInfoType) GetTableSize() uint32 {
	if m != nil && m.TableSize != nil {
		return *m.TableSize
	}
	return 0
}

func (m *NetworkInstancesFdbNetworkInstanceListMacTableInfoType) GetNumLocalEntries() uint32 {
	if m != nil && m.NumLocalEntries != nil {
		return *m.NumLocalEntries
	}
	return 0
}

type NetworkInstancesFdbNetworkInstanceListMacTableType struct {
	Entries              *NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesType `protobuf:"bytes,151,opt,name=entries" json:"entries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                       `json:"-"`
	XXX_unrecognized     []byte                                                         `json:"-"`
	XXX_sizecache        int32                                                          `json:"-"`
}

func (m *NetworkInstancesFdbNetworkInstanceListMacTableType) Reset() {
	*m = NetworkInstancesFdbNetworkInstanceListMacTableType{}
}
func (m *NetworkInstancesFdbNetworkInstanceListMacTableType) String() string {
	return proto.CompactTextString(m)
}
func (*NetworkInstancesFdbNetworkInstanceListMacTableType) ProtoMessage() {}
func (*NetworkInstancesFdbNetworkInstanceListMacTableType) Descriptor() ([]byte, []int) {
	return fileDescriptor_1194cdb0d4efc56b, []int{0, 0, 1}
}
func (m *NetworkInstancesFdbNetworkInstanceListMacTableType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkInstancesFdbNetworkInstanceListMacTableType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkInstancesFdbNetworkInstanceListMacTableType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkInstancesFdbNetworkInstanceListMacTableType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInstancesFdbNetworkInstanceListMacTableType.Merge(m, src)
}
func (m *NetworkInstancesFdbNetworkInstanceListMacTableType) XXX_Size() int {
	return m.Size()
}
func (m *NetworkInstancesFdbNetworkInstanceListMacTableType) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInstancesFdbNetworkInstanceListMacTableType.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInstancesFdbNetworkInstanceListMacTableType proto.InternalMessageInfo

func (m *NetworkInstancesFdbNetworkInstanceListMacTableType) GetEntries() *NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesType {
	if m != nil {
		return m.Entries
	}
	return nil
}

type NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesType struct {
	Entry                []*NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesTypeEntryList `protobuf:"bytes,151,rep,name=entry" json:"entry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                  `json:"-"`
	XXX_unrecognized     []byte                                                                    `json:"-"`
	XXX_sizecache        int32                                                                     `json:"-"`
}

func (m *NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesType) Reset() {
	*m = NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesType{}
}
func (m *NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesType) String() string {
	return proto.CompactTextString(m)
}
func (*NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesType) ProtoMessage() {}
func (*NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesType) Descriptor() ([]byte, []int) {
	return fileDescriptor_1194cdb0d4efc56b, []int{0, 0, 1, 0}
}
func (m *NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesType.Merge(m, src)
}
func (m *NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesType) XXX_Size() int {
	return m.Size()
}
func (m *NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesType) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesType.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesType proto.InternalMessageInfo

func (m *NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesType) GetEntry() []*NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesTypeEntryList {
	if m != nil {
		return m.Entry
	}
	return nil
}

type NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesTypeEntryList struct {
	MacAddress           *string  `protobuf:"bytes,51,opt,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
	VlanId               *uint32  `protobuf:"varint,52,opt,name=vlan_id,json=vlanId" json:"vlan_id,omitempty"`
	Vni                  *uint32  `protobuf:"varint,53,opt,name=vni" json:"vni,omitempty"`
	VlanName             *string  `protobuf:"bytes,54,opt,name=vlan_name,json=vlanName" json:"vlan_name,omitempty"`
	Interface            *string  `protobuf:"bytes,55,opt,name=interface" json:"interface,omitempty"`
	EntryType            *string  `protobuf:"bytes,56,opt,name=entry_type,json=entryType" json:"entry_type,omitempty"`
	EventType            *string  `protobuf:"bytes,57,opt,name=event_type,json=eventType" json:"event_type,omitempty"`
	EthernetTagId        *uint32  `protobuf:"varint,58,opt,name=ethernet_tag_id,json=ethernetTagId" json:"ethernet_tag_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesTypeEntryList) Reset() {
	*m = NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesTypeEntryList{}
}
func (m *NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesTypeEntryList) String() string {
	return proto.CompactTextString(m)
}
func (*NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesTypeEntryList) ProtoMessage() {}
func (*NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesTypeEntryList) Descriptor() ([]byte, []int) {
	return fileDescriptor_1194cdb0d4efc56b, []int{0, 0, 1, 0, 0}
}
func (m *NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesTypeEntryList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesTypeEntryList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesTypeEntryList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesTypeEntryList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesTypeEntryList.Merge(m, src)
}
func (m *NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesTypeEntryList) XXX_Size() int {
	return m.Size()
}
func (m *NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesTypeEntryList) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesTypeEntryList.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesTypeEntryList proto.InternalMessageInfo

func (m *NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesTypeEntryList) GetMacAddress() string {
	if m != nil && m.MacAddress != nil {
		return *m.MacAddress
	}
	return ""
}

func (m *NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesTypeEntryList) GetVlanId() uint32 {
	if m != nil && m.VlanId != nil {
		return *m.VlanId
	}
	return 0
}

func (m *NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesTypeEntryList) GetVni() uint32 {
	if m != nil && m.Vni != nil {
		return *m.Vni
	}
	return 0
}

func (m *NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesTypeEntryList) GetVlanName() string {
	if m != nil && m.VlanName != nil {
		return *m.VlanName
	}
	return ""
}

func (m *NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesTypeEntryList) GetInterface() string {
	if m != nil && m.Interface != nil {
		return *m.Interface
	}
	return ""
}

func (m *NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesTypeEntryList) GetEntryType() string {
	if m != nil && m.EntryType != nil {
		return *m.EntryType
	}
	return ""
}

func (m *NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesTypeEntryList) GetEventType() string {
	if m != nil && m.EventType != nil {
		return *m.EventType
	}
	return ""
}

func (m *NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesTypeEntryList) GetEthernetTagId() uint32 {
	if m != nil && m.EthernetTagId != nil {
		return *m.EthernetTagId
	}
	return 0
}

type NetworkInstancesFdbNetworkInstanceListMacipTableInfoType struct {
	Learning             *bool    `protobuf:"varint,81,opt,name=learning" json:"learning,omitempty"`
	AgingTime            *uint32  `protobuf:"varint,82,opt,name=aging_time,json=agingTime" json:"aging_time,omitempty"`
	TableSize            *uint32  `protobuf:"varint,83,opt,name=table_size,json=tableSize" json:"table_size,omitempty"`
	ProxyMacip           *bool    `protobuf:"varint,84,opt,name=proxy_macip,json=proxyMacip" json:"proxy_macip,omitempty"`
	NumLocalEntries      *uint32  `protobuf:"varint,85,opt,name=num_local_entries,json=numLocalEntries" json:"num_local_entries,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkInstancesFdbNetworkInstanceListMacipTableInfoType) Reset() {
	*m = NetworkInstancesFdbNetworkInstanceListMacipTableInfoType{}
}
func (m *NetworkInstancesFdbNetworkInstanceListMacipTableInfoType) String() string {
	return proto.CompactTextString(m)
}
func (*NetworkInstancesFdbNetworkInstanceListMacipTableInfoType) ProtoMessage() {}
func (*NetworkInstancesFdbNetworkInstanceListMacipTableInfoType) Descriptor() ([]byte, []int) {
	return fileDescriptor_1194cdb0d4efc56b, []int{0, 0, 2}
}
func (m *NetworkInstancesFdbNetworkInstanceListMacipTableInfoType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkInstancesFdbNetworkInstanceListMacipTableInfoType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkInstancesFdbNetworkInstanceListMacipTableInfoType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkInstancesFdbNetworkInstanceListMacipTableInfoType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInstancesFdbNetworkInstanceListMacipTableInfoType.Merge(m, src)
}
func (m *NetworkInstancesFdbNetworkInstanceListMacipTableInfoType) XXX_Size() int {
	return m.Size()
}
func (m *NetworkInstancesFdbNetworkInstanceListMacipTableInfoType) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInstancesFdbNetworkInstanceListMacipTableInfoType.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInstancesFdbNetworkInstanceListMacipTableInfoType proto.InternalMessageInfo

func (m *NetworkInstancesFdbNetworkInstanceListMacipTableInfoType) GetLearning() bool {
	if m != nil && m.Learning != nil {
		return *m.Learning
	}
	return false
}

func (m *NetworkInstancesFdbNetworkInstanceListMacipTableInfoType) GetAgingTime() uint32 {
	if m != nil && m.AgingTime != nil {
		return *m.AgingTime
	}
	return 0
}

func (m *NetworkInstancesFdbNetworkInstanceListMacipTableInfoType) GetTableSize() uint32 {
	if m != nil && m.TableSize != nil {
		return *m.TableSize
	}
	return 0
}

func (m *NetworkInstancesFdbNetworkInstanceListMacipTableInfoType) GetProxyMacip() bool {
	if m != nil && m.ProxyMacip != nil {
		return *m.ProxyMacip
	}
	return false
}

func (m *NetworkInstancesFdbNetworkInstanceListMacipTableInfoType) GetNumLocalEntries() uint32 {
	if m != nil && m.NumLocalEntries != nil {
		return *m.NumLocalEntries
	}
	return 0
}

type NetworkInstancesFdbNetworkInstanceListMacipTableType struct {
	Entries              *NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesType `protobuf:"bytes,161,opt,name=entries" json:"entries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                         `json:"-"`
	XXX_unrecognized     []byte                                                           `json:"-"`
	XXX_sizecache        int32                                                            `json:"-"`
}

func (m *NetworkInstancesFdbNetworkInstanceListMacipTableType) Reset() {
	*m = NetworkInstancesFdbNetworkInstanceListMacipTableType{}
}
func (m *NetworkInstancesFdbNetworkInstanceListMacipTableType) String() string {
	return proto.CompactTextString(m)
}
func (*NetworkInstancesFdbNetworkInstanceListMacipTableType) ProtoMessage() {}
func (*NetworkInstancesFdbNetworkInstanceListMacipTableType) Descriptor() ([]byte, []int) {
	return fileDescriptor_1194cdb0d4efc56b, []int{0, 0, 3}
}
func (m *NetworkInstancesFdbNetworkInstanceListMacipTableType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkInstancesFdbNetworkInstanceListMacipTableType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkInstancesFdbNetworkInstanceListMacipTableType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkInstancesFdbNetworkInstanceListMacipTableType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInstancesFdbNetworkInstanceListMacipTableType.Merge(m, src)
}
func (m *NetworkInstancesFdbNetworkInstanceListMacipTableType) XXX_Size() int {
	return m.Size()
}
func (m *NetworkInstancesFdbNetworkInstanceListMacipTableType) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInstancesFdbNetworkInstanceListMacipTableType.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInstancesFdbNetworkInstanceListMacipTableType proto.InternalMessageInfo

func (m *NetworkInstancesFdbNetworkInstanceListMacipTableType) GetEntries() *NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesType {
	if m != nil {
		return m.Entries
	}
	return nil
}

type NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesType struct {
	Entry                []*NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesTypeEntryList `protobuf:"bytes,161,rep,name=entry" json:"entry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                    `json:"-"`
	XXX_unrecognized     []byte                                                                      `json:"-"`
	XXX_sizecache        int32                                                                       `json:"-"`
}

func (m *NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesType) Reset() {
	*m = NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesType{}
}
func (m *NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesType) String() string {
	return proto.CompactTextString(m)
}
func (*NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesType) ProtoMessage() {}
func (*NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesType) Descriptor() ([]byte, []int) {
	return fileDescriptor_1194cdb0d4efc56b, []int{0, 0, 3, 0}
}
func (m *NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesType.Merge(m, src)
}
func (m *NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesType) XXX_Size() int {
	return m.Size()
}
func (m *NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesType) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesType.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesType proto.InternalMessageInfo

func (m *NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesType) GetEntry() []*NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesTypeEntryList {
	if m != nil {
		return m.Entry
	}
	return nil
}

type NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesTypeEntryList struct {
	IpAddress            *string  `protobuf:"bytes,51,opt,name=ip_address,json=ipAddress" json:"ip_address,omitempty"`
	MacAddress           *string  `protobuf:"bytes,52,opt,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
	VlanId               *uint32  `protobuf:"varint,53,opt,name=vlan_id,json=vlanId" json:"vlan_id,omitempty"`
	Vni                  *uint32  `protobuf:"varint,54,opt,name=vni" json:"vni,omitempty"`
	VlanName             *string  `protobuf:"bytes,55,opt,name=vlan_name,json=vlanName" json:"vlan_name,omitempty"`
	Interface            *string  `protobuf:"bytes,56,opt,name=interface" json:"interface,omitempty"`
	L3Interface          *string  `protobuf:"bytes,57,opt,name=l3_interface,json=l3Interface" json:"l3_interface,omitempty"`
	EntryType            *string  `protobuf:"bytes,58,opt,name=entry_type,json=entryType" json:"entry_type,omitempty"`
	EventType            *string  `protobuf:"bytes,59,opt,name=event_type,json=eventType" json:"event_type,omitempty"`
	EthernetTagId        *uint32  `protobuf:"varint,60,opt,name=ethernet_tag_id,json=ethernetTagId" json:"ethernet_tag_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesTypeEntryList) Reset() {
	*m = NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesTypeEntryList{}
}
func (m *NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesTypeEntryList) String() string {
	return proto.CompactTextString(m)
}
func (*NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesTypeEntryList) ProtoMessage() {}
func (*NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesTypeEntryList) Descriptor() ([]byte, []int) {
	return fileDescriptor_1194cdb0d4efc56b, []int{0, 0, 3, 0, 0}
}
func (m *NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesTypeEntryList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesTypeEntryList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesTypeEntryList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesTypeEntryList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesTypeEntryList.Merge(m, src)
}
func (m *NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesTypeEntryList) XXX_Size() int {
	return m.Size()
}
func (m *NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesTypeEntryList) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesTypeEntryList.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesTypeEntryList proto.InternalMessageInfo

func (m *NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesTypeEntryList) GetIpAddress() string {
	if m != nil && m.IpAddress != nil {
		return *m.IpAddress
	}
	return ""
}

func (m *NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesTypeEntryList) GetMacAddress() string {
	if m != nil && m.MacAddress != nil {
		return *m.MacAddress
	}
	return ""
}

func (m *NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesTypeEntryList) GetVlanId() uint32 {
	if m != nil && m.VlanId != nil {
		return *m.VlanId
	}
	return 0
}

func (m *NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesTypeEntryList) GetVni() uint32 {
	if m != nil && m.Vni != nil {
		return *m.Vni
	}
	return 0
}

func (m *NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesTypeEntryList) GetVlanName() string {
	if m != nil && m.VlanName != nil {
		return *m.VlanName
	}
	return ""
}

func (m *NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesTypeEntryList) GetInterface() string {
	if m != nil && m.Interface != nil {
		return *m.Interface
	}
	return ""
}

func (m *NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesTypeEntryList) GetL3Interface() string {
	if m != nil && m.L3Interface != nil {
		return *m.L3Interface
	}
	return ""
}

func (m *NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesTypeEntryList) GetEntryType() string {
	if m != nil && m.EntryType != nil {
		return *m.EntryType
	}
	return ""
}

func (m *NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesTypeEntryList) GetEventType() string {
	if m != nil && m.EventType != nil {
		return *m.EventType
	}
	return ""
}

func (m *NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesTypeEntryList) GetEthernetTagId() uint32 {
	if m != nil && m.EthernetTagId != nil {
		return *m.EthernetTagId
	}
	return 0
}

var E_JnprNetworkInstancesFdbExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*NetworkInstancesFdb)(nil),
	Field:         114,
	Name:          "jnpr_network_instances_fdb_ext",
	Tag:           "bytes,114,opt,name=jnpr_network_instances_fdb_ext",
	Filename:      "l2ald_fdb_render.proto",
}

func init() {
	proto.RegisterType((*NetworkInstancesFdb)(nil), "network_instances_fdb")
	proto.RegisterType((*NetworkInstancesFdbNetworkInstanceList)(nil), "network_instances_fdb.network_instance_list")
	proto.RegisterType((*NetworkInstancesFdbNetworkInstanceListMacTableInfoType)(nil), "network_instances_fdb.network_instance_list.mac_table_info_type")
	proto.RegisterType((*NetworkInstancesFdbNetworkInstanceListMacTableType)(nil), "network_instances_fdb.network_instance_list.mac_table_type")
	proto.RegisterType((*NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesType)(nil), "network_instances_fdb.network_instance_list.mac_table_type.entries_type")
	proto.RegisterType((*NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesTypeEntryList)(nil), "network_instances_fdb.network_instance_list.mac_table_type.entries_type.entry_list")
	proto.RegisterType((*NetworkInstancesFdbNetworkInstanceListMacipTableInfoType)(nil), "network_instances_fdb.network_instance_list.macip_table_info_type")
	proto.RegisterType((*NetworkInstancesFdbNetworkInstanceListMacipTableType)(nil), "network_instances_fdb.network_instance_list.macip_table_type")
	proto.RegisterType((*NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesType)(nil), "network_instances_fdb.network_instance_list.macip_table_type.entries_type")
	proto.RegisterType((*NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesTypeEntryList)(nil), "network_instances_fdb.network_instance_list.macip_table_type.entries_type.entry_list")
	proto.RegisterExtension(E_JnprNetworkInstancesFdbExt)
}

func init() { proto.RegisterFile("l2ald_fdb_render.proto", fileDescriptor_1194cdb0d4efc56b) }

var fileDescriptor_1194cdb0d4efc56b = []byte{
	// 828 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0x4d, 0x6f, 0xe3, 0x44,
	0x18, 0xc7, 0xe5, 0x66, 0x97, 0x4d, 0x26, 0xdd, 0xa6, 0x78, 0xb5, 0xbb, 0xc6, 0x62, 0xb3, 0x61,
	0x0f, 0x28, 0x42, 0x34, 0x91, 0xda, 0x7d, 0xa3, 0x0b, 0xd2, 0x52, 0xa9, 0xd0, 0x54, 0x50, 0x09,
	0x27, 0x95, 0x80, 0xcb, 0x30, 0xb1, 0x9f, 0x38, 0x93, 0xda, 0x63, 0x6b, 0x66, 0x12, 0x9a, 0x9e,
	0x10, 0x5f, 0x82, 0x03, 0xa7, 0x9e, 0x39, 0x73, 0x04, 0x09, 0x4e, 0x1c, 0xe1, 0x03, 0x20, 0xa1,
	0x7e, 0x07, 0x8e, 0x48, 0x68, 0x66, 0x92, 0xe6, 0xa5, 0x6e, 0xd4, 0xb7, 0x5b, 0xfd, 0x7f, 0x1e,
	0x3f, 0xff, 0xc7, 0x33, 0xbf, 0x7f, 0x83, 0x1e, 0x44, 0xeb, 0x24, 0x0a, 0x70, 0x27, 0x68, 0x63,
	0x0e, 0x2c, 0x00, 0x5e, 0x4b, 0x79, 0x22, 0x13, 0xf7, 0x9e, 0x84, 0x08, 0x62, 0x90, 0x7c, 0x88,
	0x65, 0x92, 0x1a, 0xf1, 0xc9, 0x5f, 0x25, 0x74, 0x9f, 0x81, 0xfc, 0x36, 0xe1, 0x07, 0x98, 0x32,
	0x21, 0x09, 0xf3, 0x41, 0xa8, 0x77, 0xed, 0x2f, 0xd1, 0xea, 0x7c, 0xc1, 0xf9, 0xc1, 0xaa, 0xe4,
	0xaa, 0xc5, 0xf5, 0xf7, 0x6b, 0x99, 0xaf, 0x9c, 0x51, 0x71, 0x44, 0x85, 0xf4, 0x4a, 0x23, 0xb9,
	0x31, 0x52, 0xdd, 0xbf, 0x57, 0xce, 0x7a, 0xea, 0x56, 0xfb, 0x2d, 0x74, 0x8b, 0x91, 0x18, 0x9c,
	0x8d, 0x8a, 0x55, 0x2d, 0x6c, 0xdd, 0xfe, 0xfe, 0xf5, 0x52, 0xde, 0xf2, 0xb4, 0x64, 0x87, 0x68,
	0x25, 0x26, 0x3e, 0x96, 0xa4, 0x1d, 0x01, 0xa6, 0xac, 0x93, 0x38, 0x3f, 0x59, 0x15, 0xab, 0x5a,
	0x5c, 0x7f, 0x7d, 0x99, 0x65, 0x6a, 0xb3, 0x33, 0xb0, 0x1c, 0xa6, 0xe0, 0x2d, 0xc7, 0xc4, 0x6f,
	0x29, 0xad, 0xc1, 0x3a, 0x89, 0xfd, 0x15, 0x2a, 0x9c, 0x36, 0xa9, 0x0f, 0x56, 0x1e, 0xaf, 0xae,
	0xe8, 0xa1, 0xc7, 0xe7, 0xc7, 0xe3, 0xed, 0x18, 0xad, 0xc6, 0xc4, 0xa7, 0xe9, 0xf4, 0x57, 0xfc,
	0x6c, 0x1c, 0xb6, 0x2e, 0xeb, 0x30, 0x33, 0xc5, 0x18, 0xad, 0x68, 0x79, 0xf2, 0x25, 0x18, 0x15,
	0xa7, 0x1a, 0x9d, 0x63, 0xe3, 0xf4, 0xd1, 0x95, 0x9d, 0xb4, 0x09, 0x9a, 0x98, 0xb8, 0x3f, 0x5a,
	0xe8, 0x5e, 0xc6, 0x81, 0xda, 0x2e, 0xca, 0x47, 0x40, 0x38, 0xa3, 0x2c, 0x74, 0x3e, 0xad, 0x58,
	0xd5, 0xbc, 0x77, 0xfa, 0x6c, 0x3f, 0x42, 0x88, 0x84, 0x94, 0x85, 0x58, 0xd2, 0x18, 0x9c, 0x9d,
	0x8a, 0x55, 0xbd, 0xeb, 0x15, 0xb4, 0xd2, 0xa2, 0x31, 0xa8, 0xb2, 0x99, 0x26, 0xe8, 0x11, 0x38,
	0x0d, 0x53, 0xd6, 0x4a, 0x93, 0x1e, 0x81, 0xfd, 0x1e, 0x7a, 0x93, 0xf5, 0x63, 0x1c, 0x25, 0x3e,
	0x89, 0x30, 0x30, 0xc9, 0x29, 0x08, 0x67, 0x57, 0x77, 0x95, 0x58, 0x3f, 0xfe, 0x4c, 0xe9, 0xdb,
	0x46, 0x76, 0xff, 0xcd, 0x4d, 0x23, 0xa3, 0x17, 0xf3, 0xd1, 0x9d, 0xf1, 0x4b, 0xa3, 0x9b, 0xdd,
	0xb9, 0xc6, 0xcd, 0xd6, 0x46, 0xb3, 0xcc, 0xc1, 0x8c, 0x27, 0xbb, 0xff, 0x2d, 0xa1, 0xe5, 0xe9,
	0x8a, 0xdd, 0x43, 0xb7, 0xd5, 0xf3, 0x70, 0x1c, 0x9f, 0xe6, 0x4d, 0x79, 0xea, 0x87, 0xa1, 0x49,
	0x99, 0xb1, 0x70, 0xbf, 0x5b, 0x42, 0x68, 0xa2, 0xda, 0x8f, 0x35, 0x02, 0x98, 0x04, 0x01, 0x07,
	0x21, 0x4c, 0xae, 0xf4, 0x15, 0x7e, 0x6c, 0x14, 0xfb, 0x21, 0xba, 0x33, 0x88, 0x08, 0xc3, 0x34,
	0x70, 0x9e, 0xea, 0x63, 0x7c, 0x43, 0x3d, 0x36, 0x02, 0x7b, 0x15, 0xe5, 0x06, 0x8c, 0x3a, 0xcf,
	0xb4, 0xa8, 0xfe, 0xb4, 0x9f, 0xa0, 0x82, 0x6e, 0xd5, 0x09, 0x7d, 0x3e, 0x9d, 0xd0, 0xbc, 0xd2,
	0xf7, 0x54, 0x4a, 0xdf, 0x46, 0x05, 0xca, 0x24, 0xf0, 0x0e, 0xf1, 0xc1, 0x79, 0xa1, 0xdd, 0x26,
	0x82, 0xba, 0x5c, 0xb3, 0x9b, 0x5a, 0xde, 0x79, 0x69, 0xca, 0x5a, 0x69, 0xa9, 0x73, 0x52, 0xe5,
	0x01, 0x30, 0x69, 0xca, 0x1f, 0x8c, 0xca, 0x4a, 0xd1, 0xe5, 0x77, 0x51, 0x09, 0x64, 0x17, 0x38,
	0x03, 0x89, 0x25, 0x09, 0xd5, 0xca, 0x9b, 0x7a, 0xbb, 0xbb, 0x63, 0xb9, 0x45, 0xc2, 0x46, 0xe0,
	0xfe, 0x6a, 0xa1, 0xfb, 0x99, 0x01, 0x99, 0xe1, 0xf2, 0x8b, 0x85, 0x5c, 0x7a, 0x8b, 0xb9, 0x6c,
	0xce, 0x73, 0xf9, 0x18, 0x15, 0x53, 0x9e, 0x1c, 0x0e, 0xb1, 0x36, 0x76, 0x5a, 0x7a, 0x38, 0xd2,
	0xd2, 0xe7, 0x4a, 0xc9, 0x06, 0x77, 0x3f, 0x1b, 0xdc, 0x5f, 0x6e, 0xcd, 0xfe, 0x9f, 0xd0, 0xbb,
	0xc3, 0x04, 0xdd, 0x51, 0x90, 0x77, 0xaf, 0x15, 0xe4, 0x73, 0xe0, 0xfd, 0x2d, 0x37, 0x07, 0x6f,
	0x34, 0x86, 0xf7, 0xd8, 0xc0, 0xbb, 0x7f, 0x73, 0xae, 0x19, 0xf8, 0xfe, 0x3e, 0x8b, 0xef, 0x23,
	0x84, 0x68, 0x3a, 0x47, 0x6f, 0x81, 0xa6, 0x63, 0x78, 0xe7, 0xe8, 0x7e, 0xba, 0x88, 0xee, 0x67,
	0x59, 0x74, 0x3f, 0x3f, 0x87, 0xee, 0x17, 0x17, 0xa0, 0xfb, 0xe5, 0x3c, 0xdd, 0xef, 0xa0, 0xe5,
	0x68, 0x03, 0x4f, 0x1a, 0x0c, 0xc0, 0xc5, 0x68, 0xa3, 0x71, 0x4e, 0x00, 0x36, 0x17, 0x07, 0xe0,
	0xd5, 0x05, 0x02, 0xf0, 0x61, 0x46, 0x00, 0x36, 0x05, 0x2a, 0xf7, 0x58, 0xca, 0x71, 0xe6, 0x45,
	0x61, 0x38, 0x94, 0xf6, 0xc3, 0xda, 0x6e, 0x9f, 0xd1, 0x14, 0xf8, 0x9e, 0x69, 0x11, 0x4d, 0x60,
	0x22, 0xe1, 0xc2, 0xe1, 0x9a, 0xac, 0x07, 0xd9, 0x77, 0xec, 0xb9, 0x6a, 0xec, 0xde, 0xec, 0xaf,
	0xb9, 0xf8, 0x24, 0x68, 0x6f, 0x1f, 0xca, 0xad, 0x6f, 0xfe, 0x38, 0x29, 0x5b, 0x7f, 0x9e, 0x94,
	0xad, 0x7f, 0x4e, 0xca, 0xd6, 0xd7, 0x5e, 0x48, 0x65, 0xad, 0x67, 0x3c, 0xd4, 0xb0, 0x3a, 0xf5,
	0xa1, 0x0d, 0x3c, 0xac, 0x77, 0x81, 0x44, 0xb2, 0xdb, 0x4e, 0xe4, 0x1a, 0x65, 0x21, 0x08, 0xb9,
	0xd6, 0x93, 0x74, 0x8d, 0x11, 0x49, 0x07, 0x50, 0x4f, 0x0f, 0xc2, 0x7a, 0x4f, 0xd2, 0x3a, 0x09,
	0x48, 0x2a, 0x81, 0x8b, 0x3a, 0xee, 0xf5, 0x59, 0x22, 0xea, 0xc2, 0xef, 0x42, 0x4c, 0xfe, 0x0f,
	0x00, 0x00, 0xff, 0xff, 0x25, 0x68, 0x98, 0xde, 0xd8, 0x08, 0x00, 0x00,
}

func (m *NetworkInstancesFdb) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInstancesFdb) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkInstancesFdb) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NetworkInstance) > 0 {
		for iNdEx := len(m.NetworkInstance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NetworkInstance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintL2AldFdbRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *NetworkInstancesFdbNetworkInstanceList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInstancesFdbNetworkInstanceList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkInstancesFdbNetworkInstanceList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MacipTableInfo != nil {
		{
			size, err := m.MacipTableInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintL2AldFdbRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xaa
	}
	if m.MacTableInfo != nil {
		{
			size, err := m.MacTableInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintL2AldFdbRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xda
	}
	if m.MacipTable != nil {
		{
			size, err := m.MacipTable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintL2AldFdbRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0x8a
	}
	if m.MacTable != nil {
		{
			size, err := m.MacTable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintL2AldFdbRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintL2AldFdbRender(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *NetworkInstancesFdbNetworkInstanceListMacTableInfoType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInstancesFdbNetworkInstanceListMacTableInfoType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkInstancesFdbNetworkInstanceListMacTableInfoType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NumLocalEntries != nil {
		i = encodeVarintL2AldFdbRender(dAtA, i, uint64(*m.NumLocalEntries))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xd0
	}
	if m.TableSize != nil {
		i = encodeVarintL2AldFdbRender(dAtA, i, uint64(*m.TableSize))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xc8
	}
	if m.AgingTime != nil {
		i = encodeVarintL2AldFdbRender(dAtA, i, uint64(*m.AgingTime))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xc0
	}
	if m.Learning != nil {
		i--
		if *m.Learning {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb8
	}
	return len(dAtA) - i, nil
}

func (m *NetworkInstancesFdbNetworkInstanceListMacTableType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInstancesFdbNetworkInstanceListMacTableType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkInstancesFdbNetworkInstanceListMacTableType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Entries != nil {
		{
			size, err := m.Entries.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintL2AldFdbRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Entry) > 0 {
		for iNdEx := len(m.Entry) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entry[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintL2AldFdbRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesTypeEntryList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesTypeEntryList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesTypeEntryList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EthernetTagId != nil {
		i = encodeVarintL2AldFdbRender(dAtA, i, uint64(*m.EthernetTagId))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd0
	}
	if m.EventType != nil {
		i -= len(*m.EventType)
		copy(dAtA[i:], *m.EventType)
		i = encodeVarintL2AldFdbRender(dAtA, i, uint64(len(*m.EventType)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	if m.EntryType != nil {
		i -= len(*m.EntryType)
		copy(dAtA[i:], *m.EntryType)
		i = encodeVarintL2AldFdbRender(dAtA, i, uint64(len(*m.EntryType)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc2
	}
	if m.Interface != nil {
		i -= len(*m.Interface)
		copy(dAtA[i:], *m.Interface)
		i = encodeVarintL2AldFdbRender(dAtA, i, uint64(len(*m.Interface)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	if m.VlanName != nil {
		i -= len(*m.VlanName)
		copy(dAtA[i:], *m.VlanName)
		i = encodeVarintL2AldFdbRender(dAtA, i, uint64(len(*m.VlanName)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	if m.Vni != nil {
		i = encodeVarintL2AldFdbRender(dAtA, i, uint64(*m.Vni))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.VlanId != nil {
		i = encodeVarintL2AldFdbRender(dAtA, i, uint64(*m.VlanId))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.MacAddress != nil {
		i -= len(*m.MacAddress)
		copy(dAtA[i:], *m.MacAddress)
		i = encodeVarintL2AldFdbRender(dAtA, i, uint64(len(*m.MacAddress)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *NetworkInstancesFdbNetworkInstanceListMacipTableInfoType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInstancesFdbNetworkInstanceListMacipTableInfoType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkInstancesFdbNetworkInstanceListMacipTableInfoType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NumLocalEntries != nil {
		i = encodeVarintL2AldFdbRender(dAtA, i, uint64(*m.NumLocalEntries))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xa8
	}
	if m.ProxyMacip != nil {
		i--
		if *m.ProxyMacip {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xa0
	}
	if m.TableSize != nil {
		i = encodeVarintL2AldFdbRender(dAtA, i, uint64(*m.TableSize))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x98
	}
	if m.AgingTime != nil {
		i = encodeVarintL2AldFdbRender(dAtA, i, uint64(*m.AgingTime))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x90
	}
	if m.Learning != nil {
		i--
		if *m.Learning {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x88
	}
	return len(dAtA) - i, nil
}

func (m *NetworkInstancesFdbNetworkInstanceListMacipTableType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInstancesFdbNetworkInstanceListMacipTableType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkInstancesFdbNetworkInstanceListMacipTableType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Entries != nil {
		{
			size, err := m.Entries.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintL2AldFdbRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}

func (m *NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Entry) > 0 {
		for iNdEx := len(m.Entry) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entry[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintL2AldFdbRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
			i--
			dAtA[i] = 0x8a
		}
	}
	return len(dAtA) - i, nil
}

func (m *NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesTypeEntryList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesTypeEntryList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesTypeEntryList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EthernetTagId != nil {
		i = encodeVarintL2AldFdbRender(dAtA, i, uint64(*m.EthernetTagId))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe0
	}
	if m.EventType != nil {
		i -= len(*m.EventType)
		copy(dAtA[i:], *m.EventType)
		i = encodeVarintL2AldFdbRender(dAtA, i, uint64(len(*m.EventType)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xda
	}
	if m.EntryType != nil {
		i -= len(*m.EntryType)
		copy(dAtA[i:], *m.EntryType)
		i = encodeVarintL2AldFdbRender(dAtA, i, uint64(len(*m.EntryType)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd2
	}
	if m.L3Interface != nil {
		i -= len(*m.L3Interface)
		copy(dAtA[i:], *m.L3Interface)
		i = encodeVarintL2AldFdbRender(dAtA, i, uint64(len(*m.L3Interface)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	if m.Interface != nil {
		i -= len(*m.Interface)
		copy(dAtA[i:], *m.Interface)
		i = encodeVarintL2AldFdbRender(dAtA, i, uint64(len(*m.Interface)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc2
	}
	if m.VlanName != nil {
		i -= len(*m.VlanName)
		copy(dAtA[i:], *m.VlanName)
		i = encodeVarintL2AldFdbRender(dAtA, i, uint64(len(*m.VlanName)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	if m.Vni != nil {
		i = encodeVarintL2AldFdbRender(dAtA, i, uint64(*m.Vni))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.VlanId != nil {
		i = encodeVarintL2AldFdbRender(dAtA, i, uint64(*m.VlanId))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.MacAddress != nil {
		i -= len(*m.MacAddress)
		copy(dAtA[i:], *m.MacAddress)
		i = encodeVarintL2AldFdbRender(dAtA, i, uint64(len(*m.MacAddress)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	if m.IpAddress != nil {
		i -= len(*m.IpAddress)
		copy(dAtA[i:], *m.IpAddress)
		i = encodeVarintL2AldFdbRender(dAtA, i, uint64(len(*m.IpAddress)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func encodeVarintL2AldFdbRender(dAtA []byte, offset int, v uint64) int {
	offset -= sovL2AldFdbRender(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NetworkInstancesFdb) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NetworkInstance) > 0 {
		for _, e := range m.NetworkInstance {
			l = e.Size()
			n += 2 + l + sovL2AldFdbRender(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkInstancesFdbNetworkInstanceList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 2 + l + sovL2AldFdbRender(uint64(l))
	}
	if m.MacTable != nil {
		l = m.MacTable.Size()
		n += 2 + l + sovL2AldFdbRender(uint64(l))
	}
	if m.MacipTable != nil {
		l = m.MacipTable.Size()
		n += 2 + l + sovL2AldFdbRender(uint64(l))
	}
	if m.MacTableInfo != nil {
		l = m.MacTableInfo.Size()
		n += 2 + l + sovL2AldFdbRender(uint64(l))
	}
	if m.MacipTableInfo != nil {
		l = m.MacipTableInfo.Size()
		n += 2 + l + sovL2AldFdbRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkInstancesFdbNetworkInstanceListMacTableInfoType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Learning != nil {
		n += 3
	}
	if m.AgingTime != nil {
		n += 2 + sovL2AldFdbRender(uint64(*m.AgingTime))
	}
	if m.TableSize != nil {
		n += 2 + sovL2AldFdbRender(uint64(*m.TableSize))
	}
	if m.NumLocalEntries != nil {
		n += 2 + sovL2AldFdbRender(uint64(*m.NumLocalEntries))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkInstancesFdbNetworkInstanceListMacTableType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Entries != nil {
		l = m.Entries.Size()
		n += 2 + l + sovL2AldFdbRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entry) > 0 {
		for _, e := range m.Entry {
			l = e.Size()
			n += 2 + l + sovL2AldFdbRender(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesTypeEntryList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MacAddress != nil {
		l = len(*m.MacAddress)
		n += 2 + l + sovL2AldFdbRender(uint64(l))
	}
	if m.VlanId != nil {
		n += 2 + sovL2AldFdbRender(uint64(*m.VlanId))
	}
	if m.Vni != nil {
		n += 2 + sovL2AldFdbRender(uint64(*m.Vni))
	}
	if m.VlanName != nil {
		l = len(*m.VlanName)
		n += 2 + l + sovL2AldFdbRender(uint64(l))
	}
	if m.Interface != nil {
		l = len(*m.Interface)
		n += 2 + l + sovL2AldFdbRender(uint64(l))
	}
	if m.EntryType != nil {
		l = len(*m.EntryType)
		n += 2 + l + sovL2AldFdbRender(uint64(l))
	}
	if m.EventType != nil {
		l = len(*m.EventType)
		n += 2 + l + sovL2AldFdbRender(uint64(l))
	}
	if m.EthernetTagId != nil {
		n += 2 + sovL2AldFdbRender(uint64(*m.EthernetTagId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkInstancesFdbNetworkInstanceListMacipTableInfoType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Learning != nil {
		n += 3
	}
	if m.AgingTime != nil {
		n += 2 + sovL2AldFdbRender(uint64(*m.AgingTime))
	}
	if m.TableSize != nil {
		n += 2 + sovL2AldFdbRender(uint64(*m.TableSize))
	}
	if m.ProxyMacip != nil {
		n += 3
	}
	if m.NumLocalEntries != nil {
		n += 2 + sovL2AldFdbRender(uint64(*m.NumLocalEntries))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkInstancesFdbNetworkInstanceListMacipTableType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Entries != nil {
		l = m.Entries.Size()
		n += 2 + l + sovL2AldFdbRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entry) > 0 {
		for _, e := range m.Entry {
			l = e.Size()
			n += 2 + l + sovL2AldFdbRender(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesTypeEntryList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpAddress != nil {
		l = len(*m.IpAddress)
		n += 2 + l + sovL2AldFdbRender(uint64(l))
	}
	if m.MacAddress != nil {
		l = len(*m.MacAddress)
		n += 2 + l + sovL2AldFdbRender(uint64(l))
	}
	if m.VlanId != nil {
		n += 2 + sovL2AldFdbRender(uint64(*m.VlanId))
	}
	if m.Vni != nil {
		n += 2 + sovL2AldFdbRender(uint64(*m.Vni))
	}
	if m.VlanName != nil {
		l = len(*m.VlanName)
		n += 2 + l + sovL2AldFdbRender(uint64(l))
	}
	if m.Interface != nil {
		l = len(*m.Interface)
		n += 2 + l + sovL2AldFdbRender(uint64(l))
	}
	if m.L3Interface != nil {
		l = len(*m.L3Interface)
		n += 2 + l + sovL2AldFdbRender(uint64(l))
	}
	if m.EntryType != nil {
		l = len(*m.EntryType)
		n += 2 + l + sovL2AldFdbRender(uint64(l))
	}
	if m.EventType != nil {
		l = len(*m.EventType)
		n += 2 + l + sovL2AldFdbRender(uint64(l))
	}
	if m.EthernetTagId != nil {
		n += 2 + sovL2AldFdbRender(uint64(*m.EthernetTagId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovL2AldFdbRender(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozL2AldFdbRender(x uint64) (n int) {
	return sovL2AldFdbRender(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NetworkInstancesFdb) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowL2AldFdbRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: network_instances_fdb: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: network_instances_fdb: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkInstance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkInstance = append(m.NetworkInstance, &NetworkInstancesFdbNetworkInstanceList{})
			if err := m.NetworkInstance[len(m.NetworkInstance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipL2AldFdbRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInstancesFdbNetworkInstanceList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowL2AldFdbRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: network_instance_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: network_instance_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacTable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MacTable == nil {
				m.MacTable = &NetworkInstancesFdbNetworkInstanceListMacTableType{}
			}
			if err := m.MacTable.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 161:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacipTable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MacipTable == nil {
				m.MacipTable = &NetworkInstancesFdbNetworkInstanceListMacipTableType{}
			}
			if err := m.MacipTable.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 171:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacTableInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MacTableInfo == nil {
				m.MacTableInfo = &NetworkInstancesFdbNetworkInstanceListMacTableInfoType{}
			}
			if err := m.MacTableInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 181:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacipTableInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MacipTableInfo == nil {
				m.MacipTableInfo = &NetworkInstancesFdbNetworkInstanceListMacipTableInfoType{}
			}
			if err := m.MacipTableInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipL2AldFdbRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInstancesFdbNetworkInstanceListMacTableInfoType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowL2AldFdbRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: mac_table_info_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: mac_table_info_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 71:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Learning", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Learning = &b
		case 72:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgingTime", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AgingTime = &v
		case 73:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableSize", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TableSize = &v
		case 74:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumLocalEntries", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumLocalEntries = &v
		default:
			iNdEx = preIndex
			skippy, err := skipL2AldFdbRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInstancesFdbNetworkInstanceListMacTableType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowL2AldFdbRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: mac_table_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: mac_table_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entries == nil {
				m.Entries = &NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesType{}
			}
			if err := m.Entries.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipL2AldFdbRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowL2AldFdbRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: entries_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: entries_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entry = append(m.Entry, &NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesTypeEntryList{})
			if err := m.Entry[len(m.Entry)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipL2AldFdbRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInstancesFdbNetworkInstanceListMacTableTypeEntriesTypeEntryList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowL2AldFdbRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: entry_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: entry_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MacAddress = &s
			iNdEx = postIndex
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VlanId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VlanId = &v
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vni", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Vni = &v
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VlanName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VlanName = &s
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Interface = &s
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.EntryType = &s
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.EventType = &s
			iNdEx = postIndex
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthernetTagId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EthernetTagId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipL2AldFdbRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInstancesFdbNetworkInstanceListMacipTableInfoType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowL2AldFdbRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: macip_table_info_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: macip_table_info_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 81:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Learning", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Learning = &b
		case 82:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgingTime", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AgingTime = &v
		case 83:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableSize", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TableSize = &v
		case 84:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyMacip", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ProxyMacip = &b
		case 85:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumLocalEntries", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumLocalEntries = &v
		default:
			iNdEx = preIndex
			skippy, err := skipL2AldFdbRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInstancesFdbNetworkInstanceListMacipTableType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowL2AldFdbRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: macip_table_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: macip_table_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 161:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entries == nil {
				m.Entries = &NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesType{}
			}
			if err := m.Entries.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipL2AldFdbRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowL2AldFdbRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: entries_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: entries_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 161:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entry = append(m.Entry, &NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesTypeEntryList{})
			if err := m.Entry[len(m.Entry)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipL2AldFdbRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInstancesFdbNetworkInstanceListMacipTableTypeEntriesTypeEntryList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowL2AldFdbRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: entry_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: entry_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.IpAddress = &s
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MacAddress = &s
			iNdEx = postIndex
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VlanId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VlanId = &v
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vni", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Vni = &v
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VlanName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VlanName = &s
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Interface = &s
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L3Interface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.L3Interface = &s
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.EntryType = &s
			iNdEx = postIndex
		case 59:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.EventType = &s
			iNdEx = postIndex
		case 60:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthernetTagId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EthernetTagId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipL2AldFdbRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthL2AldFdbRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipL2AldFdbRender(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowL2AldFdbRender
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowL2AldFdbRender
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthL2AldFdbRender
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupL2AldFdbRender
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthL2AldFdbRender
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthL2AldFdbRender        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowL2AldFdbRender          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupL2AldFdbRender = fmt.Errorf("proto: unexpected end of group")
)
