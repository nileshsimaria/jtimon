// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: l2ald_oc.proto

package schema

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VlansL2Al struct {
	Vlan                 []*VlansL2AlVlanList `protobuf:"bytes,151,rep,name=vlan" json:"vlan,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *VlansL2Al) Reset()         { *m = VlansL2Al{} }
func (m *VlansL2Al) String() string { return proto.CompactTextString(m) }
func (*VlansL2Al) ProtoMessage()    {}
func (*VlansL2Al) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d20593bdd4ba4e6, []int{0}
}
func (m *VlansL2Al) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VlansL2Al) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VlansL2Al.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VlansL2Al) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VlansL2Al.Merge(m, src)
}
func (m *VlansL2Al) XXX_Size() int {
	return m.Size()
}
func (m *VlansL2Al) XXX_DiscardUnknown() {
	xxx_messageInfo_VlansL2Al.DiscardUnknown(m)
}

var xxx_messageInfo_VlansL2Al proto.InternalMessageInfo

func (m *VlansL2Al) GetVlan() []*VlansL2AlVlanList {
	if m != nil {
		return m.Vlan
	}
	return nil
}

type VlansL2AlVlanList struct {
	VlanId               *uint32                       `protobuf:"varint,51,opt,name=vlan_id,json=vlanId" json:"vlan_id,omitempty"`
	State                *VlansL2AlVlanListStateType   `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	Members              *VlansL2AlVlanListMembersType `protobuf:"bytes,152,opt,name=members" json:"members,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *VlansL2AlVlanList) Reset()         { *m = VlansL2AlVlanList{} }
func (m *VlansL2AlVlanList) String() string { return proto.CompactTextString(m) }
func (*VlansL2AlVlanList) ProtoMessage()    {}
func (*VlansL2AlVlanList) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d20593bdd4ba4e6, []int{0, 0}
}
func (m *VlansL2AlVlanList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VlansL2AlVlanList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VlansL2AlVlanList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VlansL2AlVlanList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VlansL2AlVlanList.Merge(m, src)
}
func (m *VlansL2AlVlanList) XXX_Size() int {
	return m.Size()
}
func (m *VlansL2AlVlanList) XXX_DiscardUnknown() {
	xxx_messageInfo_VlansL2AlVlanList.DiscardUnknown(m)
}

var xxx_messageInfo_VlansL2AlVlanList proto.InternalMessageInfo

func (m *VlansL2AlVlanList) GetVlanId() uint32 {
	if m != nil && m.VlanId != nil {
		return *m.VlanId
	}
	return 0
}

func (m *VlansL2AlVlanList) GetState() *VlansL2AlVlanListStateType {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *VlansL2AlVlanList) GetMembers() *VlansL2AlVlanListMembersType {
	if m != nil {
		return m.Members
	}
	return nil
}

type VlansL2AlVlanListStateType struct {
	VlanId               *uint32  `protobuf:"varint,52,opt,name=vlan_id,json=vlanId" json:"vlan_id,omitempty"`
	Name                 *string  `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	Status               *string  `protobuf:"bytes,53,opt,name=status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VlansL2AlVlanListStateType) Reset()         { *m = VlansL2AlVlanListStateType{} }
func (m *VlansL2AlVlanListStateType) String() string { return proto.CompactTextString(m) }
func (*VlansL2AlVlanListStateType) ProtoMessage()    {}
func (*VlansL2AlVlanListStateType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d20593bdd4ba4e6, []int{0, 0, 0}
}
func (m *VlansL2AlVlanListStateType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VlansL2AlVlanListStateType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VlansL2AlVlanListStateType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VlansL2AlVlanListStateType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VlansL2AlVlanListStateType.Merge(m, src)
}
func (m *VlansL2AlVlanListStateType) XXX_Size() int {
	return m.Size()
}
func (m *VlansL2AlVlanListStateType) XXX_DiscardUnknown() {
	xxx_messageInfo_VlansL2AlVlanListStateType.DiscardUnknown(m)
}

var xxx_messageInfo_VlansL2AlVlanListStateType proto.InternalMessageInfo

func (m *VlansL2AlVlanListStateType) GetVlanId() uint32 {
	if m != nil && m.VlanId != nil {
		return *m.VlanId
	}
	return 0
}

func (m *VlansL2AlVlanListStateType) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *VlansL2AlVlanListStateType) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

type VlansL2AlVlanListMembersType struct {
	Member               []*VlansL2AlVlanListMembersTypeMemberList `protobuf:"bytes,151,rep,name=member" json:"member,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *VlansL2AlVlanListMembersType) Reset()         { *m = VlansL2AlVlanListMembersType{} }
func (m *VlansL2AlVlanListMembersType) String() string { return proto.CompactTextString(m) }
func (*VlansL2AlVlanListMembersType) ProtoMessage()    {}
func (*VlansL2AlVlanListMembersType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d20593bdd4ba4e6, []int{0, 0, 1}
}
func (m *VlansL2AlVlanListMembersType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VlansL2AlVlanListMembersType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VlansL2AlVlanListMembersType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VlansL2AlVlanListMembersType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VlansL2AlVlanListMembersType.Merge(m, src)
}
func (m *VlansL2AlVlanListMembersType) XXX_Size() int {
	return m.Size()
}
func (m *VlansL2AlVlanListMembersType) XXX_DiscardUnknown() {
	xxx_messageInfo_VlansL2AlVlanListMembersType.DiscardUnknown(m)
}

var xxx_messageInfo_VlansL2AlVlanListMembersType proto.InternalMessageInfo

func (m *VlansL2AlVlanListMembersType) GetMember() []*VlansL2AlVlanListMembersTypeMemberList {
	if m != nil {
		return m.Member
	}
	return nil
}

type VlansL2AlVlanListMembersTypeMemberList struct {
	InterfaceRef         *VlansL2AlVlanListMembersTypeMemberListInterfaceRefType `protobuf:"bytes,151,opt,name=interface_ref,json=interfaceRef" json:"interface_ref,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                `json:"-"`
	XXX_unrecognized     []byte                                                  `json:"-"`
	XXX_sizecache        int32                                                   `json:"-"`
}

func (m *VlansL2AlVlanListMembersTypeMemberList) Reset() {
	*m = VlansL2AlVlanListMembersTypeMemberList{}
}
func (m *VlansL2AlVlanListMembersTypeMemberList) String() string { return proto.CompactTextString(m) }
func (*VlansL2AlVlanListMembersTypeMemberList) ProtoMessage()    {}
func (*VlansL2AlVlanListMembersTypeMemberList) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d20593bdd4ba4e6, []int{0, 0, 1, 0}
}
func (m *VlansL2AlVlanListMembersTypeMemberList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VlansL2AlVlanListMembersTypeMemberList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VlansL2AlVlanListMembersTypeMemberList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VlansL2AlVlanListMembersTypeMemberList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VlansL2AlVlanListMembersTypeMemberList.Merge(m, src)
}
func (m *VlansL2AlVlanListMembersTypeMemberList) XXX_Size() int {
	return m.Size()
}
func (m *VlansL2AlVlanListMembersTypeMemberList) XXX_DiscardUnknown() {
	xxx_messageInfo_VlansL2AlVlanListMembersTypeMemberList.DiscardUnknown(m)
}

var xxx_messageInfo_VlansL2AlVlanListMembersTypeMemberList proto.InternalMessageInfo

func (m *VlansL2AlVlanListMembersTypeMemberList) GetInterfaceRef() *VlansL2AlVlanListMembersTypeMemberListInterfaceRefType {
	if m != nil {
		return m.InterfaceRef
	}
	return nil
}

type VlansL2AlVlanListMembersTypeMemberListInterfaceRefType struct {
	State                *VlansL2AlVlanListMembersTypeMemberListInterfaceRefTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                         `json:"-"`
	XXX_unrecognized     []byte                                                           `json:"-"`
	XXX_sizecache        int32                                                            `json:"-"`
}

func (m *VlansL2AlVlanListMembersTypeMemberListInterfaceRefType) Reset() {
	*m = VlansL2AlVlanListMembersTypeMemberListInterfaceRefType{}
}
func (m *VlansL2AlVlanListMembersTypeMemberListInterfaceRefType) String() string {
	return proto.CompactTextString(m)
}
func (*VlansL2AlVlanListMembersTypeMemberListInterfaceRefType) ProtoMessage() {}
func (*VlansL2AlVlanListMembersTypeMemberListInterfaceRefType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d20593bdd4ba4e6, []int{0, 0, 1, 0, 0}
}
func (m *VlansL2AlVlanListMembersTypeMemberListInterfaceRefType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VlansL2AlVlanListMembersTypeMemberListInterfaceRefType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VlansL2AlVlanListMembersTypeMemberListInterfaceRefType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VlansL2AlVlanListMembersTypeMemberListInterfaceRefType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VlansL2AlVlanListMembersTypeMemberListInterfaceRefType.Merge(m, src)
}
func (m *VlansL2AlVlanListMembersTypeMemberListInterfaceRefType) XXX_Size() int {
	return m.Size()
}
func (m *VlansL2AlVlanListMembersTypeMemberListInterfaceRefType) XXX_DiscardUnknown() {
	xxx_messageInfo_VlansL2AlVlanListMembersTypeMemberListInterfaceRefType.DiscardUnknown(m)
}

var xxx_messageInfo_VlansL2AlVlanListMembersTypeMemberListInterfaceRefType proto.InternalMessageInfo

func (m *VlansL2AlVlanListMembersTypeMemberListInterfaceRefType) GetState() *VlansL2AlVlanListMembersTypeMemberListInterfaceRefTypeStateType {
	if m != nil {
		return m.State
	}
	return nil
}

type VlansL2AlVlanListMembersTypeMemberListInterfaceRefTypeStateType struct {
	Interface            *string  `protobuf:"bytes,51,opt,name=interface" json:"interface,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VlansL2AlVlanListMembersTypeMemberListInterfaceRefTypeStateType) Reset() {
	*m = VlansL2AlVlanListMembersTypeMemberListInterfaceRefTypeStateType{}
}
func (m *VlansL2AlVlanListMembersTypeMemberListInterfaceRefTypeStateType) String() string {
	return proto.CompactTextString(m)
}
func (*VlansL2AlVlanListMembersTypeMemberListInterfaceRefTypeStateType) ProtoMessage() {}
func (*VlansL2AlVlanListMembersTypeMemberListInterfaceRefTypeStateType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d20593bdd4ba4e6, []int{0, 0, 1, 0, 0, 0}
}
func (m *VlansL2AlVlanListMembersTypeMemberListInterfaceRefTypeStateType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VlansL2AlVlanListMembersTypeMemberListInterfaceRefTypeStateType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VlansL2AlVlanListMembersTypeMemberListInterfaceRefTypeStateType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VlansL2AlVlanListMembersTypeMemberListInterfaceRefTypeStateType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VlansL2AlVlanListMembersTypeMemberListInterfaceRefTypeStateType.Merge(m, src)
}
func (m *VlansL2AlVlanListMembersTypeMemberListInterfaceRefTypeStateType) XXX_Size() int {
	return m.Size()
}
func (m *VlansL2AlVlanListMembersTypeMemberListInterfaceRefTypeStateType) XXX_DiscardUnknown() {
	xxx_messageInfo_VlansL2AlVlanListMembersTypeMemberListInterfaceRefTypeStateType.DiscardUnknown(m)
}

var xxx_messageInfo_VlansL2AlVlanListMembersTypeMemberListInterfaceRefTypeStateType proto.InternalMessageInfo

func (m *VlansL2AlVlanListMembersTypeMemberListInterfaceRefTypeStateType) GetInterface() string {
	if m != nil && m.Interface != nil {
		return *m.Interface
	}
	return ""
}

var E_JnprVlansL2AlExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*VlansL2Al)(nil),
	Field:         50,
	Name:          "jnpr_vlans_l2al_ext",
	Tag:           "bytes,50,opt,name=jnpr_vlans_l2al_ext",
	Filename:      "l2ald_oc.proto",
}

func init() {
	proto.RegisterType((*VlansL2Al)(nil), "vlans_l2al")
	proto.RegisterType((*VlansL2AlVlanList)(nil), "vlans_l2al.vlan_list")
	proto.RegisterType((*VlansL2AlVlanListStateType)(nil), "vlans_l2al.vlan_list.state_type")
	proto.RegisterType((*VlansL2AlVlanListMembersType)(nil), "vlans_l2al.vlan_list.members_type")
	proto.RegisterType((*VlansL2AlVlanListMembersTypeMemberList)(nil), "vlans_l2al.vlan_list.members_type.member_list")
	proto.RegisterType((*VlansL2AlVlanListMembersTypeMemberListInterfaceRefType)(nil), "vlans_l2al.vlan_list.members_type.member_list.interface_ref_type")
	proto.RegisterType((*VlansL2AlVlanListMembersTypeMemberListInterfaceRefTypeStateType)(nil), "vlans_l2al.vlan_list.members_type.member_list.interface_ref_type.state_type")
	proto.RegisterExtension(E_JnprVlansL2AlExt)
}

func init() { proto.RegisterFile("l2ald_oc.proto", fileDescriptor_3d20593bdd4ba4e6) }

var fileDescriptor_3d20593bdd4ba4e6 = []byte{
	// 461 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x51, 0x4d, 0x6b, 0x13, 0x51,
	0x14, 0x65, 0x62, 0x92, 0x9a, 0x9b, 0x56, 0xe4, 0x15, 0xed, 0x30, 0x48, 0x08, 0x5d, 0x85, 0x42,
	0x66, 0x60, 0x54, 0x04, 0x41, 0xd0, 0x82, 0x88, 0x52, 0x04, 0xa7, 0xe0, 0xc2, 0xcd, 0xf3, 0x65,
	0x72, 0x33, 0x79, 0xd3, 0x99, 0x37, 0xc3, 0x7b, 0x37, 0xb5, 0xdd, 0xfa, 0x27, 0x74, 0xe5, 0xce,
	0x9d, 0x3f, 0xc4, 0xa5, 0x3f, 0x41, 0xf2, 0x0f, 0xdc, 0xb9, 0x94, 0xf9, 0x48, 0x26, 0xb5, 0x05,
	0x91, 0xee, 0xde, 0x39, 0xef, 0x9c, 0x73, 0x0f, 0xf7, 0xc2, 0xad, 0xc4, 0x17, 0xc9, 0x94, 0x67,
	0xa1, 0x9b, 0xeb, 0x8c, 0x32, 0x67, 0x97, 0x30, 0xc1, 0x14, 0x49, 0x9f, 0x73, 0xca, 0xf2, 0x8a,
	0xdc, 0xff, 0xd6, 0x01, 0x38, 0x4d, 0x84, 0x32, 0xbc, 0x50, 0xb3, 0x03, 0x68, 0x17, 0xc8, 0xfe,
	0x64, 0x0d, 0x6f, 0x8c, 0xfa, 0xfe, 0x1d, 0xb7, 0xf9, 0x2b, 0x9f, 0x3c, 0x91, 0x86, 0x82, 0x52,
	0xe3, 0xfc, 0x6a, 0x43, 0x6f, 0xcd, 0xb1, 0x01, 0x6c, 0x95, 0x40, 0x4e, 0xed, 0xfb, 0x43, 0x6b,
	0xb4, 0x73, 0xd8, 0xf9, 0xf8, 0xb4, 0x75, 0xd3, 0x0a, 0xba, 0x05, 0xfb, 0x72, 0xca, 0x1e, 0x41,
	0xc7, 0x90, 0x20, 0x2c, 0xa2, 0xad, 0x51, 0xdf, 0x1f, 0x5e, 0x19, 0xed, 0x96, 0x1a, 0x4e, 0xe7,
	0x39, 0x06, 0x95, 0x9e, 0x3d, 0x81, 0xad, 0x14, 0xd3, 0x09, 0x6a, 0x63, 0x7f, 0xae, 0xac, 0xfb,
	0x57, 0x5b, 0x6b, 0x55, 0x65, 0x5e, 0x79, 0x9c, 0x37, 0x00, 0x4d, 0x26, 0xdb, 0x6b, 0x5a, 0x3e,
	0x28, 0x5a, 0xae, 0xeb, 0x31, 0x68, 0x2b, 0x91, 0x62, 0xd9, 0xbd, 0x17, 0x94, 0x6f, 0x76, 0x17,
	0xba, 0x85, 0x75, 0x61, 0xec, 0x87, 0x25, 0x5b, 0x23, 0xe7, 0x77, 0x0b, 0xb6, 0x37, 0x87, 0xb1,
	0x17, 0xd0, 0xad, 0xf0, 0x6a, 0x6f, 0xee, 0xbf, 0x1b, 0xd6, 0xa0, 0x5a, 0x68, 0x6d, 0x77, 0xbe,
	0xb4, 0xa0, 0xbf, 0xc1, 0xb3, 0x08, 0x76, 0xa4, 0x22, 0xd4, 0x33, 0x11, 0x22, 0xd7, 0x38, 0x5b,
	0x2d, 0xef, 0xd9, 0xff, 0xe5, 0xbb, 0x17, 0x42, 0xaa, 0x05, 0x6d, 0xaf, 0xb9, 0x00, 0x67, 0xce,
	0x57, 0x0b, 0xd8, 0x65, 0x11, 0x0b, 0xff, 0x3a, 0xda, 0xd1, 0xb5, 0xe7, 0x5e, 0x3e, 0xb0, 0x73,
	0x70, 0xe1, 0x42, 0xf7, 0xa0, 0xb7, 0x76, 0xd5, 0xd7, 0x68, 0x88, 0xc7, 0xc7, 0xb0, 0x1b, 0xab,
	0x5c, 0xf3, 0xa6, 0x06, 0xc7, 0x33, 0x62, 0x7b, 0xee, 0xab, 0x85, 0x92, 0x39, 0xea, 0xd7, 0x48,
	0x1f, 0x32, 0x7d, 0x62, 0x8e, 0x51, 0x99, 0x4c, 0x1b, 0xdb, 0x2f, 0x6b, 0xf7, 0x37, 0x6a, 0x07,
	0xb7, 0x8b, 0x80, 0xb7, 0x05, 0x3e, 0xf2, 0x45, 0xf2, 0xfc, 0x8c, 0x0e, 0xdf, 0x7f, 0x5f, 0x0e,
	0xac, 0x1f, 0xcb, 0x81, 0xf5, 0x73, 0x39, 0xb0, 0xde, 0x05, 0x91, 0x24, 0x37, 0xae, 0xe2, 0x5c,
	0x85, 0xe4, 0xc9, 0x10, 0x27, 0xa8, 0x23, 0x6f, 0x8e, 0x22, 0xa1, 0xf9, 0x24, 0xa3, 0xb1, 0x54,
	0x11, 0x1a, 0x1a, 0xc7, 0x24, 0xc7, 0x4a, 0x90, 0x3c, 0x45, 0x2f, 0x3f, 0x89, 0xbc, 0x98, 0xa4,
	0x27, 0xa6, 0x22, 0x27, 0xd4, 0xc6, 0xe3, 0xf1, 0x42, 0x65, 0xc6, 0x33, 0xe1, 0x1c, 0x53, 0xf1,
	0x27, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x0e, 0x66, 0x85, 0x8b, 0x03, 0x00, 0x00,
}

func (m *VlansL2Al) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VlansL2Al) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VlansL2Al) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Vlan) > 0 {
		for iNdEx := len(m.Vlan) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vlan[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintL2AldOc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *VlansL2AlVlanList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VlansL2AlVlanList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VlansL2AlVlanList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Members != nil {
		{
			size, err := m.Members.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintL2AldOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xc2
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintL2AldOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	if m.VlanId != nil {
		i = encodeVarintL2AldOc(dAtA, i, uint64(*m.VlanId))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func (m *VlansL2AlVlanListStateType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VlansL2AlVlanListStateType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VlansL2AlVlanListStateType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != nil {
		i -= len(*m.Status)
		copy(dAtA[i:], *m.Status)
		i = encodeVarintL2AldOc(dAtA, i, uint64(len(*m.Status)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	if m.VlanId != nil {
		i = encodeVarintL2AldOc(dAtA, i, uint64(*m.VlanId))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintL2AldOc(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *VlansL2AlVlanListMembersType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VlansL2AlVlanListMembersType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VlansL2AlVlanListMembersType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Member) > 0 {
		for iNdEx := len(m.Member) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Member[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintL2AldOc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *VlansL2AlVlanListMembersTypeMemberList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VlansL2AlVlanListMembersTypeMemberList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VlansL2AlVlanListMembersTypeMemberList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.InterfaceRef != nil {
		{
			size, err := m.InterfaceRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintL2AldOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *VlansL2AlVlanListMembersTypeMemberListInterfaceRefType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VlansL2AlVlanListMembersTypeMemberListInterfaceRefType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VlansL2AlVlanListMembersTypeMemberListInterfaceRefType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintL2AldOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *VlansL2AlVlanListMembersTypeMemberListInterfaceRefTypeStateType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VlansL2AlVlanListMembersTypeMemberListInterfaceRefTypeStateType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VlansL2AlVlanListMembersTypeMemberListInterfaceRefTypeStateType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Interface != nil {
		i -= len(*m.Interface)
		copy(dAtA[i:], *m.Interface)
		i = encodeVarintL2AldOc(dAtA, i, uint64(len(*m.Interface)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func encodeVarintL2AldOc(dAtA []byte, offset int, v uint64) int {
	offset -= sovL2AldOc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VlansL2Al) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vlan) > 0 {
		for _, e := range m.Vlan {
			l = e.Size()
			n += 2 + l + sovL2AldOc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VlansL2AlVlanList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VlanId != nil {
		n += 2 + sovL2AldOc(uint64(*m.VlanId))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 2 + l + sovL2AldOc(uint64(l))
	}
	if m.Members != nil {
		l = m.Members.Size()
		n += 2 + l + sovL2AldOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VlansL2AlVlanListStateType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 2 + l + sovL2AldOc(uint64(l))
	}
	if m.VlanId != nil {
		n += 2 + sovL2AldOc(uint64(*m.VlanId))
	}
	if m.Status != nil {
		l = len(*m.Status)
		n += 2 + l + sovL2AldOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VlansL2AlVlanListMembersType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Member) > 0 {
		for _, e := range m.Member {
			l = e.Size()
			n += 2 + l + sovL2AldOc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VlansL2AlVlanListMembersTypeMemberList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InterfaceRef != nil {
		l = m.InterfaceRef.Size()
		n += 2 + l + sovL2AldOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VlansL2AlVlanListMembersTypeMemberListInterfaceRefType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 2 + l + sovL2AldOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VlansL2AlVlanListMembersTypeMemberListInterfaceRefTypeStateType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Interface != nil {
		l = len(*m.Interface)
		n += 2 + l + sovL2AldOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovL2AldOc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozL2AldOc(x uint64) (n int) {
	return sovL2AldOc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VlansL2Al) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowL2AldOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: vlans_l2al: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: vlans_l2al: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthL2AldOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vlan = append(m.Vlan, &VlansL2AlVlanList{})
			if err := m.Vlan[len(m.Vlan)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipL2AldOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthL2AldOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthL2AldOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VlansL2AlVlanList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowL2AldOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: vlan_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: vlan_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VlanId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VlanId = &v
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthL2AldOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &VlansL2AlVlanListStateType{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 152:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthL2AldOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Members == nil {
				m.Members = &VlansL2AlVlanListMembersType{}
			}
			if err := m.Members.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipL2AldOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthL2AldOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthL2AldOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VlansL2AlVlanListStateType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowL2AldOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: state_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: state_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthL2AldOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VlanId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VlanId = &v
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthL2AldOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Status = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipL2AldOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthL2AldOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthL2AldOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VlansL2AlVlanListMembersType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowL2AldOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: members_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: members_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Member", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthL2AldOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Member = append(m.Member, &VlansL2AlVlanListMembersTypeMemberList{})
			if err := m.Member[len(m.Member)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipL2AldOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthL2AldOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthL2AldOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VlansL2AlVlanListMembersTypeMemberList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowL2AldOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: member_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: member_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthL2AldOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InterfaceRef == nil {
				m.InterfaceRef = &VlansL2AlVlanListMembersTypeMemberListInterfaceRefType{}
			}
			if err := m.InterfaceRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipL2AldOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthL2AldOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthL2AldOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VlansL2AlVlanListMembersTypeMemberListInterfaceRefType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowL2AldOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: interface_ref_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: interface_ref_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthL2AldOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &VlansL2AlVlanListMembersTypeMemberListInterfaceRefTypeStateType{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipL2AldOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthL2AldOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthL2AldOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VlansL2AlVlanListMembersTypeMemberListInterfaceRefTypeStateType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowL2AldOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: state_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: state_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthL2AldOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Interface = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipL2AldOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthL2AldOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthL2AldOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipL2AldOc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowL2AldOc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowL2AldOc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowL2AldOc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthL2AldOc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupL2AldOc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthL2AldOc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthL2AldOc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowL2AldOc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupL2AldOc = fmt.Errorf("proto: unexpected end of group")
)
