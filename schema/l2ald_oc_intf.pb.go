// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: l2ald_oc_intf.proto

package schema

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InterfacesL2AlInterface struct {
	Interface            []*InterfacesL2AlInterfaceInterfaceList `protobuf:"bytes,151,rep,name=interface" json:"interface,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *InterfacesL2AlInterface) Reset()         { *m = InterfacesL2AlInterface{} }
func (m *InterfacesL2AlInterface) String() string { return proto.CompactTextString(m) }
func (*InterfacesL2AlInterface) ProtoMessage()    {}
func (*InterfacesL2AlInterface) Descriptor() ([]byte, []int) {
	return fileDescriptor_6671014b8a781111, []int{0}
}
func (m *InterfacesL2AlInterface) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesL2AlInterface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesL2AlInterface.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesL2AlInterface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesL2AlInterface.Merge(m, src)
}
func (m *InterfacesL2AlInterface) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesL2AlInterface) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesL2AlInterface.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesL2AlInterface proto.InternalMessageInfo

func (m *InterfacesL2AlInterface) GetInterface() []*InterfacesL2AlInterfaceInterfaceList {
	if m != nil {
		return m.Interface
	}
	return nil
}

type InterfacesL2AlInterfaceInterfaceList struct {
	Name                 *string                                                `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	Subinterfaces        *InterfacesL2AlInterfaceInterfaceListSubinterfacesType `protobuf:"bytes,151,opt,name=subinterfaces" json:"subinterfaces,omitempty"`
	Ethernet             *InterfacesL2AlInterfaceInterfaceListEthernetType      `protobuf:"bytes,152,opt,name=ethernet" json:"ethernet,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                               `json:"-"`
	XXX_unrecognized     []byte                                                 `json:"-"`
	XXX_sizecache        int32                                                  `json:"-"`
}

func (m *InterfacesL2AlInterfaceInterfaceList) Reset()         { *m = InterfacesL2AlInterfaceInterfaceList{} }
func (m *InterfacesL2AlInterfaceInterfaceList) String() string { return proto.CompactTextString(m) }
func (*InterfacesL2AlInterfaceInterfaceList) ProtoMessage()    {}
func (*InterfacesL2AlInterfaceInterfaceList) Descriptor() ([]byte, []int) {
	return fileDescriptor_6671014b8a781111, []int{0, 0}
}
func (m *InterfacesL2AlInterfaceInterfaceList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesL2AlInterfaceInterfaceList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesL2AlInterfaceInterfaceList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesL2AlInterfaceInterfaceList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesL2AlInterfaceInterfaceList.Merge(m, src)
}
func (m *InterfacesL2AlInterfaceInterfaceList) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesL2AlInterfaceInterfaceList) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesL2AlInterfaceInterfaceList.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesL2AlInterfaceInterfaceList proto.InternalMessageInfo

func (m *InterfacesL2AlInterfaceInterfaceList) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *InterfacesL2AlInterfaceInterfaceList) GetSubinterfaces() *InterfacesL2AlInterfaceInterfaceListSubinterfacesType {
	if m != nil {
		return m.Subinterfaces
	}
	return nil
}

func (m *InterfacesL2AlInterfaceInterfaceList) GetEthernet() *InterfacesL2AlInterfaceInterfaceListEthernetType {
	if m != nil {
		return m.Ethernet
	}
	return nil
}

type InterfacesL2AlInterfaceInterfaceListSubinterfacesType struct {
	Subinterface         []*InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceList `protobuf:"bytes,151,rep,name=subinterface" json:"subinterface,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                 `json:"-"`
	XXX_unrecognized     []byte                                                                   `json:"-"`
	XXX_sizecache        int32                                                                    `json:"-"`
}

func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesType) Reset() {
	*m = InterfacesL2AlInterfaceInterfaceListSubinterfacesType{}
}
func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesType) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesL2AlInterfaceInterfaceListSubinterfacesType) ProtoMessage() {}
func (*InterfacesL2AlInterfaceInterfaceListSubinterfacesType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6671014b8a781111, []int{0, 0, 0}
}
func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesL2AlInterfaceInterfaceListSubinterfacesType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesL2AlInterfaceInterfaceListSubinterfacesType.Merge(m, src)
}
func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesType) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesL2AlInterfaceInterfaceListSubinterfacesType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesL2AlInterfaceInterfaceListSubinterfacesType proto.InternalMessageInfo

func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesType) GetSubinterface() []*InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceList {
	if m != nil {
		return m.Subinterface
	}
	return nil
}

type InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceList struct {
	Index                *uint32                                                                        `protobuf:"varint,51,opt,name=index" json:"index,omitempty"`
	Vlan                 *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanType `protobuf:"bytes,151,opt,name=vlan" json:"vlan,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                       `json:"-"`
	XXX_unrecognized     []byte                                                                         `json:"-"`
	XXX_sizecache        int32                                                                          `json:"-"`
}

func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceList) Reset() {
	*m = InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceList{}
}
func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceList) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceList) ProtoMessage() {}
func (*InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceList) Descriptor() ([]byte, []int) {
	return fileDescriptor_6671014b8a781111, []int{0, 0, 0, 0}
}
func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceList.Merge(m, src)
}
func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceList) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceList) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceList.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceList proto.InternalMessageInfo

func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceList) GetIndex() uint32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceList) GetVlan() *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanType {
	if m != nil {
		return m.Vlan
	}
	return nil
}

type InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanType struct {
	State                *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanTypeStateType `protobuf:"bytes,152,opt,name=state" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                                `json:"-"`
	XXX_unrecognized     []byte                                                                                  `json:"-"`
	XXX_sizecache        int32                                                                                   `json:"-"`
}

func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanType) Reset() {
	*m = InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanType{}
}
func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanType) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanType) ProtoMessage() {
}
func (*InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6671014b8a781111, []int{0, 0, 0, 0, 0}
}
func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanType.Merge(m, src)
}
func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanType) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanType proto.InternalMessageInfo

func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanType) GetState() *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanTypeStateType {
	if m != nil {
		return m.State
	}
	return nil
}

type InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanTypeStateType struct {
	VlanId               *uint32  `protobuf:"varint,51,opt,name=vlan_id,json=vlanId" json:"vlan_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanTypeStateType) Reset() {
	*m = InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanTypeStateType{}
}
func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanTypeStateType) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanTypeStateType) ProtoMessage() {
}
func (*InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanTypeStateType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6671014b8a781111, []int{0, 0, 0, 0, 0, 0}
}
func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanTypeStateType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanTypeStateType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanTypeStateType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanTypeStateType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanTypeStateType.Merge(m, src)
}
func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanTypeStateType) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanTypeStateType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanTypeStateType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanTypeStateType proto.InternalMessageInfo

func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanTypeStateType) GetVlanId() uint32 {
	if m != nil && m.VlanId != nil {
		return *m.VlanId
	}
	return 0
}

type InterfacesL2AlInterfaceInterfaceListEthernetType struct {
	SwitchedVlan         *InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanType `protobuf:"bytes,151,opt,name=switched_vlan,json=switchedVlan" json:"switched_vlan,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                          `json:"-"`
	XXX_unrecognized     []byte                                                            `json:"-"`
	XXX_sizecache        int32                                                             `json:"-"`
}

func (m *InterfacesL2AlInterfaceInterfaceListEthernetType) Reset() {
	*m = InterfacesL2AlInterfaceInterfaceListEthernetType{}
}
func (m *InterfacesL2AlInterfaceInterfaceListEthernetType) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesL2AlInterfaceInterfaceListEthernetType) ProtoMessage() {}
func (*InterfacesL2AlInterfaceInterfaceListEthernetType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6671014b8a781111, []int{0, 0, 1}
}
func (m *InterfacesL2AlInterfaceInterfaceListEthernetType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesL2AlInterfaceInterfaceListEthernetType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesL2AlInterfaceInterfaceListEthernetType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesL2AlInterfaceInterfaceListEthernetType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesL2AlInterfaceInterfaceListEthernetType.Merge(m, src)
}
func (m *InterfacesL2AlInterfaceInterfaceListEthernetType) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesL2AlInterfaceInterfaceListEthernetType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesL2AlInterfaceInterfaceListEthernetType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesL2AlInterfaceInterfaceListEthernetType proto.InternalMessageInfo

func (m *InterfacesL2AlInterfaceInterfaceListEthernetType) GetSwitchedVlan() *InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanType {
	if m != nil {
		return m.SwitchedVlan
	}
	return nil
}

type InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanType struct {
	State                *InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                   `json:"-"`
	XXX_unrecognized     []byte                                                                     `json:"-"`
	XXX_sizecache        int32                                                                      `json:"-"`
}

func (m *InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanType) Reset() {
	*m = InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanType{}
}
func (m *InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanType) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanType) ProtoMessage() {}
func (*InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6671014b8a781111, []int{0, 0, 1, 0}
}
func (m *InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanType.Merge(m, src)
}
func (m *InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanType) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanType proto.InternalMessageInfo

func (m *InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanType) GetState() *InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanTypeStateType {
	if m != nil {
		return m.State
	}
	return nil
}

type InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanTypeStateType struct {
	InterfaceMode        *string  `protobuf:"bytes,51,opt,name=interface_mode,json=interfaceMode" json:"interface_mode,omitempty"`
	NativeVlan           *uint32  `protobuf:"varint,52,opt,name=native_vlan,json=nativeVlan" json:"native_vlan,omitempty"`
	AccessVlan           *uint32  `protobuf:"varint,53,opt,name=access_vlan,json=accessVlan" json:"access_vlan,omitempty"`
	TrunkVlans           []string `protobuf:"bytes,54,rep,name=trunk_vlans,json=trunkVlans" json:"trunk_vlans,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanTypeStateType) Reset() {
	*m = InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanTypeStateType{}
}
func (m *InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanTypeStateType) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanTypeStateType) ProtoMessage() {}
func (*InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanTypeStateType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6671014b8a781111, []int{0, 0, 1, 0, 0}
}
func (m *InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanTypeStateType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanTypeStateType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanTypeStateType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanTypeStateType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanTypeStateType.Merge(m, src)
}
func (m *InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanTypeStateType) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanTypeStateType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanTypeStateType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanTypeStateType proto.InternalMessageInfo

func (m *InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanTypeStateType) GetInterfaceMode() string {
	if m != nil && m.InterfaceMode != nil {
		return *m.InterfaceMode
	}
	return ""
}

func (m *InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanTypeStateType) GetNativeVlan() uint32 {
	if m != nil && m.NativeVlan != nil {
		return *m.NativeVlan
	}
	return 0
}

func (m *InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanTypeStateType) GetAccessVlan() uint32 {
	if m != nil && m.AccessVlan != nil {
		return *m.AccessVlan
	}
	return 0
}

func (m *InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanTypeStateType) GetTrunkVlans() []string {
	if m != nil {
		return m.TrunkVlans
	}
	return nil
}

var E_JnprInterfacesL2AlInterfaceExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*InterfacesL2AlInterface)(nil),
	Field:         49,
	Name:          "jnpr_interfaces_l2al_interface_ext",
	Tag:           "bytes,49,opt,name=jnpr_interfaces_l2al_interface_ext",
	Filename:      "l2ald_oc_intf.proto",
}

func init() {
	proto.RegisterType((*InterfacesL2AlInterface)(nil), "interfaces_l2al_interface")
	proto.RegisterType((*InterfacesL2AlInterfaceInterfaceList)(nil), "interfaces_l2al_interface.interface_list")
	proto.RegisterType((*InterfacesL2AlInterfaceInterfaceListSubinterfacesType)(nil), "interfaces_l2al_interface.interface_list.subinterfaces_type")
	proto.RegisterType((*InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceList)(nil), "interfaces_l2al_interface.interface_list.subinterfaces_type.subinterface_list")
	proto.RegisterType((*InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanType)(nil), "interfaces_l2al_interface.interface_list.subinterfaces_type.subinterface_list.vlan_type")
	proto.RegisterType((*InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanTypeStateType)(nil), "interfaces_l2al_interface.interface_list.subinterfaces_type.subinterface_list.vlan_type.state_type")
	proto.RegisterType((*InterfacesL2AlInterfaceInterfaceListEthernetType)(nil), "interfaces_l2al_interface.interface_list.ethernet_type")
	proto.RegisterType((*InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanType)(nil), "interfaces_l2al_interface.interface_list.ethernet_type.switched_vlan_type")
	proto.RegisterType((*InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanTypeStateType)(nil), "interfaces_l2al_interface.interface_list.ethernet_type.switched_vlan_type.state_type")
	proto.RegisterExtension(E_JnprInterfacesL2AlInterfaceExt)
}

func init() { proto.RegisterFile("l2ald_oc_intf.proto", fileDescriptor_6671014b8a781111) }

var fileDescriptor_6671014b8a781111 = []byte{
	// 577 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xe5, 0xa6, 0x85, 0x64, 0xd2, 0x20, 0xb1, 0x3d, 0x34, 0x35, 0x52, 0x88, 0x2a, 0x55,
	0x0a, 0x87, 0xd8, 0x22, 0xfc, 0x93, 0x10, 0x07, 0x54, 0x09, 0x89, 0x56, 0xd0, 0x83, 0xf9, 0x23,
	0xc4, 0xc5, 0x6c, 0xec, 0x69, 0xb2, 0x89, 0xb3, 0xb6, 0xbc, 0x93, 0x36, 0xe5, 0x82, 0xc4, 0x43,
	0x00, 0x12, 0x07, 0xde, 0x80, 0xe7, 0xe0, 0x46, 0x1f, 0x80, 0x03, 0xca, 0x85, 0xd7, 0x40, 0xf6,
	0xd6, 0x4e, 0xac, 0x10, 0xa9, 0x82, 0x72, 0xdc, 0x6f, 0x66, 0xbe, 0x6f, 0xf6, 0x67, 0x2f, 0x6c,
	0x04, 0x1d, 0x1e, 0xf8, 0x6e, 0xe8, 0xb9, 0x42, 0xd2, 0xa1, 0x15, 0xc5, 0x21, 0x85, 0xe6, 0x06,
	0x61, 0x80, 0x23, 0xa4, 0xf8, 0xc4, 0xa5, 0x30, 0xd2, 0xe2, 0xf6, 0xf7, 0x0a, 0x6c, 0x09, 0x49,
	0x18, 0x1f, 0x72, 0x0f, 0x95, 0x9b, 0xcc, 0xb9, 0xf9, 0x99, 0x3d, 0x86, 0x4a, 0x7e, 0xa8, 0x7f,
	0x34, 0x9a, 0xa5, 0x56, 0xb5, 0x73, 0xc3, 0x5a, 0xda, 0x3f, 0xab, 0xb8, 0x81, 0x50, 0xe4, 0xcc,
	0x86, 0xcd, 0x5f, 0x65, 0xb8, 0x52, 0xac, 0xb2, 0x2d, 0x58, 0x95, 0x7c, 0x84, 0xf5, 0x5b, 0x4d,
	0xa3, 0x55, 0xd9, 0x5d, 0x7b, 0xff, 0x70, 0xa5, 0x6c, 0x38, 0xa9, 0xc4, 0x3c, 0xa8, 0xa9, 0x71,
	0x77, 0x96, 0x93, 0x64, 0x1b, 0xad, 0x6a, 0xe7, 0xc1, 0xb9, 0xb3, 0xad, 0xc2, 0xbc, 0x4b, 0x27,
	0x11, 0x3a, 0x45, 0x4f, 0xf6, 0x1c, 0xca, 0x48, 0x7d, 0x8c, 0x25, 0x52, 0xfd, 0x93, 0xf6, 0xbf,
	0x77, 0x7e, 0xff, 0x6c, 0x54, 0x5b, 0xe7, 0x4e, 0xe6, 0x8f, 0x12, 0xb0, 0xc5, 0x6c, 0xa6, 0x60,
	0x7d, 0x5e, 0xcd, 0x60, 0x1e, 0xfc, 0xcb, 0x85, 0x0a, 0x92, 0x26, 0x5e, 0x08, 0x31, 0x4f, 0x57,
	0xe0, 0xea, 0x42, 0x0f, 0xbb, 0x06, 0x6b, 0x42, 0xfa, 0x38, 0x49, 0xc1, 0xd7, 0x32, 0xf0, 0x5a,
	0x63, 0x23, 0x58, 0x3d, 0x0a, 0xb8, 0xcc, 0x80, 0xbf, 0xba, 0xd8, 0xfd, 0xac, 0xc4, 0x5b, 0x13,
	0x4b, 0x63, 0xcc, 0xaf, 0x06, 0x54, 0x72, 0x8d, 0xbd, 0x85, 0x35, 0x45, 0x9c, 0x30, 0xfb, 0x1c,
	0xde, 0xff, 0x4a, 0xb7, 0xd2, 0x18, 0xbd, 0x88, 0x8e, 0x34, 0x77, 0x00, 0x66, 0x22, 0xdb, 0x84,
	0xcb, 0x69, 0xb3, 0xf0, 0x35, 0x25, 0xe7, 0x52, 0x72, 0xdc, 0xf3, 0xcd, 0x2f, 0x25, 0xa8, 0x15,
	0x3e, 0x3d, 0x8b, 0xa0, 0xa6, 0x8e, 0x05, 0x79, 0x7d, 0xf4, 0xdd, 0x79, 0x74, 0xfb, 0x7f, 0xf9,
	0x2f, 0x59, 0x05, 0x37, 0xbd, 0xe3, 0x7a, 0xa6, 0xbd, 0x4c, 0xa0, 0x7d, 0x5e, 0x01, 0xb6, 0xd8,
	0xc4, 0x82, 0x8c, 0xde, 0xd9, 0x02, 0x2f, 0x2e, 0x6e, 0x81, 0x3f, 0xf0, 0xfa, 0x60, 0x14, 0x80,
	0xed, 0xcc, 0x3f, 0xef, 0x51, 0xe8, 0x9f, 0x3d, 0x6b, 0xa7, 0x96, 0xab, 0x4f, 0x43, 0x1f, 0xd9,
	0x75, 0xa8, 0x4a, 0x4e, 0xe2, 0x08, 0x35, 0xaa, 0xdb, 0x29, 0x5b, 0xd0, 0x52, 0x72, 0xb7, 0xa4,
	0x81, 0x7b, 0x1e, 0x2a, 0xa5, 0x1b, 0xee, 0xe8, 0x06, 0x2d, 0x65, 0x0d, 0x14, 0x8f, 0xe5, 0x30,
	0xad, 0xab, 0xfa, 0xdd, 0x66, 0xa9, 0x55, 0x71, 0x20, 0x95, 0x92, 0xba, 0xba, 0xff, 0x0e, 0xb6,
	0x07, 0x32, 0x8a, 0xdd, 0xa5, 0x97, 0x77, 0x71, 0x42, 0x6c, 0xd3, 0xda, 0x1f, 0x4b, 0x11, 0x61,
	0x7c, 0x80, 0x74, 0x1c, 0xc6, 0x43, 0xf5, 0x0c, 0xa5, 0x0a, 0x63, 0x55, 0xbf, 0x99, 0xb2, 0x33,
	0x97, 0xb3, 0x73, 0x1a, 0x89, 0xfd, 0x5e, 0x5e, 0x7e, 0xd2, 0xe1, 0x41, 0x7e, 0x7a, 0x34, 0xa1,
	0xdd, 0x37, 0xdf, 0xa6, 0x0d, 0xe3, 0x74, 0xda, 0x30, 0x7e, 0x4e, 0x1b, 0xc6, 0x6b, 0xa7, 0x27,
	0xc8, 0x1a, 0xe8, 0x2c, 0x4b, 0x22, 0xd9, 0xc2, 0xc3, 0x2e, 0xc6, 0x3d, 0xbb, 0x8f, 0x3c, 0xa0,
	0x7e, 0x37, 0xa4, 0xb6, 0x90, 0x3d, 0x54, 0xd4, 0x1e, 0x90, 0x68, 0x6b, 0x12, 0x76, 0x34, 0xec,
	0xd9, 0x03, 0x12, 0x36, 0xf7, 0x79, 0x44, 0x18, 0x2b, 0xdb, 0x1d, 0x8c, 0x65, 0xa8, 0x6c, 0xe5,
	0xf5, 0x71, 0xc4, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x24, 0x77, 0x0e, 0x0c, 0xdf, 0x05, 0x00,
	0x00,
}

func (m *InterfacesL2AlInterface) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesL2AlInterface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesL2AlInterface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Interface) > 0 {
		for iNdEx := len(m.Interface) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Interface[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintL2AldOcIntf(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesL2AlInterfaceInterfaceList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesL2AlInterfaceInterfaceList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesL2AlInterfaceInterfaceList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ethernet != nil {
		{
			size, err := m.Ethernet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintL2AldOcIntf(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xc2
	}
	if m.Subinterfaces != nil {
		{
			size, err := m.Subinterfaces.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintL2AldOcIntf(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintL2AldOcIntf(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Subinterface) > 0 {
		for iNdEx := len(m.Subinterface) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subinterface[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintL2AldOcIntf(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Vlan != nil {
		{
			size, err := m.Vlan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintL2AldOcIntf(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	if m.Index != nil {
		i = encodeVarintL2AldOcIntf(dAtA, i, uint64(*m.Index))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintL2AldOcIntf(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanTypeStateType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanTypeStateType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanTypeStateType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.VlanId != nil {
		i = encodeVarintL2AldOcIntf(dAtA, i, uint64(*m.VlanId))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesL2AlInterfaceInterfaceListEthernetType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesL2AlInterfaceInterfaceListEthernetType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesL2AlInterfaceInterfaceListEthernetType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SwitchedVlan != nil {
		{
			size, err := m.SwitchedVlan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintL2AldOcIntf(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintL2AldOcIntf(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanTypeStateType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanTypeStateType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanTypeStateType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TrunkVlans) > 0 {
		for iNdEx := len(m.TrunkVlans) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TrunkVlans[iNdEx])
			copy(dAtA[i:], m.TrunkVlans[iNdEx])
			i = encodeVarintL2AldOcIntf(dAtA, i, uint64(len(m.TrunkVlans[iNdEx])))
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xb2
		}
	}
	if m.AccessVlan != nil {
		i = encodeVarintL2AldOcIntf(dAtA, i, uint64(*m.AccessVlan))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.NativeVlan != nil {
		i = encodeVarintL2AldOcIntf(dAtA, i, uint64(*m.NativeVlan))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.InterfaceMode != nil {
		i -= len(*m.InterfaceMode)
		copy(dAtA[i:], *m.InterfaceMode)
		i = encodeVarintL2AldOcIntf(dAtA, i, uint64(len(*m.InterfaceMode)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func encodeVarintL2AldOcIntf(dAtA []byte, offset int, v uint64) int {
	offset -= sovL2AldOcIntf(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InterfacesL2AlInterface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Interface) > 0 {
		for _, e := range m.Interface {
			l = e.Size()
			n += 2 + l + sovL2AldOcIntf(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesL2AlInterfaceInterfaceList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 2 + l + sovL2AldOcIntf(uint64(l))
	}
	if m.Subinterfaces != nil {
		l = m.Subinterfaces.Size()
		n += 2 + l + sovL2AldOcIntf(uint64(l))
	}
	if m.Ethernet != nil {
		l = m.Ethernet.Size()
		n += 2 + l + sovL2AldOcIntf(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Subinterface) > 0 {
		for _, e := range m.Subinterface {
			l = e.Size()
			n += 2 + l + sovL2AldOcIntf(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != nil {
		n += 2 + sovL2AldOcIntf(uint64(*m.Index))
	}
	if m.Vlan != nil {
		l = m.Vlan.Size()
		n += 2 + l + sovL2AldOcIntf(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 2 + l + sovL2AldOcIntf(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanTypeStateType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VlanId != nil {
		n += 2 + sovL2AldOcIntf(uint64(*m.VlanId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesL2AlInterfaceInterfaceListEthernetType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SwitchedVlan != nil {
		l = m.SwitchedVlan.Size()
		n += 2 + l + sovL2AldOcIntf(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 2 + l + sovL2AldOcIntf(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanTypeStateType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InterfaceMode != nil {
		l = len(*m.InterfaceMode)
		n += 2 + l + sovL2AldOcIntf(uint64(l))
	}
	if m.NativeVlan != nil {
		n += 2 + sovL2AldOcIntf(uint64(*m.NativeVlan))
	}
	if m.AccessVlan != nil {
		n += 2 + sovL2AldOcIntf(uint64(*m.AccessVlan))
	}
	if len(m.TrunkVlans) > 0 {
		for _, s := range m.TrunkVlans {
			l = len(s)
			n += 2 + l + sovL2AldOcIntf(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovL2AldOcIntf(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozL2AldOcIntf(x uint64) (n int) {
	return sovL2AldOcIntf(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InterfacesL2AlInterface) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowL2AldOcIntf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: interfaces_l2al_interface: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: interfaces_l2al_interface: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldOcIntf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interface = append(m.Interface, &InterfacesL2AlInterfaceInterfaceList{})
			if err := m.Interface[len(m.Interface)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipL2AldOcIntf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesL2AlInterfaceInterfaceList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowL2AldOcIntf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: interface_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: interface_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldOcIntf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subinterfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldOcIntf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subinterfaces == nil {
				m.Subinterfaces = &InterfacesL2AlInterfaceInterfaceListSubinterfacesType{}
			}
			if err := m.Subinterfaces.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 152:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ethernet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldOcIntf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ethernet == nil {
				m.Ethernet = &InterfacesL2AlInterfaceInterfaceListEthernetType{}
			}
			if err := m.Ethernet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipL2AldOcIntf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowL2AldOcIntf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: subinterfaces_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: subinterfaces_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subinterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldOcIntf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subinterface = append(m.Subinterface, &InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceList{})
			if err := m.Subinterface[len(m.Subinterface)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipL2AldOcIntf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowL2AldOcIntf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: subinterface_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: subinterface_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldOcIntf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Index = &v
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldOcIntf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vlan == nil {
				m.Vlan = &InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanType{}
			}
			if err := m.Vlan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipL2AldOcIntf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowL2AldOcIntf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: vlan_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: vlan_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 152:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldOcIntf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanTypeStateType{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipL2AldOcIntf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesL2AlInterfaceInterfaceListSubinterfacesTypeSubinterfaceListVlanTypeStateType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowL2AldOcIntf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: state_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: state_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VlanId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldOcIntf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VlanId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipL2AldOcIntf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesL2AlInterfaceInterfaceListEthernetType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowL2AldOcIntf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ethernet_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ethernet_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwitchedVlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldOcIntf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SwitchedVlan == nil {
				m.SwitchedVlan = &InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanType{}
			}
			if err := m.SwitchedVlan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipL2AldOcIntf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowL2AldOcIntf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: switched_vlan_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: switched_vlan_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldOcIntf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanTypeStateType{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipL2AldOcIntf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesL2AlInterfaceInterfaceListEthernetTypeSwitchedVlanTypeStateType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowL2AldOcIntf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: state_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: state_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldOcIntf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.InterfaceMode = &s
			iNdEx = postIndex
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeVlan", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldOcIntf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NativeVlan = &v
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessVlan", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldOcIntf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AccessVlan = &v
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrunkVlans", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowL2AldOcIntf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrunkVlans = append(m.TrunkVlans, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipL2AldOcIntf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthL2AldOcIntf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipL2AldOcIntf(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowL2AldOcIntf
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowL2AldOcIntf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowL2AldOcIntf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthL2AldOcIntf
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupL2AldOcIntf
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthL2AldOcIntf
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthL2AldOcIntf        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowL2AldOcIntf          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupL2AldOcIntf = fmt.Errorf("proto: unexpected end of group")
)
