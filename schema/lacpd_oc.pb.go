// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lacpd_oc.proto

package schema

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LacpLacp struct {
	State                *LacpLacpStateType      `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	Interfaces           *LacpLacpInterfacesType `protobuf:"bytes,152,opt,name=interfaces" json:"interfaces,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *LacpLacp) Reset()         { *m = LacpLacp{} }
func (m *LacpLacp) String() string { return proto.CompactTextString(m) }
func (*LacpLacp) ProtoMessage()    {}
func (*LacpLacp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bfdbbc56d07876e, []int{0}
}
func (m *LacpLacp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LacpLacp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LacpLacp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LacpLacp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LacpLacp.Merge(m, src)
}
func (m *LacpLacp) XXX_Size() int {
	return m.Size()
}
func (m *LacpLacp) XXX_DiscardUnknown() {
	xxx_messageInfo_LacpLacp.DiscardUnknown(m)
}

var xxx_messageInfo_LacpLacp proto.InternalMessageInfo

func (m *LacpLacp) GetState() *LacpLacpStateType {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *LacpLacp) GetInterfaces() *LacpLacpInterfacesType {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

type LacpLacpStateType struct {
	SystemPriority       *uint32  `protobuf:"varint,51,opt,name=system_priority,json=systemPriority" json:"system_priority,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LacpLacpStateType) Reset()         { *m = LacpLacpStateType{} }
func (m *LacpLacpStateType) String() string { return proto.CompactTextString(m) }
func (*LacpLacpStateType) ProtoMessage()    {}
func (*LacpLacpStateType) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bfdbbc56d07876e, []int{0, 0}
}
func (m *LacpLacpStateType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LacpLacpStateType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LacpLacpStateType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LacpLacpStateType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LacpLacpStateType.Merge(m, src)
}
func (m *LacpLacpStateType) XXX_Size() int {
	return m.Size()
}
func (m *LacpLacpStateType) XXX_DiscardUnknown() {
	xxx_messageInfo_LacpLacpStateType.DiscardUnknown(m)
}

var xxx_messageInfo_LacpLacpStateType proto.InternalMessageInfo

func (m *LacpLacpStateType) GetSystemPriority() uint32 {
	if m != nil && m.SystemPriority != nil {
		return *m.SystemPriority
	}
	return 0
}

type LacpLacpInterfacesType struct {
	Interface            []*LacpLacpInterfacesTypeInterfaceList `protobuf:"bytes,151,rep,name=interface" json:"interface,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *LacpLacpInterfacesType) Reset()         { *m = LacpLacpInterfacesType{} }
func (m *LacpLacpInterfacesType) String() string { return proto.CompactTextString(m) }
func (*LacpLacpInterfacesType) ProtoMessage()    {}
func (*LacpLacpInterfacesType) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bfdbbc56d07876e, []int{0, 1}
}
func (m *LacpLacpInterfacesType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LacpLacpInterfacesType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LacpLacpInterfacesType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LacpLacpInterfacesType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LacpLacpInterfacesType.Merge(m, src)
}
func (m *LacpLacpInterfacesType) XXX_Size() int {
	return m.Size()
}
func (m *LacpLacpInterfacesType) XXX_DiscardUnknown() {
	xxx_messageInfo_LacpLacpInterfacesType.DiscardUnknown(m)
}

var xxx_messageInfo_LacpLacpInterfacesType proto.InternalMessageInfo

func (m *LacpLacpInterfacesType) GetInterface() []*LacpLacpInterfacesTypeInterfaceList {
	if m != nil {
		return m.Interface
	}
	return nil
}

type LacpLacpInterfacesTypeInterfaceList struct {
	Name                 *string                                         `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	State                *LacpLacpInterfacesTypeInterfaceListStateType   `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	Members              *LacpLacpInterfacesTypeInterfaceListMembersType `protobuf:"bytes,152,opt,name=members" json:"members,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                        `json:"-"`
	XXX_unrecognized     []byte                                          `json:"-"`
	XXX_sizecache        int32                                           `json:"-"`
}

func (m *LacpLacpInterfacesTypeInterfaceList) Reset()         { *m = LacpLacpInterfacesTypeInterfaceList{} }
func (m *LacpLacpInterfacesTypeInterfaceList) String() string { return proto.CompactTextString(m) }
func (*LacpLacpInterfacesTypeInterfaceList) ProtoMessage()    {}
func (*LacpLacpInterfacesTypeInterfaceList) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bfdbbc56d07876e, []int{0, 1, 0}
}
func (m *LacpLacpInterfacesTypeInterfaceList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LacpLacpInterfacesTypeInterfaceList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LacpLacpInterfacesTypeInterfaceList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LacpLacpInterfacesTypeInterfaceList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LacpLacpInterfacesTypeInterfaceList.Merge(m, src)
}
func (m *LacpLacpInterfacesTypeInterfaceList) XXX_Size() int {
	return m.Size()
}
func (m *LacpLacpInterfacesTypeInterfaceList) XXX_DiscardUnknown() {
	xxx_messageInfo_LacpLacpInterfacesTypeInterfaceList.DiscardUnknown(m)
}

var xxx_messageInfo_LacpLacpInterfacesTypeInterfaceList proto.InternalMessageInfo

func (m *LacpLacpInterfacesTypeInterfaceList) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *LacpLacpInterfacesTypeInterfaceList) GetState() *LacpLacpInterfacesTypeInterfaceListStateType {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *LacpLacpInterfacesTypeInterfaceList) GetMembers() *LacpLacpInterfacesTypeInterfaceListMembersType {
	if m != nil {
		return m.Members
	}
	return nil
}

type LacpLacpInterfacesTypeInterfaceListStateType struct {
	Name                 *string  `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	Interval             *string  `protobuf:"bytes,52,opt,name=interval" json:"interval,omitempty"`
	LacpMode             *string  `protobuf:"bytes,53,opt,name=lacp_mode,json=lacpMode" json:"lacp_mode,omitempty"`
	SystemIdMac          *string  `protobuf:"bytes,54,opt,name=system_id_mac,json=systemIdMac" json:"system_id_mac,omitempty"`
	SystemPriority       *uint32  `protobuf:"varint,55,opt,name=system_priority,json=systemPriority" json:"system_priority,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LacpLacpInterfacesTypeInterfaceListStateType) Reset() {
	*m = LacpLacpInterfacesTypeInterfaceListStateType{}
}
func (m *LacpLacpInterfacesTypeInterfaceListStateType) String() string {
	return proto.CompactTextString(m)
}
func (*LacpLacpInterfacesTypeInterfaceListStateType) ProtoMessage() {}
func (*LacpLacpInterfacesTypeInterfaceListStateType) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bfdbbc56d07876e, []int{0, 1, 0, 0}
}
func (m *LacpLacpInterfacesTypeInterfaceListStateType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LacpLacpInterfacesTypeInterfaceListStateType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LacpLacpInterfacesTypeInterfaceListStateType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LacpLacpInterfacesTypeInterfaceListStateType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LacpLacpInterfacesTypeInterfaceListStateType.Merge(m, src)
}
func (m *LacpLacpInterfacesTypeInterfaceListStateType) XXX_Size() int {
	return m.Size()
}
func (m *LacpLacpInterfacesTypeInterfaceListStateType) XXX_DiscardUnknown() {
	xxx_messageInfo_LacpLacpInterfacesTypeInterfaceListStateType.DiscardUnknown(m)
}

var xxx_messageInfo_LacpLacpInterfacesTypeInterfaceListStateType proto.InternalMessageInfo

func (m *LacpLacpInterfacesTypeInterfaceListStateType) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *LacpLacpInterfacesTypeInterfaceListStateType) GetInterval() string {
	if m != nil && m.Interval != nil {
		return *m.Interval
	}
	return ""
}

func (m *LacpLacpInterfacesTypeInterfaceListStateType) GetLacpMode() string {
	if m != nil && m.LacpMode != nil {
		return *m.LacpMode
	}
	return ""
}

func (m *LacpLacpInterfacesTypeInterfaceListStateType) GetSystemIdMac() string {
	if m != nil && m.SystemIdMac != nil {
		return *m.SystemIdMac
	}
	return ""
}

func (m *LacpLacpInterfacesTypeInterfaceListStateType) GetSystemPriority() uint32 {
	if m != nil && m.SystemPriority != nil {
		return *m.SystemPriority
	}
	return 0
}

type LacpLacpInterfacesTypeInterfaceListMembersType struct {
	Member               []*LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList `protobuf:"bytes,151,rep,name=member" json:"member,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                    `json:"-"`
	XXX_unrecognized     []byte                                                      `json:"-"`
	XXX_sizecache        int32                                                       `json:"-"`
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersType) Reset() {
	*m = LacpLacpInterfacesTypeInterfaceListMembersType{}
}
func (m *LacpLacpInterfacesTypeInterfaceListMembersType) String() string {
	return proto.CompactTextString(m)
}
func (*LacpLacpInterfacesTypeInterfaceListMembersType) ProtoMessage() {}
func (*LacpLacpInterfacesTypeInterfaceListMembersType) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bfdbbc56d07876e, []int{0, 1, 0, 1}
}
func (m *LacpLacpInterfacesTypeInterfaceListMembersType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LacpLacpInterfacesTypeInterfaceListMembersType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LacpLacpInterfacesTypeInterfaceListMembersType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LacpLacpInterfacesTypeInterfaceListMembersType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LacpLacpInterfacesTypeInterfaceListMembersType.Merge(m, src)
}
func (m *LacpLacpInterfacesTypeInterfaceListMembersType) XXX_Size() int {
	return m.Size()
}
func (m *LacpLacpInterfacesTypeInterfaceListMembersType) XXX_DiscardUnknown() {
	xxx_messageInfo_LacpLacpInterfacesTypeInterfaceListMembersType.DiscardUnknown(m)
}

var xxx_messageInfo_LacpLacpInterfacesTypeInterfaceListMembersType proto.InternalMessageInfo

func (m *LacpLacpInterfacesTypeInterfaceListMembersType) GetMember() []*LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList {
	if m != nil {
		return m.Member
	}
	return nil
}

type LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList struct {
	Interface            *string                                                            `protobuf:"bytes,51,opt,name=interface" json:"interface,omitempty"`
	State                *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                           `json:"-"`
	XXX_unrecognized     []byte                                                             `json:"-"`
	XXX_sizecache        int32                                                              `json:"-"`
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList) Reset() {
	*m = LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList{}
}
func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList) String() string {
	return proto.CompactTextString(m)
}
func (*LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList) ProtoMessage() {}
func (*LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bfdbbc56d07876e, []int{0, 1, 0, 1, 0}
}
func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList.Merge(m, src)
}
func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList) XXX_Size() int {
	return m.Size()
}
func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList) XXX_DiscardUnknown() {
	xxx_messageInfo_LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList.DiscardUnknown(m)
}

var xxx_messageInfo_LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList proto.InternalMessageInfo

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList) GetInterface() string {
	if m != nil && m.Interface != nil {
		return *m.Interface
	}
	return ""
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList) GetState() *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType {
	if m != nil {
		return m.State
	}
	return nil
}

type LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType struct {
	Interface              *string                                                                        `protobuf:"bytes,51,opt,name=interface" json:"interface,omitempty"`
	Activity               *string                                                                        `protobuf:"bytes,52,opt,name=activity" json:"activity,omitempty"`
	Timeout                *string                                                                        `protobuf:"bytes,53,opt,name=timeout" json:"timeout,omitempty"`
	Synchronization        *string                                                                        `protobuf:"bytes,54,opt,name=synchronization" json:"synchronization,omitempty"`
	Aggregatable           *bool                                                                          `protobuf:"varint,55,opt,name=aggregatable" json:"aggregatable,omitempty"`
	Collecting             *bool                                                                          `protobuf:"varint,56,opt,name=collecting" json:"collecting,omitempty"`
	Distributing           *bool                                                                          `protobuf:"varint,57,opt,name=distributing" json:"distributing,omitempty"`
	SystemId               *string                                                                        `protobuf:"bytes,58,opt,name=system_id,json=systemId" json:"system_id,omitempty"`
	OperKey                *uint32                                                                        `protobuf:"varint,59,opt,name=oper_key,json=operKey" json:"oper_key,omitempty"`
	PartnerId              *string                                                                        `protobuf:"bytes,61,opt,name=partner_id,json=partnerId" json:"partner_id,omitempty"`
	PartnerKey             *uint32                                                                        `protobuf:"varint,62,opt,name=partner_key,json=partnerKey" json:"partner_key,omitempty"`
	PortNum                *uint32                                                                        `protobuf:"varint,60,opt,name=port_num,json=portNum" json:"port_num,omitempty"`
	PartnerPortNum         *uint32                                                                        `protobuf:"varint,63,opt,name=partner_port_num,json=partnerPortNum" json:"partner_port_num,omitempty"`
	Counters               *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType `protobuf:"bytes,151,opt,name=counters" json:"counters,omitempty"`
	MuxState               *string                                                                        `protobuf:"bytes,64,opt,name=mux_state,json=muxState" json:"mux_state,omitempty"`
	PartnerTimeout         *string                                                                        `protobuf:"bytes,65,opt,name=partner_timeout,json=partnerTimeout" json:"partner_timeout,omitempty"`
	PartnerSynchronization *string                                                                        `protobuf:"bytes,66,opt,name=partner_synchronization,json=partnerSynchronization" json:"partner_synchronization,omitempty"`
	PartnerAggregatable    *bool                                                                          `protobuf:"varint,67,opt,name=partner_aggregatable,json=partnerAggregatable" json:"partner_aggregatable,omitempty"`
	PartnerCollecting      *bool                                                                          `protobuf:"varint,68,opt,name=partner_collecting,json=partnerCollecting" json:"partner_collecting,omitempty"`
	PartnerDistributing    *bool                                                                          `protobuf:"varint,69,opt,name=partner_distributing,json=partnerDistributing" json:"partner_distributing,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                                                                       `json:"-"`
	XXX_unrecognized       []byte                                                                         `json:"-"`
	XXX_sizecache          int32                                                                          `json:"-"`
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) Reset() {
	*m = LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType{}
}
func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) String() string {
	return proto.CompactTextString(m)
}
func (*LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) ProtoMessage() {}
func (*LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bfdbbc56d07876e, []int{0, 1, 0, 1, 0, 0}
}
func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType.Merge(m, src)
}
func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) XXX_Size() int {
	return m.Size()
}
func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) XXX_DiscardUnknown() {
	xxx_messageInfo_LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType.DiscardUnknown(m)
}

var xxx_messageInfo_LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType proto.InternalMessageInfo

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetInterface() string {
	if m != nil && m.Interface != nil {
		return *m.Interface
	}
	return ""
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetActivity() string {
	if m != nil && m.Activity != nil {
		return *m.Activity
	}
	return ""
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetTimeout() string {
	if m != nil && m.Timeout != nil {
		return *m.Timeout
	}
	return ""
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetSynchronization() string {
	if m != nil && m.Synchronization != nil {
		return *m.Synchronization
	}
	return ""
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetAggregatable() bool {
	if m != nil && m.Aggregatable != nil {
		return *m.Aggregatable
	}
	return false
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetCollecting() bool {
	if m != nil && m.Collecting != nil {
		return *m.Collecting
	}
	return false
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetDistributing() bool {
	if m != nil && m.Distributing != nil {
		return *m.Distributing
	}
	return false
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetSystemId() string {
	if m != nil && m.SystemId != nil {
		return *m.SystemId
	}
	return ""
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetOperKey() uint32 {
	if m != nil && m.OperKey != nil {
		return *m.OperKey
	}
	return 0
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetPartnerId() string {
	if m != nil && m.PartnerId != nil {
		return *m.PartnerId
	}
	return ""
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetPartnerKey() uint32 {
	if m != nil && m.PartnerKey != nil {
		return *m.PartnerKey
	}
	return 0
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetPortNum() uint32 {
	if m != nil && m.PortNum != nil {
		return *m.PortNum
	}
	return 0
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetPartnerPortNum() uint32 {
	if m != nil && m.PartnerPortNum != nil {
		return *m.PartnerPortNum
	}
	return 0
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetCounters() *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType {
	if m != nil {
		return m.Counters
	}
	return nil
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetMuxState() string {
	if m != nil && m.MuxState != nil {
		return *m.MuxState
	}
	return ""
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetPartnerTimeout() string {
	if m != nil && m.PartnerTimeout != nil {
		return *m.PartnerTimeout
	}
	return ""
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetPartnerSynchronization() string {
	if m != nil && m.PartnerSynchronization != nil {
		return *m.PartnerSynchronization
	}
	return ""
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetPartnerAggregatable() bool {
	if m != nil && m.PartnerAggregatable != nil {
		return *m.PartnerAggregatable
	}
	return false
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetPartnerCollecting() bool {
	if m != nil && m.PartnerCollecting != nil {
		return *m.PartnerCollecting
	}
	return false
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) GetPartnerDistributing() bool {
	if m != nil && m.PartnerDistributing != nil {
		return *m.PartnerDistributing
	}
	return false
}

type LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType struct {
	LacpInPkts           *uint64  `protobuf:"varint,51,opt,name=lacp_in_pkts,json=lacpInPkts" json:"lacp_in_pkts,omitempty"`
	LacpOutPkts          *uint64  `protobuf:"varint,52,opt,name=lacp_out_pkts,json=lacpOutPkts" json:"lacp_out_pkts,omitempty"`
	LacpRxErrors         *uint64  `protobuf:"varint,53,opt,name=lacp_rx_errors,json=lacpRxErrors" json:"lacp_rx_errors,omitempty"`
	LacpTxErrors         *uint64  `protobuf:"varint,54,opt,name=lacp_tx_errors,json=lacpTxErrors" json:"lacp_tx_errors,omitempty"`
	LacpUnknownErrors    *uint64  `protobuf:"varint,55,opt,name=lacp_unknown_errors,json=lacpUnknownErrors" json:"lacp_unknown_errors,omitempty"`
	LacpErrors           *uint64  `protobuf:"varint,56,opt,name=lacp_errors,json=lacpErrors" json:"lacp_errors,omitempty"`
	CollectionTime       *string  `protobuf:"bytes,57,opt,name=collection_time,json=collectionTime" json:"collection_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType) Reset() {
	*m = LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType{}
}
func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType) String() string {
	return proto.CompactTextString(m)
}
func (*LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType) ProtoMessage() {
}
func (*LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bfdbbc56d07876e, []int{0, 1, 0, 1, 0, 0, 0}
}
func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType.Merge(m, src)
}
func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType) XXX_Size() int {
	return m.Size()
}
func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType) XXX_DiscardUnknown() {
	xxx_messageInfo_LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType.DiscardUnknown(m)
}

var xxx_messageInfo_LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType proto.InternalMessageInfo

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType) GetLacpInPkts() uint64 {
	if m != nil && m.LacpInPkts != nil {
		return *m.LacpInPkts
	}
	return 0
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType) GetLacpOutPkts() uint64 {
	if m != nil && m.LacpOutPkts != nil {
		return *m.LacpOutPkts
	}
	return 0
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType) GetLacpRxErrors() uint64 {
	if m != nil && m.LacpRxErrors != nil {
		return *m.LacpRxErrors
	}
	return 0
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType) GetLacpTxErrors() uint64 {
	if m != nil && m.LacpTxErrors != nil {
		return *m.LacpTxErrors
	}
	return 0
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType) GetLacpUnknownErrors() uint64 {
	if m != nil && m.LacpUnknownErrors != nil {
		return *m.LacpUnknownErrors
	}
	return 0
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType) GetLacpErrors() uint64 {
	if m != nil && m.LacpErrors != nil {
		return *m.LacpErrors
	}
	return 0
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType) GetCollectionTime() string {
	if m != nil && m.CollectionTime != nil {
		return *m.CollectionTime
	}
	return ""
}

var E_JnprLacpLacpExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*LacpLacp)(nil),
	Field:         52,
	Name:          "jnpr_lacp_lacp_ext",
	Tag:           "bytes,52,opt,name=jnpr_lacp_lacp_ext",
	Filename:      "lacpd_oc.proto",
}

func init() {
	proto.RegisterType((*LacpLacp)(nil), "lacp_lacp")
	proto.RegisterType((*LacpLacpStateType)(nil), "lacp_lacp.state_type")
	proto.RegisterType((*LacpLacpInterfacesType)(nil), "lacp_lacp.interfaces_type")
	proto.RegisterType((*LacpLacpInterfacesTypeInterfaceList)(nil), "lacp_lacp.interfaces_type.interface_list")
	proto.RegisterType((*LacpLacpInterfacesTypeInterfaceListStateType)(nil), "lacp_lacp.interfaces_type.interface_list.state_type")
	proto.RegisterType((*LacpLacpInterfacesTypeInterfaceListMembersType)(nil), "lacp_lacp.interfaces_type.interface_list.members_type")
	proto.RegisterType((*LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList)(nil), "lacp_lacp.interfaces_type.interface_list.members_type.member_list")
	proto.RegisterType((*LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType)(nil), "lacp_lacp.interfaces_type.interface_list.members_type.member_list.state_type")
	proto.RegisterType((*LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType)(nil), "lacp_lacp.interfaces_type.interface_list.members_type.member_list.state_type.counters_type")
	proto.RegisterExtension(E_JnprLacpLacpExt)
}

func init() { proto.RegisterFile("lacpd_oc.proto", fileDescriptor_8bfdbbc56d07876e) }

var fileDescriptor_8bfdbbc56d07876e = []byte{
	// 934 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x4d, 0x6f, 0x1b, 0x45,
	0x18, 0x96, 0x4b, 0x4a, 0x9c, 0xd7, 0x89, 0x4d, 0x27, 0x40, 0x37, 0x0b, 0xa4, 0x51, 0x40, 0x8a,
	0x91, 0x88, 0x2d, 0x4a, 0x9a, 0x94, 0x96, 0x8f, 0x36, 0x6d, 0x24, 0x42, 0x49, 0x09, 0x9b, 0x72,
	0xa1, 0x87, 0x65, 0xbc, 0x3b, 0x38, 0x63, 0x7b, 0x67, 0x56, 0xb3, 0xb3, 0xa9, 0xcd, 0x91, 0x3f,
	0x01, 0x12, 0x77, 0xfe, 0x03, 0xff, 0x80, 0x23, 0xf7, 0x5e, 0x50, 0xc4, 0x85, 0x3f, 0xc0, 0x19,
	0xcd, 0xd7, 0x7e, 0xb8, 0x41, 0xaa, 0xa0, 0x87, 0x56, 0x9a, 0xe7, 0x7d, 0x9e, 0x77, 0xde, 0x79,
	0x9f, 0x67, 0x1d, 0x68, 0x4f, 0x70, 0x94, 0xc6, 0x21, 0x8f, 0x7a, 0xa9, 0xe0, 0x92, 0xfb, 0xab,
	0x92, 0x4c, 0x48, 0x42, 0xa4, 0x98, 0x85, 0x92, 0xa7, 0x06, 0xdc, 0xfc, 0xab, 0x03, 0x4b, 0x8a,
	0x17, 0xaa, 0xff, 0xd0, 0x7b, 0x70, 0x39, 0x93, 0x58, 0x12, 0xef, 0xc7, 0xc6, 0x46, 0xa3, 0xdb,
	0xba, 0xfe, 0x5a, 0xaf, 0xa8, 0xf5, 0x74, 0x21, 0x94, 0xb3, 0x94, 0x04, 0x86, 0x84, 0x6e, 0x03,
	0x50, 0x26, 0x89, 0xf8, 0x0e, 0x47, 0x24, 0xf3, 0x7e, 0x32, 0x12, 0xbf, 0x22, 0x29, 0xab, 0x46,
	0x57, 0xa1, 0xfb, 0x37, 0x00, 0xca, 0x8e, 0x68, 0x0b, 0x3a, 0xd9, 0x2c, 0x93, 0x24, 0x09, 0x53,
	0x41, 0xb9, 0xa0, 0x72, 0xe6, 0x7d, 0xb0, 0xd1, 0xe8, 0xae, 0x04, 0x6d, 0x03, 0x1f, 0x5b, 0xd4,
	0xff, 0xb5, 0x0d, 0x9d, 0xb9, 0xb6, 0xe8, 0x33, 0x58, 0x2a, 0x20, 0x35, 0xf9, 0x4b, 0xdd, 0xd6,
	0xf5, 0x77, 0xff, 0x7d, 0x8c, 0xf2, 0x1c, 0x4e, 0x68, 0x26, 0x83, 0x52, 0xec, 0x3f, 0x5d, 0x81,
	0x76, 0xbd, 0x8a, 0xd6, 0x60, 0x81, 0xe1, 0x84, 0xe8, 0x71, 0x96, 0xf6, 0x2f, 0xff, 0x70, 0xe7,
	0x52, 0xb3, 0x11, 0x68, 0x08, 0x3d, 0x98, 0xdb, 0xd6, 0xce, 0x73, 0xdf, 0x79, 0xc1, 0x32, 0xbf,
	0x82, 0xc5, 0x84, 0x24, 0x03, 0x22, 0x8a, 0x4d, 0xee, 0x3e, 0x7f, 0x3b, 0xab, 0x34, 0x0d, 0x5d,
	0x1f, 0xff, 0x97, 0x46, 0x6d, 0xc7, 0xa8, 0xfa, 0x12, 0xfb, 0x04, 0x1f, 0x9a, 0xba, 0xd5, 0x19,
	0x9e, 0x78, 0x3b, 0x1a, 0x2f, 0xce, 0xe8, 0x0d, 0x9b, 0x8c, 0x84, 0xc7, 0xc4, 0xbb, 0x61, 0x8a,
	0x0a, 0x38, 0xe2, 0x31, 0x41, 0x9b, 0xb0, 0x62, 0x0d, 0xa3, 0x71, 0x98, 0xe0, 0xc8, 0xdb, 0xd5,
	0x84, 0x96, 0x01, 0x0f, 0xe3, 0x23, 0x1c, 0x5d, 0x64, 0xea, 0xde, 0x85, 0xa6, 0xfe, 0x09, 0xb0,
	0x5c, 0x7d, 0x02, 0x7a, 0x0c, 0x2f, 0x9b, 0xb3, 0xb3, 0x73, 0xff, 0xbf, 0xed, 0xc2, 0x1e, 0x8c,
	0xcf, 0xb6, 0xa5, 0xff, 0xf7, 0x12, 0xb4, 0x2a, 0x38, 0x7a, 0xbb, 0x1a, 0x9f, 0x9a, 0xcd, 0x25,
	0x8e, 0xe2, 0x39, 0xaf, 0x8f, 0xfe, 0xff, 0x40, 0xcf, 0x86, 0xc0, 0x7f, 0xda, 0xac, 0x39, 0xf6,
	0xe6, 0x33, 0x93, 0x55, 0x47, 0xf2, 0xa1, 0x89, 0x23, 0x49, 0xcf, 0xd4, 0x5e, 0xad, 0x77, 0xee,
	0x8c, 0x3c, 0x58, 0x94, 0x34, 0x21, 0x3c, 0x97, 0xd6, 0x39, 0x77, 0x44, 0x5d, 0x65, 0x0a, 0x8b,
	0x4e, 0x05, 0x67, 0xf4, 0x7b, 0x2c, 0x29, 0x67, 0xd6, 0xba, 0x79, 0x18, 0x6d, 0xc2, 0x32, 0x1e,
	0x0e, 0x05, 0x19, 0x62, 0x89, 0x07, 0x13, 0xa2, 0xbd, 0x6b, 0x06, 0x35, 0x0c, 0xad, 0x03, 0x44,
	0x7c, 0x32, 0x21, 0x91, 0xa4, 0x6c, 0xe8, 0xdd, 0xd4, 0x8c, 0x0a, 0xa2, 0x7a, 0xc4, 0x34, 0x93,
	0x82, 0x0e, 0x72, 0xcd, 0xf8, 0xd0, 0xf4, 0xa8, 0x62, 0x2a, 0x67, 0x45, 0x94, 0xbc, 0x5b, 0xe6,
	0x21, 0x2e, 0x46, 0x68, 0x0d, 0x9a, 0x3c, 0x25, 0x22, 0x1c, 0x93, 0x99, 0x77, 0x5b, 0x87, 0x67,
	0x51, 0x9d, 0x1f, 0x90, 0x19, 0x7a, 0x0b, 0x20, 0xc5, 0x42, 0x32, 0x22, 0x94, 0xf0, 0x63, 0xb3,
	0x1e, 0x8b, 0x1c, 0xc6, 0xe8, 0x1a, 0xb4, 0x5c, 0x59, 0x89, 0x3f, 0xd1, 0x62, 0xa7, 0x50, 0xfa,
	0x35, 0x68, 0xa6, 0x5c, 0xc8, 0x90, 0xe5, 0x89, 0xf7, 0x91, 0x69, 0xad, 0xce, 0x0f, 0xf3, 0x04,
	0x75, 0xe1, 0x15, 0xa7, 0x2d, 0x28, 0x9f, 0x9a, 0xe8, 0x5a, 0xfc, 0xd8, 0x32, 0xa7, 0xd0, 0x8c,
	0x78, 0xae, 0x3c, 0xc9, 0x5c, 0x34, 0x1e, 0xbf, 0xd0, 0x68, 0xf4, 0x5c, 0x7b, 0x13, 0x94, 0xe2,
	0x36, 0xb5, 0xb6, 0x24, 0x9f, 0x86, 0x26, 0x95, 0x77, 0xcc, 0xda, 0x92, 0x7c, 0x7a, 0xa2, 0x7f,
	0x4d, 0xb6, 0xa0, 0xe3, 0x1e, 0xe0, 0x72, 0x70, 0x57, 0x53, 0xdc, 0xfc, 0x8f, 0x6c, 0x1c, 0xf6,
	0xe0, 0xaa, 0x23, 0xce, 0xc7, 0x62, 0x5f, 0x0b, 0x5e, 0xb7, 0xe5, 0x93, 0xb9, 0x74, 0xbc, 0x0f,
	0xaf, 0x3a, 0x61, 0x2d, 0x25, 0xf7, 0xb4, 0xc3, 0xab, 0xb6, 0x76, 0xb7, 0x1a, 0x96, 0x6d, 0x40,
	0x4e, 0x52, 0x09, 0xcd, 0x7d, 0x2d, 0xb8, 0x62, 0x2b, 0xf7, 0xca, 0xec, 0x54, 0x6e, 0xa8, 0x65,
	0xe8, 0xa0, 0x76, 0xc3, 0xfd, 0x4a, 0xc9, 0xff, 0xf9, 0x12, 0xac, 0xd4, 0xf6, 0x85, 0x36, 0x60,
	0x59, 0xbb, 0x41, 0x59, 0x98, 0x8e, 0x65, 0xa6, 0xbf, 0xa2, 0x85, 0x00, 0x14, 0x76, 0xc8, 0x8e,
	0xc7, 0x32, 0x53, 0xbf, 0x64, 0x9a, 0xc1, 0x73, 0x69, 0x28, 0x3b, 0x9a, 0xd2, 0x52, 0xe0, 0x97,
	0xb9, 0xd4, 0x9c, 0x77, 0xcc, 0x1f, 0xd3, 0x50, 0x4c, 0x43, 0x22, 0x04, 0x17, 0x99, 0xfe, 0xaa,
	0x16, 0x02, 0xdd, 0x3b, 0x98, 0x1e, 0x68, 0xac, 0x60, 0xc9, 0x82, 0xb5, 0x5b, 0xb2, 0x1e, 0x39,
	0x56, 0x0f, 0x56, 0x35, 0x2b, 0x67, 0x63, 0xc6, 0x9f, 0x30, 0x47, 0xdd, 0xd3, 0xd4, 0x2b, 0xaa,
	0xf4, 0xb5, 0xa9, 0x58, 0xfe, 0x35, 0xd0, 0xa3, 0x38, 0xde, 0xcd, 0xf2, 0x01, 0x96, 0xb0, 0x05,
	0x1d, 0xb7, 0x4e, 0xce, 0xb4, 0xdd, 0xfa, 0x33, 0x5b, 0x0a, 0xda, 0x25, 0xac, 0xec, 0xbe, 0x75,
	0x0c, 0x68, 0xc4, 0x52, 0x11, 0x16, 0xf1, 0x0c, 0xc9, 0x54, 0xa2, 0xab, 0xbd, 0xcf, 0x73, 0x46,
	0x53, 0x22, 0x1e, 0x12, 0xf9, 0x84, 0x8b, 0x71, 0x76, 0x42, 0x58, 0xa6, 0x6e, 0xda, 0xd1, 0x69,
	0x86, 0x32, 0xcd, 0x41, 0x47, 0xc9, 0xbf, 0xc0, 0x51, 0xaa, 0xfe, 0x1d, 0x4c, 0xe5, 0xfe, 0xb7,
	0xbf, 0x9d, 0xaf, 0x37, 0x7e, 0x3f, 0x5f, 0x6f, 0xfc, 0x71, 0xbe, 0xde, 0xf8, 0x26, 0x18, 0x52,
	0xd9, 0x1b, 0x99, 0x66, 0x3d, 0x46, 0x64, 0x9f, 0x46, 0x64, 0x40, 0xc4, 0xb0, 0x7f, 0x4a, 0xf0,
	0x44, 0x9e, 0x0e, 0xb8, 0xdc, 0xa6, 0x6c, 0x48, 0x32, 0xb9, 0x3d, 0x92, 0x74, 0x9b, 0x61, 0x49,
	0xcf, 0x48, 0x3f, 0x1d, 0x0f, 0xfb, 0x23, 0x49, 0xfb, 0x38, 0xc6, 0xa9, 0xb2, 0xad, 0x1f, 0x8e,
	0x72, 0xc6, 0xb3, 0x7e, 0x16, 0x9d, 0x92, 0x04, 0xff, 0x13, 0x00, 0x00, 0xff, 0xff, 0x42, 0xc6,
	0xb2, 0x20, 0xc5, 0x08, 0x00, 0x00,
}

func (m *LacpLacp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LacpLacp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LacpLacp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Interfaces != nil {
		{
			size, err := m.Interfaces.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLacpdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xc2
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLacpdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *LacpLacpStateType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LacpLacpStateType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LacpLacpStateType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SystemPriority != nil {
		i = encodeVarintLacpdOc(dAtA, i, uint64(*m.SystemPriority))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func (m *LacpLacpInterfacesType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LacpLacpInterfacesType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LacpLacpInterfacesType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Interface) > 0 {
		for iNdEx := len(m.Interface) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Interface[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLacpdOc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *LacpLacpInterfacesTypeInterfaceList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LacpLacpInterfacesTypeInterfaceList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LacpLacpInterfacesTypeInterfaceList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Members != nil {
		{
			size, err := m.Members.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLacpdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xc2
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLacpdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintLacpdOc(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *LacpLacpInterfacesTypeInterfaceListStateType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LacpLacpInterfacesTypeInterfaceListStateType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LacpLacpInterfacesTypeInterfaceListStateType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SystemPriority != nil {
		i = encodeVarintLacpdOc(dAtA, i, uint64(*m.SystemPriority))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.SystemIdMac != nil {
		i -= len(*m.SystemIdMac)
		copy(dAtA[i:], *m.SystemIdMac)
		i = encodeVarintLacpdOc(dAtA, i, uint64(len(*m.SystemIdMac)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	if m.LacpMode != nil {
		i -= len(*m.LacpMode)
		copy(dAtA[i:], *m.LacpMode)
		i = encodeVarintLacpdOc(dAtA, i, uint64(len(*m.LacpMode)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	if m.Interval != nil {
		i -= len(*m.Interval)
		copy(dAtA[i:], *m.Interval)
		i = encodeVarintLacpdOc(dAtA, i, uint64(len(*m.Interval)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintLacpdOc(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Member) > 0 {
		for iNdEx := len(m.Member) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Member[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLacpdOc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLacpdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	if m.Interface != nil {
		i -= len(*m.Interface)
		copy(dAtA[i:], *m.Interface)
		i = encodeVarintLacpdOc(dAtA, i, uint64(len(*m.Interface)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Counters != nil {
		{
			size, err := m.Counters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLacpdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	if m.PartnerDistributing != nil {
		i--
		if *m.PartnerDistributing {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xa8
	}
	if m.PartnerCollecting != nil {
		i--
		if *m.PartnerCollecting {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xa0
	}
	if m.PartnerAggregatable != nil {
		i--
		if *m.PartnerAggregatable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x98
	}
	if m.PartnerSynchronization != nil {
		i -= len(*m.PartnerSynchronization)
		copy(dAtA[i:], *m.PartnerSynchronization)
		i = encodeVarintLacpdOc(dAtA, i, uint64(len(*m.PartnerSynchronization)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x92
	}
	if m.PartnerTimeout != nil {
		i -= len(*m.PartnerTimeout)
		copy(dAtA[i:], *m.PartnerTimeout)
		i = encodeVarintLacpdOc(dAtA, i, uint64(len(*m.PartnerTimeout)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x8a
	}
	if m.MuxState != nil {
		i -= len(*m.MuxState)
		copy(dAtA[i:], *m.MuxState)
		i = encodeVarintLacpdOc(dAtA, i, uint64(len(*m.MuxState)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x82
	}
	if m.PartnerPortNum != nil {
		i = encodeVarintLacpdOc(dAtA, i, uint64(*m.PartnerPortNum))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf8
	}
	if m.PartnerKey != nil {
		i = encodeVarintLacpdOc(dAtA, i, uint64(*m.PartnerKey))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf0
	}
	if m.PartnerId != nil {
		i -= len(*m.PartnerId)
		copy(dAtA[i:], *m.PartnerId)
		i = encodeVarintLacpdOc(dAtA, i, uint64(len(*m.PartnerId)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xea
	}
	if m.PortNum != nil {
		i = encodeVarintLacpdOc(dAtA, i, uint64(*m.PortNum))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe0
	}
	if m.OperKey != nil {
		i = encodeVarintLacpdOc(dAtA, i, uint64(*m.OperKey))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd8
	}
	if m.SystemId != nil {
		i -= len(*m.SystemId)
		copy(dAtA[i:], *m.SystemId)
		i = encodeVarintLacpdOc(dAtA, i, uint64(len(*m.SystemId)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd2
	}
	if m.Distributing != nil {
		i--
		if *m.Distributing {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc8
	}
	if m.Collecting != nil {
		i--
		if *m.Collecting {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc0
	}
	if m.Aggregatable != nil {
		i--
		if *m.Aggregatable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.Synchronization != nil {
		i -= len(*m.Synchronization)
		copy(dAtA[i:], *m.Synchronization)
		i = encodeVarintLacpdOc(dAtA, i, uint64(len(*m.Synchronization)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	if m.Timeout != nil {
		i -= len(*m.Timeout)
		copy(dAtA[i:], *m.Timeout)
		i = encodeVarintLacpdOc(dAtA, i, uint64(len(*m.Timeout)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	if m.Activity != nil {
		i -= len(*m.Activity)
		copy(dAtA[i:], *m.Activity)
		i = encodeVarintLacpdOc(dAtA, i, uint64(len(*m.Activity)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	if m.Interface != nil {
		i -= len(*m.Interface)
		copy(dAtA[i:], *m.Interface)
		i = encodeVarintLacpdOc(dAtA, i, uint64(len(*m.Interface)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CollectionTime != nil {
		i -= len(*m.CollectionTime)
		copy(dAtA[i:], *m.CollectionTime)
		i = encodeVarintLacpdOc(dAtA, i, uint64(len(*m.CollectionTime)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	if m.LacpErrors != nil {
		i = encodeVarintLacpdOc(dAtA, i, uint64(*m.LacpErrors))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc0
	}
	if m.LacpUnknownErrors != nil {
		i = encodeVarintLacpdOc(dAtA, i, uint64(*m.LacpUnknownErrors))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.LacpTxErrors != nil {
		i = encodeVarintLacpdOc(dAtA, i, uint64(*m.LacpTxErrors))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.LacpRxErrors != nil {
		i = encodeVarintLacpdOc(dAtA, i, uint64(*m.LacpRxErrors))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.LacpOutPkts != nil {
		i = encodeVarintLacpdOc(dAtA, i, uint64(*m.LacpOutPkts))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.LacpInPkts != nil {
		i = encodeVarintLacpdOc(dAtA, i, uint64(*m.LacpInPkts))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func encodeVarintLacpdOc(dAtA []byte, offset int, v uint64) int {
	offset -= sovLacpdOc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LacpLacp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 2 + l + sovLacpdOc(uint64(l))
	}
	if m.Interfaces != nil {
		l = m.Interfaces.Size()
		n += 2 + l + sovLacpdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LacpLacpStateType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SystemPriority != nil {
		n += 2 + sovLacpdOc(uint64(*m.SystemPriority))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LacpLacpInterfacesType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Interface) > 0 {
		for _, e := range m.Interface {
			l = e.Size()
			n += 2 + l + sovLacpdOc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LacpLacpInterfacesTypeInterfaceList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 2 + l + sovLacpdOc(uint64(l))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 2 + l + sovLacpdOc(uint64(l))
	}
	if m.Members != nil {
		l = m.Members.Size()
		n += 2 + l + sovLacpdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LacpLacpInterfacesTypeInterfaceListStateType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 2 + l + sovLacpdOc(uint64(l))
	}
	if m.Interval != nil {
		l = len(*m.Interval)
		n += 2 + l + sovLacpdOc(uint64(l))
	}
	if m.LacpMode != nil {
		l = len(*m.LacpMode)
		n += 2 + l + sovLacpdOc(uint64(l))
	}
	if m.SystemIdMac != nil {
		l = len(*m.SystemIdMac)
		n += 2 + l + sovLacpdOc(uint64(l))
	}
	if m.SystemPriority != nil {
		n += 2 + sovLacpdOc(uint64(*m.SystemPriority))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Member) > 0 {
		for _, e := range m.Member {
			l = e.Size()
			n += 2 + l + sovLacpdOc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Interface != nil {
		l = len(*m.Interface)
		n += 2 + l + sovLacpdOc(uint64(l))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 2 + l + sovLacpdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Interface != nil {
		l = len(*m.Interface)
		n += 2 + l + sovLacpdOc(uint64(l))
	}
	if m.Activity != nil {
		l = len(*m.Activity)
		n += 2 + l + sovLacpdOc(uint64(l))
	}
	if m.Timeout != nil {
		l = len(*m.Timeout)
		n += 2 + l + sovLacpdOc(uint64(l))
	}
	if m.Synchronization != nil {
		l = len(*m.Synchronization)
		n += 2 + l + sovLacpdOc(uint64(l))
	}
	if m.Aggregatable != nil {
		n += 3
	}
	if m.Collecting != nil {
		n += 3
	}
	if m.Distributing != nil {
		n += 3
	}
	if m.SystemId != nil {
		l = len(*m.SystemId)
		n += 2 + l + sovLacpdOc(uint64(l))
	}
	if m.OperKey != nil {
		n += 2 + sovLacpdOc(uint64(*m.OperKey))
	}
	if m.PortNum != nil {
		n += 2 + sovLacpdOc(uint64(*m.PortNum))
	}
	if m.PartnerId != nil {
		l = len(*m.PartnerId)
		n += 2 + l + sovLacpdOc(uint64(l))
	}
	if m.PartnerKey != nil {
		n += 2 + sovLacpdOc(uint64(*m.PartnerKey))
	}
	if m.PartnerPortNum != nil {
		n += 2 + sovLacpdOc(uint64(*m.PartnerPortNum))
	}
	if m.MuxState != nil {
		l = len(*m.MuxState)
		n += 2 + l + sovLacpdOc(uint64(l))
	}
	if m.PartnerTimeout != nil {
		l = len(*m.PartnerTimeout)
		n += 2 + l + sovLacpdOc(uint64(l))
	}
	if m.PartnerSynchronization != nil {
		l = len(*m.PartnerSynchronization)
		n += 2 + l + sovLacpdOc(uint64(l))
	}
	if m.PartnerAggregatable != nil {
		n += 3
	}
	if m.PartnerCollecting != nil {
		n += 3
	}
	if m.PartnerDistributing != nil {
		n += 3
	}
	if m.Counters != nil {
		l = m.Counters.Size()
		n += 2 + l + sovLacpdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LacpInPkts != nil {
		n += 2 + sovLacpdOc(uint64(*m.LacpInPkts))
	}
	if m.LacpOutPkts != nil {
		n += 2 + sovLacpdOc(uint64(*m.LacpOutPkts))
	}
	if m.LacpRxErrors != nil {
		n += 2 + sovLacpdOc(uint64(*m.LacpRxErrors))
	}
	if m.LacpTxErrors != nil {
		n += 2 + sovLacpdOc(uint64(*m.LacpTxErrors))
	}
	if m.LacpUnknownErrors != nil {
		n += 2 + sovLacpdOc(uint64(*m.LacpUnknownErrors))
	}
	if m.LacpErrors != nil {
		n += 2 + sovLacpdOc(uint64(*m.LacpErrors))
	}
	if m.CollectionTime != nil {
		l = len(*m.CollectionTime)
		n += 2 + l + sovLacpdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovLacpdOc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLacpdOc(x uint64) (n int) {
	return sovLacpdOc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LacpLacp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLacpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: lacp_lacp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: lacp_lacp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLacpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &LacpLacpStateType{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 152:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLacpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Interfaces == nil {
				m.Interfaces = &LacpLacpInterfacesType{}
			}
			if err := m.Interfaces.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLacpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LacpLacpStateType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLacpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: state_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: state_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemPriority", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SystemPriority = &v
		default:
			iNdEx = preIndex
			skippy, err := skipLacpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LacpLacpInterfacesType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLacpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: interfaces_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: interfaces_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLacpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interface = append(m.Interface, &LacpLacpInterfacesTypeInterfaceList{})
			if err := m.Interface[len(m.Interface)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLacpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LacpLacpInterfacesTypeInterfaceList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLacpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: interface_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: interface_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLacpdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLacpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &LacpLacpInterfacesTypeInterfaceListStateType{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 152:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLacpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Members == nil {
				m.Members = &LacpLacpInterfacesTypeInterfaceListMembersType{}
			}
			if err := m.Members.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLacpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LacpLacpInterfacesTypeInterfaceListStateType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLacpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: state_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: state_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLacpdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLacpdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Interval = &s
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LacpMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLacpdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LacpMode = &s
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemIdMac", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLacpdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SystemIdMac = &s
			iNdEx = postIndex
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemPriority", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SystemPriority = &v
		default:
			iNdEx = preIndex
			skippy, err := skipLacpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LacpLacpInterfacesTypeInterfaceListMembersType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLacpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: members_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: members_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Member", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLacpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Member = append(m.Member, &LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList{})
			if err := m.Member[len(m.Member)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLacpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLacpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: member_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: member_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLacpdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Interface = &s
			iNdEx = postIndex
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLacpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLacpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLacpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: state_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: state_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLacpdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Interface = &s
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLacpdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Activity = &s
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLacpdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Timeout = &s
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Synchronization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLacpdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Synchronization = &s
			iNdEx = postIndex
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aggregatable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Aggregatable = &b
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collecting", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Collecting = &b
		case 57:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distributing", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Distributing = &b
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLacpdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SystemId = &s
			iNdEx = postIndex
		case 59:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperKey", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OperKey = &v
		case 60:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortNum", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PortNum = &v
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartnerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLacpdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PartnerId = &s
			iNdEx = postIndex
		case 62:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartnerKey", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PartnerKey = &v
		case 63:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartnerPortNum", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PartnerPortNum = &v
		case 64:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MuxState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLacpdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MuxState = &s
			iNdEx = postIndex
		case 65:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartnerTimeout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLacpdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PartnerTimeout = &s
			iNdEx = postIndex
		case 66:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartnerSynchronization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLacpdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PartnerSynchronization = &s
			iNdEx = postIndex
		case 67:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartnerAggregatable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.PartnerAggregatable = &b
		case 68:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartnerCollecting", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.PartnerCollecting = &b
		case 69:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartnerDistributing", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.PartnerDistributing = &b
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLacpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Counters == nil {
				m.Counters = &LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType{}
			}
			if err := m.Counters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLacpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LacpLacpInterfacesTypeInterfaceListMembersTypeMemberListStateTypeCountersType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLacpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: counters_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: counters_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LacpInPkts", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LacpInPkts = &v
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LacpOutPkts", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LacpOutPkts = &v
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LacpRxErrors", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LacpRxErrors = &v
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LacpTxErrors", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LacpTxErrors = &v
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LacpUnknownErrors", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LacpUnknownErrors = &v
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LacpErrors", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LacpErrors = &v
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLacpdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CollectionTime = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLacpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLacpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLacpdOc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLacpdOc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLacpdOc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLacpdOc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLacpdOc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLacpdOc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLacpdOc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLacpdOc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLacpdOc = fmt.Errorf("proto: unexpected end of group")
)
