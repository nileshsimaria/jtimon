// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ldp_lsp_transit_stats.proto

package schema

import (
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
// Top-level message
//
type LdpLspTransitStats struct {
	// List of LDP LSP stats record
	LdpLspTransitStatsRecords []*LdpLspTransitRecord `protobuf:"bytes,1,rep,name=ldp_lsp_transit_stats_records,json=ldpLspTransitStatsRecords" json:"ldp_lsp_transit_stats_records,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}               `json:"-"`
	XXX_unrecognized          []byte                 `json:"-"`
	XXX_sizecache             int32                  `json:"-"`
}

func (m *LdpLspTransitStats) Reset()         { *m = LdpLspTransitStats{} }
func (m *LdpLspTransitStats) String() string { return proto.CompactTextString(m) }
func (*LdpLspTransitStats) ProtoMessage()    {}
func (*LdpLspTransitStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6b688fa85cbb319, []int{0}
}
func (m *LdpLspTransitStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LdpLspTransitStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LdpLspTransitStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LdpLspTransitStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LdpLspTransitStats.Merge(m, src)
}
func (m *LdpLspTransitStats) XXX_Size() int {
	return m.Size()
}
func (m *LdpLspTransitStats) XXX_DiscardUnknown() {
	xxx_messageInfo_LdpLspTransitStats.DiscardUnknown(m)
}

var xxx_messageInfo_LdpLspTransitStats proto.InternalMessageInfo

func (m *LdpLspTransitStats) GetLdpLspTransitStatsRecords() []*LdpLspTransitRecord {
	if m != nil {
		return m.LdpLspTransitStatsRecords
	}
	return nil
}

//
// LDP LSP Transit statistics record
//
type LdpLspTransitRecord struct {
	// IP prefix
	IpPrefix *string `protobuf:"bytes,1,req,name=ip_prefix,json=ipPrefix" json:"ip_prefix,omitempty"`
	// Instance Identifier for cases when RPD creates multiple instances
	InstanceIdentifier *uint32 `protobuf:"varint,2,opt,name=instance_identifier,json=instanceIdentifier" json:"instance_identifier,omitempty"`
	// Name of the counter.
	CounterName *string `protobuf:"bytes,3,opt,name=counter_name,json=counterName" json:"counter_name,omitempty"`
	// Statistics
	Stats                *LabelDistributionProtocolLspTransitStats `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *LdpLspTransitRecord) Reset()         { *m = LdpLspTransitRecord{} }
func (m *LdpLspTransitRecord) String() string { return proto.CompactTextString(m) }
func (*LdpLspTransitRecord) ProtoMessage()    {}
func (*LdpLspTransitRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6b688fa85cbb319, []int{1}
}
func (m *LdpLspTransitRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LdpLspTransitRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LdpLspTransitRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LdpLspTransitRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LdpLspTransitRecord.Merge(m, src)
}
func (m *LdpLspTransitRecord) XXX_Size() int {
	return m.Size()
}
func (m *LdpLspTransitRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_LdpLspTransitRecord.DiscardUnknown(m)
}

var xxx_messageInfo_LdpLspTransitRecord proto.InternalMessageInfo

func (m *LdpLspTransitRecord) GetIpPrefix() string {
	if m != nil && m.IpPrefix != nil {
		return *m.IpPrefix
	}
	return ""
}

func (m *LdpLspTransitRecord) GetInstanceIdentifier() uint32 {
	if m != nil && m.InstanceIdentifier != nil {
		return *m.InstanceIdentifier
	}
	return 0
}

func (m *LdpLspTransitRecord) GetCounterName() string {
	if m != nil && m.CounterName != nil {
		return *m.CounterName
	}
	return ""
}

func (m *LdpLspTransitRecord) GetStats() *LabelDistributionProtocolLspTransitStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type LabelDistributionProtocolLspTransitStats struct {
	// Packet and Byte statistics
	Packets *uint64 `protobuf:"varint,1,opt,name=packets" json:"packets,omitempty"`
	Bytes   *uint64 `protobuf:"varint,2,opt,name=bytes" json:"bytes,omitempty"`
	// Rates of the above counters
	PacketRate           *uint64  `protobuf:"varint,3,opt,name=packet_rate,json=packetRate" json:"packet_rate,omitempty"`
	ByteRate             *uint64  `protobuf:"varint,4,opt,name=byte_rate,json=byteRate" json:"byte_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LabelDistributionProtocolLspTransitStats) Reset() {
	*m = LabelDistributionProtocolLspTransitStats{}
}
func (m *LabelDistributionProtocolLspTransitStats) String() string { return proto.CompactTextString(m) }
func (*LabelDistributionProtocolLspTransitStats) ProtoMessage()    {}
func (*LabelDistributionProtocolLspTransitStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6b688fa85cbb319, []int{2}
}
func (m *LabelDistributionProtocolLspTransitStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LabelDistributionProtocolLspTransitStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LabelDistributionProtocolLspTransitStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LabelDistributionProtocolLspTransitStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelDistributionProtocolLspTransitStats.Merge(m, src)
}
func (m *LabelDistributionProtocolLspTransitStats) XXX_Size() int {
	return m.Size()
}
func (m *LabelDistributionProtocolLspTransitStats) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelDistributionProtocolLspTransitStats.DiscardUnknown(m)
}

var xxx_messageInfo_LabelDistributionProtocolLspTransitStats proto.InternalMessageInfo

func (m *LabelDistributionProtocolLspTransitStats) GetPackets() uint64 {
	if m != nil && m.Packets != nil {
		return *m.Packets
	}
	return 0
}

func (m *LabelDistributionProtocolLspTransitStats) GetBytes() uint64 {
	if m != nil && m.Bytes != nil {
		return *m.Bytes
	}
	return 0
}

func (m *LabelDistributionProtocolLspTransitStats) GetPacketRate() uint64 {
	if m != nil && m.PacketRate != nil {
		return *m.PacketRate
	}
	return 0
}

func (m *LabelDistributionProtocolLspTransitStats) GetByteRate() uint64 {
	if m != nil && m.ByteRate != nil {
		return *m.ByteRate
	}
	return 0
}

var E_JnprLdpLspTransitStatsExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*LdpLspTransitStats)(nil),
	Field:         154,
	Name:          "jnpr_ldp_lsp_transit_stats_ext",
	Tag:           "bytes,154,opt,name=jnpr_ldp_lsp_transit_stats_ext",
	Filename:      "ldp_lsp_transit_stats.proto",
}

func init() {
	proto.RegisterType((*LdpLspTransitStats)(nil), "LdpLspTransitStats")
	proto.RegisterType((*LdpLspTransitRecord)(nil), "LdpLspTransitRecord")
	proto.RegisterType((*LabelDistributionProtocolLspTransitStats)(nil), "LabelDistributionProtocolLspTransitStats")
	proto.RegisterExtension(E_JnprLdpLspTransitStatsExt)
}

func init() { proto.RegisterFile("ldp_lsp_transit_stats.proto", fileDescriptor_a6b688fa85cbb319) }

var fileDescriptor_a6b688fa85cbb319 = []byte{
	// 461 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xbd, 0x8e, 0xd3, 0x40,
	0x14, 0x85, 0x35, 0xbb, 0x89, 0xc8, 0x4e, 0xa0, 0x99, 0x20, 0xe1, 0x65, 0x45, 0xb0, 0x52, 0x20,
	0x53, 0xc4, 0x96, 0xb6, 0xa0, 0xa0, 0x01, 0xad, 0xa0, 0x00, 0x45, 0xab, 0x95, 0x17, 0x51, 0xd0,
	0x0c, 0x13, 0xfb, 0x6e, 0x72, 0x1d, 0x67, 0x66, 0x34, 0x73, 0x03, 0xd9, 0x96, 0xc7, 0xe0, 0x39,
	0x78, 0x08, 0x4a, 0x1e, 0x80, 0x02, 0xe5, 0x49, 0x90, 0x3d, 0x64, 0xf9, 0x49, 0x0a, 0xda, 0x73,
	0xbe, 0x73, 0xed, 0x73, 0x6c, 0x7e, 0x52, 0x97, 0x56, 0xd6, 0xde, 0x4a, 0x72, 0x4a, 0x7b, 0x24,
	0xe9, 0x49, 0x91, 0x4f, 0xad, 0x33, 0x64, 0xee, 0x0f, 0x08, 0x6a, 0x58, 0x02, 0xb9, 0x6b, 0x49,
	0xc6, 0x06, 0x71, 0x54, 0x73, 0x31, 0x29, 0xed, 0xc4, 0xdb, 0x37, 0x21, 0x71, 0xd9, 0x04, 0xc4,
	0x5b, 0xfe, 0x60, 0xef, 0x25, 0xe9, 0xa0, 0x30, 0xae, 0xf4, 0x11, 0x8b, 0x0f, 0x93, 0xfe, 0xe9,
	0xdd, 0xf4, 0xaf, 0x6c, 0xde, 0x9a, 0xf9, 0x71, 0xbd, 0x73, 0x30, 0x38, 0x7e, 0xf4, 0x9d, 0xf1,
	0xc1, 0x9e, 0x88, 0x18, 0xf1, 0x23, 0xb4, 0xd2, 0x3a, 0xb8, 0xc2, 0x75, 0xc4, 0xe2, 0x83, 0xe4,
	0xe8, 0xac, 0xfb, 0xe9, 0xf9, 0x41, 0x8f, 0xe5, 0x3d, 0xb4, 0x17, 0xad, 0x2c, 0x9e, 0xf0, 0x01,
	0x6a, 0x4f, 0x4a, 0x17, 0x20, 0xb1, 0x04, 0x4d, 0x78, 0x85, 0xe0, 0xa2, 0x83, 0x98, 0x25, 0x77,
	0xb6, 0xb4, 0xd8, 0x12, 0xaf, 0x6e, 0x00, 0x91, 0xf0, 0xdb, 0x85, 0x59, 0x69, 0x02, 0x27, 0xb5,
	0x5a, 0x42, 0x74, 0x18, 0xb3, 0xdf, 0xe7, 0xfb, 0xbf, 0xac, 0x73, 0xb5, 0x04, 0xf1, 0x8c, 0x77,
	0xdb, 0x96, 0x51, 0x27, 0x66, 0x49, 0xff, 0xf4, 0x71, 0x3a, 0x51, 0x53, 0xa8, 0x5f, 0xa0, 0x27,
	0x87, 0xd3, 0x15, 0xa1, 0xd1, 0x17, 0xcd, 0x66, 0x85, 0xa9, 0xff, 0xad, 0x17, 0x72, 0xa3, 0x2f,
	0x8c, 0x27, 0xff, 0x9b, 0x11, 0x0f, 0xf9, 0x2d, 0xab, 0x8a, 0x05, 0x50, 0xb3, 0x26, 0x4b, 0x3a,
	0xed, 0x2b, 0x45, 0x2c, 0xdf, 0xaa, 0xe2, 0x84, 0x77, 0xa7, 0xd7, 0x04, 0xbe, 0xad, 0x78, 0x63,
	0x07, 0x4d, 0x3c, 0xe2, 0xfd, 0xc0, 0x49, 0xa7, 0x28, 0x94, 0x0a, 0x48, 0xcc, 0x72, 0x1e, 0x9c,
	0x5c, 0x11, 0x34, 0xcb, 0x36, 0x81, 0x40, 0x75, 0xfe, 0xa4, 0x7a, 0x8d, 0xde, 0x30, 0x4f, 0x2d,
	0x1f, 0x56, 0xda, 0x3a, 0xb9, 0xff, 0x93, 0xc3, 0x9a, 0xc4, 0xbd, 0xf4, 0xf5, 0x4a, 0xa3, 0x05,
	0x77, 0x0e, 0xf4, 0xd1, 0xb8, 0x85, 0xbf, 0x04, 0xed, 0x8d, 0xf3, 0xd1, 0x67, 0xd6, 0x4e, 0x35,
	0x48, 0x77, 0x7f, 0xa2, 0xfc, 0xb8, 0x39, 0xba, 0xab, 0xbf, 0x5c, 0xd3, 0xd9, 0xfb, 0xaf, 0x9b,
	0x21, 0xfb, 0xb6, 0x19, 0xb2, 0x1f, 0x9b, 0x21, 0x7b, 0x97, 0xcf, 0x90, 0xd2, 0x2a, 0x3c, 0x20,
	0xd5, 0x40, 0x19, 0x16, 0x30, 0x05, 0x37, 0xcb, 0xe6, 0xa0, 0x6a, 0x9a, 0x4f, 0x0d, 0x8d, 0x51,
	0xcf, 0xc0, 0xd3, 0xb8, 0x22, 0x1c, 0x6b, 0x45, 0xf8, 0x01, 0x32, 0xbb, 0x98, 0x65, 0x15, 0x61,
	0xa6, 0x4a, 0x65, 0x09, 0x9c, 0xcf, 0x64, 0xb5, 0xd2, 0xc6, 0x67, 0xbe, 0x98, 0xc3, 0x52, 0xfd,
	0x0c, 0x00, 0x00, 0xff, 0xff, 0xff, 0x6f, 0x2b, 0x4e, 0x0a, 0x03, 0x00, 0x00,
}

func (m *LdpLspTransitStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LdpLspTransitStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LdpLspTransitStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LdpLspTransitStatsRecords) > 0 {
		for iNdEx := len(m.LdpLspTransitStatsRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LdpLspTransitStatsRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLdpLspTransitStats(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LdpLspTransitRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LdpLspTransitRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LdpLspTransitRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Stats != nil {
		{
			size, err := m.Stats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLdpLspTransitStats(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CounterName != nil {
		i -= len(*m.CounterName)
		copy(dAtA[i:], *m.CounterName)
		i = encodeVarintLdpLspTransitStats(dAtA, i, uint64(len(*m.CounterName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.InstanceIdentifier != nil {
		i = encodeVarintLdpLspTransitStats(dAtA, i, uint64(*m.InstanceIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if m.IpPrefix == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("ip_prefix")
	} else {
		i -= len(*m.IpPrefix)
		copy(dAtA[i:], *m.IpPrefix)
		i = encodeVarintLdpLspTransitStats(dAtA, i, uint64(len(*m.IpPrefix)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LabelDistributionProtocolLspTransitStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelDistributionProtocolLspTransitStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LabelDistributionProtocolLspTransitStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ByteRate != nil {
		i = encodeVarintLdpLspTransitStats(dAtA, i, uint64(*m.ByteRate))
		i--
		dAtA[i] = 0x20
	}
	if m.PacketRate != nil {
		i = encodeVarintLdpLspTransitStats(dAtA, i, uint64(*m.PacketRate))
		i--
		dAtA[i] = 0x18
	}
	if m.Bytes != nil {
		i = encodeVarintLdpLspTransitStats(dAtA, i, uint64(*m.Bytes))
		i--
		dAtA[i] = 0x10
	}
	if m.Packets != nil {
		i = encodeVarintLdpLspTransitStats(dAtA, i, uint64(*m.Packets))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLdpLspTransitStats(dAtA []byte, offset int, v uint64) int {
	offset -= sovLdpLspTransitStats(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LdpLspTransitStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LdpLspTransitStatsRecords) > 0 {
		for _, e := range m.LdpLspTransitStatsRecords {
			l = e.Size()
			n += 1 + l + sovLdpLspTransitStats(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LdpLspTransitRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpPrefix != nil {
		l = len(*m.IpPrefix)
		n += 1 + l + sovLdpLspTransitStats(uint64(l))
	}
	if m.InstanceIdentifier != nil {
		n += 1 + sovLdpLspTransitStats(uint64(*m.InstanceIdentifier))
	}
	if m.CounterName != nil {
		l = len(*m.CounterName)
		n += 1 + l + sovLdpLspTransitStats(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovLdpLspTransitStats(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LabelDistributionProtocolLspTransitStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Packets != nil {
		n += 1 + sovLdpLspTransitStats(uint64(*m.Packets))
	}
	if m.Bytes != nil {
		n += 1 + sovLdpLspTransitStats(uint64(*m.Bytes))
	}
	if m.PacketRate != nil {
		n += 1 + sovLdpLspTransitStats(uint64(*m.PacketRate))
	}
	if m.ByteRate != nil {
		n += 1 + sovLdpLspTransitStats(uint64(*m.ByteRate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovLdpLspTransitStats(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLdpLspTransitStats(x uint64) (n int) {
	return sovLdpLspTransitStats(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LdpLspTransitStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLdpLspTransitStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LdpLspTransitStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LdpLspTransitStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LdpLspTransitStatsRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpLspTransitStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLdpLspTransitStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLdpLspTransitStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LdpLspTransitStatsRecords = append(m.LdpLspTransitStatsRecords, &LdpLspTransitRecord{})
			if err := m.LdpLspTransitStatsRecords[len(m.LdpLspTransitStatsRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLdpLspTransitStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLdpLspTransitStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLdpLspTransitStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LdpLspTransitRecord) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLdpLspTransitStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LdpLspTransitRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LdpLspTransitRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpLspTransitStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLdpLspTransitStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLdpLspTransitStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.IpPrefix = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceIdentifier", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpLspTransitStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InstanceIdentifier = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpLspTransitStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLdpLspTransitStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLdpLspTransitStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CounterName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpLspTransitStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLdpLspTransitStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLdpLspTransitStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &LabelDistributionProtocolLspTransitStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLdpLspTransitStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLdpLspTransitStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLdpLspTransitStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ip_prefix")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelDistributionProtocolLspTransitStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLdpLspTransitStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelDistributionProtocolLspTransitStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelDistributionProtocolLspTransitStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpLspTransitStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Packets = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpLspTransitStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bytes = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpLspTransitStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PacketRate = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByteRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpLspTransitStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ByteRate = &v
		default:
			iNdEx = preIndex
			skippy, err := skipLdpLspTransitStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLdpLspTransitStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLdpLspTransitStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLdpLspTransitStats(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLdpLspTransitStats
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLdpLspTransitStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLdpLspTransitStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLdpLspTransitStats
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLdpLspTransitStats
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLdpLspTransitStats
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLdpLspTransitStats        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLdpLspTransitStats          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLdpLspTransitStats = fmt.Errorf("proto: unexpected end of group")
)
