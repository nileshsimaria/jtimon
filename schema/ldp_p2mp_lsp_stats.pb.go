// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ldp_p2mp_lsp_stats.proto

package schema

import (
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
// Top-level message
//
type LdpP2MpLspStats struct {
	// List of LDP P2MP LSP stats record
	LdpP2MpLspStatsRecords []*LdpP2MpLspRecord `protobuf:"bytes,1,rep,name=ldp_p2mp_lsp_stats_records,json=ldpP2mpLspStatsRecords" json:"ldp_p2mp_lsp_stats_records,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}            `json:"-"`
	XXX_unrecognized       []byte              `json:"-"`
	XXX_sizecache          int32               `json:"-"`
}

func (m *LdpP2MpLspStats) Reset()         { *m = LdpP2MpLspStats{} }
func (m *LdpP2MpLspStats) String() string { return proto.CompactTextString(m) }
func (*LdpP2MpLspStats) ProtoMessage()    {}
func (*LdpP2MpLspStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_de3095a4de0e0ad1, []int{0}
}
func (m *LdpP2MpLspStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LdpP2MpLspStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LdpP2MpLspStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LdpP2MpLspStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LdpP2MpLspStats.Merge(m, src)
}
func (m *LdpP2MpLspStats) XXX_Size() int {
	return m.Size()
}
func (m *LdpP2MpLspStats) XXX_DiscardUnknown() {
	xxx_messageInfo_LdpP2MpLspStats.DiscardUnknown(m)
}

var xxx_messageInfo_LdpP2MpLspStats proto.InternalMessageInfo

func (m *LdpP2MpLspStats) GetLdpP2MpLspStatsRecords() []*LdpP2MpLspRecord {
	if m != nil {
		return m.LdpP2MpLspStatsRecords
	}
	return nil
}

type LdpP2MpLspRecord struct {
	// IP prefix
	RootAddress *string `protobuf:"bytes,1,req,name=root_address,json=rootAddress" json:"root_address,omitempty"`
	LspId       *uint32 `protobuf:"varint,2,opt,name=lsp_id,json=lspId" json:"lsp_id,omitempty"`
	// Source Ip address
	SourceIp *string `protobuf:"bytes,3,opt,name=source_ip,json=sourceIp" json:"source_ip,omitempty"`
	// Group Ip address
	GroupIp *string `protobuf:"bytes,4,opt,name=group_ip,json=groupIp" json:"group_ip,omitempty"`
	// Instance Identifier for cases when RPD creates multiple instances
	InstanceIdentifier *uint32 `protobuf:"varint,5,opt,name=instance_identifier,json=instanceIdentifier" json:"instance_identifier,omitempty"`
	// Name of the counter.
	CounterName *string `protobuf:"bytes,6,opt,name=counter_name,json=counterName" json:"counter_name,omitempty"`
	// Statistics
	Stats                *LabelDistributionProtocolP2MpLspStats `protobuf:"bytes,7,opt,name=stats" json:"stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *LdpP2MpLspRecord) Reset()         { *m = LdpP2MpLspRecord{} }
func (m *LdpP2MpLspRecord) String() string { return proto.CompactTextString(m) }
func (*LdpP2MpLspRecord) ProtoMessage()    {}
func (*LdpP2MpLspRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_de3095a4de0e0ad1, []int{1}
}
func (m *LdpP2MpLspRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LdpP2MpLspRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LdpP2MpLspRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LdpP2MpLspRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LdpP2MpLspRecord.Merge(m, src)
}
func (m *LdpP2MpLspRecord) XXX_Size() int {
	return m.Size()
}
func (m *LdpP2MpLspRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_LdpP2MpLspRecord.DiscardUnknown(m)
}

var xxx_messageInfo_LdpP2MpLspRecord proto.InternalMessageInfo

func (m *LdpP2MpLspRecord) GetRootAddress() string {
	if m != nil && m.RootAddress != nil {
		return *m.RootAddress
	}
	return ""
}

func (m *LdpP2MpLspRecord) GetLspId() uint32 {
	if m != nil && m.LspId != nil {
		return *m.LspId
	}
	return 0
}

func (m *LdpP2MpLspRecord) GetSourceIp() string {
	if m != nil && m.SourceIp != nil {
		return *m.SourceIp
	}
	return ""
}

func (m *LdpP2MpLspRecord) GetGroupIp() string {
	if m != nil && m.GroupIp != nil {
		return *m.GroupIp
	}
	return ""
}

func (m *LdpP2MpLspRecord) GetInstanceIdentifier() uint32 {
	if m != nil && m.InstanceIdentifier != nil {
		return *m.InstanceIdentifier
	}
	return 0
}

func (m *LdpP2MpLspRecord) GetCounterName() string {
	if m != nil && m.CounterName != nil {
		return *m.CounterName
	}
	return ""
}

func (m *LdpP2MpLspRecord) GetStats() *LabelDistributionProtocolP2MpLspStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type LabelDistributionProtocolP2MpLspStats struct {
	// Packet and Byte statistics
	Packets *uint64 `protobuf:"varint,1,opt,name=packets" json:"packets,omitempty"`
	Bytes   *uint64 `protobuf:"varint,2,opt,name=bytes" json:"bytes,omitempty"`
	// Rates of the above counters
	PacketRate           *uint64  `protobuf:"varint,3,opt,name=packet_rate,json=packetRate" json:"packet_rate,omitempty"`
	ByteRate             *uint64  `protobuf:"varint,4,opt,name=byte_rate,json=byteRate" json:"byte_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LabelDistributionProtocolP2MpLspStats) Reset()         { *m = LabelDistributionProtocolP2MpLspStats{} }
func (m *LabelDistributionProtocolP2MpLspStats) String() string { return proto.CompactTextString(m) }
func (*LabelDistributionProtocolP2MpLspStats) ProtoMessage()    {}
func (*LabelDistributionProtocolP2MpLspStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_de3095a4de0e0ad1, []int{2}
}
func (m *LabelDistributionProtocolP2MpLspStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LabelDistributionProtocolP2MpLspStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LabelDistributionProtocolP2MpLspStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LabelDistributionProtocolP2MpLspStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelDistributionProtocolP2MpLspStats.Merge(m, src)
}
func (m *LabelDistributionProtocolP2MpLspStats) XXX_Size() int {
	return m.Size()
}
func (m *LabelDistributionProtocolP2MpLspStats) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelDistributionProtocolP2MpLspStats.DiscardUnknown(m)
}

var xxx_messageInfo_LabelDistributionProtocolP2MpLspStats proto.InternalMessageInfo

func (m *LabelDistributionProtocolP2MpLspStats) GetPackets() uint64 {
	if m != nil && m.Packets != nil {
		return *m.Packets
	}
	return 0
}

func (m *LabelDistributionProtocolP2MpLspStats) GetBytes() uint64 {
	if m != nil && m.Bytes != nil {
		return *m.Bytes
	}
	return 0
}

func (m *LabelDistributionProtocolP2MpLspStats) GetPacketRate() uint64 {
	if m != nil && m.PacketRate != nil {
		return *m.PacketRate
	}
	return 0
}

func (m *LabelDistributionProtocolP2MpLspStats) GetByteRate() uint64 {
	if m != nil && m.ByteRate != nil {
		return *m.ByteRate
	}
	return 0
}

var E_JnprLdpP2MpLspStatsExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*LdpP2MpLspStats)(nil),
	Field:         155,
	Name:          "jnpr_ldp_p2mp_lsp_stats_ext",
	Tag:           "bytes,155,opt,name=jnpr_ldp_p2mp_lsp_stats_ext",
	Filename:      "ldp_p2mp_lsp_stats.proto",
}

func init() {
	proto.RegisterType((*LdpP2MpLspStats)(nil), "LdpP2mpLspStats")
	proto.RegisterType((*LdpP2MpLspRecord)(nil), "LdpP2mpLspRecord")
	proto.RegisterType((*LabelDistributionProtocolP2MpLspStats)(nil), "LabelDistributionProtocolP2mpLspStats")
	proto.RegisterExtension(E_JnprLdpP2MpLspStatsExt)
}

func init() { proto.RegisterFile("ldp_p2mp_lsp_stats.proto", fileDescriptor_de3095a4de0e0ad1) }

var fileDescriptor_de3095a4de0e0ad1 = []byte{
	// 507 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x41, 0x6f, 0xd3, 0x3c,
	0x1c, 0xc6, 0xe5, 0x6e, 0xdd, 0x3a, 0xf7, 0x7d, 0xc5, 0xf0, 0xa4, 0x11, 0x6d, 0xa8, 0x54, 0x95,
	0x98, 0x72, 0x69, 0x22, 0xf5, 0xc0, 0x01, 0x71, 0x80, 0x09, 0x0e, 0x45, 0x65, 0x9a, 0xb2, 0x1b,
	0x17, 0xcf, 0x4d, 0xfe, 0xa4, 0x6e, 0x13, 0xdb, 0xb2, 0xff, 0x81, 0xed, 0xca, 0xd7, 0xe0, 0x53,
	0xf0, 0x0d, 0x38, 0x72, 0xe4, 0x23, 0xa0, 0x7e, 0x12, 0xe4, 0x84, 0x76, 0x5d, 0xe1, 0xc0, 0xf5,
	0x79, 0x7e, 0xcf, 0x13, 0xe7, 0xb1, 0x69, 0x50, 0x64, 0x86, 0x9b, 0x51, 0x69, 0x78, 0xe1, 0x0c,
	0x77, 0x28, 0xd0, 0x45, 0xc6, 0x6a, 0xd4, 0x27, 0x47, 0x08, 0x05, 0x94, 0x80, 0xf6, 0x96, 0xa3,
	0x36, 0x8d, 0x38, 0xb8, 0xa6, 0x0f, 0x26, 0x99, 0xb9, 0x1c, 0x95, 0x66, 0xe2, 0xcc, 0x95, 0xa7,
	0xd9, 0x3b, 0x7a, 0xf2, 0x67, 0x07, 0xb7, 0x90, 0x6a, 0x9b, 0xb9, 0x80, 0xf4, 0x77, 0xc2, 0xee,
	0xe8, 0x61, 0x74, 0x97, 0x4a, 0x6a, 0x27, 0x39, 0x2e, 0xee, 0xf7, 0x34, 0xb2, 0x1b, 0x7c, 0x6b,
	0xd1, 0xc3, 0x6d, 0x98, 0x85, 0xf4, 0x3f, 0xab, 0x35, 0x72, 0x91, 0x65, 0x16, 0x9c, 0x6f, 0x6d,
	0x85, 0x07, 0xe7, 0xed, 0xcf, 0x2f, 0x5b, 0x1d, 0x92, 0x74, 0xbd, 0xf5, 0xaa, 0x71, 0xd8, 0x63,
	0xba, 0xe7, 0x0f, 0x21, 0xb3, 0xa0, 0xd5, 0x27, 0xe1, 0xff, 0x2b, 0xa6, 0x5d, 0x38, 0x33, 0xce,
	0xd8, 0x80, 0x1e, 0x38, 0x5d, 0xd9, 0x14, 0xb8, 0x34, 0xc1, 0x4e, 0x9f, 0xdc, 0x95, 0x74, 0x1a,
	0x7d, 0x6c, 0x58, 0x9f, 0x76, 0x72, 0xab, 0x2b, 0xe3, 0x91, 0xdd, 0x4d, 0x64, 0xbf, 0x96, 0xc7,
	0x86, 0x3d, 0xa3, 0x47, 0x52, 0x39, 0x14, 0xca, 0xf7, 0x64, 0xa0, 0x50, 0x7e, 0x90, 0x60, 0x83,
	0xf6, 0xe6, 0x07, 0xd9, 0x8a, 0x18, 0xaf, 0x01, 0xff, 0x17, 0xa9, 0xae, 0x14, 0x82, 0xe5, 0x4a,
	0x94, 0x10, 0xec, 0x6d, 0xb6, 0x77, 0x7f, 0x5b, 0x17, 0xa2, 0x04, 0xf6, 0x82, 0xb6, 0xeb, 0x19,
	0x83, 0xfd, 0x3e, 0x09, 0xbb, 0xa3, 0xb3, 0x68, 0x22, 0xa6, 0x50, 0xbc, 0x96, 0x0e, 0xad, 0x9c,
	0x56, 0x28, 0xb5, 0xba, 0xf4, 0xd7, 0x91, 0xea, 0xe2, 0xde, 0x84, 0x4d, 0x68, 0xf0, 0x95, 0xd0,
	0xa7, 0xff, 0x14, 0x60, 0x4f, 0xe8, 0xbe, 0x11, 0xe9, 0x02, 0xd0, 0x4f, 0x4a, 0xc2, 0xdd, 0xfa,
	0x30, 0x01, 0x49, 0x56, 0x2a, 0x3b, 0xa5, 0xed, 0xe9, 0x2d, 0x82, 0xab, 0xd7, 0x5c, 0xdb, 0x8d,
	0xc6, 0xce, 0x68, 0xb7, 0xe1, 0xb8, 0x15, 0x08, 0xf5, 0x9e, 0x6b, 0x84, 0x36, 0x4e, 0x22, 0x10,
	0xfc, 0xea, 0x3e, 0xd0, 0x50, 0xbb, 0x9b, 0x54, 0xc7, 0xeb, 0x9e, 0x79, 0x9e, 0xd3, 0xd3, 0xb9,
	0x32, 0x96, 0xff, 0xe5, 0x29, 0xc1, 0x0d, 0xb2, 0x47, 0xd1, 0xdb, 0x4a, 0x49, 0x03, 0xf6, 0x02,
	0xf0, 0x93, 0xb6, 0x0b, 0x77, 0x05, 0xca, 0x69, 0xeb, 0x82, 0x2f, 0xa4, 0x5e, 0xe8, 0x30, 0xda,
	0x7a, 0x96, 0xc9, 0xb1, 0xaf, 0xdb, 0x12, 0xdf, 0xdc, 0xe0, 0xf9, 0xf5, 0xf7, 0x65, 0x8f, 0xfc,
	0x58, 0xf6, 0xc8, 0xcf, 0x65, 0x8f, 0xbc, 0x4f, 0x72, 0x89, 0xd1, 0xbc, 0xa9, 0x8e, 0x14, 0x60,
	0x2c, 0x53, 0x98, 0x82, 0xcd, 0xe3, 0x19, 0x88, 0x02, 0x67, 0x53, 0x8d, 0x43, 0xa9, 0x72, 0x70,
	0x38, 0x9c, 0xa3, 0x1c, 0x2a, 0x81, 0xf2, 0x23, 0xc4, 0x66, 0x91, 0xc7, 0x73, 0x94, 0xb1, 0xc8,
	0x84, 0x41, 0xb0, 0x2e, 0xe6, 0xf3, 0x4a, 0x69, 0x17, 0xbb, 0x74, 0x06, 0xa5, 0xf8, 0x15, 0x00,
	0x00, 0xff, 0xff, 0xb1, 0x8e, 0x2e, 0xfe, 0x53, 0x03, 0x00, 0x00,
}

func (m *LdpP2MpLspStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LdpP2MpLspStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LdpP2MpLspStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LdpP2MpLspStatsRecords) > 0 {
		for iNdEx := len(m.LdpP2MpLspStatsRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LdpP2MpLspStatsRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLdpP2MpLspStats(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LdpP2MpLspRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LdpP2MpLspRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LdpP2MpLspRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Stats != nil {
		{
			size, err := m.Stats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLdpP2MpLspStats(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.CounterName != nil {
		i -= len(*m.CounterName)
		copy(dAtA[i:], *m.CounterName)
		i = encodeVarintLdpP2MpLspStats(dAtA, i, uint64(len(*m.CounterName)))
		i--
		dAtA[i] = 0x32
	}
	if m.InstanceIdentifier != nil {
		i = encodeVarintLdpP2MpLspStats(dAtA, i, uint64(*m.InstanceIdentifier))
		i--
		dAtA[i] = 0x28
	}
	if m.GroupIp != nil {
		i -= len(*m.GroupIp)
		copy(dAtA[i:], *m.GroupIp)
		i = encodeVarintLdpP2MpLspStats(dAtA, i, uint64(len(*m.GroupIp)))
		i--
		dAtA[i] = 0x22
	}
	if m.SourceIp != nil {
		i -= len(*m.SourceIp)
		copy(dAtA[i:], *m.SourceIp)
		i = encodeVarintLdpP2MpLspStats(dAtA, i, uint64(len(*m.SourceIp)))
		i--
		dAtA[i] = 0x1a
	}
	if m.LspId != nil {
		i = encodeVarintLdpP2MpLspStats(dAtA, i, uint64(*m.LspId))
		i--
		dAtA[i] = 0x10
	}
	if m.RootAddress == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("root_address")
	} else {
		i -= len(*m.RootAddress)
		copy(dAtA[i:], *m.RootAddress)
		i = encodeVarintLdpP2MpLspStats(dAtA, i, uint64(len(*m.RootAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LabelDistributionProtocolP2MpLspStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelDistributionProtocolP2MpLspStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LabelDistributionProtocolP2MpLspStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ByteRate != nil {
		i = encodeVarintLdpP2MpLspStats(dAtA, i, uint64(*m.ByteRate))
		i--
		dAtA[i] = 0x20
	}
	if m.PacketRate != nil {
		i = encodeVarintLdpP2MpLspStats(dAtA, i, uint64(*m.PacketRate))
		i--
		dAtA[i] = 0x18
	}
	if m.Bytes != nil {
		i = encodeVarintLdpP2MpLspStats(dAtA, i, uint64(*m.Bytes))
		i--
		dAtA[i] = 0x10
	}
	if m.Packets != nil {
		i = encodeVarintLdpP2MpLspStats(dAtA, i, uint64(*m.Packets))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLdpP2MpLspStats(dAtA []byte, offset int, v uint64) int {
	offset -= sovLdpP2MpLspStats(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LdpP2MpLspStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LdpP2MpLspStatsRecords) > 0 {
		for _, e := range m.LdpP2MpLspStatsRecords {
			l = e.Size()
			n += 1 + l + sovLdpP2MpLspStats(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LdpP2MpLspRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RootAddress != nil {
		l = len(*m.RootAddress)
		n += 1 + l + sovLdpP2MpLspStats(uint64(l))
	}
	if m.LspId != nil {
		n += 1 + sovLdpP2MpLspStats(uint64(*m.LspId))
	}
	if m.SourceIp != nil {
		l = len(*m.SourceIp)
		n += 1 + l + sovLdpP2MpLspStats(uint64(l))
	}
	if m.GroupIp != nil {
		l = len(*m.GroupIp)
		n += 1 + l + sovLdpP2MpLspStats(uint64(l))
	}
	if m.InstanceIdentifier != nil {
		n += 1 + sovLdpP2MpLspStats(uint64(*m.InstanceIdentifier))
	}
	if m.CounterName != nil {
		l = len(*m.CounterName)
		n += 1 + l + sovLdpP2MpLspStats(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovLdpP2MpLspStats(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LabelDistributionProtocolP2MpLspStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Packets != nil {
		n += 1 + sovLdpP2MpLspStats(uint64(*m.Packets))
	}
	if m.Bytes != nil {
		n += 1 + sovLdpP2MpLspStats(uint64(*m.Bytes))
	}
	if m.PacketRate != nil {
		n += 1 + sovLdpP2MpLspStats(uint64(*m.PacketRate))
	}
	if m.ByteRate != nil {
		n += 1 + sovLdpP2MpLspStats(uint64(*m.ByteRate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovLdpP2MpLspStats(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLdpP2MpLspStats(x uint64) (n int) {
	return sovLdpP2MpLspStats(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LdpP2MpLspStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLdpP2MpLspStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LdpP2mpLspStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LdpP2mpLspStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LdpP2MpLspStatsRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpP2MpLspStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLdpP2MpLspStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLdpP2MpLspStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LdpP2MpLspStatsRecords = append(m.LdpP2MpLspStatsRecords, &LdpP2MpLspRecord{})
			if err := m.LdpP2MpLspStatsRecords[len(m.LdpP2MpLspStatsRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLdpP2MpLspStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLdpP2MpLspStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLdpP2MpLspStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LdpP2MpLspRecord) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLdpP2MpLspStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LdpP2mpLspRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LdpP2mpLspRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpP2MpLspStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLdpP2MpLspStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLdpP2MpLspStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RootAddress = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LspId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpP2MpLspStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LspId = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpP2MpLspStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLdpP2MpLspStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLdpP2MpLspStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SourceIp = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpP2MpLspStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLdpP2MpLspStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLdpP2MpLspStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GroupIp = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceIdentifier", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpP2MpLspStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InstanceIdentifier = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpP2MpLspStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLdpP2MpLspStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLdpP2MpLspStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CounterName = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpP2MpLspStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLdpP2MpLspStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLdpP2MpLspStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &LabelDistributionProtocolP2MpLspStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLdpP2MpLspStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLdpP2MpLspStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLdpP2MpLspStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("root_address")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelDistributionProtocolP2MpLspStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLdpP2MpLspStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelDistributionProtocolP2mpLspStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelDistributionProtocolP2mpLspStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpP2MpLspStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Packets = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpP2MpLspStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bytes = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpP2MpLspStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PacketRate = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByteRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpP2MpLspStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ByteRate = &v
		default:
			iNdEx = preIndex
			skippy, err := skipLdpP2MpLspStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLdpP2MpLspStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLdpP2MpLspStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLdpP2MpLspStats(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLdpP2MpLspStats
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLdpP2MpLspStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLdpP2MpLspStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLdpP2MpLspStats
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLdpP2MpLspStats
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLdpP2MpLspStats
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLdpP2MpLspStats        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLdpP2MpLspStats          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLdpP2MpLspStats = fmt.Errorf("proto: unexpected end of group")
)
