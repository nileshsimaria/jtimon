// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ldp_p2mp_per_if_egress.proto

package schema

import (
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
// Top-level message
//
type LdpP2MpPerIfEgress struct {
	// List of LDP P2mp stats per IF egress records
	PerIfRecords         []*LdpP2MpInterfaceRecord `protobuf:"bytes,1,rep,name=per_if_records,json=perIfRecords" json:"per_if_records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *LdpP2MpPerIfEgress) Reset()         { *m = LdpP2MpPerIfEgress{} }
func (m *LdpP2MpPerIfEgress) String() string { return proto.CompactTextString(m) }
func (*LdpP2MpPerIfEgress) ProtoMessage()    {}
func (*LdpP2MpPerIfEgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_90ec76097a3bb737, []int{0}
}
func (m *LdpP2MpPerIfEgress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LdpP2MpPerIfEgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LdpP2MpPerIfEgress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LdpP2MpPerIfEgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LdpP2MpPerIfEgress.Merge(m, src)
}
func (m *LdpP2MpPerIfEgress) XXX_Size() int {
	return m.Size()
}
func (m *LdpP2MpPerIfEgress) XXX_DiscardUnknown() {
	xxx_messageInfo_LdpP2MpPerIfEgress.DiscardUnknown(m)
}

var xxx_messageInfo_LdpP2MpPerIfEgress proto.InternalMessageInfo

func (m *LdpP2MpPerIfEgress) GetPerIfRecords() []*LdpP2MpInterfaceRecord {
	if m != nil {
		return m.PerIfRecords
	}
	return nil
}

//
// SR statistics record
//
type LdpP2MpInterfaceRecord struct {
	// Interface name, e.g., xe-0/0/0
	IfName *string `protobuf:"bytes,1,req,name=if_name,json=ifName" json:"if_name,omitempty"`
	// Name of the counter. This is useful when an interface has multiple counters.
	// for some scenarios, it is possible that a new counter is
	// created in the hardware.
	CounterName *string `protobuf:"bytes,2,opt,name=counter_name,json=counterName" json:"counter_name,omitempty"`
	// Traffic statistics
	IngressStats         *LabelDistributionProtocolP2MpIfStats `protobuf:"bytes,3,opt,name=ingress_stats,json=ingressStats" json:"ingress_stats,omitempty"`
	EgressStats          *LabelDistributionProtocolP2MpIfStats `protobuf:"bytes,4,opt,name=egress_stats,json=egressStats" json:"egress_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *LdpP2MpInterfaceRecord) Reset()         { *m = LdpP2MpInterfaceRecord{} }
func (m *LdpP2MpInterfaceRecord) String() string { return proto.CompactTextString(m) }
func (*LdpP2MpInterfaceRecord) ProtoMessage()    {}
func (*LdpP2MpInterfaceRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_90ec76097a3bb737, []int{1}
}
func (m *LdpP2MpInterfaceRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LdpP2MpInterfaceRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LdpP2MpInterfaceRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LdpP2MpInterfaceRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LdpP2MpInterfaceRecord.Merge(m, src)
}
func (m *LdpP2MpInterfaceRecord) XXX_Size() int {
	return m.Size()
}
func (m *LdpP2MpInterfaceRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_LdpP2MpInterfaceRecord.DiscardUnknown(m)
}

var xxx_messageInfo_LdpP2MpInterfaceRecord proto.InternalMessageInfo

func (m *LdpP2MpInterfaceRecord) GetIfName() string {
	if m != nil && m.IfName != nil {
		return *m.IfName
	}
	return ""
}

func (m *LdpP2MpInterfaceRecord) GetCounterName() string {
	if m != nil && m.CounterName != nil {
		return *m.CounterName
	}
	return ""
}

func (m *LdpP2MpInterfaceRecord) GetIngressStats() *LabelDistributionProtocolP2MpIfStats {
	if m != nil {
		return m.IngressStats
	}
	return nil
}

func (m *LdpP2MpInterfaceRecord) GetEgressStats() *LabelDistributionProtocolP2MpIfStats {
	if m != nil {
		return m.EgressStats
	}
	return nil
}

type LabelDistributionProtocolP2MpIfStats struct {
	// Packet and Byte statistics
	Packets *uint64 `protobuf:"varint,1,opt,name=packets" json:"packets,omitempty"`
	Bytes   *uint64 `protobuf:"varint,2,opt,name=bytes" json:"bytes,omitempty"`
	// Rates of the above counters.
	PacketRate           *uint64  `protobuf:"varint,3,opt,name=packet_rate,json=packetRate" json:"packet_rate,omitempty"`
	ByteRate             *uint64  `protobuf:"varint,4,opt,name=byte_rate,json=byteRate" json:"byte_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LabelDistributionProtocolP2MpIfStats) Reset()         { *m = LabelDistributionProtocolP2MpIfStats{} }
func (m *LabelDistributionProtocolP2MpIfStats) String() string { return proto.CompactTextString(m) }
func (*LabelDistributionProtocolP2MpIfStats) ProtoMessage()    {}
func (*LabelDistributionProtocolP2MpIfStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_90ec76097a3bb737, []int{2}
}
func (m *LabelDistributionProtocolP2MpIfStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LabelDistributionProtocolP2MpIfStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LabelDistributionProtocolP2MpIfStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LabelDistributionProtocolP2MpIfStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelDistributionProtocolP2MpIfStats.Merge(m, src)
}
func (m *LabelDistributionProtocolP2MpIfStats) XXX_Size() int {
	return m.Size()
}
func (m *LabelDistributionProtocolP2MpIfStats) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelDistributionProtocolP2MpIfStats.DiscardUnknown(m)
}

var xxx_messageInfo_LabelDistributionProtocolP2MpIfStats proto.InternalMessageInfo

func (m *LabelDistributionProtocolP2MpIfStats) GetPackets() uint64 {
	if m != nil && m.Packets != nil {
		return *m.Packets
	}
	return 0
}

func (m *LabelDistributionProtocolP2MpIfStats) GetBytes() uint64 {
	if m != nil && m.Bytes != nil {
		return *m.Bytes
	}
	return 0
}

func (m *LabelDistributionProtocolP2MpIfStats) GetPacketRate() uint64 {
	if m != nil && m.PacketRate != nil {
		return *m.PacketRate
	}
	return 0
}

func (m *LabelDistributionProtocolP2MpIfStats) GetByteRate() uint64 {
	if m != nil && m.ByteRate != nil {
		return *m.ByteRate
	}
	return 0
}

var E_JnprLdpP2MpPerIfEgressExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*LdpP2MpPerIfEgress)(nil),
	Field:         156,
	Name:          "jnpr_ldp_p2mp_per_if_egress_ext",
	Tag:           "bytes,156,opt,name=jnpr_ldp_p2mp_per_if_egress_ext",
	Filename:      "ldp_p2mp_per_if_egress.proto",
}

func init() {
	proto.RegisterType((*LdpP2MpPerIfEgress)(nil), "LdpP2mpPerIfEgress")
	proto.RegisterType((*LdpP2MpInterfaceRecord)(nil), "LdpP2mpInterfaceRecord")
	proto.RegisterType((*LabelDistributionProtocolP2MpIfStats)(nil), "LabelDistributionProtocolP2mpIfStats")
	proto.RegisterExtension(E_JnprLdpP2MpPerIfEgressExt)
}

func init() { proto.RegisterFile("ldp_p2mp_per_if_egress.proto", fileDescriptor_90ec76097a3bb737) }

var fileDescriptor_90ec76097a3bb737 = []byte{
	// 466 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcf, 0x6e, 0x13, 0x3d,
	0x14, 0xc5, 0xe5, 0x34, 0xfd, 0xda, 0x3a, 0xf9, 0x58, 0xb8, 0x12, 0x1d, 0xfe, 0x28, 0x1d, 0x45,
	0x80, 0x66, 0x93, 0x19, 0x29, 0x4b, 0x24, 0x24, 0x54, 0x51, 0x89, 0x56, 0x55, 0x15, 0x4d, 0x76,
	0x6c, 0x8c, 0x67, 0x72, 0x67, 0xe2, 0xc9, 0x8c, 0x6d, 0xec, 0x1b, 0x68, 0xb7, 0x3c, 0x07, 0x0f,
	0xc1, 0x63, 0xb0, 0xe4, 0x11, 0x50, 0x9e, 0x82, 0x25, 0x1a, 0x4f, 0xa0, 0x95, 0xda, 0x05, 0x2c,
	0x7d, 0xce, 0xef, 0x1c, 0xfb, 0x5e, 0x99, 0x3e, 0xad, 0x17, 0x86, 0x9b, 0x69, 0x63, 0xb8, 0x01,
	0xcb, 0x65, 0xc1, 0xa1, 0xb4, 0xe0, 0x5c, 0x6c, 0xac, 0x46, 0xfd, 0xf8, 0x10, 0xa1, 0x86, 0x06,
	0xd0, 0x5e, 0x73, 0xd4, 0xa6, 0x13, 0xc7, 0x73, 0xca, 0x2e, 0x16, 0x66, 0x36, 0x6d, 0xcc, 0x0c,
	0xec, 0x59, 0x71, 0xea, 0x03, 0xec, 0x15, 0x7d, 0xb0, 0x6d, 0xb0, 0x90, 0x6b, 0xbb, 0x70, 0x01,
	0x09, 0x77, 0xa2, 0xc1, 0xf4, 0x28, 0xde, 0xc2, 0x67, 0x0a, 0xc1, 0x16, 0x22, 0x87, 0xd4, 0xfb,
	0xe9, 0xd0, 0xb4, 0xe9, 0xee, 0xe0, 0xc6, 0x3f, 0x09, 0x7d, 0x78, 0x3f, 0xc8, 0x46, 0x74, 0x4f,
	0x16, 0x5c, 0x89, 0x06, 0x02, 0x12, 0xf6, 0xa2, 0x83, 0x93, 0xdd, 0xcf, 0xaf, 0x7b, 0xfb, 0x24,
	0xfd, 0x4f, 0x16, 0x97, 0xa2, 0x01, 0x16, 0xd1, 0x61, 0xae, 0xd7, 0x6d, 0xa8, 0x83, 0x7a, 0x21,
	0xb9, 0x81, 0x06, 0x5b, 0xcb, 0x93, 0xe7, 0xf4, 0x7f, 0xa9, 0xfc, 0x73, 0xb9, 0x43, 0x81, 0x2e,
	0xd8, 0x09, 0x49, 0x34, 0x98, 0x3e, 0x8f, 0x2f, 0x44, 0x06, 0xf5, 0x1b, 0xe9, 0xd0, 0xca, 0x6c,
	0x8d, 0x52, 0xab, 0x59, 0x3b, 0x69, 0xae, 0x6b, 0xff, 0x9e, 0x62, 0xde, 0xc2, 0xe9, 0x70, 0x9b,
	0xf5, 0x27, 0xf6, 0x96, 0x0e, 0xe1, 0x76, 0x55, 0xff, 0x5f, 0xaa, 0x06, 0x70, 0xd3, 0x34, 0xfe,
	0x4a, 0xe8, 0xb3, 0xbf, 0x49, 0xb1, 0x63, 0xba, 0x67, 0x44, 0xbe, 0x02, 0x6c, 0x77, 0x4b, 0xa2,
	0xbe, 0x9f, 0x31, 0x20, 0xe9, 0x6f, 0x95, 0x3d, 0xa1, 0xbb, 0xd9, 0x35, 0x82, 0xf3, 0x2b, 0xf8,
	0x63, 0x77, 0x1a, 0x7b, 0x41, 0x07, 0x1d, 0xc7, 0xad, 0x40, 0xf0, 0xa3, 0x77, 0x48, 0x48, 0x52,
	0xda, 0x39, 0xa9, 0x40, 0x60, 0x63, 0x7a, 0xd0, 0x06, 0x3a, 0xaa, 0x7f, 0x9b, 0xda, 0x6f, 0xf5,
	0x96, 0x79, 0xf9, 0x81, 0x1e, 0x57, 0xca, 0x58, 0x7e, 0xff, 0xe7, 0xe1, 0x70, 0x85, 0xec, 0x28,
	0x3e, 0x5f, 0x2b, 0x69, 0xc0, 0x5e, 0x02, 0x7e, 0xd2, 0x76, 0xe5, 0xe6, 0xa0, 0x9c, 0xb6, 0x2e,
	0xf8, 0x42, 0xfc, 0xa6, 0x0e, 0xe3, 0xbb, 0x9f, 0x28, 0x7d, 0xd4, 0xb6, 0xde, 0xd5, 0x4f, 0xaf,
	0xf0, 0xe4, 0xfd, 0xb7, 0xcd, 0x88, 0x7c, 0xdf, 0x8c, 0xc8, 0x8f, 0xcd, 0x88, 0xbc, 0x4b, 0x4b,
	0x89, 0x71, 0xd5, 0x5d, 0x10, 0x2b, 0xc0, 0x44, 0xe6, 0x90, 0x81, 0x2d, 0x93, 0x25, 0x88, 0x1a,
	0x97, 0x99, 0xc6, 0x89, 0x54, 0x25, 0x38, 0x9c, 0x54, 0x28, 0x27, 0x4a, 0xa0, 0xfc, 0x08, 0x89,
	0x59, 0x95, 0x49, 0x85, 0x32, 0x11, 0x0b, 0x61, 0x10, 0xac, 0x4b, 0x78, 0xb5, 0x56, 0xda, 0x25,
	0x2e, 0x5f, 0x42, 0x23, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0x68, 0xe4, 0x35, 0xaa, 0x0b, 0x03,
	0x00, 0x00,
}

func (m *LdpP2MpPerIfEgress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LdpP2MpPerIfEgress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LdpP2MpPerIfEgress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PerIfRecords) > 0 {
		for iNdEx := len(m.PerIfRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PerIfRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLdpP2MpPerIfEgress(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LdpP2MpInterfaceRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LdpP2MpInterfaceRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LdpP2MpInterfaceRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EgressStats != nil {
		{
			size, err := m.EgressStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLdpP2MpPerIfEgress(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.IngressStats != nil {
		{
			size, err := m.IngressStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLdpP2MpPerIfEgress(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CounterName != nil {
		i -= len(*m.CounterName)
		copy(dAtA[i:], *m.CounterName)
		i = encodeVarintLdpP2MpPerIfEgress(dAtA, i, uint64(len(*m.CounterName)))
		i--
		dAtA[i] = 0x12
	}
	if m.IfName == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("if_name")
	} else {
		i -= len(*m.IfName)
		copy(dAtA[i:], *m.IfName)
		i = encodeVarintLdpP2MpPerIfEgress(dAtA, i, uint64(len(*m.IfName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LabelDistributionProtocolP2MpIfStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelDistributionProtocolP2MpIfStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LabelDistributionProtocolP2MpIfStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ByteRate != nil {
		i = encodeVarintLdpP2MpPerIfEgress(dAtA, i, uint64(*m.ByteRate))
		i--
		dAtA[i] = 0x20
	}
	if m.PacketRate != nil {
		i = encodeVarintLdpP2MpPerIfEgress(dAtA, i, uint64(*m.PacketRate))
		i--
		dAtA[i] = 0x18
	}
	if m.Bytes != nil {
		i = encodeVarintLdpP2MpPerIfEgress(dAtA, i, uint64(*m.Bytes))
		i--
		dAtA[i] = 0x10
	}
	if m.Packets != nil {
		i = encodeVarintLdpP2MpPerIfEgress(dAtA, i, uint64(*m.Packets))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLdpP2MpPerIfEgress(dAtA []byte, offset int, v uint64) int {
	offset -= sovLdpP2MpPerIfEgress(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LdpP2MpPerIfEgress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PerIfRecords) > 0 {
		for _, e := range m.PerIfRecords {
			l = e.Size()
			n += 1 + l + sovLdpP2MpPerIfEgress(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LdpP2MpInterfaceRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IfName != nil {
		l = len(*m.IfName)
		n += 1 + l + sovLdpP2MpPerIfEgress(uint64(l))
	}
	if m.CounterName != nil {
		l = len(*m.CounterName)
		n += 1 + l + sovLdpP2MpPerIfEgress(uint64(l))
	}
	if m.IngressStats != nil {
		l = m.IngressStats.Size()
		n += 1 + l + sovLdpP2MpPerIfEgress(uint64(l))
	}
	if m.EgressStats != nil {
		l = m.EgressStats.Size()
		n += 1 + l + sovLdpP2MpPerIfEgress(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LabelDistributionProtocolP2MpIfStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Packets != nil {
		n += 1 + sovLdpP2MpPerIfEgress(uint64(*m.Packets))
	}
	if m.Bytes != nil {
		n += 1 + sovLdpP2MpPerIfEgress(uint64(*m.Bytes))
	}
	if m.PacketRate != nil {
		n += 1 + sovLdpP2MpPerIfEgress(uint64(*m.PacketRate))
	}
	if m.ByteRate != nil {
		n += 1 + sovLdpP2MpPerIfEgress(uint64(*m.ByteRate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovLdpP2MpPerIfEgress(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLdpP2MpPerIfEgress(x uint64) (n int) {
	return sovLdpP2MpPerIfEgress(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LdpP2MpPerIfEgress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLdpP2MpPerIfEgress
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LdpP2mpPerIfEgress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LdpP2mpPerIfEgress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerIfRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpP2MpPerIfEgress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLdpP2MpPerIfEgress
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLdpP2MpPerIfEgress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PerIfRecords = append(m.PerIfRecords, &LdpP2MpInterfaceRecord{})
			if err := m.PerIfRecords[len(m.PerIfRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLdpP2MpPerIfEgress(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLdpP2MpPerIfEgress
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLdpP2MpPerIfEgress
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LdpP2MpInterfaceRecord) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLdpP2MpPerIfEgress
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LdpP2mpInterfaceRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LdpP2mpInterfaceRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpP2MpPerIfEgress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLdpP2MpPerIfEgress
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLdpP2MpPerIfEgress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.IfName = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpP2MpPerIfEgress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLdpP2MpPerIfEgress
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLdpP2MpPerIfEgress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CounterName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpP2MpPerIfEgress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLdpP2MpPerIfEgress
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLdpP2MpPerIfEgress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IngressStats == nil {
				m.IngressStats = &LabelDistributionProtocolP2MpIfStats{}
			}
			if err := m.IngressStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgressStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpP2MpPerIfEgress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLdpP2MpPerIfEgress
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLdpP2MpPerIfEgress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EgressStats == nil {
				m.EgressStats = &LabelDistributionProtocolP2MpIfStats{}
			}
			if err := m.EgressStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLdpP2MpPerIfEgress(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLdpP2MpPerIfEgress
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLdpP2MpPerIfEgress
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("if_name")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelDistributionProtocolP2MpIfStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLdpP2MpPerIfEgress
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelDistributionProtocolP2mpIfStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelDistributionProtocolP2mpIfStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpP2MpPerIfEgress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Packets = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpP2MpPerIfEgress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bytes = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpP2MpPerIfEgress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PacketRate = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByteRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpP2MpPerIfEgress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ByteRate = &v
		default:
			iNdEx = preIndex
			skippy, err := skipLdpP2MpPerIfEgress(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLdpP2MpPerIfEgress
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLdpP2MpPerIfEgress
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLdpP2MpPerIfEgress(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLdpP2MpPerIfEgress
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLdpP2MpPerIfEgress
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLdpP2MpPerIfEgress
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLdpP2MpPerIfEgress
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLdpP2MpPerIfEgress
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLdpP2MpPerIfEgress
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLdpP2MpPerIfEgress        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLdpP2MpPerIfEgress          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLdpP2MpPerIfEgress = fmt.Errorf("proto: unexpected end of group")
)
