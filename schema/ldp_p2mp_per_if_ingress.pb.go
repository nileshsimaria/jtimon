// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ldp_p2mp_per_if_ingress.proto

package schema

import (
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
// Top-level message
//
type LdpP2MpPerIfIngress struct {
	// List of LDP P2mp stats per IF ingress records
	PerIfRecords         []*LdpP2MpIngIfRecord `protobuf:"bytes,1,rep,name=per_if_records,json=perIfRecords" json:"per_if_records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *LdpP2MpPerIfIngress) Reset()         { *m = LdpP2MpPerIfIngress{} }
func (m *LdpP2MpPerIfIngress) String() string { return proto.CompactTextString(m) }
func (*LdpP2MpPerIfIngress) ProtoMessage()    {}
func (*LdpP2MpPerIfIngress) Descriptor() ([]byte, []int) {
	return fileDescriptor_4aec5355035b7126, []int{0}
}
func (m *LdpP2MpPerIfIngress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LdpP2MpPerIfIngress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LdpP2MpPerIfIngress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LdpP2MpPerIfIngress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LdpP2MpPerIfIngress.Merge(m, src)
}
func (m *LdpP2MpPerIfIngress) XXX_Size() int {
	return m.Size()
}
func (m *LdpP2MpPerIfIngress) XXX_DiscardUnknown() {
	xxx_messageInfo_LdpP2MpPerIfIngress.DiscardUnknown(m)
}

var xxx_messageInfo_LdpP2MpPerIfIngress proto.InternalMessageInfo

func (m *LdpP2MpPerIfIngress) GetPerIfRecords() []*LdpP2MpIngIfRecord {
	if m != nil {
		return m.PerIfRecords
	}
	return nil
}

//
// SR statistics record
//
type LdpP2MpIngIfRecord struct {
	// Interface name, e.g., xe-0/0/0
	IfName *string `protobuf:"bytes,1,req,name=if_name,json=ifName" json:"if_name,omitempty"`
	// Name of the counter. This is useful when an interface has multiple counters.
	// for some scenarios, it is possible that a new counter is
	// created in the hardware.
	CounterName *string `protobuf:"bytes,2,opt,name=counter_name,json=counterName" json:"counter_name,omitempty"`
	// Traffic statistics
	IngressStats         *LabelDistributionProtocolP2MpIngIfStats `protobuf:"bytes,3,opt,name=ingress_stats,json=ingressStats" json:"ingress_stats,omitempty"`
	EgressStats          *LabelDistributionProtocolP2MpIngIfStats `protobuf:"bytes,4,opt,name=egress_stats,json=egressStats" json:"egress_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *LdpP2MpIngIfRecord) Reset()         { *m = LdpP2MpIngIfRecord{} }
func (m *LdpP2MpIngIfRecord) String() string { return proto.CompactTextString(m) }
func (*LdpP2MpIngIfRecord) ProtoMessage()    {}
func (*LdpP2MpIngIfRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_4aec5355035b7126, []int{1}
}
func (m *LdpP2MpIngIfRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LdpP2MpIngIfRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LdpP2MpIngIfRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LdpP2MpIngIfRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LdpP2MpIngIfRecord.Merge(m, src)
}
func (m *LdpP2MpIngIfRecord) XXX_Size() int {
	return m.Size()
}
func (m *LdpP2MpIngIfRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_LdpP2MpIngIfRecord.DiscardUnknown(m)
}

var xxx_messageInfo_LdpP2MpIngIfRecord proto.InternalMessageInfo

func (m *LdpP2MpIngIfRecord) GetIfName() string {
	if m != nil && m.IfName != nil {
		return *m.IfName
	}
	return ""
}

func (m *LdpP2MpIngIfRecord) GetCounterName() string {
	if m != nil && m.CounterName != nil {
		return *m.CounterName
	}
	return ""
}

func (m *LdpP2MpIngIfRecord) GetIngressStats() *LabelDistributionProtocolP2MpIngIfStats {
	if m != nil {
		return m.IngressStats
	}
	return nil
}

func (m *LdpP2MpIngIfRecord) GetEgressStats() *LabelDistributionProtocolP2MpIngIfStats {
	if m != nil {
		return m.EgressStats
	}
	return nil
}

type LabelDistributionProtocolP2MpIngIfStats struct {
	// Packet and Byte statistics
	Packets *uint64 `protobuf:"varint,1,opt,name=packets" json:"packets,omitempty"`
	Bytes   *uint64 `protobuf:"varint,2,opt,name=bytes" json:"bytes,omitempty"`
	// Rates of the above counters.
	PacketRate           *uint64  `protobuf:"varint,3,opt,name=packet_rate,json=packetRate" json:"packet_rate,omitempty"`
	ByteRate             *uint64  `protobuf:"varint,4,opt,name=byte_rate,json=byteRate" json:"byte_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LabelDistributionProtocolP2MpIngIfStats) Reset() {
	*m = LabelDistributionProtocolP2MpIngIfStats{}
}
func (m *LabelDistributionProtocolP2MpIngIfStats) String() string { return proto.CompactTextString(m) }
func (*LabelDistributionProtocolP2MpIngIfStats) ProtoMessage()    {}
func (*LabelDistributionProtocolP2MpIngIfStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_4aec5355035b7126, []int{2}
}
func (m *LabelDistributionProtocolP2MpIngIfStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LabelDistributionProtocolP2MpIngIfStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LabelDistributionProtocolP2MpIngIfStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LabelDistributionProtocolP2MpIngIfStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelDistributionProtocolP2MpIngIfStats.Merge(m, src)
}
func (m *LabelDistributionProtocolP2MpIngIfStats) XXX_Size() int {
	return m.Size()
}
func (m *LabelDistributionProtocolP2MpIngIfStats) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelDistributionProtocolP2MpIngIfStats.DiscardUnknown(m)
}

var xxx_messageInfo_LabelDistributionProtocolP2MpIngIfStats proto.InternalMessageInfo

func (m *LabelDistributionProtocolP2MpIngIfStats) GetPackets() uint64 {
	if m != nil && m.Packets != nil {
		return *m.Packets
	}
	return 0
}

func (m *LabelDistributionProtocolP2MpIngIfStats) GetBytes() uint64 {
	if m != nil && m.Bytes != nil {
		return *m.Bytes
	}
	return 0
}

func (m *LabelDistributionProtocolP2MpIngIfStats) GetPacketRate() uint64 {
	if m != nil && m.PacketRate != nil {
		return *m.PacketRate
	}
	return 0
}

func (m *LabelDistributionProtocolP2MpIngIfStats) GetByteRate() uint64 {
	if m != nil && m.ByteRate != nil {
		return *m.ByteRate
	}
	return 0
}

var E_JnprLdpP2MpPerIfIngressExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*LdpP2MpPerIfIngress)(nil),
	Field:         157,
	Name:          "jnpr_ldp_p2mp_per_if_ingress_ext",
	Tag:           "bytes,157,opt,name=jnpr_ldp_p2mp_per_if_ingress_ext",
	Filename:      "ldp_p2mp_per_if_ingress.proto",
}

func init() {
	proto.RegisterType((*LdpP2MpPerIfIngress)(nil), "LdpP2mpPerIfIngress")
	proto.RegisterType((*LdpP2MpIngIfRecord)(nil), "LdpP2mpIngIfRecord")
	proto.RegisterType((*LabelDistributionProtocolP2MpIngIfStats)(nil), "LabelDistributionProtocolP2mpIngIfStats")
	proto.RegisterExtension(E_JnprLdpP2MpPerIfIngressExt)
}

func init() { proto.RegisterFile("ldp_p2mp_per_if_ingress.proto", fileDescriptor_4aec5355035b7126) }

var fileDescriptor_4aec5355035b7126 = []byte{
	// 460 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x41, 0x6e, 0xd3, 0x40,
	0x14, 0x86, 0x35, 0x69, 0x4a, 0xdb, 0x49, 0x60, 0x31, 0x41, 0x22, 0x2a, 0x22, 0x58, 0x59, 0x80,
	0x37, 0xb1, 0xa5, 0xec, 0x60, 0x85, 0x2a, 0x58, 0x04, 0x4a, 0x15, 0xb9, 0x3b, 0x36, 0xc3, 0xd8,
	0x79, 0x76, 0xc6, 0xb1, 0x67, 0x46, 0x33, 0x2f, 0xd0, 0x6e, 0xb9, 0x07, 0xa7, 0xe0, 0x12, 0x2c,
	0x39, 0x02, 0xca, 0x31, 0x58, 0x21, 0x7b, 0x4c, 0x5b, 0x89, 0x22, 0xd1, 0xe5, 0xbc, 0xff, 0xfb,
	0x7f, 0xfb, 0xfd, 0x7a, 0xf4, 0x49, 0xb5, 0x32, 0xdc, 0xcc, 0x6b, 0xc3, 0x0d, 0x58, 0x2e, 0x73,
	0x2e, 0x55, 0x61, 0xc1, 0xb9, 0xc8, 0x58, 0x8d, 0xfa, 0x78, 0x84, 0x50, 0x41, 0x0d, 0x68, 0x2f,
	0x39, 0x6a, 0xe3, 0x87, 0xd3, 0x25, 0x1d, 0x9d, 0xae, 0xcc, 0x72, 0x5e, 0x9b, 0x25, 0xd8, 0x45,
	0xbe, 0xf0, 0x0e, 0xf6, 0x82, 0x3e, 0xe8, 0x32, 0x2c, 0x64, 0xda, 0xae, 0xdc, 0x98, 0x04, 0x7b,
	0xe1, 0x60, 0x3e, 0x8a, 0x3a, 0x7a, 0xa1, 0x8a, 0x45, 0x9e, 0xb4, 0x5a, 0x32, 0x34, 0x8d, 0xd5,
	0x3f, 0xdc, 0xf4, 0x17, 0xa1, 0xec, 0x6f, 0x88, 0x4d, 0xe8, 0x81, 0xcc, 0xb9, 0x12, 0x35, 0x8c,
	0x49, 0xd0, 0x0b, 0x8f, 0x4e, 0xf6, 0xbf, 0xbc, 0xea, 0x1d, 0x92, 0xe4, 0x9e, 0xcc, 0xcf, 0x44,
	0x0d, 0x2c, 0xa4, 0xc3, 0x4c, 0x6f, 0x15, 0x82, 0xf5, 0x50, 0x2f, 0x20, 0xd7, 0xd0, 0xa0, 0x93,
	0x5a, 0xf2, 0x3d, 0xbd, 0xdf, 0x2d, 0xc6, 0x1d, 0x0a, 0x74, 0xe3, 0xbd, 0x80, 0x84, 0x83, 0x79,
	0x18, 0x9d, 0x8a, 0x14, 0xaa, 0xd7, 0xd2, 0xa1, 0x95, 0xe9, 0x16, 0xa5, 0x56, 0xcb, 0x66, 0xc5,
	0x4c, 0x57, 0x57, 0xff, 0x72, 0xde, 0xf0, 0xc9, 0xb0, 0xb3, 0xb7, 0x2f, 0xf6, 0x8e, 0x0e, 0xe1,
	0x66, 0x5a, 0xff, 0x8e, 0x69, 0x03, 0xb8, 0x0e, 0x9b, 0x7e, 0x23, 0xf4, 0xf9, 0x7f, 0x1a, 0xd9,
	0x53, 0x7a, 0x60, 0x44, 0xb6, 0x01, 0x6c, 0xca, 0x25, 0x61, 0xbf, 0x5d, 0x76, 0x4c, 0x92, 0x3f,
	0x53, 0xf6, 0x98, 0xee, 0xa7, 0x97, 0x08, 0xae, 0xed, 0xe2, 0x4a, 0xf6, 0x33, 0xf6, 0x8c, 0x0e,
	0x3c, 0xc7, 0xad, 0x40, 0x68, 0x3b, 0xf0, 0x48, 0x40, 0x12, 0xea, 0x95, 0x44, 0x20, 0xb0, 0x29,
	0x3d, 0x6a, 0x0c, 0x9e, 0xea, 0xdf, 0xa4, 0x0e, 0x9b, 0x79, 0xc3, 0xbc, 0x44, 0x1a, 0x94, 0xca,
	0x58, 0xfe, 0x8f, 0xfb, 0xe1, 0x70, 0x81, 0xec, 0x51, 0xf4, 0x76, 0xab, 0xa4, 0x01, 0x7b, 0x06,
	0xf8, 0x59, 0xdb, 0x8d, 0x3b, 0x07, 0xe5, 0xb4, 0x75, 0xe3, 0xaf, 0xa4, 0x2d, 0xec, 0x61, 0x74,
	0xcb, 0x1d, 0x25, 0xc7, 0x4d, 0xee, 0x2d, 0xc2, 0x9b, 0x0b, 0x3c, 0xf9, 0xf8, 0x7d, 0x37, 0x21,
	0x3f, 0x76, 0x13, 0xf2, 0x73, 0x37, 0x21, 0x1f, 0x92, 0x42, 0x62, 0x54, 0xfa, 0x4f, 0x44, 0x0a,
	0x30, 0x96, 0x19, 0xa4, 0x60, 0x8b, 0x78, 0x0d, 0xa2, 0xc2, 0x75, 0xaa, 0x71, 0x26, 0x55, 0x01,
	0x0e, 0x67, 0x25, 0xca, 0x99, 0x12, 0x28, 0x3f, 0x41, 0x6c, 0x36, 0x45, 0x5c, 0xa2, 0x8c, 0xc5,
	0x4a, 0x18, 0x04, 0xeb, 0x62, 0x5e, 0x6e, 0x95, 0x76, 0xb1, 0xcb, 0xd6, 0x50, 0x8b, 0xdf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xe5, 0xad, 0xce, 0x50, 0x11, 0x03, 0x00, 0x00,
}

func (m *LdpP2MpPerIfIngress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LdpP2MpPerIfIngress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LdpP2MpPerIfIngress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PerIfRecords) > 0 {
		for iNdEx := len(m.PerIfRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PerIfRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLdpP2MpPerIfIngress(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LdpP2MpIngIfRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LdpP2MpIngIfRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LdpP2MpIngIfRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EgressStats != nil {
		{
			size, err := m.EgressStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLdpP2MpPerIfIngress(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.IngressStats != nil {
		{
			size, err := m.IngressStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLdpP2MpPerIfIngress(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CounterName != nil {
		i -= len(*m.CounterName)
		copy(dAtA[i:], *m.CounterName)
		i = encodeVarintLdpP2MpPerIfIngress(dAtA, i, uint64(len(*m.CounterName)))
		i--
		dAtA[i] = 0x12
	}
	if m.IfName == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("if_name")
	} else {
		i -= len(*m.IfName)
		copy(dAtA[i:], *m.IfName)
		i = encodeVarintLdpP2MpPerIfIngress(dAtA, i, uint64(len(*m.IfName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LabelDistributionProtocolP2MpIngIfStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelDistributionProtocolP2MpIngIfStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LabelDistributionProtocolP2MpIngIfStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ByteRate != nil {
		i = encodeVarintLdpP2MpPerIfIngress(dAtA, i, uint64(*m.ByteRate))
		i--
		dAtA[i] = 0x20
	}
	if m.PacketRate != nil {
		i = encodeVarintLdpP2MpPerIfIngress(dAtA, i, uint64(*m.PacketRate))
		i--
		dAtA[i] = 0x18
	}
	if m.Bytes != nil {
		i = encodeVarintLdpP2MpPerIfIngress(dAtA, i, uint64(*m.Bytes))
		i--
		dAtA[i] = 0x10
	}
	if m.Packets != nil {
		i = encodeVarintLdpP2MpPerIfIngress(dAtA, i, uint64(*m.Packets))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLdpP2MpPerIfIngress(dAtA []byte, offset int, v uint64) int {
	offset -= sovLdpP2MpPerIfIngress(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LdpP2MpPerIfIngress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PerIfRecords) > 0 {
		for _, e := range m.PerIfRecords {
			l = e.Size()
			n += 1 + l + sovLdpP2MpPerIfIngress(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LdpP2MpIngIfRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IfName != nil {
		l = len(*m.IfName)
		n += 1 + l + sovLdpP2MpPerIfIngress(uint64(l))
	}
	if m.CounterName != nil {
		l = len(*m.CounterName)
		n += 1 + l + sovLdpP2MpPerIfIngress(uint64(l))
	}
	if m.IngressStats != nil {
		l = m.IngressStats.Size()
		n += 1 + l + sovLdpP2MpPerIfIngress(uint64(l))
	}
	if m.EgressStats != nil {
		l = m.EgressStats.Size()
		n += 1 + l + sovLdpP2MpPerIfIngress(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LabelDistributionProtocolP2MpIngIfStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Packets != nil {
		n += 1 + sovLdpP2MpPerIfIngress(uint64(*m.Packets))
	}
	if m.Bytes != nil {
		n += 1 + sovLdpP2MpPerIfIngress(uint64(*m.Bytes))
	}
	if m.PacketRate != nil {
		n += 1 + sovLdpP2MpPerIfIngress(uint64(*m.PacketRate))
	}
	if m.ByteRate != nil {
		n += 1 + sovLdpP2MpPerIfIngress(uint64(*m.ByteRate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovLdpP2MpPerIfIngress(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLdpP2MpPerIfIngress(x uint64) (n int) {
	return sovLdpP2MpPerIfIngress(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LdpP2MpPerIfIngress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLdpP2MpPerIfIngress
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LdpP2mpPerIfIngress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LdpP2mpPerIfIngress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerIfRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpP2MpPerIfIngress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLdpP2MpPerIfIngress
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLdpP2MpPerIfIngress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PerIfRecords = append(m.PerIfRecords, &LdpP2MpIngIfRecord{})
			if err := m.PerIfRecords[len(m.PerIfRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLdpP2MpPerIfIngress(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLdpP2MpPerIfIngress
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLdpP2MpPerIfIngress
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LdpP2MpIngIfRecord) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLdpP2MpPerIfIngress
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LdpP2mpIngIfRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LdpP2mpIngIfRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpP2MpPerIfIngress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLdpP2MpPerIfIngress
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLdpP2MpPerIfIngress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.IfName = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpP2MpPerIfIngress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLdpP2MpPerIfIngress
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLdpP2MpPerIfIngress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CounterName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpP2MpPerIfIngress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLdpP2MpPerIfIngress
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLdpP2MpPerIfIngress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IngressStats == nil {
				m.IngressStats = &LabelDistributionProtocolP2MpIngIfStats{}
			}
			if err := m.IngressStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgressStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpP2MpPerIfIngress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLdpP2MpPerIfIngress
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLdpP2MpPerIfIngress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EgressStats == nil {
				m.EgressStats = &LabelDistributionProtocolP2MpIngIfStats{}
			}
			if err := m.EgressStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLdpP2MpPerIfIngress(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLdpP2MpPerIfIngress
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLdpP2MpPerIfIngress
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("if_name")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelDistributionProtocolP2MpIngIfStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLdpP2MpPerIfIngress
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelDistributionProtocolP2mpIngIfStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelDistributionProtocolP2mpIngIfStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpP2MpPerIfIngress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Packets = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpP2MpPerIfIngress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bytes = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpP2MpPerIfIngress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PacketRate = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByteRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLdpP2MpPerIfIngress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ByteRate = &v
		default:
			iNdEx = preIndex
			skippy, err := skipLdpP2MpPerIfIngress(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLdpP2MpPerIfIngress
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLdpP2MpPerIfIngress
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLdpP2MpPerIfIngress(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLdpP2MpPerIfIngress
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLdpP2MpPerIfIngress
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLdpP2MpPerIfIngress
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLdpP2MpPerIfIngress
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLdpP2MpPerIfIngress
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLdpP2MpPerIfIngress
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLdpP2MpPerIfIngress        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLdpP2MpPerIfIngress          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLdpP2MpPerIfIngress = fmt.Errorf("proto: unexpected end of group")
)
