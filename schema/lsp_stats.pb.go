// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lsp_stats.proto

package schema

import (
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
// Top-level message
//
type LspStats struct {
	// List of LSP statistics records
	LspStatsRecords      []*LspStatsRecord `protobuf:"bytes,1,rep,name=lsp_stats_records,json=lspStatsRecords" json:"lsp_stats_records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *LspStats) Reset()         { *m = LspStats{} }
func (m *LspStats) String() string { return proto.CompactTextString(m) }
func (*LspStats) ProtoMessage()    {}
func (*LspStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc5e73ce6e34840, []int{0}
}
func (m *LspStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LspStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LspStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LspStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LspStats.Merge(m, src)
}
func (m *LspStats) XXX_Size() int {
	return m.Size()
}
func (m *LspStats) XXX_DiscardUnknown() {
	xxx_messageInfo_LspStats.DiscardUnknown(m)
}

var xxx_messageInfo_LspStats proto.InternalMessageInfo

func (m *LspStats) GetLspStatsRecords() []*LspStatsRecord {
	if m != nil {
		return m.LspStatsRecords
	}
	return nil
}

//
// LSP statistics record
//
type LspStatsRecord struct {
	// Name of the LSP
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// Instance Identifier for cases when RPD creates multiple instances
	InstanceIdentifier *uint32 `protobuf:"varint,2,req,name=instance_identifier,json=instanceIdentifier" json:"instance_identifier,omitempty"`
	// Name of the counter. This is useful when an LSP has multiple counters.
	// When an LSP is resignalled, it is possible that a new counter is
	// created in the hardware.
	CounterName *string `protobuf:"bytes,3,req,name=counter_name,json=counterName" json:"counter_name,omitempty"`
	// The total number of packets
	Packets *uint64 `protobuf:"varint,4,opt,name=packets" json:"packets,omitempty"`
	// The total number of bytes
	Bytes *uint64 `protobuf:"varint,5,opt,name=bytes" json:"bytes,omitempty"`
	// Packet rate computed over the most recent 3 second interval
	PacketRate *uint64 `protobuf:"varint,6,opt,name=packet_rate,json=packetRate" json:"packet_rate,omitempty"`
	// Byte rate computed over the most recent 3 second interval
	ByteRate             *uint64  `protobuf:"varint,7,opt,name=byte_rate,json=byteRate" json:"byte_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LspStatsRecord) Reset()         { *m = LspStatsRecord{} }
func (m *LspStatsRecord) String() string { return proto.CompactTextString(m) }
func (*LspStatsRecord) ProtoMessage()    {}
func (*LspStatsRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc5e73ce6e34840, []int{1}
}
func (m *LspStatsRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LspStatsRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LspStatsRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LspStatsRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LspStatsRecord.Merge(m, src)
}
func (m *LspStatsRecord) XXX_Size() int {
	return m.Size()
}
func (m *LspStatsRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_LspStatsRecord.DiscardUnknown(m)
}

var xxx_messageInfo_LspStatsRecord proto.InternalMessageInfo

func (m *LspStatsRecord) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *LspStatsRecord) GetInstanceIdentifier() uint32 {
	if m != nil && m.InstanceIdentifier != nil {
		return *m.InstanceIdentifier
	}
	return 0
}

func (m *LspStatsRecord) GetCounterName() string {
	if m != nil && m.CounterName != nil {
		return *m.CounterName
	}
	return ""
}

func (m *LspStatsRecord) GetPackets() uint64 {
	if m != nil && m.Packets != nil {
		return *m.Packets
	}
	return 0
}

func (m *LspStatsRecord) GetBytes() uint64 {
	if m != nil && m.Bytes != nil {
		return *m.Bytes
	}
	return 0
}

func (m *LspStatsRecord) GetPacketRate() uint64 {
	if m != nil && m.PacketRate != nil {
		return *m.PacketRate
	}
	return 0
}

func (m *LspStatsRecord) GetByteRate() uint64 {
	if m != nil && m.ByteRate != nil {
		return *m.ByteRate
	}
	return 0
}

var E_JnprLspStatisticsExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*LspStats)(nil),
	Field:         5,
	Name:          "jnpr_lsp_statistics_ext",
	Tag:           "bytes,5,opt,name=jnpr_lsp_statistics_ext",
	Filename:      "lsp_stats.proto",
}

func init() {
	proto.RegisterType((*LspStats)(nil), "LspStats")
	proto.RegisterType((*LspStatsRecord)(nil), "LspStatsRecord")
	proto.RegisterExtension(E_JnprLspStatisticsExt)
}

func init() { proto.RegisterFile("lsp_stats.proto", fileDescriptor_edc5e73ce6e34840) }

var fileDescriptor_edc5e73ce6e34840 = []byte{
	// 390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xc1, 0x6e, 0x13, 0x31,
	0x10, 0x86, 0xe5, 0x6d, 0x42, 0x13, 0x07, 0xa8, 0x70, 0x91, 0xba, 0x50, 0x29, 0x5d, 0xf5, 0xb4,
	0x97, 0xec, 0x4a, 0x3d, 0x70, 0x80, 0x0b, 0xaa, 0x84, 0x10, 0x08, 0xf5, 0xb0, 0x3d, 0xc1, 0xc5,
	0x38, 0x9b, 0x61, 0xe3, 0x4d, 0x62, 0x5b, 0x9e, 0x09, 0xb4, 0x57, 0x6e, 0xbc, 0x19, 0x47, 0x1e,
	0x01, 0xe5, 0x49, 0x90, 0xd7, 0xdd, 0x92, 0x1e, 0xe7, 0xfb, 0x3f, 0xff, 0x1e, 0x0d, 0x3f, 0x5a,
	0xa3, 0x93, 0x48, 0x8a, 0xb0, 0x70, 0xde, 0x92, 0x7d, 0x79, 0x4c, 0xb0, 0x86, 0x0d, 0x90, 0xbf,
	0x95, 0x64, 0x5d, 0x84, 0xe7, 0xef, 0xf9, 0xe8, 0x13, 0xba, 0xeb, 0xa0, 0x89, 0x37, 0xfc, 0xd9,
	0xfd, 0x1b, 0xe9, 0xa1, 0xb6, 0x7e, 0x81, 0x29, 0xcb, 0x0e, 0xf2, 0xc9, 0xc5, 0x51, 0xd1, 0x5b,
	0x55, 0xc7, 0xab, 0xd0, 0xbe, 0x37, 0xe3, 0xf9, 0xaf, 0x84, 0x3f, 0x7d, 0xe8, 0x88, 0x17, 0x7c,
	0x60, 0xd4, 0x06, 0x52, 0x96, 0x25, 0xf9, 0xf8, 0x72, 0xf8, 0xf3, 0x6d, 0x32, 0x62, 0x55, 0x87,
	0xc4, 0x2b, 0x7e, 0xac, 0x0d, 0x92, 0x32, 0x35, 0x48, 0xbd, 0x00, 0x43, 0xfa, 0x9b, 0x06, 0x9f,
	0x26, 0x59, 0x92, 0x3f, 0xe9, 0x4d, 0xd1, 0x1b, 0x1f, 0xee, 0x05, 0x91, 0xf3, 0xc7, 0xb5, 0xdd,
	0x1a, 0x02, 0x2f, 0xbb, 0xea, 0x83, 0xfd, 0xea, 0xc9, 0x5d, 0x74, 0x15, 0x7e, 0x38, 0xe3, 0x87,
	0x4e, 0xd5, 0x2b, 0x20, 0x4c, 0x07, 0x19, 0xcb, 0x07, 0x9d, 0x94, 0xb2, 0xaa, 0xa7, 0xe2, 0x94,
	0x0f, 0xe7, 0xb7, 0x04, 0x98, 0x0e, 0xf7, 0xe3, 0xc8, 0xc4, 0x19, 0x9f, 0x44, 0x4f, 0x7a, 0x45,
	0x90, 0x3e, 0x0a, 0x4a, 0xc5, 0x23, 0xaa, 0x14, 0x81, 0x38, 0xe5, 0xe3, 0x60, 0xc6, 0xf8, 0xb0,
	0x8b, 0x47, 0x01, 0x84, 0xf0, 0xf5, 0x67, 0x7e, 0xd2, 0x1a, 0xe7, 0x65, 0x7f, 0x4d, 0x8d, 0xa4,
	0x6b, 0x94, 0x70, 0x43, 0xe2, 0xa4, 0xf8, 0xb8, 0x35, 0xda, 0x81, 0xbf, 0x02, 0xfa, 0x61, 0xfd,
	0x0a, 0xaf, 0xc1, 0xa0, 0xf5, 0x71, 0x8b, 0xc9, 0xc5, 0xf8, 0xff, 0x9d, 0x9f, 0x87, 0x8a, 0xbb,
	0x29, 0x16, 0xbc, 0xbb, 0xa1, 0xcb, 0xaf, 0xbf, 0x77, 0x53, 0xf6, 0x67, 0x37, 0x65, 0x7f, 0x77,
	0x53, 0xf6, 0xa5, 0x6a, 0x34, 0x15, 0x6d, 0x2c, 0x2c, 0x0c, 0x50, 0xa9, 0x6b, 0x98, 0x83, 0x6f,
	0xca, 0x25, 0xa8, 0x35, 0x2d, 0xe7, 0x96, 0x66, 0xda, 0x34, 0x80, 0x34, 0x6b, 0x49, 0xcf, 0x8c,
	0x22, 0xfd, 0x1d, 0x4a, 0xb7, 0x6a, 0xca, 0x96, 0x74, 0xa9, 0x16, 0xca, 0x11, 0x78, 0x2c, 0x65,
	0xbb, 0x35, 0x16, 0x4b, 0xac, 0x97, 0xb0, 0x51, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xa7, 0x3e,
	0x6e, 0xd5, 0x38, 0x02, 0x00, 0x00,
}

func (m *LspStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LspStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LspStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LspStatsRecords) > 0 {
		for iNdEx := len(m.LspStatsRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LspStatsRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLspStats(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LspStatsRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LspStatsRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LspStatsRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ByteRate != nil {
		i = encodeVarintLspStats(dAtA, i, uint64(*m.ByteRate))
		i--
		dAtA[i] = 0x38
	}
	if m.PacketRate != nil {
		i = encodeVarintLspStats(dAtA, i, uint64(*m.PacketRate))
		i--
		dAtA[i] = 0x30
	}
	if m.Bytes != nil {
		i = encodeVarintLspStats(dAtA, i, uint64(*m.Bytes))
		i--
		dAtA[i] = 0x28
	}
	if m.Packets != nil {
		i = encodeVarintLspStats(dAtA, i, uint64(*m.Packets))
		i--
		dAtA[i] = 0x20
	}
	if m.CounterName == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("counter_name")
	} else {
		i -= len(*m.CounterName)
		copy(dAtA[i:], *m.CounterName)
		i = encodeVarintLspStats(dAtA, i, uint64(len(*m.CounterName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.InstanceIdentifier == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("instance_identifier")
	} else {
		i = encodeVarintLspStats(dAtA, i, uint64(*m.InstanceIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if m.Name == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	} else {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintLspStats(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLspStats(dAtA []byte, offset int, v uint64) int {
	offset -= sovLspStats(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LspStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LspStatsRecords) > 0 {
		for _, e := range m.LspStatsRecords {
			l = e.Size()
			n += 1 + l + sovLspStats(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LspStatsRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovLspStats(uint64(l))
	}
	if m.InstanceIdentifier != nil {
		n += 1 + sovLspStats(uint64(*m.InstanceIdentifier))
	}
	if m.CounterName != nil {
		l = len(*m.CounterName)
		n += 1 + l + sovLspStats(uint64(l))
	}
	if m.Packets != nil {
		n += 1 + sovLspStats(uint64(*m.Packets))
	}
	if m.Bytes != nil {
		n += 1 + sovLspStats(uint64(*m.Bytes))
	}
	if m.PacketRate != nil {
		n += 1 + sovLspStats(uint64(*m.PacketRate))
	}
	if m.ByteRate != nil {
		n += 1 + sovLspStats(uint64(*m.ByteRate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovLspStats(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLspStats(x uint64) (n int) {
	return sovLspStats(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LspStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLspStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LspStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LspStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LspStatsRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLspStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLspStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLspStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LspStatsRecords = append(m.LspStatsRecords, &LspStatsRecord{})
			if err := m.LspStatsRecords[len(m.LspStatsRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLspStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLspStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLspStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LspStatsRecord) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLspStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LspStatsRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LspStatsRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLspStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLspStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLspStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceIdentifier", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLspStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InstanceIdentifier = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLspStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLspStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLspStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CounterName = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLspStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Packets = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLspStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bytes = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLspStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PacketRate = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByteRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLspStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ByteRate = &v
		default:
			iNdEx = preIndex
			skippy, err := skipLspStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLspStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLspStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("instance_identifier")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("counter_name")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLspStats(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLspStats
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLspStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLspStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLspStats
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLspStats
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLspStats
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLspStats        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLspStats          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLspStats = fmt.Errorf("proto: unexpected end of group")
)
