// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mib2d_arp_oc.proto

package schema

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ArpInformationMibArp struct {
	Ipv4                 *ArpInformationMibArpIpv4Type `protobuf:"bytes,151,opt,name=ipv4" json:"ipv4,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ArpInformationMibArp) Reset()         { *m = ArpInformationMibArp{} }
func (m *ArpInformationMibArp) String() string { return proto.CompactTextString(m) }
func (*ArpInformationMibArp) ProtoMessage()    {}
func (*ArpInformationMibArp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6609990a88c6913e, []int{0}
}
func (m *ArpInformationMibArp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArpInformationMibArp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArpInformationMibArp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArpInformationMibArp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArpInformationMibArp.Merge(m, src)
}
func (m *ArpInformationMibArp) XXX_Size() int {
	return m.Size()
}
func (m *ArpInformationMibArp) XXX_DiscardUnknown() {
	xxx_messageInfo_ArpInformationMibArp.DiscardUnknown(m)
}

var xxx_messageInfo_ArpInformationMibArp proto.InternalMessageInfo

func (m *ArpInformationMibArp) GetIpv4() *ArpInformationMibArpIpv4Type {
	if m != nil {
		return m.Ipv4
	}
	return nil
}

type ArpInformationMibArpIpv4Type struct {
	Neighbors            *ArpInformationMibArpIpv4TypeNeighborsType `protobuf:"bytes,151,opt,name=neighbors" json:"neighbors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *ArpInformationMibArpIpv4Type) Reset()         { *m = ArpInformationMibArpIpv4Type{} }
func (m *ArpInformationMibArpIpv4Type) String() string { return proto.CompactTextString(m) }
func (*ArpInformationMibArpIpv4Type) ProtoMessage()    {}
func (*ArpInformationMibArpIpv4Type) Descriptor() ([]byte, []int) {
	return fileDescriptor_6609990a88c6913e, []int{0, 0}
}
func (m *ArpInformationMibArpIpv4Type) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArpInformationMibArpIpv4Type) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArpInformationMibArpIpv4Type.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArpInformationMibArpIpv4Type) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArpInformationMibArpIpv4Type.Merge(m, src)
}
func (m *ArpInformationMibArpIpv4Type) XXX_Size() int {
	return m.Size()
}
func (m *ArpInformationMibArpIpv4Type) XXX_DiscardUnknown() {
	xxx_messageInfo_ArpInformationMibArpIpv4Type.DiscardUnknown(m)
}

var xxx_messageInfo_ArpInformationMibArpIpv4Type proto.InternalMessageInfo

func (m *ArpInformationMibArpIpv4Type) GetNeighbors() *ArpInformationMibArpIpv4TypeNeighborsType {
	if m != nil {
		return m.Neighbors
	}
	return nil
}

type ArpInformationMibArpIpv4TypeNeighborsType struct {
	Neighbor             []*ArpInformationMibArpIpv4TypeNeighborsTypeNeighborList `protobuf:"bytes,151,rep,name=neighbor" json:"neighbor,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                 `json:"-"`
	XXX_unrecognized     []byte                                                   `json:"-"`
	XXX_sizecache        int32                                                    `json:"-"`
}

func (m *ArpInformationMibArpIpv4TypeNeighborsType) Reset() {
	*m = ArpInformationMibArpIpv4TypeNeighborsType{}
}
func (m *ArpInformationMibArpIpv4TypeNeighborsType) String() string {
	return proto.CompactTextString(m)
}
func (*ArpInformationMibArpIpv4TypeNeighborsType) ProtoMessage() {}
func (*ArpInformationMibArpIpv4TypeNeighborsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6609990a88c6913e, []int{0, 0, 0}
}
func (m *ArpInformationMibArpIpv4TypeNeighborsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArpInformationMibArpIpv4TypeNeighborsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArpInformationMibArpIpv4TypeNeighborsType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArpInformationMibArpIpv4TypeNeighborsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArpInformationMibArpIpv4TypeNeighborsType.Merge(m, src)
}
func (m *ArpInformationMibArpIpv4TypeNeighborsType) XXX_Size() int {
	return m.Size()
}
func (m *ArpInformationMibArpIpv4TypeNeighborsType) XXX_DiscardUnknown() {
	xxx_messageInfo_ArpInformationMibArpIpv4TypeNeighborsType.DiscardUnknown(m)
}

var xxx_messageInfo_ArpInformationMibArpIpv4TypeNeighborsType proto.InternalMessageInfo

func (m *ArpInformationMibArpIpv4TypeNeighborsType) GetNeighbor() []*ArpInformationMibArpIpv4TypeNeighborsTypeNeighborList {
	if m != nil {
		return m.Neighbor
	}
	return nil
}

type ArpInformationMibArpIpv4TypeNeighborsTypeNeighborList struct {
	Ip                   *string                                                         `protobuf:"bytes,51,opt,name=ip" json:"ip,omitempty"`
	State                *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                        `json:"-"`
	XXX_unrecognized     []byte                                                          `json:"-"`
	XXX_sizecache        int32                                                           `json:"-"`
}

func (m *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborList) Reset() {
	*m = ArpInformationMibArpIpv4TypeNeighborsTypeNeighborList{}
}
func (m *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborList) String() string {
	return proto.CompactTextString(m)
}
func (*ArpInformationMibArpIpv4TypeNeighborsTypeNeighborList) ProtoMessage() {}
func (*ArpInformationMibArpIpv4TypeNeighborsTypeNeighborList) Descriptor() ([]byte, []int) {
	return fileDescriptor_6609990a88c6913e, []int{0, 0, 0, 0}
}
func (m *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArpInformationMibArpIpv4TypeNeighborsTypeNeighborList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArpInformationMibArpIpv4TypeNeighborsTypeNeighborList.Merge(m, src)
}
func (m *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborList) XXX_Size() int {
	return m.Size()
}
func (m *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborList) XXX_DiscardUnknown() {
	xxx_messageInfo_ArpInformationMibArpIpv4TypeNeighborsTypeNeighborList.DiscardUnknown(m)
}

var xxx_messageInfo_ArpInformationMibArpIpv4TypeNeighborsTypeNeighborList proto.InternalMessageInfo

func (m *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborList) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborList) GetState() *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborListStateType {
	if m != nil {
		return m.State
	}
	return nil
}

type ArpInformationMibArpIpv4TypeNeighborsTypeNeighborListStateType struct {
	Ip                   *string  `protobuf:"bytes,51,opt,name=ip" json:"ip,omitempty"`
	LinkLayerAddress     *string  `protobuf:"bytes,52,opt,name=link_layer_address,json=linkLayerAddress" json:"link_layer_address,omitempty"`
	Origin               *string  `protobuf:"bytes,53,opt,name=origin" json:"origin,omitempty"`
	HostName             *string  `protobuf:"bytes,61,opt,name=host_name,json=hostName" json:"host_name,omitempty"`
	TableId              *uint32  `protobuf:"varint,62,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	NeighborState        *string  `protobuf:"bytes,63,opt,name=neighbor_state,json=neighborState" json:"neighbor_state,omitempty"`
	Expiry               *uint32  `protobuf:"varint,64,opt,name=expiry" json:"expiry,omitempty"`
	IsPublish            *bool    `protobuf:"varint,65,opt,name=is_publish,json=isPublish" json:"is_publish,omitempty"`
	InterfaceName        *string  `protobuf:"bytes,66,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
	LogicalRouterId      *uint32  `protobuf:"varint,67,opt,name=logical_router_id,json=logicalRouterId" json:"logical_router_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborListStateType) Reset() {
	*m = ArpInformationMibArpIpv4TypeNeighborsTypeNeighborListStateType{}
}
func (m *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborListStateType) String() string {
	return proto.CompactTextString(m)
}
func (*ArpInformationMibArpIpv4TypeNeighborsTypeNeighborListStateType) ProtoMessage() {}
func (*ArpInformationMibArpIpv4TypeNeighborsTypeNeighborListStateType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6609990a88c6913e, []int{0, 0, 0, 0, 0}
}
func (m *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborListStateType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborListStateType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArpInformationMibArpIpv4TypeNeighborsTypeNeighborListStateType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborListStateType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArpInformationMibArpIpv4TypeNeighborsTypeNeighborListStateType.Merge(m, src)
}
func (m *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborListStateType) XXX_Size() int {
	return m.Size()
}
func (m *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborListStateType) XXX_DiscardUnknown() {
	xxx_messageInfo_ArpInformationMibArpIpv4TypeNeighborsTypeNeighborListStateType.DiscardUnknown(m)
}

var xxx_messageInfo_ArpInformationMibArpIpv4TypeNeighborsTypeNeighborListStateType proto.InternalMessageInfo

func (m *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborListStateType) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborListStateType) GetLinkLayerAddress() string {
	if m != nil && m.LinkLayerAddress != nil {
		return *m.LinkLayerAddress
	}
	return ""
}

func (m *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborListStateType) GetOrigin() string {
	if m != nil && m.Origin != nil {
		return *m.Origin
	}
	return ""
}

func (m *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborListStateType) GetHostName() string {
	if m != nil && m.HostName != nil {
		return *m.HostName
	}
	return ""
}

func (m *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborListStateType) GetTableId() uint32 {
	if m != nil && m.TableId != nil {
		return *m.TableId
	}
	return 0
}

func (m *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborListStateType) GetNeighborState() string {
	if m != nil && m.NeighborState != nil {
		return *m.NeighborState
	}
	return ""
}

func (m *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborListStateType) GetExpiry() uint32 {
	if m != nil && m.Expiry != nil {
		return *m.Expiry
	}
	return 0
}

func (m *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborListStateType) GetIsPublish() bool {
	if m != nil && m.IsPublish != nil {
		return *m.IsPublish
	}
	return false
}

func (m *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborListStateType) GetInterfaceName() string {
	if m != nil && m.InterfaceName != nil {
		return *m.InterfaceName
	}
	return ""
}

func (m *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborListStateType) GetLogicalRouterId() uint32 {
	if m != nil && m.LogicalRouterId != nil {
		return *m.LogicalRouterId
	}
	return 0
}

var E_JnprArpInformationMibArpExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*ArpInformationMibArp)(nil),
	Field:         53,
	Name:          "jnpr_arp_information_mib_arp_ext",
	Tag:           "bytes,53,opt,name=jnpr_arp_information_mib_arp_ext",
	Filename:      "mib2d_arp_oc.proto",
}

func init() {
	proto.RegisterType((*ArpInformationMibArp)(nil), "arp_information_mib_arp")
	proto.RegisterType((*ArpInformationMibArpIpv4Type)(nil), "arp_information_mib_arp.ipv4_type")
	proto.RegisterType((*ArpInformationMibArpIpv4TypeNeighborsType)(nil), "arp_information_mib_arp.ipv4_type.neighbors_type")
	proto.RegisterType((*ArpInformationMibArpIpv4TypeNeighborsTypeNeighborList)(nil), "arp_information_mib_arp.ipv4_type.neighbors_type.neighbor_list")
	proto.RegisterType((*ArpInformationMibArpIpv4TypeNeighborsTypeNeighborListStateType)(nil), "arp_information_mib_arp.ipv4_type.neighbors_type.neighbor_list.state_type")
	proto.RegisterExtension(E_JnprArpInformationMibArpExt)
}

func init() { proto.RegisterFile("mib2d_arp_oc.proto", fileDescriptor_6609990a88c6913e) }

var fileDescriptor_6609990a88c6913e = []byte{
	// 559 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0xd1, 0x6a, 0x13, 0x4f,
	0x14, 0xc6, 0xd9, 0xb4, 0xf9, 0xff, 0x93, 0x29, 0xad, 0x3a, 0xa2, 0x5d, 0x53, 0x2c, 0xa1, 0x20,
	0x04, 0xb1, 0xbb, 0x58, 0x5b, 0x04, 0x41, 0xdb, 0x54, 0xbc, 0x68, 0xd1, 0x52, 0xb6, 0x77, 0x22,
	0x8c, 0xb3, 0xd9, 0xd3, 0xcd, 0x49, 0x77, 0x67, 0x86, 0x99, 0x49, 0x4d, 0x6e, 0x7d, 0x09, 0x5f,
	0xc1, 0x47, 0x29, 0x78, 0xe3, 0x9d, 0xb7, 0xd2, 0xf7, 0x10, 0x64, 0x66, 0xdb, 0x0d, 0xbd, 0x08,
	0x22, 0x5e, 0x9e, 0xef, 0x3b, 0xe7, 0x77, 0xbe, 0x9d, 0xb3, 0x84, 0x96, 0x98, 0x6e, 0x65, 0x8c,
	0x6b, 0xc5, 0xe4, 0x20, 0x52, 0x5a, 0x5a, 0xd9, 0xb9, 0x6b, 0xa1, 0x80, 0x12, 0xac, 0x9e, 0x32,
	0x2b, 0x55, 0x25, 0x6e, 0xfc, 0x6a, 0x92, 0x55, 0xd7, 0x85, 0xe2, 0x54, 0xea, 0x92, 0x5b, 0x94,
	0x82, 0x95, 0x98, 0xba, 0x49, 0xfa, 0x9c, 0x2c, 0xa2, 0x3a, 0xdf, 0x0e, 0xbf, 0x04, 0xdd, 0xa0,
	0xb7, 0xb4, 0xb5, 0x11, 0xcd, 0x69, 0x8c, 0x5c, 0x17, 0xb3, 0x53, 0x05, 0x89, 0x1f, 0xe8, 0x7c,
	0x6d, 0x92, 0x76, 0xad, 0xd1, 0x63, 0xd2, 0x16, 0x80, 0xf9, 0x30, 0x95, 0xda, 0x5c, 0xb3, 0x9e,
	0xfe, 0x99, 0x15, 0xd5, 0x43, 0x15, 0x7a, 0x06, 0xe9, 0x5c, 0x2c, 0x92, 0x95, 0x9b, 0x2e, 0xfd,
	0x40, 0x5a, 0xd7, 0x8a, 0xdb, 0xb1, 0xd0, 0x5b, 0xda, 0xda, 0xfd, 0xeb, 0x1d, 0x75, 0xc9, 0x0a,
	0x34, 0x36, 0xa9, 0x89, 0x9d, 0x1f, 0x0b, 0x64, 0xf9, 0x86, 0x47, 0xef, 0x91, 0x06, 0xaa, 0xf0,
	0x59, 0x37, 0xe8, 0xb5, 0xf7, 0x9b, 0x9f, 0xf7, 0x1a, 0xad, 0x20, 0x69, 0xa0, 0xa2, 0x9c, 0x34,
	0x8d, 0xe5, 0x16, 0xae, 0xbf, 0xf3, 0xf0, 0x1f, 0x33, 0x44, 0x9e, 0x56, 0x3d, 0x40, 0x45, 0xee,
	0x7c, 0x6b, 0x10, 0x32, 0x53, 0xe9, 0xca, 0x2c, 0x88, 0x4f, 0xf0, 0x84, 0xd0, 0x02, 0xc5, 0x19,
	0x2b, 0xf8, 0x14, 0x34, 0xe3, 0x59, 0xa6, 0xc1, 0x98, 0x70, 0xdb, 0xfb, 0xb7, 0x9d, 0xf3, 0xd6,
	0x19, 0xfd, 0x4a, 0xa7, 0xf7, 0xc9, 0x7f, 0x52, 0x63, 0x8e, 0x22, 0xdc, 0xf1, 0x1d, 0x57, 0x15,
	0x5d, 0x23, 0xed, 0xa1, 0x34, 0x96, 0x09, 0x5e, 0x42, 0xf8, 0xd2, 0x5b, 0x2d, 0x27, 0x1c, 0xf1,
	0x12, 0xe8, 0x03, 0xd2, 0xb2, 0x3c, 0x2d, 0x80, 0x61, 0x16, 0xbe, 0xea, 0x06, 0xbd, 0xe5, 0xe4,
	0x7f, 0x5f, 0x1f, 0x64, 0xf4, 0xd1, 0xec, 0x30, 0xac, 0x7a, 0x88, 0x5d, 0x3f, 0x5c, 0xbf, 0xde,
	0x89, 0x13, 0xdd, 0x5a, 0x98, 0x28, 0xd4, 0xd3, 0x70, 0xcf, 0xcf, 0x5f, 0x55, 0xf4, 0x21, 0x21,
	0x68, 0x98, 0x1a, 0xa7, 0x05, 0x9a, 0x61, 0xd8, 0xef, 0x06, 0xbd, 0x56, 0xd2, 0x46, 0x73, 0x5c,
	0x09, 0x8e, 0x8e, 0xc2, 0x82, 0x3e, 0xe5, 0x03, 0xa8, 0xa2, 0xed, 0x57, 0xf4, 0x5a, 0xf5, 0xf9,
	0x1e, 0x93, 0x3b, 0x85, 0xcc, 0x71, 0xc0, 0x0b, 0xa6, 0xe5, 0xd8, 0x82, 0x76, 0x41, 0x5f, 0xfb,
	0x45, 0xb7, 0xae, 0x8c, 0xc4, 0xeb, 0x07, 0xd9, 0x8b, 0x09, 0xe9, 0x8e, 0x84, 0xd2, 0x6c, 0xce,
	0x99, 0x18, 0x4c, 0x2c, 0x5d, 0x8d, 0x0e, 0xc7, 0x02, 0x15, 0xe8, 0x23, 0xb0, 0x9f, 0xa4, 0x3e,
	0x33, 0x27, 0x20, 0x8c, 0xfb, 0x99, 0x77, 0xfc, 0x8d, 0xc3, 0x79, 0x37, 0x4e, 0xd6, 0x1c, 0xba,
	0xaf, 0xd5, 0xc1, 0xcc, 0x7b, 0x87, 0x69, 0x5f, 0xab, 0x37, 0x13, 0xbb, 0xff, 0xf1, 0xe2, 0x72,
	0x3d, 0xf8, 0x7e, 0xb9, 0x1e, 0xfc, 0xbc, 0x5c, 0x0f, 0xde, 0x27, 0x39, 0xda, 0x68, 0x54, 0xad,
	0x89, 0x04, 0xd8, 0x18, 0x07, 0x90, 0x82, 0xce, 0xe3, 0x21, 0xf0, 0xc2, 0x0e, 0x53, 0x69, 0x37,
	0x51, 0xe4, 0x60, 0xec, 0xe6, 0xc8, 0xe2, 0xa6, 0xe0, 0x16, 0xcf, 0x21, 0x56, 0x67, 0x79, 0x3c,
	0xb2, 0x18, 0xf3, 0x8c, 0x2b, 0x0b, 0xda, 0xc4, 0x6c, 0x34, 0x16, 0xd2, 0xc4, 0x66, 0x30, 0x84,
	0x92, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xab, 0x35, 0xe0, 0x7c, 0x05, 0x04, 0x00, 0x00,
}

func (m *ArpInformationMibArp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArpInformationMibArp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArpInformationMibArp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ipv4 != nil {
		{
			size, err := m.Ipv4.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMib2DArpOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *ArpInformationMibArpIpv4Type) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArpInformationMibArpIpv4Type) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArpInformationMibArpIpv4Type) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Neighbors != nil {
		{
			size, err := m.Neighbors.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMib2DArpOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *ArpInformationMibArpIpv4TypeNeighborsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArpInformationMibArpIpv4TypeNeighborsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArpInformationMibArpIpv4TypeNeighborsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Neighbor) > 0 {
		for iNdEx := len(m.Neighbor) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Neighbor[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMib2DArpOc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMib2DArpOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	if m.Ip != nil {
		i -= len(*m.Ip)
		copy(dAtA[i:], *m.Ip)
		i = encodeVarintMib2DArpOc(dAtA, i, uint64(len(*m.Ip)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborListStateType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborListStateType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborListStateType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LogicalRouterId != nil {
		i = encodeVarintMib2DArpOc(dAtA, i, uint64(*m.LogicalRouterId))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x98
	}
	if m.InterfaceName != nil {
		i -= len(*m.InterfaceName)
		copy(dAtA[i:], *m.InterfaceName)
		i = encodeVarintMib2DArpOc(dAtA, i, uint64(len(*m.InterfaceName)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x92
	}
	if m.IsPublish != nil {
		i--
		if *m.IsPublish {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x88
	}
	if m.Expiry != nil {
		i = encodeVarintMib2DArpOc(dAtA, i, uint64(*m.Expiry))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x80
	}
	if m.NeighborState != nil {
		i -= len(*m.NeighborState)
		copy(dAtA[i:], *m.NeighborState)
		i = encodeVarintMib2DArpOc(dAtA, i, uint64(len(*m.NeighborState)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xfa
	}
	if m.TableId != nil {
		i = encodeVarintMib2DArpOc(dAtA, i, uint64(*m.TableId))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf0
	}
	if m.HostName != nil {
		i -= len(*m.HostName)
		copy(dAtA[i:], *m.HostName)
		i = encodeVarintMib2DArpOc(dAtA, i, uint64(len(*m.HostName)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xea
	}
	if m.Origin != nil {
		i -= len(*m.Origin)
		copy(dAtA[i:], *m.Origin)
		i = encodeVarintMib2DArpOc(dAtA, i, uint64(len(*m.Origin)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	if m.LinkLayerAddress != nil {
		i -= len(*m.LinkLayerAddress)
		copy(dAtA[i:], *m.LinkLayerAddress)
		i = encodeVarintMib2DArpOc(dAtA, i, uint64(len(*m.LinkLayerAddress)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	if m.Ip != nil {
		i -= len(*m.Ip)
		copy(dAtA[i:], *m.Ip)
		i = encodeVarintMib2DArpOc(dAtA, i, uint64(len(*m.Ip)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func encodeVarintMib2DArpOc(dAtA []byte, offset int, v uint64) int {
	offset -= sovMib2DArpOc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ArpInformationMibArp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ipv4 != nil {
		l = m.Ipv4.Size()
		n += 2 + l + sovMib2DArpOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArpInformationMibArpIpv4Type) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Neighbors != nil {
		l = m.Neighbors.Size()
		n += 2 + l + sovMib2DArpOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArpInformationMibArpIpv4TypeNeighborsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Neighbor) > 0 {
		for _, e := range m.Neighbor {
			l = e.Size()
			n += 2 + l + sovMib2DArpOc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ip != nil {
		l = len(*m.Ip)
		n += 2 + l + sovMib2DArpOc(uint64(l))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 2 + l + sovMib2DArpOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborListStateType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ip != nil {
		l = len(*m.Ip)
		n += 2 + l + sovMib2DArpOc(uint64(l))
	}
	if m.LinkLayerAddress != nil {
		l = len(*m.LinkLayerAddress)
		n += 2 + l + sovMib2DArpOc(uint64(l))
	}
	if m.Origin != nil {
		l = len(*m.Origin)
		n += 2 + l + sovMib2DArpOc(uint64(l))
	}
	if m.HostName != nil {
		l = len(*m.HostName)
		n += 2 + l + sovMib2DArpOc(uint64(l))
	}
	if m.TableId != nil {
		n += 2 + sovMib2DArpOc(uint64(*m.TableId))
	}
	if m.NeighborState != nil {
		l = len(*m.NeighborState)
		n += 2 + l + sovMib2DArpOc(uint64(l))
	}
	if m.Expiry != nil {
		n += 2 + sovMib2DArpOc(uint64(*m.Expiry))
	}
	if m.IsPublish != nil {
		n += 3
	}
	if m.InterfaceName != nil {
		l = len(*m.InterfaceName)
		n += 2 + l + sovMib2DArpOc(uint64(l))
	}
	if m.LogicalRouterId != nil {
		n += 2 + sovMib2DArpOc(uint64(*m.LogicalRouterId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMib2DArpOc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMib2DArpOc(x uint64) (n int) {
	return sovMib2DArpOc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ArpInformationMibArp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMib2DArpOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: arp_information_mib_arp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: arp_information_mib_arp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMib2DArpOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMib2DArpOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMib2DArpOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ipv4 == nil {
				m.Ipv4 = &ArpInformationMibArpIpv4Type{}
			}
			if err := m.Ipv4.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMib2DArpOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMib2DArpOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMib2DArpOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArpInformationMibArpIpv4Type) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMib2DArpOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ipv4_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ipv4_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Neighbors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMib2DArpOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMib2DArpOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMib2DArpOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Neighbors == nil {
				m.Neighbors = &ArpInformationMibArpIpv4TypeNeighborsType{}
			}
			if err := m.Neighbors.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMib2DArpOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMib2DArpOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMib2DArpOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArpInformationMibArpIpv4TypeNeighborsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMib2DArpOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: neighbors_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: neighbors_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Neighbor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMib2DArpOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMib2DArpOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMib2DArpOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Neighbor = append(m.Neighbor, &ArpInformationMibArpIpv4TypeNeighborsTypeNeighborList{})
			if err := m.Neighbor[len(m.Neighbor)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMib2DArpOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMib2DArpOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMib2DArpOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMib2DArpOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: neighbor_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: neighbor_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMib2DArpOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMib2DArpOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMib2DArpOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Ip = &s
			iNdEx = postIndex
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMib2DArpOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMib2DArpOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMib2DArpOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &ArpInformationMibArpIpv4TypeNeighborsTypeNeighborListStateType{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMib2DArpOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMib2DArpOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMib2DArpOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArpInformationMibArpIpv4TypeNeighborsTypeNeighborListStateType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMib2DArpOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: state_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: state_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMib2DArpOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMib2DArpOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMib2DArpOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Ip = &s
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkLayerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMib2DArpOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMib2DArpOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMib2DArpOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LinkLayerAddress = &s
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMib2DArpOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMib2DArpOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMib2DArpOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Origin = &s
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMib2DArpOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMib2DArpOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMib2DArpOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HostName = &s
			iNdEx = postIndex
		case 62:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMib2DArpOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TableId = &v
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeighborState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMib2DArpOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMib2DArpOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMib2DArpOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NeighborState = &s
			iNdEx = postIndex
		case 64:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMib2DArpOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Expiry = &v
		case 65:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPublish", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMib2DArpOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsPublish = &b
		case 66:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMib2DArpOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMib2DArpOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMib2DArpOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.InterfaceName = &s
			iNdEx = postIndex
		case 67:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicalRouterId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMib2DArpOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogicalRouterId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipMib2DArpOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMib2DArpOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMib2DArpOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMib2DArpOc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMib2DArpOc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMib2DArpOc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMib2DArpOc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMib2DArpOc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMib2DArpOc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMib2DArpOc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMib2DArpOc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMib2DArpOc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMib2DArpOc = fmt.Errorf("proto: unexpected end of group")
)
