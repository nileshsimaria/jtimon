// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mib2d_nd6_oc.proto

package schema

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Nd6InformationMibNd6 struct {
	Ipv6                 *Nd6InformationMibNd6Ipv6Type `protobuf:"bytes,151,opt,name=ipv6" json:"ipv6,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *Nd6InformationMibNd6) Reset()         { *m = Nd6InformationMibNd6{} }
func (m *Nd6InformationMibNd6) String() string { return proto.CompactTextString(m) }
func (*Nd6InformationMibNd6) ProtoMessage()    {}
func (*Nd6InformationMibNd6) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6dca21213f5e620, []int{0}
}
func (m *Nd6InformationMibNd6) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Nd6InformationMibNd6) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Nd6InformationMibNd6.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Nd6InformationMibNd6) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nd6InformationMibNd6.Merge(m, src)
}
func (m *Nd6InformationMibNd6) XXX_Size() int {
	return m.Size()
}
func (m *Nd6InformationMibNd6) XXX_DiscardUnknown() {
	xxx_messageInfo_Nd6InformationMibNd6.DiscardUnknown(m)
}

var xxx_messageInfo_Nd6InformationMibNd6 proto.InternalMessageInfo

func (m *Nd6InformationMibNd6) GetIpv6() *Nd6InformationMibNd6Ipv6Type {
	if m != nil {
		return m.Ipv6
	}
	return nil
}

type Nd6InformationMibNd6Ipv6Type struct {
	Neighbors            *Nd6InformationMibNd6Ipv6TypeNeighborsType `protobuf:"bytes,151,opt,name=neighbors" json:"neighbors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *Nd6InformationMibNd6Ipv6Type) Reset()         { *m = Nd6InformationMibNd6Ipv6Type{} }
func (m *Nd6InformationMibNd6Ipv6Type) String() string { return proto.CompactTextString(m) }
func (*Nd6InformationMibNd6Ipv6Type) ProtoMessage()    {}
func (*Nd6InformationMibNd6Ipv6Type) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6dca21213f5e620, []int{0, 0}
}
func (m *Nd6InformationMibNd6Ipv6Type) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Nd6InformationMibNd6Ipv6Type) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Nd6InformationMibNd6Ipv6Type.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Nd6InformationMibNd6Ipv6Type) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nd6InformationMibNd6Ipv6Type.Merge(m, src)
}
func (m *Nd6InformationMibNd6Ipv6Type) XXX_Size() int {
	return m.Size()
}
func (m *Nd6InformationMibNd6Ipv6Type) XXX_DiscardUnknown() {
	xxx_messageInfo_Nd6InformationMibNd6Ipv6Type.DiscardUnknown(m)
}

var xxx_messageInfo_Nd6InformationMibNd6Ipv6Type proto.InternalMessageInfo

func (m *Nd6InformationMibNd6Ipv6Type) GetNeighbors() *Nd6InformationMibNd6Ipv6TypeNeighborsType {
	if m != nil {
		return m.Neighbors
	}
	return nil
}

type Nd6InformationMibNd6Ipv6TypeNeighborsType struct {
	Neighbor             []*Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborList `protobuf:"bytes,151,rep,name=neighbor" json:"neighbor,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                 `json:"-"`
	XXX_unrecognized     []byte                                                   `json:"-"`
	XXX_sizecache        int32                                                    `json:"-"`
}

func (m *Nd6InformationMibNd6Ipv6TypeNeighborsType) Reset() {
	*m = Nd6InformationMibNd6Ipv6TypeNeighborsType{}
}
func (m *Nd6InformationMibNd6Ipv6TypeNeighborsType) String() string {
	return proto.CompactTextString(m)
}
func (*Nd6InformationMibNd6Ipv6TypeNeighborsType) ProtoMessage() {}
func (*Nd6InformationMibNd6Ipv6TypeNeighborsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6dca21213f5e620, []int{0, 0, 0}
}
func (m *Nd6InformationMibNd6Ipv6TypeNeighborsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Nd6InformationMibNd6Ipv6TypeNeighborsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Nd6InformationMibNd6Ipv6TypeNeighborsType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Nd6InformationMibNd6Ipv6TypeNeighborsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nd6InformationMibNd6Ipv6TypeNeighborsType.Merge(m, src)
}
func (m *Nd6InformationMibNd6Ipv6TypeNeighborsType) XXX_Size() int {
	return m.Size()
}
func (m *Nd6InformationMibNd6Ipv6TypeNeighborsType) XXX_DiscardUnknown() {
	xxx_messageInfo_Nd6InformationMibNd6Ipv6TypeNeighborsType.DiscardUnknown(m)
}

var xxx_messageInfo_Nd6InformationMibNd6Ipv6TypeNeighborsType proto.InternalMessageInfo

func (m *Nd6InformationMibNd6Ipv6TypeNeighborsType) GetNeighbor() []*Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborList {
	if m != nil {
		return m.Neighbor
	}
	return nil
}

type Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborList struct {
	Ip                   *string                                                         `protobuf:"bytes,51,opt,name=ip" json:"ip,omitempty"`
	State                *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                        `json:"-"`
	XXX_unrecognized     []byte                                                          `json:"-"`
	XXX_sizecache        int32                                                           `json:"-"`
}

func (m *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborList) Reset() {
	*m = Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborList{}
}
func (m *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborList) String() string {
	return proto.CompactTextString(m)
}
func (*Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborList) ProtoMessage() {}
func (*Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6dca21213f5e620, []int{0, 0, 0, 0}
}
func (m *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborList.Merge(m, src)
}
func (m *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborList) XXX_Size() int {
	return m.Size()
}
func (m *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborList) XXX_DiscardUnknown() {
	xxx_messageInfo_Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborList.DiscardUnknown(m)
}

var xxx_messageInfo_Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborList proto.InternalMessageInfo

func (m *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborList) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborList) GetState() *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborListStateType {
	if m != nil {
		return m.State
	}
	return nil
}

type Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborListStateType struct {
	Ip                   *string  `protobuf:"bytes,51,opt,name=ip" json:"ip,omitempty"`
	LinkLayerAddress     *string  `protobuf:"bytes,52,opt,name=link_layer_address,json=linkLayerAddress" json:"link_layer_address,omitempty"`
	Origin               *string  `protobuf:"bytes,53,opt,name=origin" json:"origin,omitempty"`
	IsRouter             *bool    `protobuf:"varint,54,opt,name=is_router,json=isRouter" json:"is_router,omitempty"`
	NeighborState        *string  `protobuf:"bytes,55,opt,name=neighbor_state,json=neighborState" json:"neighbor_state,omitempty"`
	TableId              *uint32  `protobuf:"varint,61,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	IsSecure             *bool    `protobuf:"varint,62,opt,name=is_secure,json=isSecure" json:"is_secure,omitempty"`
	Expiry               *uint32  `protobuf:"varint,64,opt,name=expiry" json:"expiry,omitempty"`
	IsPublish            *bool    `protobuf:"varint,63,opt,name=is_publish,json=isPublish" json:"is_publish,omitempty"`
	InterfaceName        *string  `protobuf:"bytes,65,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
	LogicalRouterId      *uint32  `protobuf:"varint,66,opt,name=logical_router_id,json=logicalRouterId" json:"logical_router_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborListStateType) Reset() {
	*m = Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborListStateType{}
}
func (m *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborListStateType) String() string {
	return proto.CompactTextString(m)
}
func (*Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborListStateType) ProtoMessage() {}
func (*Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborListStateType) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6dca21213f5e620, []int{0, 0, 0, 0, 0}
}
func (m *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborListStateType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborListStateType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborListStateType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborListStateType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborListStateType.Merge(m, src)
}
func (m *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborListStateType) XXX_Size() int {
	return m.Size()
}
func (m *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborListStateType) XXX_DiscardUnknown() {
	xxx_messageInfo_Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborListStateType.DiscardUnknown(m)
}

var xxx_messageInfo_Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborListStateType proto.InternalMessageInfo

func (m *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborListStateType) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborListStateType) GetLinkLayerAddress() string {
	if m != nil && m.LinkLayerAddress != nil {
		return *m.LinkLayerAddress
	}
	return ""
}

func (m *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborListStateType) GetOrigin() string {
	if m != nil && m.Origin != nil {
		return *m.Origin
	}
	return ""
}

func (m *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborListStateType) GetIsRouter() bool {
	if m != nil && m.IsRouter != nil {
		return *m.IsRouter
	}
	return false
}

func (m *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborListStateType) GetNeighborState() string {
	if m != nil && m.NeighborState != nil {
		return *m.NeighborState
	}
	return ""
}

func (m *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborListStateType) GetTableId() uint32 {
	if m != nil && m.TableId != nil {
		return *m.TableId
	}
	return 0
}

func (m *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborListStateType) GetIsSecure() bool {
	if m != nil && m.IsSecure != nil {
		return *m.IsSecure
	}
	return false
}

func (m *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborListStateType) GetExpiry() uint32 {
	if m != nil && m.Expiry != nil {
		return *m.Expiry
	}
	return 0
}

func (m *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborListStateType) GetIsPublish() bool {
	if m != nil && m.IsPublish != nil {
		return *m.IsPublish
	}
	return false
}

func (m *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborListStateType) GetInterfaceName() string {
	if m != nil && m.InterfaceName != nil {
		return *m.InterfaceName
	}
	return ""
}

func (m *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborListStateType) GetLogicalRouterId() uint32 {
	if m != nil && m.LogicalRouterId != nil {
		return *m.LogicalRouterId
	}
	return 0
}

var E_JnprNd6InformationMibNd6Ext = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*Nd6InformationMibNd6)(nil),
	Field:         54,
	Name:          "jnpr_nd6_information_mib_nd6_ext",
	Tag:           "bytes,54,opt,name=jnpr_nd6_information_mib_nd6_ext",
	Filename:      "mib2d_nd6_oc.proto",
}

func init() {
	proto.RegisterType((*Nd6InformationMibNd6)(nil), "nd6_information_mib_nd6")
	proto.RegisterType((*Nd6InformationMibNd6Ipv6Type)(nil), "nd6_information_mib_nd6.ipv6_type")
	proto.RegisterType((*Nd6InformationMibNd6Ipv6TypeNeighborsType)(nil), "nd6_information_mib_nd6.ipv6_type.neighbors_type")
	proto.RegisterType((*Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborList)(nil), "nd6_information_mib_nd6.ipv6_type.neighbors_type.neighbor_list")
	proto.RegisterType((*Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborListStateType)(nil), "nd6_information_mib_nd6.ipv6_type.neighbors_type.neighbor_list.state_type")
	proto.RegisterExtension(E_JnprNd6InformationMibNd6Ext)
}

func init() { proto.RegisterFile("mib2d_nd6_oc.proto", fileDescriptor_b6dca21213f5e620) }

var fileDescriptor_b6dca21213f5e620 = []byte{
	// 572 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0xdb, 0x6a, 0x14, 0x41,
	0x10, 0x65, 0x36, 0x17, 0x77, 0x3b, 0x24, 0x6a, 0x8b, 0x66, 0xdc, 0x60, 0x58, 0x02, 0xc2, 0x22,
	0x66, 0x06, 0xa3, 0x6e, 0x40, 0xd0, 0x5c, 0xc0, 0x87, 0x04, 0x5d, 0xc2, 0xe4, 0x4d, 0x84, 0xb6,
	0x67, 0xa7, 0x32, 0x5b, 0x9b, 0x99, 0xee, 0xa1, 0xbb, 0x36, 0xee, 0xbe, 0xfa, 0x13, 0x82, 0xff,
	0x23, 0xf8, 0xe8, 0x27, 0x48, 0x40, 0xf0, 0x03, 0xfc, 0x00, 0x99, 0x9e, 0xbd, 0x90, 0x87, 0x20,
	0xe2, 0x63, 0x9d, 0x53, 0xe7, 0xd4, 0xa9, 0xee, 0x62, 0x3c, 0xc7, 0x78, 0x27, 0x11, 0x2a, 0xe9,
	0x08, 0xdd, 0x0b, 0x0a, 0xa3, 0x49, 0x37, 0xef, 0x10, 0x64, 0x90, 0x03, 0x99, 0xb1, 0x20, 0x5d,
	0x54, 0xe0, 0xd6, 0x97, 0x65, 0xb6, 0x5e, 0x76, 0xa1, 0x3a, 0xd3, 0x26, 0x97, 0x84, 0x5a, 0x89,
	0x1c, 0xe3, 0x52, 0xc9, 0x77, 0xd9, 0x22, 0x16, 0x17, 0x1d, 0xff, 0xb3, 0xd7, 0xf2, 0xda, 0x2b,
	0x3b, 0x5b, 0xc1, 0x35, 0x8d, 0x41, 0xd9, 0x25, 0x68, 0x5c, 0x40, 0xe4, 0x04, 0xcd, 0xaf, 0x4b,
	0xac, 0x31, 0xc3, 0xf8, 0x09, 0x6b, 0x28, 0xc0, 0xb4, 0x1f, 0x6b, 0x63, 0xa7, 0x5e, 0x4f, 0xfe,
	0xee, 0x15, 0xcc, 0x44, 0x95, 0xf5, 0xdc, 0xa4, 0xf9, 0x73, 0x91, 0xad, 0x5d, 0x65, 0xf9, 0x7b,
	0x56, 0x9f, 0x22, 0xe5, 0x8c, 0x85, 0xf6, 0xca, 0xce, 0xde, 0x3f, 0xcf, 0x98, 0x95, 0x22, 0x43,
	0x4b, 0xd1, 0xcc, 0xb1, 0xf9, 0x7b, 0x81, 0xad, 0x5e, 0xe1, 0xf8, 0x5d, 0x56, 0xc3, 0xc2, 0x7f,
	0xda, 0xf2, 0xda, 0x8d, 0xc3, 0xa5, 0x4f, 0xfb, 0xb5, 0xba, 0x17, 0xd5, 0xb0, 0xe0, 0x92, 0x2d,
	0x59, 0x92, 0x04, 0xd3, 0x3d, 0x8f, 0xff, 0x33, 0x43, 0xe0, 0xdc, 0xaa, 0x07, 0xa8, 0x9c, 0x9b,
	0xbf, 0x6a, 0x8c, 0xcd, 0x51, 0xbe, 0x36, 0x0f, 0xe2, 0x12, 0x3c, 0x66, 0x3c, 0x43, 0x75, 0x2e,
	0x32, 0x39, 0x06, 0x23, 0x64, 0x92, 0x18, 0xb0, 0xd6, 0x7f, 0xe6, 0xf8, 0x5b, 0x25, 0xf3, 0xa6,
	0x24, 0x0e, 0x2a, 0x9c, 0xdf, 0x63, 0xcb, 0xda, 0x60, 0x8a, 0xca, 0x7f, 0xee, 0x3a, 0x26, 0x15,
	0xdf, 0x60, 0x0d, 0xb4, 0xc2, 0xe8, 0x21, 0x81, 0xf1, 0x3b, 0x2d, 0xaf, 0x5d, 0x8f, 0xea, 0x68,
	0x23, 0x57, 0xf3, 0x87, 0xf3, 0xd7, 0x17, 0xd5, 0xb6, 0xbb, 0x4e, 0x3c, 0x7b, 0xa2, 0xd3, 0x12,
	0xe4, 0xf7, 0x59, 0x9d, 0x64, 0x9c, 0x81, 0xc0, 0xc4, 0x7f, 0xd9, 0xf2, 0xda, 0xab, 0xd1, 0x0d,
	0x57, 0x1f, 0x25, 0x13, 0x7b, 0x0b, 0xbd, 0xa1, 0x01, 0xff, 0xd5, 0xd4, 0xfe, 0xd4, 0xd5, 0x65,
	0x26, 0x18, 0x15, 0x68, 0xc6, 0xfe, 0xbe, 0x53, 0x4d, 0x2a, 0xfe, 0x80, 0x31, 0xb4, 0xa2, 0x18,
	0xc6, 0x19, 0xda, 0xbe, 0xbf, 0xe7, 0x54, 0x0d, 0xb4, 0x27, 0x15, 0x50, 0xa6, 0x42, 0x45, 0x60,
	0xce, 0x64, 0x0f, 0x84, 0x92, 0x39, 0xf8, 0x07, 0x55, 0xaa, 0x19, 0xda, 0x95, 0x39, 0xf0, 0x47,
	0xec, 0x76, 0xa6, 0x53, 0xec, 0xc9, 0x6c, 0xb2, 0x5e, 0x19, 0xef, 0xd0, 0x0d, 0xba, 0x39, 0x21,
	0xaa, 0x35, 0x8f, 0x92, 0x17, 0x23, 0xd6, 0x1a, 0xa8, 0xc2, 0x88, 0x6b, 0xfe, 0x50, 0xc0, 0x88,
	0xf8, 0x7a, 0x70, 0x3c, 0x54, 0x58, 0x80, 0xe9, 0x02, 0x7d, 0xd4, 0xe6, 0xdc, 0x9e, 0x82, 0xb2,
	0xe5, 0xa5, 0x77, 0xdc, 0x01, 0xf8, 0xd7, 0x1d, 0x40, 0xb4, 0x51, 0x5a, 0x77, 0x93, 0xce, 0xd1,
	0x9c, 0x7b, 0x8b, 0x71, 0x37, 0xe9, 0xbc, 0x1e, 0xd1, 0xe1, 0x87, 0x6f, 0x97, 0x9b, 0xde, 0xf7,
	0xcb, 0x4d, 0xef, 0xc7, 0xe5, 0xa6, 0xf7, 0x2e, 0x4a, 0x91, 0x82, 0x41, 0x35, 0x26, 0x50, 0x40,
	0x21, 0xf6, 0x20, 0x06, 0x93, 0x86, 0x7d, 0x90, 0x19, 0xf5, 0x63, 0x4d, 0xdb, 0xa8, 0x52, 0xb0,
	0xb4, 0x3d, 0x20, 0xdc, 0x56, 0x92, 0xf0, 0x02, 0xc2, 0xe2, 0x3c, 0x0d, 0x07, 0x84, 0xa1, 0x4c,
	0x64, 0x41, 0x60, 0x6c, 0x28, 0x06, 0x43, 0xa5, 0x6d, 0x68, 0x7b, 0x7d, 0xc8, 0xe5, 0x9f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xfd, 0x7e, 0xb1, 0x71, 0x22, 0x04, 0x00, 0x00,
}

func (m *Nd6InformationMibNd6) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Nd6InformationMibNd6) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Nd6InformationMibNd6) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ipv6 != nil {
		{
			size, err := m.Ipv6.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMib2DNd6Oc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *Nd6InformationMibNd6Ipv6Type) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Nd6InformationMibNd6Ipv6Type) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Nd6InformationMibNd6Ipv6Type) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Neighbors != nil {
		{
			size, err := m.Neighbors.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMib2DNd6Oc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *Nd6InformationMibNd6Ipv6TypeNeighborsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Nd6InformationMibNd6Ipv6TypeNeighborsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Nd6InformationMibNd6Ipv6TypeNeighborsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Neighbor) > 0 {
		for iNdEx := len(m.Neighbor) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Neighbor[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMib2DNd6Oc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMib2DNd6Oc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	if m.Ip != nil {
		i -= len(*m.Ip)
		copy(dAtA[i:], *m.Ip)
		i = encodeVarintMib2DNd6Oc(dAtA, i, uint64(len(*m.Ip)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborListStateType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborListStateType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborListStateType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LogicalRouterId != nil {
		i = encodeVarintMib2DNd6Oc(dAtA, i, uint64(*m.LogicalRouterId))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x90
	}
	if m.InterfaceName != nil {
		i -= len(*m.InterfaceName)
		copy(dAtA[i:], *m.InterfaceName)
		i = encodeVarintMib2DNd6Oc(dAtA, i, uint64(len(*m.InterfaceName)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x8a
	}
	if m.Expiry != nil {
		i = encodeVarintMib2DNd6Oc(dAtA, i, uint64(*m.Expiry))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x80
	}
	if m.IsPublish != nil {
		i--
		if *m.IsPublish {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf8
	}
	if m.IsSecure != nil {
		i--
		if *m.IsSecure {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf0
	}
	if m.TableId != nil {
		i = encodeVarintMib2DNd6Oc(dAtA, i, uint64(*m.TableId))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe8
	}
	if m.NeighborState != nil {
		i -= len(*m.NeighborState)
		copy(dAtA[i:], *m.NeighborState)
		i = encodeVarintMib2DNd6Oc(dAtA, i, uint64(len(*m.NeighborState)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	if m.IsRouter != nil {
		i--
		if *m.IsRouter {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.Origin != nil {
		i -= len(*m.Origin)
		copy(dAtA[i:], *m.Origin)
		i = encodeVarintMib2DNd6Oc(dAtA, i, uint64(len(*m.Origin)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	if m.LinkLayerAddress != nil {
		i -= len(*m.LinkLayerAddress)
		copy(dAtA[i:], *m.LinkLayerAddress)
		i = encodeVarintMib2DNd6Oc(dAtA, i, uint64(len(*m.LinkLayerAddress)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	if m.Ip != nil {
		i -= len(*m.Ip)
		copy(dAtA[i:], *m.Ip)
		i = encodeVarintMib2DNd6Oc(dAtA, i, uint64(len(*m.Ip)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func encodeVarintMib2DNd6Oc(dAtA []byte, offset int, v uint64) int {
	offset -= sovMib2DNd6Oc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Nd6InformationMibNd6) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ipv6 != nil {
		l = m.Ipv6.Size()
		n += 2 + l + sovMib2DNd6Oc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Nd6InformationMibNd6Ipv6Type) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Neighbors != nil {
		l = m.Neighbors.Size()
		n += 2 + l + sovMib2DNd6Oc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Nd6InformationMibNd6Ipv6TypeNeighborsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Neighbor) > 0 {
		for _, e := range m.Neighbor {
			l = e.Size()
			n += 2 + l + sovMib2DNd6Oc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ip != nil {
		l = len(*m.Ip)
		n += 2 + l + sovMib2DNd6Oc(uint64(l))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 2 + l + sovMib2DNd6Oc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborListStateType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ip != nil {
		l = len(*m.Ip)
		n += 2 + l + sovMib2DNd6Oc(uint64(l))
	}
	if m.LinkLayerAddress != nil {
		l = len(*m.LinkLayerAddress)
		n += 2 + l + sovMib2DNd6Oc(uint64(l))
	}
	if m.Origin != nil {
		l = len(*m.Origin)
		n += 2 + l + sovMib2DNd6Oc(uint64(l))
	}
	if m.IsRouter != nil {
		n += 3
	}
	if m.NeighborState != nil {
		l = len(*m.NeighborState)
		n += 2 + l + sovMib2DNd6Oc(uint64(l))
	}
	if m.TableId != nil {
		n += 2 + sovMib2DNd6Oc(uint64(*m.TableId))
	}
	if m.IsSecure != nil {
		n += 3
	}
	if m.IsPublish != nil {
		n += 3
	}
	if m.Expiry != nil {
		n += 2 + sovMib2DNd6Oc(uint64(*m.Expiry))
	}
	if m.InterfaceName != nil {
		l = len(*m.InterfaceName)
		n += 2 + l + sovMib2DNd6Oc(uint64(l))
	}
	if m.LogicalRouterId != nil {
		n += 2 + sovMib2DNd6Oc(uint64(*m.LogicalRouterId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMib2DNd6Oc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMib2DNd6Oc(x uint64) (n int) {
	return sovMib2DNd6Oc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Nd6InformationMibNd6) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMib2DNd6Oc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: nd6_information_mib_nd6: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: nd6_information_mib_nd6: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMib2DNd6Oc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMib2DNd6Oc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMib2DNd6Oc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ipv6 == nil {
				m.Ipv6 = &Nd6InformationMibNd6Ipv6Type{}
			}
			if err := m.Ipv6.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMib2DNd6Oc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMib2DNd6Oc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMib2DNd6Oc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Nd6InformationMibNd6Ipv6Type) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMib2DNd6Oc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ipv6_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ipv6_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Neighbors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMib2DNd6Oc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMib2DNd6Oc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMib2DNd6Oc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Neighbors == nil {
				m.Neighbors = &Nd6InformationMibNd6Ipv6TypeNeighborsType{}
			}
			if err := m.Neighbors.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMib2DNd6Oc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMib2DNd6Oc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMib2DNd6Oc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Nd6InformationMibNd6Ipv6TypeNeighborsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMib2DNd6Oc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: neighbors_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: neighbors_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Neighbor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMib2DNd6Oc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMib2DNd6Oc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMib2DNd6Oc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Neighbor = append(m.Neighbor, &Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborList{})
			if err := m.Neighbor[len(m.Neighbor)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMib2DNd6Oc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMib2DNd6Oc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMib2DNd6Oc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMib2DNd6Oc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: neighbor_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: neighbor_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMib2DNd6Oc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMib2DNd6Oc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMib2DNd6Oc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Ip = &s
			iNdEx = postIndex
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMib2DNd6Oc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMib2DNd6Oc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMib2DNd6Oc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborListStateType{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMib2DNd6Oc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMib2DNd6Oc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMib2DNd6Oc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Nd6InformationMibNd6Ipv6TypeNeighborsTypeNeighborListStateType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMib2DNd6Oc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: state_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: state_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMib2DNd6Oc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMib2DNd6Oc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMib2DNd6Oc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Ip = &s
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkLayerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMib2DNd6Oc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMib2DNd6Oc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMib2DNd6Oc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LinkLayerAddress = &s
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMib2DNd6Oc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMib2DNd6Oc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMib2DNd6Oc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Origin = &s
			iNdEx = postIndex
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRouter", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMib2DNd6Oc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsRouter = &b
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeighborState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMib2DNd6Oc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMib2DNd6Oc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMib2DNd6Oc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.NeighborState = &s
			iNdEx = postIndex
		case 61:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMib2DNd6Oc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TableId = &v
		case 62:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSecure", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMib2DNd6Oc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsSecure = &b
		case 63:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPublish", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMib2DNd6Oc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsPublish = &b
		case 64:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMib2DNd6Oc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Expiry = &v
		case 65:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMib2DNd6Oc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMib2DNd6Oc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMib2DNd6Oc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.InterfaceName = &s
			iNdEx = postIndex
		case 66:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicalRouterId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMib2DNd6Oc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogicalRouterId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipMib2DNd6Oc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMib2DNd6Oc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMib2DNd6Oc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMib2DNd6Oc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMib2DNd6Oc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMib2DNd6Oc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMib2DNd6Oc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMib2DNd6Oc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMib2DNd6Oc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMib2DNd6Oc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMib2DNd6Oc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMib2DNd6Oc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMib2DNd6Oc = fmt.Errorf("proto: unexpected end of group")
)
