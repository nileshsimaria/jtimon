// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: npu_utilization.proto

package schema

import (
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Top level message
type NetworkProcessorUtilization struct {
	NpuUtilStats         []*Utilization `protobuf:"bytes,1,rep,name=npu_util_stats,json=npuUtilStats" json:"npu_util_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *NetworkProcessorUtilization) Reset()         { *m = NetworkProcessorUtilization{} }
func (m *NetworkProcessorUtilization) String() string { return proto.CompactTextString(m) }
func (*NetworkProcessorUtilization) ProtoMessage()    {}
func (*NetworkProcessorUtilization) Descriptor() ([]byte, []int) {
	return fileDescriptor_28cd2a2be506ec89, []int{0}
}
func (m *NetworkProcessorUtilization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkProcessorUtilization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkProcessorUtilization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkProcessorUtilization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkProcessorUtilization.Merge(m, src)
}
func (m *NetworkProcessorUtilization) XXX_Size() int {
	return m.Size()
}
func (m *NetworkProcessorUtilization) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkProcessorUtilization.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkProcessorUtilization proto.InternalMessageInfo

func (m *NetworkProcessorUtilization) GetNpuUtilStats() []*Utilization {
	if m != nil {
		return m.NpuUtilStats
	}
	return nil
}

// Utilization per Network Processor
type Utilization struct {
	// Globally unique identifier for an NPU. This is of the form
	// FPCX:NPUY, where X is the slot number of the linecard and Y
	// is the index of the NPU on the linecard
	Identifier *string `protobuf:"bytes,1,req,name=identifier" json:"identifier,omitempty"`
	// A number on a scale of 0-100 that indicates the busyness of
	// an NPU. This is an approximation as the utilization depends
	// on the busyness of several internal components of the NPU
	Utilization *uint32 `protobuf:"varint,2,opt,name=utilization" json:"utilization,omitempty"`
	// Offered Packet load on the NPU.
	Packets []*PacketLoad `protobuf:"bytes,3,rep,name=packets" json:"packets,omitempty"`
	// Utilization of various internal memories of the NPU.
	Memory               []*MemoryLoad `protobuf:"bytes,4,rep,name=memory" json:"memory,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Utilization) Reset()         { *m = Utilization{} }
func (m *Utilization) String() string { return proto.CompactTextString(m) }
func (*Utilization) ProtoMessage()    {}
func (*Utilization) Descriptor() ([]byte, []int) {
	return fileDescriptor_28cd2a2be506ec89, []int{1}
}
func (m *Utilization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Utilization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Utilization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Utilization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Utilization.Merge(m, src)
}
func (m *Utilization) XXX_Size() int {
	return m.Size()
}
func (m *Utilization) XXX_DiscardUnknown() {
	xxx_messageInfo_Utilization.DiscardUnknown(m)
}

var xxx_messageInfo_Utilization proto.InternalMessageInfo

func (m *Utilization) GetIdentifier() string {
	if m != nil && m.Identifier != nil {
		return *m.Identifier
	}
	return ""
}

func (m *Utilization) GetUtilization() uint32 {
	if m != nil && m.Utilization != nil {
		return *m.Utilization
	}
	return 0
}

func (m *Utilization) GetPackets() []*PacketLoad {
	if m != nil {
		return m.Packets
	}
	return nil
}

func (m *Utilization) GetMemory() []*MemoryLoad {
	if m != nil {
		return m.Memory
	}
	return nil
}

// Load on a memory subsystem of the NPU
type MemoryLoad struct {
	// A name string to identify the particular memory subsystem
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Various memory utilization metrics
	AverageUtil *uint32 `protobuf:"varint,2,opt,name=average_util,json=averageUtil" json:"average_util,omitempty"`
	HighestUtil *uint32 `protobuf:"varint,3,opt,name=highest_util,json=highestUtil" json:"highest_util,omitempty"`
	LowestUtil  *uint32 `protobuf:"varint,4,opt,name=lowest_util,json=lowestUtil" json:"lowest_util,omitempty"`
	// Each memory is front ended by a cache. The following metrics
	// indicate how these caches are working
	AverageCacheHitRate  *uint32  `protobuf:"varint,5,opt,name=average_cache_hit_rate,json=averageCacheHitRate" json:"average_cache_hit_rate,omitempty"`
	HighestCacheHitRate  *uint32  `protobuf:"varint,6,opt,name=highest_cache_hit_rate,json=highestCacheHitRate" json:"highest_cache_hit_rate,omitempty"`
	LowestCacheHitRate   *uint32  `protobuf:"varint,7,opt,name=lowest_cache_hit_rate,json=lowestCacheHitRate" json:"lowest_cache_hit_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MemoryLoad) Reset()         { *m = MemoryLoad{} }
func (m *MemoryLoad) String() string { return proto.CompactTextString(m) }
func (*MemoryLoad) ProtoMessage()    {}
func (*MemoryLoad) Descriptor() ([]byte, []int) {
	return fileDescriptor_28cd2a2be506ec89, []int{2}
}
func (m *MemoryLoad) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemoryLoad) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemoryLoad.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemoryLoad) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemoryLoad.Merge(m, src)
}
func (m *MemoryLoad) XXX_Size() int {
	return m.Size()
}
func (m *MemoryLoad) XXX_DiscardUnknown() {
	xxx_messageInfo_MemoryLoad.DiscardUnknown(m)
}

var xxx_messageInfo_MemoryLoad proto.InternalMessageInfo

func (m *MemoryLoad) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *MemoryLoad) GetAverageUtil() uint32 {
	if m != nil && m.AverageUtil != nil {
		return *m.AverageUtil
	}
	return 0
}

func (m *MemoryLoad) GetHighestUtil() uint32 {
	if m != nil && m.HighestUtil != nil {
		return *m.HighestUtil
	}
	return 0
}

func (m *MemoryLoad) GetLowestUtil() uint32 {
	if m != nil && m.LowestUtil != nil {
		return *m.LowestUtil
	}
	return 0
}

func (m *MemoryLoad) GetAverageCacheHitRate() uint32 {
	if m != nil && m.AverageCacheHitRate != nil {
		return *m.AverageCacheHitRate
	}
	return 0
}

func (m *MemoryLoad) GetHighestCacheHitRate() uint32 {
	if m != nil && m.HighestCacheHitRate != nil {
		return *m.HighestCacheHitRate
	}
	return 0
}

func (m *MemoryLoad) GetLowestCacheHitRate() uint32 {
	if m != nil && m.LowestCacheHitRate != nil {
		return *m.LowestCacheHitRate
	}
	return 0
}

// Offered packet load on an internal subsystem of the NPU
type PacketLoad struct {
	// Each internal subsystem of the NPU has a name
	Identifier *string `protobuf:"bytes,1,req,name=identifier" json:"identifier,omitempty"`
	// Rate of packets received
	Rate *uint64 `protobuf:"varint,2,opt,name=rate" json:"rate,omitempty"`
	// The following metrics indicate the compute load on the NPU
	AverageInstructionsPerPacket *uint32  `protobuf:"varint,3,opt,name=average_instructions_per_packet,json=averageInstructionsPerPacket" json:"average_instructions_per_packet,omitempty"`
	AverageWaitCyclesPerPacket   *uint32  `protobuf:"varint,4,opt,name=average_wait_cycles_per_packet,json=averageWaitCyclesPerPacket" json:"average_wait_cycles_per_packet,omitempty"`
	AverageCyclesPerPacket       *uint32  `protobuf:"varint,5,opt,name=average_cycles_per_packet,json=averageCyclesPerPacket" json:"average_cycles_per_packet,omitempty"`
	XXX_NoUnkeyedLiteral         struct{} `json:"-"`
	XXX_unrecognized             []byte   `json:"-"`
	XXX_sizecache                int32    `json:"-"`
}

func (m *PacketLoad) Reset()         { *m = PacketLoad{} }
func (m *PacketLoad) String() string { return proto.CompactTextString(m) }
func (*PacketLoad) ProtoMessage()    {}
func (*PacketLoad) Descriptor() ([]byte, []int) {
	return fileDescriptor_28cd2a2be506ec89, []int{3}
}
func (m *PacketLoad) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PacketLoad) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PacketLoad.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PacketLoad) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketLoad.Merge(m, src)
}
func (m *PacketLoad) XXX_Size() int {
	return m.Size()
}
func (m *PacketLoad) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketLoad.DiscardUnknown(m)
}

var xxx_messageInfo_PacketLoad proto.InternalMessageInfo

func (m *PacketLoad) GetIdentifier() string {
	if m != nil && m.Identifier != nil {
		return *m.Identifier
	}
	return ""
}

func (m *PacketLoad) GetRate() uint64 {
	if m != nil && m.Rate != nil {
		return *m.Rate
	}
	return 0
}

func (m *PacketLoad) GetAverageInstructionsPerPacket() uint32 {
	if m != nil && m.AverageInstructionsPerPacket != nil {
		return *m.AverageInstructionsPerPacket
	}
	return 0
}

func (m *PacketLoad) GetAverageWaitCyclesPerPacket() uint32 {
	if m != nil && m.AverageWaitCyclesPerPacket != nil {
		return *m.AverageWaitCyclesPerPacket
	}
	return 0
}

func (m *PacketLoad) GetAverageCyclesPerPacket() uint32 {
	if m != nil && m.AverageCyclesPerPacket != nil {
		return *m.AverageCyclesPerPacket
	}
	return 0
}

var E_JnprNpuUtilizationExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*NetworkProcessorUtilization)(nil),
	Field:         12,
	Name:          "jnpr_npu_utilization_ext",
	Tag:           "bytes,12,opt,name=jnpr_npu_utilization_ext",
	Filename:      "npu_utilization.proto",
}

func init() {
	proto.RegisterType((*NetworkProcessorUtilization)(nil), "NetworkProcessorUtilization")
	proto.RegisterType((*Utilization)(nil), "Utilization")
	proto.RegisterType((*MemoryLoad)(nil), "MemoryLoad")
	proto.RegisterType((*PacketLoad)(nil), "PacketLoad")
	proto.RegisterExtension(E_JnprNpuUtilizationExt)
}

func init() { proto.RegisterFile("npu_utilization.proto", fileDescriptor_28cd2a2be506ec89) }

var fileDescriptor_28cd2a2be506ec89 = []byte{
	// 555 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xe5, 0x34, 0xb4, 0xea, 0x24, 0x70, 0xd8, 0xaa, 0x60, 0x4a, 0x95, 0x86, 0x20, 0xa4,
	0x5c, 0x6a, 0x8b, 0x72, 0x82, 0x63, 0xab, 0x4a, 0x80, 0xa0, 0x2a, 0xae, 0x10, 0x12, 0x17, 0xb3,
	0x75, 0x07, 0x7b, 0xd3, 0x64, 0xd7, 0xda, 0x1d, 0xf7, 0x0f, 0x0f, 0xc0, 0x4b, 0x70, 0xe5, 0x61,
	0x38, 0xf2, 0x08, 0x28, 0x4f, 0x82, 0xbc, 0xbb, 0x6e, 0xdc, 0x20, 0xc1, 0x6d, 0xf7, 0x9b, 0xdf,
	0x37, 0xb3, 0x3b, 0xa3, 0x81, 0x4d, 0x59, 0x56, 0x69, 0x45, 0x62, 0x2a, 0xbe, 0x72, 0x12, 0x4a,
	0x46, 0xa5, 0x56, 0xa4, 0xb6, 0x36, 0x08, 0xa7, 0x38, 0x43, 0xd2, 0xd7, 0x29, 0xa9, 0xd2, 0x89,
	0xa3, 0xf7, 0xf0, 0xe8, 0x08, 0xe9, 0x52, 0xe9, 0xf3, 0x63, 0xad, 0x32, 0x34, 0x46, 0xe9, 0x0f,
	0x0b, 0x27, 0xdb, 0x83, 0x7b, 0x4d, 0xb2, 0xd4, 0x10, 0x27, 0x13, 0x06, 0xc3, 0x95, 0x71, 0x6f,
	0xaf, 0x1f, 0xb5, 0xa8, 0xa4, 0x2f, 0xcb, 0xaa, 0xbe, 0x9f, 0xd4, 0xc4, 0xe8, 0x7b, 0x00, 0xbd,
	0x76, 0x8e, 0x01, 0x80, 0x38, 0x43, 0x49, 0xe2, 0x8b, 0x40, 0x1d, 0x06, 0xc3, 0xce, 0x78, 0x3d,
	0x69, 0x29, 0x6c, 0x08, 0xbd, 0xd6, 0x63, 0xc3, 0xce, 0x30, 0x18, 0xdf, 0x4d, 0xda, 0x12, 0x7b,
	0x0a, 0x6b, 0x25, 0xcf, 0xce, 0x91, 0x4c, 0xb8, 0x62, 0xcb, 0xf7, 0xa2, 0x63, 0x7b, 0x7f, 0xab,
	0xf8, 0x59, 0xd2, 0xc4, 0xd8, 0x13, 0x58, 0x9d, 0xe1, 0x4c, 0xe9, 0xeb, 0xb0, 0xeb, 0xa9, 0x77,
	0xf6, 0x6a, 0x29, 0x1f, 0x1a, 0xfd, 0xe8, 0x00, 0x2c, 0x64, 0xc6, 0xa0, 0x2b, 0xf9, 0x0c, 0xc3,
	0x60, 0x18, 0x8c, 0xd7, 0x13, 0x7b, 0x66, 0x8f, 0xa1, 0xcf, 0x2f, 0x50, 0xf3, 0x1c, 0xed, 0xc7,
	0x9b, 0x17, 0x79, 0xad, 0xfe, 0x5a, 0x8d, 0x14, 0x22, 0x2f, 0xd0, 0x90, 0x43, 0x56, 0x1c, 0xe2,
	0x35, 0x8b, 0xec, 0x40, 0x6f, 0xaa, 0x2e, 0x6f, 0x88, 0xae, 0x25, 0xc0, 0x49, 0x16, 0x78, 0x0e,
	0xf7, 0x9b, 0x32, 0x19, 0xcf, 0x0a, 0x4c, 0x0b, 0x41, 0xa9, 0xe6, 0x84, 0xe1, 0x1d, 0xcb, 0x6e,
	0xf8, 0xe8, 0x41, 0x1d, 0x7c, 0x25, 0x28, 0xe1, 0x84, 0xb5, 0xa9, 0x29, 0xbc, 0x64, 0x5a, 0x75,
	0x26, 0x1f, 0xbd, 0x65, 0x7a, 0x06, 0x9b, 0xfe, 0x29, 0x4b, 0x9e, 0x35, 0xeb, 0x61, 0x2e, 0xd8,
	0xb6, 0x8c, 0xbe, 0x75, 0x00, 0x16, 0x3d, 0xfe, 0xef, 0x0c, 0x19, 0x74, 0x6d, 0xc2, 0xba, 0x55,
	0xdd, 0xc4, 0x9e, 0xd9, 0x21, 0xec, 0x34, 0xff, 0x13, 0xd2, 0x90, 0xae, 0xb2, 0x7a, 0x98, 0x26,
	0x2d, 0x51, 0xa7, 0x6e, 0x64, 0xbe, 0x6d, 0xdb, 0x1e, 0x7b, 0xdd, 0xa2, 0x8e, 0x51, 0xbb, 0xf2,
	0x6c, 0x1f, 0x06, 0x4d, 0x9a, 0x4b, 0x2e, 0x28, 0xcd, 0xae, 0xb3, 0x29, 0xde, 0xca, 0xe2, 0x5a,
	0xbb, 0xe5, 0xa9, 0x8f, 0x5c, 0xd0, 0x81, 0x65, 0x16, 0x39, 0x5e, 0xc0, 0xc3, 0x9b, 0x56, 0xff,
	0x65, 0x77, 0xdd, 0x6e, 0x66, 0xb1, 0x64, 0x7d, 0x29, 0x21, 0x9c, 0xc8, 0x52, 0xa7, 0x4b, 0x3b,
	0x95, 0xe2, 0x15, 0xb1, 0x07, 0xd1, 0x9b, 0x4a, 0x8a, 0x12, 0xb5, 0x5f, 0x21, 0x73, 0x82, 0xd2,
	0x28, 0x6d, 0xc2, 0xfe, 0x30, 0x18, 0xf7, 0xf6, 0xb6, 0xa3, 0x7f, 0xac, 0x56, 0xb2, 0x59, 0xa7,
	0x3d, 0x72, 0x8b, 0xe3, 0xb5, 0xc3, 0x2b, 0xda, 0xff, 0xfc, 0x73, 0x3e, 0x08, 0x7e, 0xcd, 0x07,
	0xc1, 0xef, 0xf9, 0x20, 0xf8, 0x94, 0xe4, 0x82, 0xa2, 0x89, 0x2b, 0x12, 0x49, 0xa4, 0x58, 0x64,
	0x78, 0x8a, 0x3a, 0x8f, 0x0b, 0xe4, 0x53, 0x2a, 0x4e, 0x15, 0xed, 0x0a, 0x99, 0xa3, 0xa1, 0xdd,
	0x09, 0x89, 0x5d, 0xc9, 0x49, 0x5c, 0x60, 0x5c, 0x9e, 0xe7, 0xf1, 0x84, 0x44, 0xcc, 0xcf, 0x78,
	0x49, 0xa8, 0x4d, 0x9c, 0x4e, 0x2a, 0xa9, 0x4c, 0x6c, 0xb2, 0x02, 0x67, 0xfc, 0x4f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xbb, 0x8c, 0x48, 0xd9, 0x1f, 0x04, 0x00, 0x00,
}

func (m *NetworkProcessorUtilization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkProcessorUtilization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkProcessorUtilization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NpuUtilStats) > 0 {
		for iNdEx := len(m.NpuUtilStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NpuUtilStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNpuUtilization(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Utilization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Utilization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Utilization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Memory) > 0 {
		for iNdEx := len(m.Memory) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Memory[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNpuUtilization(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Packets) > 0 {
		for iNdEx := len(m.Packets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Packets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNpuUtilization(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Utilization != nil {
		i = encodeVarintNpuUtilization(dAtA, i, uint64(*m.Utilization))
		i--
		dAtA[i] = 0x10
	}
	if m.Identifier == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("identifier")
	} else {
		i -= len(*m.Identifier)
		copy(dAtA[i:], *m.Identifier)
		i = encodeVarintNpuUtilization(dAtA, i, uint64(len(*m.Identifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MemoryLoad) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemoryLoad) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MemoryLoad) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LowestCacheHitRate != nil {
		i = encodeVarintNpuUtilization(dAtA, i, uint64(*m.LowestCacheHitRate))
		i--
		dAtA[i] = 0x38
	}
	if m.HighestCacheHitRate != nil {
		i = encodeVarintNpuUtilization(dAtA, i, uint64(*m.HighestCacheHitRate))
		i--
		dAtA[i] = 0x30
	}
	if m.AverageCacheHitRate != nil {
		i = encodeVarintNpuUtilization(dAtA, i, uint64(*m.AverageCacheHitRate))
		i--
		dAtA[i] = 0x28
	}
	if m.LowestUtil != nil {
		i = encodeVarintNpuUtilization(dAtA, i, uint64(*m.LowestUtil))
		i--
		dAtA[i] = 0x20
	}
	if m.HighestUtil != nil {
		i = encodeVarintNpuUtilization(dAtA, i, uint64(*m.HighestUtil))
		i--
		dAtA[i] = 0x18
	}
	if m.AverageUtil != nil {
		i = encodeVarintNpuUtilization(dAtA, i, uint64(*m.AverageUtil))
		i--
		dAtA[i] = 0x10
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintNpuUtilization(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PacketLoad) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketLoad) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PacketLoad) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AverageCyclesPerPacket != nil {
		i = encodeVarintNpuUtilization(dAtA, i, uint64(*m.AverageCyclesPerPacket))
		i--
		dAtA[i] = 0x28
	}
	if m.AverageWaitCyclesPerPacket != nil {
		i = encodeVarintNpuUtilization(dAtA, i, uint64(*m.AverageWaitCyclesPerPacket))
		i--
		dAtA[i] = 0x20
	}
	if m.AverageInstructionsPerPacket != nil {
		i = encodeVarintNpuUtilization(dAtA, i, uint64(*m.AverageInstructionsPerPacket))
		i--
		dAtA[i] = 0x18
	}
	if m.Rate != nil {
		i = encodeVarintNpuUtilization(dAtA, i, uint64(*m.Rate))
		i--
		dAtA[i] = 0x10
	}
	if m.Identifier == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("identifier")
	} else {
		i -= len(*m.Identifier)
		copy(dAtA[i:], *m.Identifier)
		i = encodeVarintNpuUtilization(dAtA, i, uint64(len(*m.Identifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNpuUtilization(dAtA []byte, offset int, v uint64) int {
	offset -= sovNpuUtilization(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NetworkProcessorUtilization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NpuUtilStats) > 0 {
		for _, e := range m.NpuUtilStats {
			l = e.Size()
			n += 1 + l + sovNpuUtilization(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Utilization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Identifier != nil {
		l = len(*m.Identifier)
		n += 1 + l + sovNpuUtilization(uint64(l))
	}
	if m.Utilization != nil {
		n += 1 + sovNpuUtilization(uint64(*m.Utilization))
	}
	if len(m.Packets) > 0 {
		for _, e := range m.Packets {
			l = e.Size()
			n += 1 + l + sovNpuUtilization(uint64(l))
		}
	}
	if len(m.Memory) > 0 {
		for _, e := range m.Memory {
			l = e.Size()
			n += 1 + l + sovNpuUtilization(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MemoryLoad) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovNpuUtilization(uint64(l))
	}
	if m.AverageUtil != nil {
		n += 1 + sovNpuUtilization(uint64(*m.AverageUtil))
	}
	if m.HighestUtil != nil {
		n += 1 + sovNpuUtilization(uint64(*m.HighestUtil))
	}
	if m.LowestUtil != nil {
		n += 1 + sovNpuUtilization(uint64(*m.LowestUtil))
	}
	if m.AverageCacheHitRate != nil {
		n += 1 + sovNpuUtilization(uint64(*m.AverageCacheHitRate))
	}
	if m.HighestCacheHitRate != nil {
		n += 1 + sovNpuUtilization(uint64(*m.HighestCacheHitRate))
	}
	if m.LowestCacheHitRate != nil {
		n += 1 + sovNpuUtilization(uint64(*m.LowestCacheHitRate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PacketLoad) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Identifier != nil {
		l = len(*m.Identifier)
		n += 1 + l + sovNpuUtilization(uint64(l))
	}
	if m.Rate != nil {
		n += 1 + sovNpuUtilization(uint64(*m.Rate))
	}
	if m.AverageInstructionsPerPacket != nil {
		n += 1 + sovNpuUtilization(uint64(*m.AverageInstructionsPerPacket))
	}
	if m.AverageWaitCyclesPerPacket != nil {
		n += 1 + sovNpuUtilization(uint64(*m.AverageWaitCyclesPerPacket))
	}
	if m.AverageCyclesPerPacket != nil {
		n += 1 + sovNpuUtilization(uint64(*m.AverageCyclesPerPacket))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovNpuUtilization(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNpuUtilization(x uint64) (n int) {
	return sovNpuUtilization(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NetworkProcessorUtilization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNpuUtilization
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkProcessorUtilization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkProcessorUtilization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NpuUtilStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpuUtilization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNpuUtilization
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNpuUtilization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NpuUtilStats = append(m.NpuUtilStats, &Utilization{})
			if err := m.NpuUtilStats[len(m.NpuUtilStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNpuUtilization(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNpuUtilization
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNpuUtilization
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Utilization) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNpuUtilization
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Utilization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Utilization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpuUtilization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNpuUtilization
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNpuUtilization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Identifier = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Utilization", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpuUtilization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Utilization = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpuUtilization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNpuUtilization
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNpuUtilization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Packets = append(m.Packets, &PacketLoad{})
			if err := m.Packets[len(m.Packets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpuUtilization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNpuUtilization
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNpuUtilization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memory = append(m.Memory, &MemoryLoad{})
			if err := m.Memory[len(m.Memory)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNpuUtilization(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNpuUtilization
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNpuUtilization
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("identifier")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemoryLoad) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNpuUtilization
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemoryLoad: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemoryLoad: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpuUtilization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNpuUtilization
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNpuUtilization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageUtil", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpuUtilization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AverageUtil = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighestUtil", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpuUtilization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HighestUtil = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowestUtil", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpuUtilization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LowestUtil = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageCacheHitRate", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpuUtilization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AverageCacheHitRate = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighestCacheHitRate", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpuUtilization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HighestCacheHitRate = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowestCacheHitRate", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpuUtilization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LowestCacheHitRate = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNpuUtilization(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNpuUtilization
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNpuUtilization
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PacketLoad) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNpuUtilization
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketLoad: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketLoad: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpuUtilization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNpuUtilization
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNpuUtilization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Identifier = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpuUtilization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Rate = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageInstructionsPerPacket", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpuUtilization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AverageInstructionsPerPacket = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageWaitCyclesPerPacket", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpuUtilization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AverageWaitCyclesPerPacket = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageCyclesPerPacket", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNpuUtilization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AverageCyclesPerPacket = &v
		default:
			iNdEx = preIndex
			skippy, err := skipNpuUtilization(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNpuUtilization
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNpuUtilization
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("identifier")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNpuUtilization(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNpuUtilization
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNpuUtilization
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNpuUtilization
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNpuUtilization
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNpuUtilization
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNpuUtilization
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNpuUtilization        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNpuUtilization          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNpuUtilization = fmt.Errorf("proto: unexpected end of group")
)
