// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: packet_capture.proto

package schema

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type JunosPfePacketCapture struct {
	System               *JunosPfePacketCaptureSystemType `protobuf:"bytes,151,opt,name=system" json:"system,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *JunosPfePacketCapture) Reset()         { *m = JunosPfePacketCapture{} }
func (m *JunosPfePacketCapture) String() string { return proto.CompactTextString(m) }
func (*JunosPfePacketCapture) ProtoMessage()    {}
func (*JunosPfePacketCapture) Descriptor() ([]byte, []int) {
	return fileDescriptor_9363568d980a8875, []int{0}
}
func (m *JunosPfePacketCapture) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosPfePacketCapture) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosPfePacketCapture.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosPfePacketCapture) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosPfePacketCapture.Merge(m, src)
}
func (m *JunosPfePacketCapture) XXX_Size() int {
	return m.Size()
}
func (m *JunosPfePacketCapture) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosPfePacketCapture.DiscardUnknown(m)
}

var xxx_messageInfo_JunosPfePacketCapture proto.InternalMessageInfo

func (m *JunosPfePacketCapture) GetSystem() *JunosPfePacketCaptureSystemType {
	if m != nil {
		return m.System
	}
	return nil
}

type JunosPfePacketCaptureSystemType struct {
	Linecard             *JunosPfePacketCaptureSystemTypeLinecardType `protobuf:"bytes,151,opt,name=linecard" json:"linecard,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *JunosPfePacketCaptureSystemType) Reset()         { *m = JunosPfePacketCaptureSystemType{} }
func (m *JunosPfePacketCaptureSystemType) String() string { return proto.CompactTextString(m) }
func (*JunosPfePacketCaptureSystemType) ProtoMessage()    {}
func (*JunosPfePacketCaptureSystemType) Descriptor() ([]byte, []int) {
	return fileDescriptor_9363568d980a8875, []int{0, 0}
}
func (m *JunosPfePacketCaptureSystemType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosPfePacketCaptureSystemType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosPfePacketCaptureSystemType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosPfePacketCaptureSystemType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosPfePacketCaptureSystemType.Merge(m, src)
}
func (m *JunosPfePacketCaptureSystemType) XXX_Size() int {
	return m.Size()
}
func (m *JunosPfePacketCaptureSystemType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosPfePacketCaptureSystemType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosPfePacketCaptureSystemType proto.InternalMessageInfo

func (m *JunosPfePacketCaptureSystemType) GetLinecard() *JunosPfePacketCaptureSystemTypeLinecardType {
	if m != nil {
		return m.Linecard
	}
	return nil
}

type JunosPfePacketCaptureSystemTypeLinecardType struct {
	PacketCapture        *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureType `protobuf:"bytes,151,opt,name=packet_capture,json=packetCapture" json:"packet_capture,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                      `json:"-"`
	XXX_unrecognized     []byte                                                        `json:"-"`
	XXX_sizecache        int32                                                         `json:"-"`
}

func (m *JunosPfePacketCaptureSystemTypeLinecardType) Reset() {
	*m = JunosPfePacketCaptureSystemTypeLinecardType{}
}
func (m *JunosPfePacketCaptureSystemTypeLinecardType) String() string {
	return proto.CompactTextString(m)
}
func (*JunosPfePacketCaptureSystemTypeLinecardType) ProtoMessage() {}
func (*JunosPfePacketCaptureSystemTypeLinecardType) Descriptor() ([]byte, []int) {
	return fileDescriptor_9363568d980a8875, []int{0, 0, 0}
}
func (m *JunosPfePacketCaptureSystemTypeLinecardType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosPfePacketCaptureSystemTypeLinecardType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosPfePacketCaptureSystemTypeLinecardType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosPfePacketCaptureSystemTypeLinecardType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosPfePacketCaptureSystemTypeLinecardType.Merge(m, src)
}
func (m *JunosPfePacketCaptureSystemTypeLinecardType) XXX_Size() int {
	return m.Size()
}
func (m *JunosPfePacketCaptureSystemTypeLinecardType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosPfePacketCaptureSystemTypeLinecardType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosPfePacketCaptureSystemTypeLinecardType proto.InternalMessageInfo

func (m *JunosPfePacketCaptureSystemTypeLinecardType) GetPacketCapture() *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureType {
	if m != nil {
		return m.PacketCapture
	}
	return nil
}

type JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureType struct {
	Packet               []*JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList `protobuf:"bytes,151,rep,name=packet" json:"packet,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                  `json:"-"`
	XXX_unrecognized     []byte                                                                    `json:"-"`
	XXX_sizecache        int32                                                                     `json:"-"`
}

func (m *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureType) Reset() {
	*m = JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureType{}
}
func (m *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureType) String() string {
	return proto.CompactTextString(m)
}
func (*JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureType) ProtoMessage() {}
func (*JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureType) Descriptor() ([]byte, []int) {
	return fileDescriptor_9363568d980a8875, []int{0, 0, 0, 0}
}
func (m *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureType.Merge(m, src)
}
func (m *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureType) XXX_Size() int {
	return m.Size()
}
func (m *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureType proto.InternalMessageInfo

func (m *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureType) GetPacket() []*JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList {
	if m != nil {
		return m.Packet
	}
	return nil
}

type JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList struct {
	Id                   *uint64  `protobuf:"varint,51,opt,name=id" json:"id,omitempty"`
	TotalLength          *uint64  `protobuf:"varint,52,opt,name=total_length,json=totalLength" json:"total_length,omitempty"`
	ActualLength         *uint64  `protobuf:"varint,53,opt,name=actual_length,json=actualLength" json:"actual_length,omitempty"`
	PacketData           *string  `protobuf:"bytes,54,opt,name=packet_data,json=packetData" json:"packet_data,omitempty"`
	Timestamp            *uint64  `protobuf:"varint,55,opt,name=timestamp" json:"timestamp,omitempty"`
	IflIndex             *uint32  `protobuf:"varint,56,opt,name=ifl_index,json=iflIndex" json:"ifl_index,omitempty"`
	CosQueue             *uint32  `protobuf:"varint,57,opt,name=cos_queue,json=cosQueue" json:"cos_queue,omitempty"`
	Direction            *string  `protobuf:"bytes,58,opt,name=direction" json:"direction,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList) Reset() {
	*m = JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList{}
}
func (m *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList) String() string {
	return proto.CompactTextString(m)
}
func (*JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList) ProtoMessage() {}
func (*JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList) Descriptor() ([]byte, []int) {
	return fileDescriptor_9363568d980a8875, []int{0, 0, 0, 0, 0}
}
func (m *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList.Merge(m, src)
}
func (m *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList) XXX_Size() int {
	return m.Size()
}
func (m *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList.DiscardUnknown(m)
}

var xxx_messageInfo_JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList proto.InternalMessageInfo

func (m *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList) GetTotalLength() uint64 {
	if m != nil && m.TotalLength != nil {
		return *m.TotalLength
	}
	return 0
}

func (m *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList) GetActualLength() uint64 {
	if m != nil && m.ActualLength != nil {
		return *m.ActualLength
	}
	return 0
}

func (m *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList) GetPacketData() string {
	if m != nil && m.PacketData != nil {
		return *m.PacketData
	}
	return ""
}

func (m *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList) GetIflIndex() uint32 {
	if m != nil && m.IflIndex != nil {
		return *m.IflIndex
	}
	return 0
}

func (m *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList) GetCosQueue() uint32 {
	if m != nil && m.CosQueue != nil {
		return *m.CosQueue
	}
	return 0
}

func (m *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList) GetDirection() string {
	if m != nil && m.Direction != nil {
		return *m.Direction
	}
	return ""
}

var E_JnprJunosPfePacketCaptureExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*JunosPfePacketCapture)(nil),
	Field:         139,
	Name:          "jnpr_junos_pfe_packet_capture_ext",
	Tag:           "bytes,139,opt,name=jnpr_junos_pfe_packet_capture_ext",
	Filename:      "packet_capture.proto",
}

func init() {
	proto.RegisterType((*JunosPfePacketCapture)(nil), "junos_pfe_packet_capture")
	proto.RegisterType((*JunosPfePacketCaptureSystemType)(nil), "junos_pfe_packet_capture.system_type")
	proto.RegisterType((*JunosPfePacketCaptureSystemTypeLinecardType)(nil), "junos_pfe_packet_capture.system_type.linecard_type")
	proto.RegisterType((*JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureType)(nil), "junos_pfe_packet_capture.system_type.linecard_type.packet_capture_type")
	proto.RegisterType((*JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList)(nil), "junos_pfe_packet_capture.system_type.linecard_type.packet_capture_type.packet_list")
	proto.RegisterExtension(E_JnprJunosPfePacketCaptureExt)
}

func init() { proto.RegisterFile("packet_capture.proto", fileDescriptor_9363568d980a8875) }

var fileDescriptor_9363568d980a8875 = []byte{
	// 505 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0x4d, 0x8b, 0x13, 0x31,
	0x18, 0xc7, 0x99, 0xee, 0x0b, 0x6d, 0xba, 0xf5, 0x30, 0xab, 0x38, 0xd6, 0xa5, 0x76, 0x15, 0xa1,
	0x97, 0xce, 0xc0, 0xae, 0xaf, 0x7b, 0x10, 0x59, 0x15, 0x71, 0x11, 0xa9, 0xb3, 0x37, 0x2f, 0x31,
	0x3b, 0xf3, 0xb4, 0x4d, 0x3b, 0x4d, 0x62, 0xf2, 0x8c, 0xb6, 0xe0, 0x49, 0x4f, 0xa2, 0x77, 0xbf,
	0x92, 0xe0, 0xc5, 0x8f, 0x20, 0xfd, 0x00, 0x7e, 0x06, 0xc9, 0xa4, 0xdd, 0xb6, 0x60, 0x41, 0xc4,
	0x63, 0x7e, 0xcf, 0xff, 0xf9, 0xfd, 0xd3, 0x4e, 0xc8, 0x45, 0xc5, 0x92, 0x21, 0x20, 0x4d, 0x98,
	0xc2, 0x5c, 0x43, 0xa8, 0xb4, 0x44, 0x59, 0xdf, 0x45, 0xc8, 0x60, 0x04, 0xa8, 0x27, 0x14, 0xa5,
	0x72, 0xf0, 0xfa, 0xf7, 0x2d, 0x12, 0x0c, 0x72, 0x21, 0x0d, 0x55, 0x5d, 0xa0, 0xab, 0x7b, 0xfe,
	0x03, 0xb2, 0x6d, 0x26, 0x06, 0x61, 0x14, 0x7c, 0xf5, 0x9a, 0x5e, 0xab, 0x7a, 0x70, 0x33, 0x5c,
	0x97, 0x0d, 0x5d, 0x90, 0xe2, 0x44, 0x41, 0x3c, 0xdb, 0xaa, 0xff, 0xda, 0x24, 0xd5, 0x25, 0xee,
	0x77, 0x48, 0x39, 0xe3, 0x02, 0x12, 0xa6, 0xd3, 0xb9, 0xf1, 0xf0, 0xaf, 0x8c, 0xe1, 0x7c, 0xcd,
	0xf9, 0xcf, 0x2d, 0xf5, 0x2f, 0x9b, 0xa4, 0xb6, 0x32, 0xf3, 0x25, 0xb9, 0xb0, 0xea, 0x99, 0x37,
	0x3d, 0xfd, 0x87, 0xa6, 0x70, 0x35, 0xe8, 0xda, 0x6b, 0x0e, 0x3e, 0x72, 0xac, 0xfe, 0x69, 0x83,
	0xec, 0xfe, 0x21, 0xe6, 0x67, 0x64, 0xdb, 0x61, 0x7b, 0x81, 0x8d, 0x56, 0xf5, 0xe0, 0xf4, 0x3f,
	0x5d, 0x60, 0xce, 0x32, 0x6e, 0x30, 0x9e, 0x75, 0xd4, 0x3f, 0x96, 0x48, 0x75, 0x89, 0xfb, 0x97,
	0x48, 0x89, 0xa7, 0xc1, 0x61, 0xd3, 0x6b, 0x6d, 0x1e, 0x6f, 0x7d, 0x78, 0x58, 0x2a, 0x7b, 0x71,
	0x89, 0xa7, 0xfe, 0x3e, 0xd9, 0x41, 0x89, 0x2c, 0xa3, 0x19, 0x88, 0x1e, 0xf6, 0x83, 0x5b, 0x36,
	0x10, 0x57, 0x0b, 0xf6, 0xbc, 0x40, 0xfe, 0x0d, 0x52, 0x63, 0x09, 0xe6, 0x8b, 0xcc, 0xed, 0x22,
	0xb3, 0xe3, 0xe0, 0x2c, 0x74, 0xed, 0xbc, 0x2d, 0x65, 0xc8, 0x82, 0x3b, 0x4d, 0xaf, 0x55, 0x89,
	0x89, 0x43, 0x8f, 0x19, 0x32, 0x7f, 0x8f, 0x54, 0x90, 0x8f, 0xc0, 0x20, 0x1b, 0xa9, 0xe0, 0x6e,
	0x61, 0x58, 0x00, 0xff, 0x2a, 0xa9, 0xf0, 0x6e, 0x46, 0xb9, 0x48, 0x61, 0x1c, 0xdc, 0x6b, 0x7a,
	0xad, 0x5a, 0x5c, 0xe6, 0xdd, 0xec, 0x99, 0x3d, 0xdb, 0x61, 0x22, 0x0d, 0x7d, 0x93, 0x43, 0x0e,
	0xc1, 0x7d, 0x37, 0x4c, 0xa4, 0x79, 0x69, 0xcf, 0xd6, 0x9b, 0x72, 0x0d, 0x09, 0x72, 0x29, 0x82,
	0xa3, 0xa2, 0x76, 0x01, 0x8e, 0xde, 0x93, 0xfd, 0x81, 0x50, 0x9a, 0xae, 0xfb, 0xa3, 0x29, 0x8c,
	0xd1, 0xbf, 0x1c, 0x9e, 0xe4, 0x82, 0x2b, 0xd0, 0x2f, 0x00, 0xdf, 0x49, 0x3d, 0x34, 0xa7, 0x20,
	0x8c, 0xd4, 0x26, 0xf8, 0xec, 0x1e, 0xca, 0x95, 0xb5, 0xdf, 0x29, 0xde, 0xb3, 0xf6, 0x13, 0x3b,
	0xed, 0x74, 0xa1, 0xb3, 0xfc, 0x0c, 0x9e, 0x8c, 0xf1, 0xf8, 0xf5, 0xb7, 0x69, 0xc3, 0xfb, 0x31,
	0x6d, 0x78, 0x3f, 0xa7, 0x0d, 0xef, 0x55, 0xdc, 0xe3, 0x68, 0x4d, 0xb6, 0x29, 0x14, 0x80, 0x11,
	0x4f, 0xe0, 0x0c, 0x74, 0x2f, 0xea, 0x03, 0xcb, 0xb0, 0x7f, 0x26, 0xb1, 0xcd, 0x45, 0x0f, 0x0c,
	0xb6, 0x07, 0xc8, 0xdb, 0x82, 0x21, 0x7f, 0x0b, 0x91, 0x1a, 0xf6, 0xa2, 0x01, 0xf2, 0x88, 0xa5,
	0x4c, 0x21, 0x68, 0x13, 0xb9, 0x9f, 0x12, 0x99, 0xa4, 0x0f, 0x23, 0xf6, 0x3b, 0x00, 0x00, 0xff,
	0xff, 0x8a, 0x51, 0xf2, 0x45, 0xd9, 0x03, 0x00, 0x00,
}

func (m *JunosPfePacketCapture) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosPfePacketCapture) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosPfePacketCapture) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.System != nil {
		{
			size, err := m.System.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacketCapture(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *JunosPfePacketCaptureSystemType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosPfePacketCaptureSystemType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosPfePacketCaptureSystemType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Linecard != nil {
		{
			size, err := m.Linecard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacketCapture(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *JunosPfePacketCaptureSystemTypeLinecardType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosPfePacketCaptureSystemTypeLinecardType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosPfePacketCaptureSystemTypeLinecardType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PacketCapture != nil {
		{
			size, err := m.PacketCapture.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacketCapture(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Packet) > 0 {
		for iNdEx := len(m.Packet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Packet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPacketCapture(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Direction != nil {
		i -= len(*m.Direction)
		copy(dAtA[i:], *m.Direction)
		i = encodeVarintPacketCapture(dAtA, i, uint64(len(*m.Direction)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd2
	}
	if m.CosQueue != nil {
		i = encodeVarintPacketCapture(dAtA, i, uint64(*m.CosQueue))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc8
	}
	if m.IflIndex != nil {
		i = encodeVarintPacketCapture(dAtA, i, uint64(*m.IflIndex))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc0
	}
	if m.Timestamp != nil {
		i = encodeVarintPacketCapture(dAtA, i, uint64(*m.Timestamp))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.PacketData != nil {
		i -= len(*m.PacketData)
		copy(dAtA[i:], *m.PacketData)
		i = encodeVarintPacketCapture(dAtA, i, uint64(len(*m.PacketData)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	if m.ActualLength != nil {
		i = encodeVarintPacketCapture(dAtA, i, uint64(*m.ActualLength))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.TotalLength != nil {
		i = encodeVarintPacketCapture(dAtA, i, uint64(*m.TotalLength))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.Id != nil {
		i = encodeVarintPacketCapture(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func encodeVarintPacketCapture(dAtA []byte, offset int, v uint64) int {
	offset -= sovPacketCapture(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *JunosPfePacketCapture) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.System != nil {
		l = m.System.Size()
		n += 2 + l + sovPacketCapture(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosPfePacketCaptureSystemType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Linecard != nil {
		l = m.Linecard.Size()
		n += 2 + l + sovPacketCapture(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosPfePacketCaptureSystemTypeLinecardType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PacketCapture != nil {
		l = m.PacketCapture.Size()
		n += 2 + l + sovPacketCapture(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Packet) > 0 {
		for _, e := range m.Packet {
			l = e.Size()
			n += 2 + l + sovPacketCapture(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += 2 + sovPacketCapture(uint64(*m.Id))
	}
	if m.TotalLength != nil {
		n += 2 + sovPacketCapture(uint64(*m.TotalLength))
	}
	if m.ActualLength != nil {
		n += 2 + sovPacketCapture(uint64(*m.ActualLength))
	}
	if m.PacketData != nil {
		l = len(*m.PacketData)
		n += 2 + l + sovPacketCapture(uint64(l))
	}
	if m.Timestamp != nil {
		n += 2 + sovPacketCapture(uint64(*m.Timestamp))
	}
	if m.IflIndex != nil {
		n += 2 + sovPacketCapture(uint64(*m.IflIndex))
	}
	if m.CosQueue != nil {
		n += 2 + sovPacketCapture(uint64(*m.CosQueue))
	}
	if m.Direction != nil {
		l = len(*m.Direction)
		n += 2 + l + sovPacketCapture(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPacketCapture(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPacketCapture(x uint64) (n int) {
	return sovPacketCapture(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *JunosPfePacketCapture) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketCapture
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: junos_pfe_packet_capture: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: junos_pfe_packet_capture: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field System", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketCapture
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketCapture
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketCapture
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.System == nil {
				m.System = &JunosPfePacketCaptureSystemType{}
			}
			if err := m.System.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacketCapture(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacketCapture
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacketCapture
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosPfePacketCaptureSystemType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketCapture
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: system_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: system_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Linecard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketCapture
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketCapture
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketCapture
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Linecard == nil {
				m.Linecard = &JunosPfePacketCaptureSystemTypeLinecardType{}
			}
			if err := m.Linecard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacketCapture(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacketCapture
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacketCapture
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosPfePacketCaptureSystemTypeLinecardType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketCapture
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: linecard_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: linecard_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketCapture", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketCapture
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketCapture
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketCapture
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PacketCapture == nil {
				m.PacketCapture = &JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureType{}
			}
			if err := m.PacketCapture.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacketCapture(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacketCapture
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacketCapture
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketCapture
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: packet_capture_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: packet_capture_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketCapture
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketCapture
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketCapture
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Packet = append(m.Packet, &JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList{})
			if err := m.Packet[len(m.Packet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacketCapture(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacketCapture
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacketCapture
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosPfePacketCaptureSystemTypeLinecardTypePacketCaptureTypePacketList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketCapture
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: packet_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: packet_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketCapture
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLength", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketCapture
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalLength = &v
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualLength", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketCapture
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActualLength = &v
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketCapture
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacketCapture
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacketCapture
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PacketData = &s
			iNdEx = postIndex
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketCapture
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Timestamp = &v
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IflIndex", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketCapture
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IflIndex = &v
		case 57:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosQueue", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketCapture
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CosQueue = &v
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketCapture
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacketCapture
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacketCapture
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Direction = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacketCapture(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacketCapture
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacketCapture
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacketCapture(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacketCapture
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacketCapture
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacketCapture
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacketCapture
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPacketCapture
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPacketCapture
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPacketCapture        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacketCapture          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPacketCapture = fmt.Errorf("proto: unexpected end of group")
)
