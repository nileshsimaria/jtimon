// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: packet_stats.proto

package schema

import (
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PacketStatistics struct {
	// List of stats aggregated across all forwarding engines
	PacketStats []*PacketStatsClass `protobuf:"bytes,1,rep,name=packet_stats,json=packetStats" json:"packet_stats,omitempty"`
	// List of stats per forwarding engine
	PacketStatsPfe       []*PacketStatsPacketForwardingEngine `protobuf:"bytes,2,rep,name=packet_stats_pfe,json=packetStatsPfe" json:"packet_stats_pfe,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *PacketStatistics) Reset()         { *m = PacketStatistics{} }
func (m *PacketStatistics) String() string { return proto.CompactTextString(m) }
func (*PacketStatistics) ProtoMessage()    {}
func (*PacketStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_b21e52ae69b7e1b3, []int{0}
}
func (m *PacketStatistics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PacketStatistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PacketStatistics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PacketStatistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketStatistics.Merge(m, src)
}
func (m *PacketStatistics) XXX_Size() int {
	return m.Size()
}
func (m *PacketStatistics) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketStatistics.DiscardUnknown(m)
}

var xxx_messageInfo_PacketStatistics proto.InternalMessageInfo

func (m *PacketStatistics) GetPacketStats() []*PacketStatsClass {
	if m != nil {
		return m.PacketStats
	}
	return nil
}

func (m *PacketStatistics) GetPacketStatsPfe() []*PacketStatsPacketForwardingEngine {
	if m != nil {
		return m.PacketStatsPfe
	}
	return nil
}

type PacketStatsPacketForwardingEngine struct {
	// A string of the form pfe-X/Y that identifies a PFE in the system
	PfeIdentifier *string `protobuf:"bytes,1,req,name=pfe_identifier,json=pfeIdentifier" json:"pfe_identifier,omitempty"`
	// Array of all counters that are available
	PacketStats          []*PacketStatsClass `protobuf:"bytes,2,rep,name=packet_stats,json=packetStats" json:"packet_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PacketStatsPacketForwardingEngine) Reset()         { *m = PacketStatsPacketForwardingEngine{} }
func (m *PacketStatsPacketForwardingEngine) String() string { return proto.CompactTextString(m) }
func (*PacketStatsPacketForwardingEngine) ProtoMessage()    {}
func (*PacketStatsPacketForwardingEngine) Descriptor() ([]byte, []int) {
	return fileDescriptor_b21e52ae69b7e1b3, []int{1}
}
func (m *PacketStatsPacketForwardingEngine) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PacketStatsPacketForwardingEngine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PacketStatsPacketForwardingEngine.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PacketStatsPacketForwardingEngine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketStatsPacketForwardingEngine.Merge(m, src)
}
func (m *PacketStatsPacketForwardingEngine) XXX_Size() int {
	return m.Size()
}
func (m *PacketStatsPacketForwardingEngine) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketStatsPacketForwardingEngine.DiscardUnknown(m)
}

var xxx_messageInfo_PacketStatsPacketForwardingEngine proto.InternalMessageInfo

func (m *PacketStatsPacketForwardingEngine) GetPfeIdentifier() string {
	if m != nil && m.PfeIdentifier != nil {
		return *m.PfeIdentifier
	}
	return ""
}

func (m *PacketStatsPacketForwardingEngine) GetPacketStats() []*PacketStatsClass {
	if m != nil {
		return m.PacketStats
	}
	return nil
}

type PacketStatsClass struct {
	// Broad category that defines this class of counters
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// Packet/Byte counters for the above category
	Counter              *PacketStatsCounter `protobuf:"bytes,2,req,name=counter" json:"counter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PacketStatsClass) Reset()         { *m = PacketStatsClass{} }
func (m *PacketStatsClass) String() string { return proto.CompactTextString(m) }
func (*PacketStatsClass) ProtoMessage()    {}
func (*PacketStatsClass) Descriptor() ([]byte, []int) {
	return fileDescriptor_b21e52ae69b7e1b3, []int{2}
}
func (m *PacketStatsClass) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PacketStatsClass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PacketStatsClass.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PacketStatsClass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketStatsClass.Merge(m, src)
}
func (m *PacketStatsClass) XXX_Size() int {
	return m.Size()
}
func (m *PacketStatsClass) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketStatsClass.DiscardUnknown(m)
}

var xxx_messageInfo_PacketStatsClass proto.InternalMessageInfo

func (m *PacketStatsClass) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *PacketStatsClass) GetCounter() *PacketStatsCounter {
	if m != nil {
		return m.Counter
	}
	return nil
}

type PacketStatsCounter struct {
	// Counter64: This is a counter representing the total number of packets
	// that were dropped for a given error.
	PacketCount *uint64 `protobuf:"varint,1,req,name=packet_count,json=packetCount" json:"packet_count,omitempty"`
	// Counter64: This is a counter representing the total number of
	// bytes that were dropped for a given error.
	ByteCount *uint64 `protobuf:"varint,2,opt,name=byte_count,json=byteCount" json:"byte_count,omitempty"`
	// Rate: This value represents the rate of packets dropped
	// due to a given error, expressed in packets per second.
	// On most platforms, this rate is computed over a 1 second interval.
	PacketRate *uint64 `protobuf:"varint,3,opt,name=packet_rate,json=packetRate" json:"packet_rate,omitempty"`
	// Rate: This value represents the total number of
	// bits per second that were dropped for a given error.
	BitRate              *uint64  `protobuf:"varint,4,opt,name=bit_rate,json=bitRate" json:"bit_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PacketStatsCounter) Reset()         { *m = PacketStatsCounter{} }
func (m *PacketStatsCounter) String() string { return proto.CompactTextString(m) }
func (*PacketStatsCounter) ProtoMessage()    {}
func (*PacketStatsCounter) Descriptor() ([]byte, []int) {
	return fileDescriptor_b21e52ae69b7e1b3, []int{3}
}
func (m *PacketStatsCounter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PacketStatsCounter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PacketStatsCounter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PacketStatsCounter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketStatsCounter.Merge(m, src)
}
func (m *PacketStatsCounter) XXX_Size() int {
	return m.Size()
}
func (m *PacketStatsCounter) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketStatsCounter.DiscardUnknown(m)
}

var xxx_messageInfo_PacketStatsCounter proto.InternalMessageInfo

func (m *PacketStatsCounter) GetPacketCount() uint64 {
	if m != nil && m.PacketCount != nil {
		return *m.PacketCount
	}
	return 0
}

func (m *PacketStatsCounter) GetByteCount() uint64 {
	if m != nil && m.ByteCount != nil {
		return *m.ByteCount
	}
	return 0
}

func (m *PacketStatsCounter) GetPacketRate() uint64 {
	if m != nil && m.PacketRate != nil {
		return *m.PacketRate
	}
	return 0
}

func (m *PacketStatsCounter) GetBitRate() uint64 {
	if m != nil && m.BitRate != nil {
		return *m.BitRate
	}
	return 0
}

var E_JnprPacketStatisticsExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*PacketStatistics)(nil),
	Field:         8,
	Name:          "jnpr_packet_statistics_ext",
	Tag:           "bytes,8,opt,name=jnpr_packet_statistics_ext",
	Filename:      "packet_stats.proto",
}

func init() {
	proto.RegisterType((*PacketStatistics)(nil), "PacketStatistics")
	proto.RegisterType((*PacketStatsPacketForwardingEngine)(nil), "PacketStatsPacketForwardingEngine")
	proto.RegisterType((*PacketStatsClass)(nil), "PacketStatsClass")
	proto.RegisterType((*PacketStatsCounter)(nil), "PacketStatsCounter")
	proto.RegisterExtension(E_JnprPacketStatisticsExt)
}

func init() { proto.RegisterFile("packet_stats.proto", fileDescriptor_b21e52ae69b7e1b3) }

var fileDescriptor_b21e52ae69b7e1b3 = []byte{
	// 433 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xc1, 0x6e, 0xd4, 0x30,
	0x10, 0x86, 0xe5, 0x74, 0xa5, 0xb6, 0x5e, 0xa8, 0x8a, 0x7b, 0x68, 0xa8, 0xc4, 0x92, 0x46, 0x42,
	0xda, 0xcb, 0x26, 0x52, 0xc5, 0x89, 0x23, 0xa8, 0x48, 0x20, 0x84, 0xaa, 0x54, 0x5c, 0xb8, 0x04,
	0x27, 0x3b, 0xc9, 0x4e, 0x76, 0xd7, 0xb6, 0xec, 0x59, 0xda, 0xde, 0x78, 0x06, 0x0e, 0x3c, 0x13,
	0x47, 0x1e, 0x01, 0xed, 0x93, 0xa0, 0xda, 0xdb, 0x36, 0xb4, 0x07, 0xb8, 0x59, 0xff, 0xff, 0xfd,
	0xbf, 0x3d, 0x23, 0x73, 0x61, 0x64, 0x3d, 0x07, 0x2a, 0x1d, 0x49, 0x72, 0x99, 0xb1, 0x9a, 0xf4,
	0xd1, 0x01, 0xc1, 0x02, 0x96, 0x40, 0xf6, 0xaa, 0x24, 0x6d, 0x82, 0x98, 0xfe, 0x60, 0x7c, 0xff,
	0xcc, 0xb3, 0xe7, 0x24, 0x09, 0x1d, 0x61, 0xed, 0xc4, 0x4b, 0xfe, 0xa8, 0x9f, 0x8f, 0x59, 0xb2,
	0x35, 0x1e, 0x9e, 0x3c, 0xc9, 0xee, 0x40, 0xf7, 0x66, 0x21, 0x9d, 0x2b, 0x86, 0xe6, 0x4e, 0x11,
	0x1f, 0xf8, 0x7e, 0x3f, 0x55, 0x9a, 0x06, 0xe2, 0xc8, 0x27, 0xd3, 0x7e, 0x32, 0x1c, 0xdf, 0x6a,
	0x7b, 0x21, 0xed, 0x14, 0x55, 0x7b, 0xaa, 0x5a, 0x54, 0x50, 0xec, 0xf5, 0xaa, 0xce, 0x1a, 0x48,
	0xbf, 0x31, 0x7e, 0xfc, 0xcf, 0x94, 0x78, 0xc1, 0xf7, 0x4c, 0x03, 0x25, 0x4e, 0x41, 0x11, 0x36,
	0x08, 0x36, 0x66, 0x49, 0x34, 0xde, 0x2d, 0x1e, 0x9b, 0x06, 0xde, 0xdd, 0x8a, 0x0f, 0x06, 0x8a,
	0xfe, 0x67, 0xa0, 0xf4, 0x53, 0x7f, 0x35, 0x01, 0x10, 0x82, 0x0f, 0x94, 0x5c, 0xc2, 0xe6, 0x1a,
	0x7f, 0x16, 0x13, 0xbe, 0x5d, 0xeb, 0x95, 0x22, 0xb0, 0x71, 0x94, 0x44, 0xe3, 0xe1, 0xc9, 0xc1,
	0x5f, 0xc5, 0xc1, 0x2a, 0x6e, 0x98, 0xf4, 0x3b, 0xe3, 0xe2, 0xa1, 0x2f, 0x8e, 0x6f, 0xdf, 0xe8,
	0x41, 0x7f, 0xc3, 0xe0, 0xe6, 0x41, 0x1e, 0x12, 0xcf, 0x38, 0xaf, 0xae, 0x08, 0x36, 0x40, 0x94,
	0xb0, 0xf1, 0xa0, 0xd8, 0xbd, 0x56, 0x82, 0xfd, 0x9c, 0x6f, 0xe8, 0xd2, 0x4a, 0x82, 0x78, 0xcb,
	0xfb, 0x3c, 0x48, 0x85, 0x24, 0x10, 0x4f, 0xf9, 0x4e, 0x85, 0x1b, 0x77, 0xe0, 0xdd, 0xed, 0x0a,
	0xbd, 0xf5, 0xaa, 0xe5, 0x47, 0x9d, 0x32, 0xb6, 0xec, 0xad, 0x29, 0x7c, 0x86, 0x12, 0x2e, 0x49,
	0x1c, 0x66, 0xef, 0x57, 0x0a, 0x0d, 0xd8, 0x8f, 0x40, 0x17, 0xda, 0xce, 0xdd, 0x39, 0x28, 0xa7,
	0xad, 0x8b, 0x77, 0x12, 0x76, 0x6f, 0x91, 0x21, 0x55, 0x1c, 0x5e, 0xb7, 0xdd, 0x57, 0x4f, 0x2f,
	0xe9, 0xf5, 0x97, 0x9f, 0xeb, 0x11, 0xfb, 0xb5, 0x1e, 0xb1, 0xdf, 0xeb, 0x11, 0xfb, 0x5c, 0xb4,
	0x48, 0x59, 0x17, 0xba, 0x33, 0x05, 0x94, 0x63, 0x0d, 0x15, 0xd8, 0x36, 0x9f, 0x81, 0x5c, 0xd0,
	0xac, 0xd2, 0x34, 0x41, 0xd5, 0x82, 0xa3, 0x49, 0x47, 0x38, 0x51, 0x92, 0xf0, 0x2b, 0xe4, 0x66,
	0xde, 0xe6, 0x1d, 0x61, 0x2e, 0xa7, 0xd2, 0x10, 0x58, 0x97, 0x97, 0xdd, 0x4a, 0x69, 0x97, 0xbb,
	0x7a, 0x06, 0x4b, 0xf9, 0x27, 0x00, 0x00, 0xff, 0xff, 0x21, 0xc3, 0x44, 0x18, 0xfc, 0x02, 0x00,
	0x00,
}

func (m *PacketStatistics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketStatistics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PacketStatistics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PacketStatsPfe) > 0 {
		for iNdEx := len(m.PacketStatsPfe) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PacketStatsPfe[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPacketStats(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.PacketStats) > 0 {
		for iNdEx := len(m.PacketStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PacketStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPacketStats(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PacketStatsPacketForwardingEngine) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketStatsPacketForwardingEngine) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PacketStatsPacketForwardingEngine) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PacketStats) > 0 {
		for iNdEx := len(m.PacketStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PacketStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPacketStats(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.PfeIdentifier == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("pfe_identifier")
	} else {
		i -= len(*m.PfeIdentifier)
		copy(dAtA[i:], *m.PfeIdentifier)
		i = encodeVarintPacketStats(dAtA, i, uint64(len(*m.PfeIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PacketStatsClass) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketStatsClass) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PacketStatsClass) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Counter == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("counter")
	} else {
		{
			size, err := m.Counter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacketStats(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Name == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	} else {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintPacketStats(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PacketStatsCounter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketStatsCounter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PacketStatsCounter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BitRate != nil {
		i = encodeVarintPacketStats(dAtA, i, uint64(*m.BitRate))
		i--
		dAtA[i] = 0x20
	}
	if m.PacketRate != nil {
		i = encodeVarintPacketStats(dAtA, i, uint64(*m.PacketRate))
		i--
		dAtA[i] = 0x18
	}
	if m.ByteCount != nil {
		i = encodeVarintPacketStats(dAtA, i, uint64(*m.ByteCount))
		i--
		dAtA[i] = 0x10
	}
	if m.PacketCount == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("packet_count")
	} else {
		i = encodeVarintPacketStats(dAtA, i, uint64(*m.PacketCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPacketStats(dAtA []byte, offset int, v uint64) int {
	offset -= sovPacketStats(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PacketStatistics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PacketStats) > 0 {
		for _, e := range m.PacketStats {
			l = e.Size()
			n += 1 + l + sovPacketStats(uint64(l))
		}
	}
	if len(m.PacketStatsPfe) > 0 {
		for _, e := range m.PacketStatsPfe {
			l = e.Size()
			n += 1 + l + sovPacketStats(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PacketStatsPacketForwardingEngine) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PfeIdentifier != nil {
		l = len(*m.PfeIdentifier)
		n += 1 + l + sovPacketStats(uint64(l))
	}
	if len(m.PacketStats) > 0 {
		for _, e := range m.PacketStats {
			l = e.Size()
			n += 1 + l + sovPacketStats(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PacketStatsClass) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovPacketStats(uint64(l))
	}
	if m.Counter != nil {
		l = m.Counter.Size()
		n += 1 + l + sovPacketStats(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PacketStatsCounter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PacketCount != nil {
		n += 1 + sovPacketStats(uint64(*m.PacketCount))
	}
	if m.ByteCount != nil {
		n += 1 + sovPacketStats(uint64(*m.ByteCount))
	}
	if m.PacketRate != nil {
		n += 1 + sovPacketStats(uint64(*m.PacketRate))
	}
	if m.BitRate != nil {
		n += 1 + sovPacketStats(uint64(*m.BitRate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPacketStats(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPacketStats(x uint64) (n int) {
	return sovPacketStats(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PacketStatistics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketStatistics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketStatistics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PacketStats = append(m.PacketStats, &PacketStatsClass{})
			if err := m.PacketStats[len(m.PacketStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketStatsPfe", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PacketStatsPfe = append(m.PacketStatsPfe, &PacketStatsPacketForwardingEngine{})
			if err := m.PacketStatsPfe[len(m.PacketStatsPfe)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacketStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacketStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacketStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PacketStatsPacketForwardingEngine) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketStatsPacketForwardingEngine: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketStatsPacketForwardingEngine: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PfeIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacketStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacketStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PfeIdentifier = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PacketStats = append(m.PacketStats, &PacketStatsClass{})
			if err := m.PacketStats[len(m.PacketStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacketStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacketStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacketStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("pfe_identifier")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PacketStatsClass) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketStatsClass: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketStatsClass: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacketStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacketStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Counter == nil {
				m.Counter = &PacketStatsCounter{}
			}
			if err := m.Counter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipPacketStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacketStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacketStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("counter")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PacketStatsCounter) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketStatsCounter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketStatsCounter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PacketCount = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByteCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ByteCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PacketRate = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BitRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BitRate = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPacketStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacketStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacketStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("packet_count")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacketStats(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacketStats
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacketStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacketStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacketStats
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPacketStats
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPacketStats
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPacketStats        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacketStats          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPacketStats = fmt.Errorf("proto: unexpected end of group")
)
