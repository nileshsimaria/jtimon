// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pbj.proto

package schema

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FieldType int32

const (
	FieldType_FT_DEFAULT  FieldType = 0
	FieldType_FT_CALLBACK FieldType = 1
	FieldType_FT_POINTER  FieldType = 4
	FieldType_FT_STATIC   FieldType = 2
	FieldType_FT_IGNORE   FieldType = 3
)

var FieldType_name = map[int32]string{
	0: "FT_DEFAULT",
	1: "FT_CALLBACK",
	4: "FT_POINTER",
	2: "FT_STATIC",
	3: "FT_IGNORE",
}

var FieldType_value = map[string]int32{
	"FT_DEFAULT":  0,
	"FT_CALLBACK": 1,
	"FT_POINTER":  4,
	"FT_STATIC":   2,
	"FT_IGNORE":   3,
}

func (x FieldType) Enum() *FieldType {
	p := new(FieldType)
	*p = x
	return p
}

func (x FieldType) String() string {
	return proto.EnumName(FieldType_name, int32(x))
}

func (x *FieldType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FieldType_value, data, "FieldType")
	if err != nil {
		return err
	}
	*x = FieldType(value)
	return nil
}

func (FieldType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_adec4434a342376e, []int{0}
}

// This is the inner options message, which basically defines options for
// a field. When it is used in message or file scope, it applies to all
// fields.
type PBJOptions struct {
	// Allocated size for 'bytes' and 'string' fields.
	MaxSize *int32 `protobuf:"varint,1,opt,name=max_size,json=maxSize" json:"max_size,omitempty"`
	// Allocated number of entries in arrays ('repeated' fields)
	MaxCount *int32 `protobuf:"varint,2,opt,name=max_count,json=maxCount" json:"max_count,omitempty"`
	// Force type of field (callback or static allocation)
	Type *FieldType `protobuf:"varint,3,opt,name=type,enum=FieldType,def=0" json:"type,omitempty"`
	// Use long names for enums, i.e. EnumName_EnumValue.
	LongNames *bool `protobuf:"varint,4,opt,name=long_names,json=longNames,def=1" json:"long_names,omitempty"`
	// Add 'packed' attribute to generated structs.
	// Note: this cannot be used on CPUs that break on unaligned
	// accesses to variables.
	PackedStruct *bool `protobuf:"varint,5,opt,name=packed_struct,json=packedStruct,def=0" json:"packed_struct,omitempty"`
	// Skip this message
	SkipMessage          *bool    `protobuf:"varint,6,opt,name=skip_message,json=skipMessage,def=0" json:"skip_message,omitempty"`
	CacheSize            *bool    `protobuf:"varint,7,opt,name=cache_size,json=cacheSize,def=1" json:"cache_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PBJOptions) Reset()         { *m = PBJOptions{} }
func (m *PBJOptions) String() string { return proto.CompactTextString(m) }
func (*PBJOptions) ProtoMessage()    {}
func (*PBJOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_adec4434a342376e, []int{0}
}
func (m *PBJOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PBJOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PBJOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PBJOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBJOptions.Merge(m, src)
}
func (m *PBJOptions) XXX_Size() int {
	return m.Size()
}
func (m *PBJOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_PBJOptions.DiscardUnknown(m)
}

var xxx_messageInfo_PBJOptions proto.InternalMessageInfo

const Default_PBJOptions_Type FieldType = FieldType_FT_DEFAULT
const Default_PBJOptions_LongNames bool = true
const Default_PBJOptions_PackedStruct bool = false
const Default_PBJOptions_SkipMessage bool = false
const Default_PBJOptions_CacheSize bool = true

func (m *PBJOptions) GetMaxSize() int32 {
	if m != nil && m.MaxSize != nil {
		return *m.MaxSize
	}
	return 0
}

func (m *PBJOptions) GetMaxCount() int32 {
	if m != nil && m.MaxCount != nil {
		return *m.MaxCount
	}
	return 0
}

func (m *PBJOptions) GetType() FieldType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_PBJOptions_Type
}

func (m *PBJOptions) GetLongNames() bool {
	if m != nil && m.LongNames != nil {
		return *m.LongNames
	}
	return Default_PBJOptions_LongNames
}

func (m *PBJOptions) GetPackedStruct() bool {
	if m != nil && m.PackedStruct != nil {
		return *m.PackedStruct
	}
	return Default_PBJOptions_PackedStruct
}

func (m *PBJOptions) GetSkipMessage() bool {
	if m != nil && m.SkipMessage != nil {
		return *m.SkipMessage
	}
	return Default_PBJOptions_SkipMessage
}

func (m *PBJOptions) GetCacheSize() bool {
	if m != nil && m.CacheSize != nil {
		return *m.CacheSize
	}
	return Default_PBJOptions_CacheSize
}

var E_PbjFileOption = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FileOptions)(nil),
	ExtensionType: (*PBJOptions)(nil),
	Field:         1020,
	Name:          "pbj_file_option",
	Tag:           "bytes,1020,opt,name=pbj_file_option",
	Filename:      "pbj.proto",
}

var E_PbjMessageOption = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MessageOptions)(nil),
	ExtensionType: (*PBJOptions)(nil),
	Field:         1020,
	Name:          "pbj_message_option",
	Tag:           "bytes,1020,opt,name=pbj_message_option",
	Filename:      "pbj.proto",
}

var E_PbjEnumOption = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.EnumOptions)(nil),
	ExtensionType: (*PBJOptions)(nil),
	Field:         1020,
	Name:          "pbj_enum_option",
	Tag:           "bytes,1020,opt,name=pbj_enum_option",
	Filename:      "pbj.proto",
}

var E_PbjFieldOption = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*PBJOptions)(nil),
	Field:         1020,
	Name:          "pbj_field_option",
	Tag:           "bytes,1020,opt,name=pbj_field_option",
	Filename:      "pbj.proto",
}

func init() {
	proto.RegisterEnum("FieldType", FieldType_name, FieldType_value)
	proto.RegisterType((*PBJOptions)(nil), "PBJOptions")
	proto.RegisterExtension(E_PbjFileOption)
	proto.RegisterExtension(E_PbjMessageOption)
	proto.RegisterExtension(E_PbjEnumOption)
	proto.RegisterExtension(E_PbjFieldOption)
}

func init() { proto.RegisterFile("pbj.proto", fileDescriptor_adec4434a342376e) }

var fileDescriptor_adec4434a342376e = []byte{
	// 519 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xcf, 0x6e, 0xda, 0x4c,
	0x14, 0xc5, 0x3f, 0x27, 0xf0, 0x25, 0x0c, 0x01, 0x2c, 0xaf, 0xdc, 0x7f, 0x14, 0xb5, 0x1b, 0x84,
	0x84, 0x2d, 0x65, 0xc9, 0x0e, 0x28, 0xae, 0x68, 0x29, 0x44, 0xc6, 0xd9, 0xa4, 0x0b, 0x6b, 0x6c,
	0x5f, 0xcc, 0x18, 0x7b, 0x66, 0xea, 0x19, 0x57, 0x49, 0x9e, 0xa2, 0x8f, 0xd5, 0x65, 0x1f, 0xa1,
	0xe2, 0x39, 0xba, 0xa8, 0x6c, 0x43, 0xa0, 0x6a, 0x9b, 0x2e, 0xe7, 0x9e, 0x9f, 0xce, 0x9c, 0x7b,
	0x2e, 0xaa, 0x71, 0x2f, 0x32, 0x78, 0xca, 0x24, 0x7b, 0xda, 0x09, 0x19, 0x0b, 0x63, 0x30, 0x8b,
	0x97, 0x97, 0xad, 0xcc, 0x00, 0x84, 0x9f, 0x12, 0x2e, 0x59, 0x5a, 0x12, 0xaf, 0xbe, 0x9c, 0x20,
	0x74, 0x35, 0x7a, 0xb7, 0xe0, 0x92, 0x30, 0x2a, 0xb4, 0x27, 0xe8, 0x3c, 0xc1, 0xb7, 0xae, 0x20,
	0xf7, 0xa0, 0x2b, 0x1d, 0xa5, 0x5b, 0xb5, 0xcf, 0x12, 0x7c, 0xbb, 0x24, 0xf7, 0xa0, 0x3d, 0x43,
	0xb5, 0x5c, 0xf2, 0x59, 0x46, 0xa5, 0x7e, 0x52, 0x68, 0x39, 0x3b, 0xce, 0xdf, 0x5a, 0x0f, 0x55,
	0xe4, 0x1d, 0x07, 0xfd, 0xb4, 0xa3, 0x74, 0x9b, 0x97, 0xc8, 0xb0, 0x08, 0xc4, 0x81, 0x73, 0xc7,
	0x61, 0x80, 0x2c, 0xc7, 0x7d, 0x33, 0xb1, 0x86, 0xd7, 0x33, 0xc7, 0x2e, 0x18, 0xed, 0x35, 0x42,
	0x31, 0xa3, 0xa1, 0x4b, 0x71, 0x02, 0x42, 0xaf, 0x74, 0x94, 0xee, 0xf9, 0xa0, 0x22, 0xd3, 0x0c,
	0xec, 0x5a, 0x3e, 0x9f, 0xe7, 0x63, 0xad, 0x87, 0x1a, 0x1c, 0xfb, 0x1b, 0x08, 0x5c, 0x21, 0xd3,
	0xcc, 0x97, 0x7a, 0xb5, 0xe0, 0xaa, 0x2b, 0x1c, 0x0b, 0xb0, 0x2f, 0x4a, 0x6d, 0x59, 0x48, 0x5a,
	0x17, 0x5d, 0x88, 0x0d, 0xe1, 0x6e, 0x02, 0x42, 0xe0, 0x10, 0xf4, 0xff, 0x8f, 0xd1, 0x7a, 0x2e,
	0x7d, 0x28, 0x95, 0xfc, 0x6b, 0x1f, 0xfb, 0x6b, 0x28, 0x17, 0x3c, 0x3b, 0xfe, 0xba, 0x98, 0xe7,
	0x8b, 0xf6, 0x6e, 0x50, 0xed, 0x21, 0xbe, 0xd6, 0x44, 0x47, 0x0b, 0xa8, 0xff, 0x69, 0x2d, 0x54,
	0xb7, 0x1c, 0x77, 0x3c, 0x9c, 0xcd, 0x46, 0xc3, 0xf1, 0x7b, 0x55, 0xd9, 0x01, 0x57, 0x8b, 0xe9,
	0xdc, 0x99, 0xd8, 0x6a, 0x45, 0x6b, 0xa0, 0x9a, 0xe5, 0xb8, 0x4b, 0x67, 0xe8, 0x4c, 0xc7, 0xea,
	0xc9, 0xee, 0x39, 0x7d, 0x3b, 0x5f, 0xd8, 0x13, 0xf5, 0x74, 0x60, 0xa3, 0x16, 0xf7, 0x22, 0x77,
	0x45, 0x62, 0x70, 0x59, 0xd1, 0xb9, 0xf6, 0xdc, 0x28, 0x8f, 0x64, 0xec, 0x8f, 0x64, 0x58, 0x24,
	0x86, 0xdd, 0x41, 0xf4, 0x1f, 0x79, 0xc8, 0xfa, 0x65, 0xdd, 0x38, 0x1c, 0xc9, 0x6e, 0x70, 0x2f,
	0x3a, 0x30, 0x83, 0x8f, 0x48, 0xcb, 0x3d, 0x77, 0xdb, 0xef, 0x6d, 0x5f, 0xfe, 0x66, 0xbb, 0x2b,
	0xe1, 0x31, 0x67, 0x95, 0x7b, 0xd1, 0x2f, 0xd8, 0x3e, 0x30, 0xd0, 0x2c, 0xf9, 0x7b, 0xe0, 0x09,
	0xcd, 0x92, 0x7f, 0x05, 0x3e, 0x30, 0x83, 0x6b, 0xa4, 0x96, 0x25, 0x40, 0x1c, 0xec, 0x4d, 0x5f,
	0xfc, 0xa1, 0x05, 0x88, 0x83, 0xc7, 0x5c, 0x9b, 0x45, 0x0d, 0x0f, 0xd0, 0xe8, 0xd3, 0xd7, 0x6d,
	0x5b, 0xf9, 0xb6, 0x6d, 0x2b, 0xdf, 0xb7, 0x6d, 0x05, 0xb5, 0x28, 0x48, 0x23, 0xca, 0x28, 0xe1,
	0x90, 0x1a, 0xdc, 0x8b, 0x6e, 0xec, 0x90, 0x1c, 0x06, 0x14, 0xa4, 0x49, 0x7c, 0xf0, 0x20, 0x0d,
	0xcd, 0x35, 0xe0, 0x58, 0xae, 0x3d, 0x26, 0xfb, 0x84, 0x86, 0x20, 0x64, 0x3f, 0x92, 0xa4, 0x4f,
	0xb1, 0x24, 0x9f, 0xc1, 0xe4, 0x9b, 0xd0, 0x8c, 0x24, 0x31, 0x71, 0x80, 0xb9, 0x84, 0x54, 0x98,
	0x6e, 0x94, 0x51, 0x26, 0x4c, 0xe1, 0xaf, 0x21, 0xc1, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x4b,
	0x62, 0x81, 0x24, 0x6b, 0x03, 0x00, 0x00,
}

func (m *PBJOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PBJOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PBJOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CacheSize != nil {
		i--
		if *m.CacheSize {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.SkipMessage != nil {
		i--
		if *m.SkipMessage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.PackedStruct != nil {
		i--
		if *m.PackedStruct {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.LongNames != nil {
		i--
		if *m.LongNames {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Type != nil {
		i = encodeVarintPbj(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxCount != nil {
		i = encodeVarintPbj(dAtA, i, uint64(*m.MaxCount))
		i--
		dAtA[i] = 0x10
	}
	if m.MaxSize != nil {
		i = encodeVarintPbj(dAtA, i, uint64(*m.MaxSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPbj(dAtA []byte, offset int, v uint64) int {
	offset -= sovPbj(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PBJOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxSize != nil {
		n += 1 + sovPbj(uint64(*m.MaxSize))
	}
	if m.MaxCount != nil {
		n += 1 + sovPbj(uint64(*m.MaxCount))
	}
	if m.Type != nil {
		n += 1 + sovPbj(uint64(*m.Type))
	}
	if m.LongNames != nil {
		n += 2
	}
	if m.PackedStruct != nil {
		n += 2
	}
	if m.SkipMessage != nil {
		n += 2
	}
	if m.CacheSize != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPbj(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPbj(x uint64) (n int) {
	return sovPbj(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PBJOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbj
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PBJOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PBJOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbj
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxSize = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbj
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v FieldType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbj
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= FieldType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongNames", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbj
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.LongNames = &b
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackedStruct", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbj
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.PackedStruct = &b
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipMessage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbj
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.SkipMessage = &b
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheSize", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbj
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.CacheSize = &b
		default:
			iNdEx = preIndex
			skippy, err := skipPbj(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbj
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPbj
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPbj(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPbj
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPbj
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPbj
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPbj
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPbj
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPbj
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPbj        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPbj          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPbj = fmt.Errorf("proto: unexpected end of group")
)
