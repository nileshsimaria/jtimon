// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pfe_ddos_oc.proto

package schema

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DdosStats struct {
	Group                []*DdosStatsGroupList `protobuf:"bytes,152,rep,name=group" json:"group,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *DdosStats) Reset()         { *m = DdosStats{} }
func (m *DdosStats) String() string { return proto.CompactTextString(m) }
func (*DdosStats) ProtoMessage()    {}
func (*DdosStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6020d633a11d82b, []int{0}
}
func (m *DdosStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DdosStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DdosStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DdosStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DdosStats.Merge(m, src)
}
func (m *DdosStats) XXX_Size() int {
	return m.Size()
}
func (m *DdosStats) XXX_DiscardUnknown() {
	xxx_messageInfo_DdosStats.DiscardUnknown(m)
}

var xxx_messageInfo_DdosStats proto.InternalMessageInfo

func (m *DdosStats) GetGroup() []*DdosStatsGroupList {
	if m != nil {
		return m.Group
	}
	return nil
}

type DdosStatsGroupList struct {
	GroupName            *string                              `protobuf:"bytes,153,opt,name=group_name,json=groupName" json:"group_name,omitempty"`
	GroupId              *uint32                              `protobuf:"varint,154,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	ProtocolStats        *DdosStatsGroupListProtocolStatsType `protobuf:"bytes,155,opt,name=protocol_stats,json=protocolStats" json:"protocol_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *DdosStatsGroupList) Reset()         { *m = DdosStatsGroupList{} }
func (m *DdosStatsGroupList) String() string { return proto.CompactTextString(m) }
func (*DdosStatsGroupList) ProtoMessage()    {}
func (*DdosStatsGroupList) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6020d633a11d82b, []int{0, 0}
}
func (m *DdosStatsGroupList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DdosStatsGroupList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DdosStatsGroupList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DdosStatsGroupList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DdosStatsGroupList.Merge(m, src)
}
func (m *DdosStatsGroupList) XXX_Size() int {
	return m.Size()
}
func (m *DdosStatsGroupList) XXX_DiscardUnknown() {
	xxx_messageInfo_DdosStatsGroupList.DiscardUnknown(m)
}

var xxx_messageInfo_DdosStatsGroupList proto.InternalMessageInfo

func (m *DdosStatsGroupList) GetGroupName() string {
	if m != nil && m.GroupName != nil {
		return *m.GroupName
	}
	return ""
}

func (m *DdosStatsGroupList) GetGroupId() uint32 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *DdosStatsGroupList) GetProtocolStats() *DdosStatsGroupListProtocolStatsType {
	if m != nil {
		return m.ProtocolStats
	}
	return nil
}

type DdosStatsGroupListProtocolStatsType struct {
	Protocol             []*DdosStatsGroupListProtocolStatsTypeProtocolList `protobuf:"bytes,156,rep,name=protocol" json:"protocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_unrecognized     []byte                                             `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *DdosStatsGroupListProtocolStatsType) Reset()         { *m = DdosStatsGroupListProtocolStatsType{} }
func (m *DdosStatsGroupListProtocolStatsType) String() string { return proto.CompactTextString(m) }
func (*DdosStatsGroupListProtocolStatsType) ProtoMessage()    {}
func (*DdosStatsGroupListProtocolStatsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6020d633a11d82b, []int{0, 0, 0}
}
func (m *DdosStatsGroupListProtocolStatsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DdosStatsGroupListProtocolStatsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DdosStatsGroupListProtocolStatsType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DdosStatsGroupListProtocolStatsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DdosStatsGroupListProtocolStatsType.Merge(m, src)
}
func (m *DdosStatsGroupListProtocolStatsType) XXX_Size() int {
	return m.Size()
}
func (m *DdosStatsGroupListProtocolStatsType) XXX_DiscardUnknown() {
	xxx_messageInfo_DdosStatsGroupListProtocolStatsType.DiscardUnknown(m)
}

var xxx_messageInfo_DdosStatsGroupListProtocolStatsType proto.InternalMessageInfo

func (m *DdosStatsGroupListProtocolStatsType) GetProtocol() []*DdosStatsGroupListProtocolStatsTypeProtocolList {
	if m != nil {
		return m.Protocol
	}
	return nil
}

type DdosStatsGroupListProtocolStatsTypeProtocolList struct {
	ProtocolName         *string                                                         `protobuf:"bytes,157,opt,name=protocol_name,json=protocolName" json:"protocol_name,omitempty"`
	ProtocolId           *uint32                                                         `protobuf:"varint,158,opt,name=protocol_id,json=protocolId" json:"protocol_id,omitempty"`
	LocaleStats          *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsType `protobuf:"bytes,159,opt,name=locale_stats,json=localeStats" json:"locale_stats,omitempty"`
	FlowStats            *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsType   `protobuf:"bytes,161,opt,name=flow_stats,json=flowStats" json:"flow_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                        `json:"-"`
	XXX_unrecognized     []byte                                                          `json:"-"`
	XXX_sizecache        int32                                                           `json:"-"`
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolList) Reset() {
	*m = DdosStatsGroupListProtocolStatsTypeProtocolList{}
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolList) String() string {
	return proto.CompactTextString(m)
}
func (*DdosStatsGroupListProtocolStatsTypeProtocolList) ProtoMessage() {}
func (*DdosStatsGroupListProtocolStatsTypeProtocolList) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6020d633a11d82b, []int{0, 0, 0, 0}
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DdosStatsGroupListProtocolStatsTypeProtocolList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DdosStatsGroupListProtocolStatsTypeProtocolList.Merge(m, src)
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolList) XXX_Size() int {
	return m.Size()
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolList) XXX_DiscardUnknown() {
	xxx_messageInfo_DdosStatsGroupListProtocolStatsTypeProtocolList.DiscardUnknown(m)
}

var xxx_messageInfo_DdosStatsGroupListProtocolStatsTypeProtocolList proto.InternalMessageInfo

func (m *DdosStatsGroupListProtocolStatsTypeProtocolList) GetProtocolName() string {
	if m != nil && m.ProtocolName != nil {
		return *m.ProtocolName
	}
	return ""
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolList) GetProtocolId() uint32 {
	if m != nil && m.ProtocolId != nil {
		return *m.ProtocolId
	}
	return 0
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolList) GetLocaleStats() *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsType {
	if m != nil {
		return m.LocaleStats
	}
	return nil
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolList) GetFlowStats() *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsType {
	if m != nil {
		return m.FlowStats
	}
	return nil
}

type DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsType struct {
	Locale               []*DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList `protobuf:"bytes,160,rep,name=locale" json:"locale,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                    `json:"-"`
	XXX_unrecognized     []byte                                                                      `json:"-"`
	XXX_sizecache        int32                                                                       `json:"-"`
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsType) Reset() {
	*m = DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsType{}
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsType) String() string {
	return proto.CompactTextString(m)
}
func (*DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsType) ProtoMessage() {}
func (*DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6020d633a11d82b, []int{0, 0, 0, 0, 0}
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsType.Merge(m, src)
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsType) XXX_Size() int {
	return m.Size()
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsType) XXX_DiscardUnknown() {
	xxx_messageInfo_DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsType.DiscardUnknown(m)
}

var xxx_messageInfo_DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsType proto.InternalMessageInfo

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsType) GetLocale() []*DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList {
	if m != nil {
		return m.Locale
	}
	return nil
}

type DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList struct {
	Location                 *string                                                                                `protobuf:"bytes,162,opt,name=location" json:"location,omitempty"`
	Received                 *uint64                                                                                `protobuf:"varint,163,opt,name=received" json:"received,omitempty"`
	ArrivedPolicer           *uint64                                                                                `protobuf:"varint,164,opt,name=arrived_policer,json=arrivedPolicer" json:"arrived_policer,omitempty"`
	DroppedIndividualPolicer *uint64                                                                                `protobuf:"varint,165,opt,name=dropped_individual_policer,json=droppedIndividualPolicer" json:"dropped_individual_policer,omitempty"`
	DroppedAggregatePolicer  *uint64                                                                                `protobuf:"varint,166,opt,name=dropped_aggregate_policer,json=droppedAggregatePolicer" json:"dropped_aggregate_policer,omitempty"`
	DroppedIndividualFlow    *uint64                                                                                `protobuf:"varint,167,opt,name=dropped_individual_flow,json=droppedIndividualFlow" json:"dropped_individual_flow,omitempty"`
	DroppedAggregateFlow     *uint64                                                                                `protobuf:"varint,168,opt,name=dropped_aggregate_flow,json=droppedAggregateFlow" json:"dropped_aggregate_flow,omitempty"`
	TotalDropped             *uint64                                                                                `protobuf:"varint,169,opt,name=total_dropped,json=totalDropped" json:"total_dropped,omitempty"`
	FinalPassed              *uint64                                                                                `protobuf:"varint,170,opt,name=final_passed,json=finalPassed" json:"final_passed,omitempty"`
	ArrivalRate              *uint64                                                                                `protobuf:"varint,171,opt,name=arrival_rate,json=arrivalRate" json:"arrival_rate,omitempty"`
	MaxArrivalRate           *uint64                                                                                `protobuf:"varint,173,opt,name=max_arrival_rate,json=maxArrivalRate" json:"max_arrival_rate,omitempty"`
	PassRate                 *uint64                                                                                `protobuf:"varint,172,opt,name=pass_rate,json=passRate" json:"pass_rate,omitempty"`
	Violation                *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType `protobuf:"bytes,174,opt,name=violation" json:"violation,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                                                                               `json:"-"`
	XXX_unrecognized         []byte                                                                                 `json:"-"`
	XXX_sizecache            int32                                                                                  `json:"-"`
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) Reset() {
	*m = DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList{}
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) String() string {
	return proto.CompactTextString(m)
}
func (*DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) ProtoMessage() {}
func (*DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6020d633a11d82b, []int{0, 0, 0, 0, 0, 0}
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList.Merge(m, src)
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) XXX_Size() int {
	return m.Size()
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) XXX_DiscardUnknown() {
	xxx_messageInfo_DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList.DiscardUnknown(m)
}

var xxx_messageInfo_DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList proto.InternalMessageInfo

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) GetLocation() string {
	if m != nil && m.Location != nil {
		return *m.Location
	}
	return ""
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) GetReceived() uint64 {
	if m != nil && m.Received != nil {
		return *m.Received
	}
	return 0
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) GetArrivedPolicer() uint64 {
	if m != nil && m.ArrivedPolicer != nil {
		return *m.ArrivedPolicer
	}
	return 0
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) GetDroppedIndividualPolicer() uint64 {
	if m != nil && m.DroppedIndividualPolicer != nil {
		return *m.DroppedIndividualPolicer
	}
	return 0
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) GetDroppedAggregatePolicer() uint64 {
	if m != nil && m.DroppedAggregatePolicer != nil {
		return *m.DroppedAggregatePolicer
	}
	return 0
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) GetDroppedIndividualFlow() uint64 {
	if m != nil && m.DroppedIndividualFlow != nil {
		return *m.DroppedIndividualFlow
	}
	return 0
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) GetDroppedAggregateFlow() uint64 {
	if m != nil && m.DroppedAggregateFlow != nil {
		return *m.DroppedAggregateFlow
	}
	return 0
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) GetTotalDropped() uint64 {
	if m != nil && m.TotalDropped != nil {
		return *m.TotalDropped
	}
	return 0
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) GetFinalPassed() uint64 {
	if m != nil && m.FinalPassed != nil {
		return *m.FinalPassed
	}
	return 0
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) GetArrivalRate() uint64 {
	if m != nil && m.ArrivalRate != nil {
		return *m.ArrivalRate
	}
	return 0
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) GetMaxArrivalRate() uint64 {
	if m != nil && m.MaxArrivalRate != nil {
		return *m.MaxArrivalRate
	}
	return 0
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) GetPassRate() uint64 {
	if m != nil && m.PassRate != nil {
		return *m.PassRate
	}
	return 0
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) GetViolation() *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType {
	if m != nil {
		return m.Violation
	}
	return nil
}

type DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType struct {
	PolicerState              *string  `protobuf:"bytes,175,opt,name=policer_state,json=policerState" json:"policer_state,omitempty"`
	PolicerViolationCount     *uint32  `protobuf:"varint,176,opt,name=policer_violation_count,json=policerViolationCount" json:"policer_violation_count,omitempty"`
	PolicerViolationStartTime *uint64  `protobuf:"varint,177,opt,name=policer_violation_start_time,json=policerViolationStartTime" json:"policer_violation_start_time,omitempty"`
	PolicerViolationEndTime   *uint64  `protobuf:"varint,178,opt,name=policer_violation_end_time,json=policerViolationEndTime" json:"policer_violation_end_time,omitempty"`
	PolicerViolationDuration  *uint64  `protobuf:"varint,179,opt,name=policer_violation_duration,json=policerViolationDuration" json:"policer_violation_duration,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType) Reset() {
	*m = DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType{}
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType) String() string {
	return proto.CompactTextString(m)
}
func (*DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType) ProtoMessage() {
}
func (*DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6020d633a11d82b, []int{0, 0, 0, 0, 0, 0, 0}
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType.Merge(m, src)
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType) XXX_Size() int {
	return m.Size()
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType) XXX_DiscardUnknown() {
	xxx_messageInfo_DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType.DiscardUnknown(m)
}

var xxx_messageInfo_DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType proto.InternalMessageInfo

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType) GetPolicerState() string {
	if m != nil && m.PolicerState != nil {
		return *m.PolicerState
	}
	return ""
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType) GetPolicerViolationCount() uint32 {
	if m != nil && m.PolicerViolationCount != nil {
		return *m.PolicerViolationCount
	}
	return 0
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType) GetPolicerViolationStartTime() uint64 {
	if m != nil && m.PolicerViolationStartTime != nil {
		return *m.PolicerViolationStartTime
	}
	return 0
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType) GetPolicerViolationEndTime() uint64 {
	if m != nil && m.PolicerViolationEndTime != nil {
		return *m.PolicerViolationEndTime
	}
	return 0
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType) GetPolicerViolationDuration() uint64 {
	if m != nil && m.PolicerViolationDuration != nil {
		return *m.PolicerViolationDuration
	}
	return 0
}

type DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsType struct {
	Flow                 []*DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList `protobuf:"bytes,180,rep,name=flow" json:"flow,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                `json:"-"`
	XXX_unrecognized     []byte                                                                  `json:"-"`
	XXX_sizecache        int32                                                                   `json:"-"`
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsType) Reset() {
	*m = DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsType{}
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsType) String() string {
	return proto.CompactTextString(m)
}
func (*DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsType) ProtoMessage() {}
func (*DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6020d633a11d82b, []int{0, 0, 0, 0, 1}
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsType.Merge(m, src)
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsType) XXX_Size() int {
	return m.Size()
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsType) XXX_DiscardUnknown() {
	xxx_messageInfo_DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsType.DiscardUnknown(m)
}

var xxx_messageInfo_DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsType proto.InternalMessageInfo

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsType) GetFlow() []*DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList {
	if m != nil {
		return m.Flow
	}
	return nil
}

type DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList struct {
	FlowType             *string                                                                                `protobuf:"bytes,181,opt,name=flow_type,json=flowType" json:"flow_type,omitempty"`
	FlowCount            *uint64                                                                                `protobuf:"varint,182,opt,name=flow_count,json=flowCount" json:"flow_count,omitempty"`
	FlowInfoStats        *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsType `protobuf:"bytes,183,opt,name=flow_info_stats,json=flowInfoStats" json:"flow_info_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                               `json:"-"`
	XXX_unrecognized     []byte                                                                                 `json:"-"`
	XXX_sizecache        int32                                                                                  `json:"-"`
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList) Reset() {
	*m = DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList{}
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList) String() string {
	return proto.CompactTextString(m)
}
func (*DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList) ProtoMessage() {}
func (*DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6020d633a11d82b, []int{0, 0, 0, 0, 1, 0}
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList.Merge(m, src)
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList) XXX_Size() int {
	return m.Size()
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList) XXX_DiscardUnknown() {
	xxx_messageInfo_DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList.DiscardUnknown(m)
}

var xxx_messageInfo_DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList proto.InternalMessageInfo

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList) GetFlowType() string {
	if m != nil && m.FlowType != nil {
		return *m.FlowType
	}
	return ""
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList) GetFlowCount() uint64 {
	if m != nil && m.FlowCount != nil {
		return *m.FlowCount
	}
	return 0
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList) GetFlowInfoStats() *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsType {
	if m != nil {
		return m.FlowInfoStats
	}
	return nil
}

type DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsType struct {
	FlowInfo             []*DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList `protobuf:"bytes,184,rep,name=flow_info,json=flowInfo" json:"flow_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                                             `json:"-"`
	XXX_unrecognized     []byte                                                                                               `json:"-"`
	XXX_sizecache        int32                                                                                                `json:"-"`
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsType) Reset() {
	*m = DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsType{}
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsType) String() string {
	return proto.CompactTextString(m)
}
func (*DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsType) ProtoMessage() {
}
func (*DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6020d633a11d82b, []int{0, 0, 0, 0, 1, 0, 0}
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsType.Merge(m, src)
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsType) XXX_Size() int {
	return m.Size()
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsType) XXX_DiscardUnknown() {
	xxx_messageInfo_DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsType.DiscardUnknown(m)
}

var xxx_messageInfo_DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsType proto.InternalMessageInfo

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsType) GetFlowInfo() []*DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList {
	if m != nil {
		return m.FlowInfo
	}
	return nil
}

type DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList struct {
	Ifl                  *uint64  `protobuf:"varint,185,opt,name=ifl" json:"ifl,omitempty"`
	TimeFound            *uint64  `protobuf:"varint,186,opt,name=time_found,json=timeFound" json:"time_found,omitempty"`
	TimeLastViolated     *uint64  `protobuf:"varint,187,opt,name=time_last_violated,json=timeLastViolated" json:"time_last_violated,omitempty"`
	Rate                 *uint64  `protobuf:"varint,188,opt,name=rate" json:"rate,omitempty"`
	Packets              *uint64  `protobuf:"varint,189,opt,name=packets" json:"packets,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList) Reset() {
	*m = DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList{}
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList) String() string {
	return proto.CompactTextString(m)
}
func (*DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList) ProtoMessage() {
}
func (*DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6020d633a11d82b, []int{0, 0, 0, 0, 1, 0, 0, 0}
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList.Merge(m, src)
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList) XXX_Size() int {
	return m.Size()
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList) XXX_DiscardUnknown() {
	xxx_messageInfo_DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList.DiscardUnknown(m)
}

var xxx_messageInfo_DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList proto.InternalMessageInfo

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList) GetIfl() uint64 {
	if m != nil && m.Ifl != nil {
		return *m.Ifl
	}
	return 0
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList) GetTimeFound() uint64 {
	if m != nil && m.TimeFound != nil {
		return *m.TimeFound
	}
	return 0
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList) GetTimeLastViolated() uint64 {
	if m != nil && m.TimeLastViolated != nil {
		return *m.TimeLastViolated
	}
	return 0
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList) GetRate() uint64 {
	if m != nil && m.Rate != nil {
		return *m.Rate
	}
	return 0
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList) GetPackets() uint64 {
	if m != nil && m.Packets != nil {
		return *m.Packets
	}
	return 0
}

var E_JnprDdosStatsExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*DdosStats)(nil),
	Field:         126,
	Name:          "jnpr_ddos_stats_ext",
	Tag:           "bytes,126,opt,name=jnpr_ddos_stats_ext",
	Filename:      "pfe_ddos_oc.proto",
}

func init() {
	proto.RegisterType((*DdosStats)(nil), "ddos_stats")
	proto.RegisterType((*DdosStatsGroupList)(nil), "ddos_stats.group_list")
	proto.RegisterType((*DdosStatsGroupListProtocolStatsType)(nil), "ddos_stats.group_list.protocol_stats_type")
	proto.RegisterType((*DdosStatsGroupListProtocolStatsTypeProtocolList)(nil), "ddos_stats.group_list.protocol_stats_type.protocol_list")
	proto.RegisterType((*DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsType)(nil), "ddos_stats.group_list.protocol_stats_type.protocol_list.locale_stats_type")
	proto.RegisterType((*DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList)(nil), "ddos_stats.group_list.protocol_stats_type.protocol_list.locale_stats_type.locale_list")
	proto.RegisterType((*DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType)(nil), "ddos_stats.group_list.protocol_stats_type.protocol_list.locale_stats_type.locale_list.violation_type")
	proto.RegisterType((*DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsType)(nil), "ddos_stats.group_list.protocol_stats_type.protocol_list.flow_stats_type")
	proto.RegisterType((*DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList)(nil), "ddos_stats.group_list.protocol_stats_type.protocol_list.flow_stats_type.flow_list")
	proto.RegisterType((*DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsType)(nil), "ddos_stats.group_list.protocol_stats_type.protocol_list.flow_stats_type.flow_list.flow_info_stats_type")
	proto.RegisterType((*DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList)(nil), "ddos_stats.group_list.protocol_stats_type.protocol_list.flow_stats_type.flow_list.flow_info_stats_type.flow_info_list")
	proto.RegisterExtension(E_JnprDdosStatsExt)
}

func init() { proto.RegisterFile("pfe_ddos_oc.proto", fileDescriptor_e6020d633a11d82b) }

var fileDescriptor_e6020d633a11d82b = []byte{
	// 1041 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0x49, 0x6f, 0x1c, 0xc5,
	0x17, 0x57, 0x3b, 0xf6, 0xdf, 0x33, 0x6f, 0x6c, 0xc7, 0x2e, 0x27, 0x71, 0xb9, 0xff, 0x91, 0x65,
	0x19, 0x90, 0x0c, 0xc8, 0x3d, 0x52, 0x24, 0x04, 0x02, 0x22, 0x25, 0xc1, 0x89, 0x70, 0x84, 0xa2,
	0xa8, 0x1d, 0x7c, 0xe0, 0xd2, 0x54, 0xa6, 0x6b, 0xda, 0x65, 0xf7, 0x74, 0xb5, 0xba, 0x6b, 0xc6,
	0xce, 0x85, 0x03, 0xe2, 0x03, 0x70, 0xe0, 0xc0, 0xbe, 0x43, 0x08, 0x4b, 0xd8, 0xf7, 0x20, 0x0e,
	0x5c, 0x38, 0x22, 0xc1, 0x05, 0x4e, 0xc8, 0x37, 0xbe, 0x05, 0xaa, 0x7a, 0xd5, 0x3d, 0xeb, 0x01,
	0x45, 0x86, 0xdb, 0xd4, 0x6f, 0xa9, 0x57, 0xf5, 0x7b, 0xd5, 0x6f, 0x60, 0x2e, 0x6d, 0xf2, 0x20,
	0x0c, 0x65, 0x1e, 0xc8, 0x86, 0x97, 0x66, 0x52, 0x49, 0x77, 0x5e, 0xf1, 0x98, 0xb7, 0xb8, 0xca,
	0xae, 0x05, 0x4a, 0xa6, 0x08, 0xae, 0x5c, 0x9f, 0x07, 0x30, 0xb2, 0x5c, 0x31, 0x95, 0x93, 0x35,
	0x98, 0x88, 0x32, 0xd9, 0x4e, 0xe9, 0xf3, 0xce, 0xf2, 0x91, 0xd5, 0xda, 0xa9, 0x13, 0x5e, 0x97,
	0xf4, 0x0c, 0x13, 0xc4, 0x22, 0x57, 0x3e, 0xaa, 0xdc, 0xbf, 0x08, 0x40, 0x17, 0x25, 0x77, 0x15,
	0xab, 0x84, 0xb5, 0x38, 0x7d, 0xc1, 0x59, 0x76, 0x56, 0xab, 0xe7, 0x26, 0x9e, 0x3e, 0x33, 0x56,
	0x71, 0xfc, 0xaa, 0x61, 0x2e, 0xb1, 0x16, 0x27, 0x2e, 0x54, 0x50, 0x26, 0x42, 0xfa, 0xa2, 0x16,
	0x4d, 0xfb, 0x93, 0x06, 0xd8, 0x08, 0x89, 0x0f, 0x33, 0xe6, 0x60, 0x0d, 0x19, 0x63, 0x55, 0xfa,
	0x92, 0x56, 0xd4, 0x4e, 0xdd, 0x33, 0xfa, 0x24, 0x5e, 0xbf, 0x3a, 0x50, 0xd7, 0x52, 0xee, 0x4f,
	0x17, 0xe0, 0xa6, 0xc6, 0xdc, 0x9f, 0xe6, 0x60, 0x7e, 0x84, 0x8c, 0x3c, 0x0e, 0x95, 0x02, 0xa6,
	0x2f, 0xe3, 0x7d, 0x1f, 0xf8, 0xe7, 0x55, 0xba, 0x98, 0x49, 0xa4, 0xdc, 0xca, 0xfd, 0x6d, 0x16,
	0xa6, 0xfb, 0x38, 0x72, 0x6f, 0x0f, 0x60, 0xa2, 0x79, 0xa5, 0x2f, 0x9a, 0xa9, 0x82, 0x34, 0xe9,
	0x2c, 0x43, 0xad, 0x14, 0x8b, 0x90, 0xbe, 0x8a, 0x01, 0x41, 0x81, 0x6d, 0x84, 0x24, 0x81, 0xa9,
	0x58, 0x36, 0x58, 0xcc, 0x6d, 0x42, 0xaf, 0x61, 0x42, 0x17, 0x6f, 0xf7, 0xec, 0x5e, 0xef, 0x6e,
	0x98, 0x60, 0x0d, 0x21, 0x93, 0x1f, 0xd9, 0x06, 0x68, 0xc6, 0x72, 0xcf, 0x56, 0x7b, 0x03, 0xab,
	0x3d, 0x7a, 0xdb, 0xd5, 0xba, 0x7b, 0x61, 0xad, 0xaa, 0x06, 0xb0, 0x53, 0x7f, 0x54, 0x60, 0x6e,
	0xe8, 0x30, 0x44, 0xc2, 0xff, 0x10, 0xa4, 0xaf, 0x63, 0x97, 0xb6, 0x0e, 0xef, 0xa6, 0x05, 0x62,
	0x7a, 0x68, 0xcb, 0xb8, 0xbf, 0x4e, 0x42, 0xad, 0x07, 0x27, 0x2b, 0x50, 0xd1, 0x4b, 0x25, 0x64,
	0x42, 0xdf, 0xec, 0x6b, 0x5d, 0x89, 0x93, 0xff, 0x43, 0x25, 0xe3, 0x0d, 0x2e, 0x3a, 0x3c, 0xa4,
	0x6f, 0x69, 0xcd, 0xb8, 0x5f, 0x02, 0x64, 0x15, 0x8e, 0xb2, 0x2c, 0xd3, 0x3f, 0x83, 0x54, 0xc6,
	0xa2, 0xc1, 0x33, 0xfa, 0x36, 0x6a, 0x66, 0x2c, 0x7e, 0x19, 0x61, 0x72, 0x1a, 0xdc, 0x30, 0x93,
	0x69, 0xca, 0xc3, 0x40, 0x24, 0xa1, 0xe8, 0x88, 0xb0, 0xcd, 0xe2, 0xd2, 0xf4, 0x0e, 0x9a, 0xa8,
	0x95, 0x6c, 0x94, 0x8a, 0xc2, 0xfe, 0x10, 0x2c, 0x16, 0x76, 0x16, 0x45, 0x19, 0x8f, 0x98, 0xe2,
	0xa5, 0xfb, 0x5d, 0x74, 0x2f, 0x58, 0xc5, 0xd9, 0x42, 0x50, 0x98, 0xef, 0x87, 0x85, 0x11, 0xb5,
	0x75, 0x77, 0xe8, 0x75, 0xb4, 0x1e, 0x1f, 0x2a, 0x7c, 0x21, 0x96, 0x7b, 0xe4, 0x3e, 0x38, 0x31,
	0x5c, 0xd5, 0xf8, 0xde, 0x43, 0xdf, 0xb1, 0xc1, 0x92, 0xc6, 0x76, 0x27, 0x4c, 0x2b, 0xa9, 0x58,
	0x1c, 0x58, 0x96, 0xde, 0x40, 0xf5, 0x94, 0x41, 0xd7, 0x11, 0x24, 0x2b, 0x30, 0xd5, 0x14, 0x89,
	0x0e, 0x81, 0xe5, 0x39, 0x0f, 0xe9, 0xfb, 0x28, 0xaa, 0x19, 0xf0, 0xb2, 0xc1, 0xb4, 0xc6, 0xe4,
	0xc8, 0xe2, 0x20, 0x63, 0x8a, 0xd3, 0x0f, 0xac, 0xc6, 0x82, 0x3e, 0x53, 0x9c, 0xdc, 0x0d, 0xb3,
	0x2d, 0xb6, 0x1f, 0xf4, 0xe9, 0x3e, 0xb2, 0x4d, 0x68, 0xb1, 0xfd, 0xb3, 0x3d, 0xd2, 0x93, 0x50,
	0xd5, 0xc5, 0x50, 0xf3, 0xa1, 0x6d, 0xa6, 0x46, 0x0c, 0xfb, 0x8c, 0x03, 0xd5, 0x8e, 0x90, 0x31,
	0xbe, 0x87, 0x9b, 0xf8, 0x39, 0xf0, 0x7f, 0xe7, 0x49, 0x7a, 0x65, 0x21, 0xfb, 0xad, 0x94, 0x6b,
	0xf7, 0xe6, 0x18, 0xcc, 0xf4, 0xb3, 0x3a, 0x50, 0xdb, 0x6b, 0xb3, 0x1d, 0xa7, 0x1f, 0x9b, 0xc7,
	0xea, 0x4f, 0x59, 0x54, 0x7f, 0x64, 0x5c, 0xb7, 0xb9, 0x50, 0x75, 0xfd, 0x0d, 0xd9, 0x4e, 0x14,
	0xfd, 0x04, 0x87, 0xcd, 0x71, 0xcb, 0x6f, 0x15, 0xf4, 0x23, 0x9a, 0x25, 0x67, 0xe0, 0xe4, 0xb0,
	0x31, 0x57, 0x2c, 0x53, 0x81, 0x12, 0x2d, 0x4e, 0x3f, 0xc5, 0xa4, 0x16, 0x07, 0xdd, 0x9b, 0x5a,
	0x72, 0x45, 0xb4, 0x38, 0x79, 0x18, 0xdc, 0xe1, 0x1d, 0x78, 0x12, 0xa2, 0xff, 0x33, 0xfb, 0x3e,
	0x07, 0xfd, 0xe7, 0x93, 0xd0, 0xb8, 0x4f, 0x8f, 0x72, 0x87, 0xed, 0x0c, 0x1b, 0xf1, 0xb9, 0xfd,
	0x36, 0x06, 0xdd, 0xeb, 0x56, 0xe0, 0xde, 0x9a, 0x80, 0xa3, 0x03, 0xb3, 0x87, 0x44, 0x30, 0x6e,
	0xde, 0xe9, 0x17, 0x38, 0x58, 0xfc, 0xc3, 0x1a, 0x6a, 0xb8, 0x36, 0x43, 0xc5, 0x14, 0x70, 0x7f,
	0x1c, 0x87, 0x6a, 0x89, 0x91, 0x3b, 0xec, 0x42, 0x4b, 0xe9, 0x97, 0xfd, 0x13, 0x45, 0x13, 0x57,
	0xf4, 0xd9, 0x96, 0xec, 0xd8, 0xc5, 0xd6, 0x7c, 0x85, 0xd7, 0x33, 0x3e, 0x6c, 0xc7, 0xb3, 0x8e,
	0xbd, 0x8f, 0x48, 0x9a, 0xd2, 0x0e, 0xe7, 0xaf, 0xf1, 0x35, 0x46, 0x87, 0x7f, 0x0f, 0x6f, 0xa0,
	0x94, 0xfd, 0xa7, 0xd5, 0xe8, 0x46, 0xd2, 0x94, 0x38, 0xbf, 0x7f, 0x1f, 0x83, 0x63, 0xa3, 0x74,
	0xe4, 0x39, 0xc7, 0xde, 0x58, 0x13, 0xf4, 0x1b, 0x4c, 0xbb, 0xf3, 0x1f, 0x9d, 0xb2, 0x07, 0xc4,
	0xbf, 0xea, 0xe2, 0xd0, 0xee, 0x0d, 0x07, 0x66, 0xfa, 0x49, 0x42, 0xe1, 0x88, 0x68, 0xc6, 0xf4,
	0x5b, 0x13, 0x77, 0xd1, 0x14, 0x0d, 0xe9, 0x7e, 0xe8, 0x67, 0x1a, 0x34, 0x65, 0x3b, 0x09, 0xe9,
	0x77, 0xb6, 0x1f, 0x1a, 0xba, 0xa0, 0x11, 0xb2, 0x06, 0xc4, 0xf0, 0x31, 0xcb, 0x95, 0x7d, 0xa0,
	0x3c, 0xa4, 0xdf, 0xa3, 0x6e, 0x56, 0x53, 0x8f, 0xb1, 0x5c, 0x6d, 0x59, 0x82, 0xcc, 0xc3, 0xb8,
	0x99, 0x2f, 0xb7, 0x50, 0x60, 0x16, 0x64, 0x11, 0x26, 0x53, 0xd6, 0xd8, 0xe5, 0x2a, 0xa7, 0x3f,
	0x20, 0x5e, 0xac, 0x1f, 0xdc, 0x84, 0xf9, 0x9d, 0x24, 0xcd, 0x82, 0x6e, 0x66, 0x01, 0xdf, 0x57,
	0x64, 0xc1, 0xbb, 0xd8, 0x4e, 0x44, 0xca, 0xb3, 0x4b, 0x5c, 0xed, 0xc9, 0x6c, 0x37, 0xdf, 0xe4,
	0x49, 0x2e, 0xb3, 0x9c, 0x3e, 0x65, 0x5e, 0x42, 0xad, 0x27, 0x63, 0x7f, 0x56, 0x6f, 0xb0, 0x1e,
	0xca, 0xdc, 0x74, 0xeb, 0xfc, 0xbe, 0x3a, 0xf7, 0xe4, 0xcf, 0x07, 0x4b, 0xce, 0x2f, 0x07, 0x4b,
	0xce, 0x9f, 0x07, 0x4b, 0xce, 0x13, 0x7e, 0x24, 0x94, 0xb7, 0x83, 0xdb, 0x79, 0x09, 0x57, 0x75,
	0xd1, 0xe0, 0x57, 0x79, 0x16, 0xd5, 0xb7, 0x39, 0x8b, 0xd5, 0xf6, 0x55, 0xa9, 0xd6, 0x44, 0x12,
	0xf1, 0x5c, 0xad, 0xed, 0x28, 0xb1, 0x96, 0x30, 0x25, 0x3a, 0xbc, 0x9e, 0xee, 0x46, 0xf5, 0x1d,
	0x25, 0xea, 0x2c, 0x64, 0xa9, 0xe2, 0x59, 0x5e, 0x0f, 0x76, 0xda, 0x89, 0xcc, 0xeb, 0x79, 0x63,
	0x9b, 0xb7, 0xd8, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xcf, 0xa3, 0x70, 0x60, 0x89, 0x0a, 0x00,
	0x00,
}

func (m *DdosStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DdosStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DdosStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Group) > 0 {
		for iNdEx := len(m.Group) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Group[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPfeDdosOc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xc2
		}
	}
	return len(dAtA) - i, nil
}

func (m *DdosStatsGroupList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DdosStatsGroupList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DdosStatsGroupList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ProtocolStats != nil {
		{
			size, err := m.ProtocolStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPfeDdosOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xda
	}
	if m.GroupId != nil {
		i = encodeVarintPfeDdosOc(dAtA, i, uint64(*m.GroupId))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xd0
	}
	if m.GroupName != nil {
		i -= len(*m.GroupName)
		copy(dAtA[i:], *m.GroupName)
		i = encodeVarintPfeDdosOc(dAtA, i, uint64(len(*m.GroupName)))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}

func (m *DdosStatsGroupListProtocolStatsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DdosStatsGroupListProtocolStatsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DdosStatsGroupListProtocolStatsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Protocol) > 0 {
		for iNdEx := len(m.Protocol) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Protocol[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPfeDdosOc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xe2
		}
	}
	return len(dAtA) - i, nil
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FlowStats != nil {
		{
			size, err := m.FlowStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPfeDdosOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0x8a
	}
	if m.LocaleStats != nil {
		{
			size, err := m.LocaleStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPfeDdosOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xfa
	}
	if m.ProtocolId != nil {
		i = encodeVarintPfeDdosOc(dAtA, i, uint64(*m.ProtocolId))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xf0
	}
	if m.ProtocolName != nil {
		i -= len(*m.ProtocolName)
		copy(dAtA[i:], *m.ProtocolName)
		i = encodeVarintPfeDdosOc(dAtA, i, uint64(len(*m.ProtocolName)))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Locale) > 0 {
		for iNdEx := len(m.Locale) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locale[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPfeDdosOc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
			i--
			dAtA[i] = 0x82
		}
	}
	return len(dAtA) - i, nil
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Violation != nil {
		{
			size, err := m.Violation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPfeDdosOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xf2
	}
	if m.MaxArrivalRate != nil {
		i = encodeVarintPfeDdosOc(dAtA, i, uint64(*m.MaxArrivalRate))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xe8
	}
	if m.PassRate != nil {
		i = encodeVarintPfeDdosOc(dAtA, i, uint64(*m.PassRate))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xe0
	}
	if m.ArrivalRate != nil {
		i = encodeVarintPfeDdosOc(dAtA, i, uint64(*m.ArrivalRate))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xd8
	}
	if m.FinalPassed != nil {
		i = encodeVarintPfeDdosOc(dAtA, i, uint64(*m.FinalPassed))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xd0
	}
	if m.TotalDropped != nil {
		i = encodeVarintPfeDdosOc(dAtA, i, uint64(*m.TotalDropped))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xc8
	}
	if m.DroppedAggregateFlow != nil {
		i = encodeVarintPfeDdosOc(dAtA, i, uint64(*m.DroppedAggregateFlow))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xc0
	}
	if m.DroppedIndividualFlow != nil {
		i = encodeVarintPfeDdosOc(dAtA, i, uint64(*m.DroppedIndividualFlow))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xb8
	}
	if m.DroppedAggregatePolicer != nil {
		i = encodeVarintPfeDdosOc(dAtA, i, uint64(*m.DroppedAggregatePolicer))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xb0
	}
	if m.DroppedIndividualPolicer != nil {
		i = encodeVarintPfeDdosOc(dAtA, i, uint64(*m.DroppedIndividualPolicer))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xa8
	}
	if m.ArrivedPolicer != nil {
		i = encodeVarintPfeDdosOc(dAtA, i, uint64(*m.ArrivedPolicer))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xa0
	}
	if m.Received != nil {
		i = encodeVarintPfeDdosOc(dAtA, i, uint64(*m.Received))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0x98
	}
	if m.Location != nil {
		i -= len(*m.Location)
		copy(dAtA[i:], *m.Location)
		i = encodeVarintPfeDdosOc(dAtA, i, uint64(len(*m.Location)))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PolicerViolationDuration != nil {
		i = encodeVarintPfeDdosOc(dAtA, i, uint64(*m.PolicerViolationDuration))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0x98
	}
	if m.PolicerViolationEndTime != nil {
		i = encodeVarintPfeDdosOc(dAtA, i, uint64(*m.PolicerViolationEndTime))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0x90
	}
	if m.PolicerViolationStartTime != nil {
		i = encodeVarintPfeDdosOc(dAtA, i, uint64(*m.PolicerViolationStartTime))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0x88
	}
	if m.PolicerViolationCount != nil {
		i = encodeVarintPfeDdosOc(dAtA, i, uint64(*m.PolicerViolationCount))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0x80
	}
	if m.PolicerState != nil {
		i -= len(*m.PolicerState)
		copy(dAtA[i:], *m.PolicerState)
		i = encodeVarintPfeDdosOc(dAtA, i, uint64(len(*m.PolicerState)))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Flow) > 0 {
		for iNdEx := len(m.Flow) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Flow[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPfeDdosOc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xb
			i--
			dAtA[i] = 0xa2
		}
	}
	return len(dAtA) - i, nil
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FlowInfoStats != nil {
		{
			size, err := m.FlowInfoStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPfeDdosOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xba
	}
	if m.FlowCount != nil {
		i = encodeVarintPfeDdosOc(dAtA, i, uint64(*m.FlowCount))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xb0
	}
	if m.FlowType != nil {
		i -= len(*m.FlowType)
		copy(dAtA[i:], *m.FlowType)
		i = encodeVarintPfeDdosOc(dAtA, i, uint64(len(*m.FlowType)))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FlowInfo) > 0 {
		for iNdEx := len(m.FlowInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FlowInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPfeDdosOc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xb
			i--
			dAtA[i] = 0xc2
		}
	}
	return len(dAtA) - i, nil
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Packets != nil {
		i = encodeVarintPfeDdosOc(dAtA, i, uint64(*m.Packets))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xe8
	}
	if m.Rate != nil {
		i = encodeVarintPfeDdosOc(dAtA, i, uint64(*m.Rate))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xe0
	}
	if m.TimeLastViolated != nil {
		i = encodeVarintPfeDdosOc(dAtA, i, uint64(*m.TimeLastViolated))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xd8
	}
	if m.TimeFound != nil {
		i = encodeVarintPfeDdosOc(dAtA, i, uint64(*m.TimeFound))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xd0
	}
	if m.Ifl != nil {
		i = encodeVarintPfeDdosOc(dAtA, i, uint64(*m.Ifl))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xc8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPfeDdosOc(dAtA []byte, offset int, v uint64) int {
	offset -= sovPfeDdosOc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DdosStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Group) > 0 {
		for _, e := range m.Group {
			l = e.Size()
			n += 2 + l + sovPfeDdosOc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DdosStatsGroupList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupName != nil {
		l = len(*m.GroupName)
		n += 2 + l + sovPfeDdosOc(uint64(l))
	}
	if m.GroupId != nil {
		n += 2 + sovPfeDdosOc(uint64(*m.GroupId))
	}
	if m.ProtocolStats != nil {
		l = m.ProtocolStats.Size()
		n += 2 + l + sovPfeDdosOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DdosStatsGroupListProtocolStatsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Protocol) > 0 {
		for _, e := range m.Protocol {
			l = e.Size()
			n += 2 + l + sovPfeDdosOc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolName != nil {
		l = len(*m.ProtocolName)
		n += 2 + l + sovPfeDdosOc(uint64(l))
	}
	if m.ProtocolId != nil {
		n += 2 + sovPfeDdosOc(uint64(*m.ProtocolId))
	}
	if m.LocaleStats != nil {
		l = m.LocaleStats.Size()
		n += 2 + l + sovPfeDdosOc(uint64(l))
	}
	if m.FlowStats != nil {
		l = m.FlowStats.Size()
		n += 2 + l + sovPfeDdosOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Locale) > 0 {
		for _, e := range m.Locale {
			l = e.Size()
			n += 2 + l + sovPfeDdosOc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Location != nil {
		l = len(*m.Location)
		n += 2 + l + sovPfeDdosOc(uint64(l))
	}
	if m.Received != nil {
		n += 2 + sovPfeDdosOc(uint64(*m.Received))
	}
	if m.ArrivedPolicer != nil {
		n += 2 + sovPfeDdosOc(uint64(*m.ArrivedPolicer))
	}
	if m.DroppedIndividualPolicer != nil {
		n += 2 + sovPfeDdosOc(uint64(*m.DroppedIndividualPolicer))
	}
	if m.DroppedAggregatePolicer != nil {
		n += 2 + sovPfeDdosOc(uint64(*m.DroppedAggregatePolicer))
	}
	if m.DroppedIndividualFlow != nil {
		n += 2 + sovPfeDdosOc(uint64(*m.DroppedIndividualFlow))
	}
	if m.DroppedAggregateFlow != nil {
		n += 2 + sovPfeDdosOc(uint64(*m.DroppedAggregateFlow))
	}
	if m.TotalDropped != nil {
		n += 2 + sovPfeDdosOc(uint64(*m.TotalDropped))
	}
	if m.FinalPassed != nil {
		n += 2 + sovPfeDdosOc(uint64(*m.FinalPassed))
	}
	if m.ArrivalRate != nil {
		n += 2 + sovPfeDdosOc(uint64(*m.ArrivalRate))
	}
	if m.PassRate != nil {
		n += 2 + sovPfeDdosOc(uint64(*m.PassRate))
	}
	if m.MaxArrivalRate != nil {
		n += 2 + sovPfeDdosOc(uint64(*m.MaxArrivalRate))
	}
	if m.Violation != nil {
		l = m.Violation.Size()
		n += 2 + l + sovPfeDdosOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PolicerState != nil {
		l = len(*m.PolicerState)
		n += 2 + l + sovPfeDdosOc(uint64(l))
	}
	if m.PolicerViolationCount != nil {
		n += 2 + sovPfeDdosOc(uint64(*m.PolicerViolationCount))
	}
	if m.PolicerViolationStartTime != nil {
		n += 2 + sovPfeDdosOc(uint64(*m.PolicerViolationStartTime))
	}
	if m.PolicerViolationEndTime != nil {
		n += 2 + sovPfeDdosOc(uint64(*m.PolicerViolationEndTime))
	}
	if m.PolicerViolationDuration != nil {
		n += 2 + sovPfeDdosOc(uint64(*m.PolicerViolationDuration))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Flow) > 0 {
		for _, e := range m.Flow {
			l = e.Size()
			n += 2 + l + sovPfeDdosOc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FlowType != nil {
		l = len(*m.FlowType)
		n += 2 + l + sovPfeDdosOc(uint64(l))
	}
	if m.FlowCount != nil {
		n += 2 + sovPfeDdosOc(uint64(*m.FlowCount))
	}
	if m.FlowInfoStats != nil {
		l = m.FlowInfoStats.Size()
		n += 2 + l + sovPfeDdosOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FlowInfo) > 0 {
		for _, e := range m.FlowInfo {
			l = e.Size()
			n += 2 + l + sovPfeDdosOc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ifl != nil {
		n += 2 + sovPfeDdosOc(uint64(*m.Ifl))
	}
	if m.TimeFound != nil {
		n += 2 + sovPfeDdosOc(uint64(*m.TimeFound))
	}
	if m.TimeLastViolated != nil {
		n += 2 + sovPfeDdosOc(uint64(*m.TimeLastViolated))
	}
	if m.Rate != nil {
		n += 2 + sovPfeDdosOc(uint64(*m.Rate))
	}
	if m.Packets != nil {
		n += 2 + sovPfeDdosOc(uint64(*m.Packets))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPfeDdosOc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPfeDdosOc(x uint64) (n int) {
	return sovPfeDdosOc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DdosStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfeDdosOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ddos_stats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ddos_stats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 152:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = append(m.Group, &DdosStatsGroupList{})
			if err := m.Group[len(m.Group)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPfeDdosOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DdosStatsGroupList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfeDdosOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: group_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: group_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 153:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GroupName = &s
			iNdEx = postIndex
		case 154:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GroupId = &v
		case 155:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProtocolStats == nil {
				m.ProtocolStats = &DdosStatsGroupListProtocolStatsType{}
			}
			if err := m.ProtocolStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPfeDdosOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DdosStatsGroupListProtocolStatsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfeDdosOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: protocol_stats_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: protocol_stats_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 156:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = append(m.Protocol, &DdosStatsGroupListProtocolStatsTypeProtocolList{})
			if err := m.Protocol[len(m.Protocol)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPfeDdosOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfeDdosOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: protocol_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: protocol_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 157:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProtocolName = &s
			iNdEx = postIndex
		case 158:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProtocolId = &v
		case 159:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocaleStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocaleStats == nil {
				m.LocaleStats = &DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsType{}
			}
			if err := m.LocaleStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 161:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlowStats == nil {
				m.FlowStats = &DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsType{}
			}
			if err := m.FlowStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPfeDdosOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfeDdosOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: locale_stats_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: locale_stats_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 160:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locale", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locale = append(m.Locale, &DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList{})
			if err := m.Locale[len(m.Locale)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPfeDdosOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfeDdosOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: locale_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: locale_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 162:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Location = &s
			iNdEx = postIndex
		case 163:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Received", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Received = &v
		case 164:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArrivedPolicer", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ArrivedPolicer = &v
		case 165:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DroppedIndividualPolicer", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DroppedIndividualPolicer = &v
		case 166:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DroppedAggregatePolicer", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DroppedAggregatePolicer = &v
		case 167:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DroppedIndividualFlow", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DroppedIndividualFlow = &v
		case 168:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DroppedAggregateFlow", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DroppedAggregateFlow = &v
		case 169:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDropped", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalDropped = &v
		case 170:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalPassed", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FinalPassed = &v
		case 171:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArrivalRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ArrivalRate = &v
		case 172:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PassRate = &v
		case 173:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxArrivalRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxArrivalRate = &v
		case 174:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Violation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Violation == nil {
				m.Violation = &DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType{}
			}
			if err := m.Violation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPfeDdosOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListLocaleStatsTypeLocaleListViolationType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfeDdosOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: violation_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: violation_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 175:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicerState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PolicerState = &s
			iNdEx = postIndex
		case 176:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicerViolationCount", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PolicerViolationCount = &v
		case 177:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicerViolationStartTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PolicerViolationStartTime = &v
		case 178:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicerViolationEndTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PolicerViolationEndTime = &v
		case 179:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicerViolationDuration", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PolicerViolationDuration = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPfeDdosOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfeDdosOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: flow_stats_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: flow_stats_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 180:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flow = append(m.Flow, &DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList{})
			if err := m.Flow[len(m.Flow)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPfeDdosOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfeDdosOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: flow_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: flow_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 181:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FlowType = &s
			iNdEx = postIndex
		case 182:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FlowCount = &v
		case 183:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowInfoStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlowInfoStats == nil {
				m.FlowInfoStats = &DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsType{}
			}
			if err := m.FlowInfoStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPfeDdosOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfeDdosOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: flow_info_stats_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: flow_info_stats_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 184:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlowInfo = append(m.FlowInfo, &DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList{})
			if err := m.FlowInfo[len(m.FlowInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPfeDdosOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DdosStatsGroupListProtocolStatsTypeProtocolListFlowStatsTypeFlowListFlowInfoStatsTypeFlowInfoList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfeDdosOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: flow_info_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: flow_info_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 185:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ifl", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ifl = &v
		case 186:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeFound", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimeFound = &v
		case 187:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeLastViolated", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimeLastViolated = &v
		case 188:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Rate = &v
		case 189:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Packets = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPfeDdosOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPfeDdosOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPfeDdosOc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPfeDdosOc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPfeDdosOc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPfeDdosOc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPfeDdosOc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPfeDdosOc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPfeDdosOc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPfeDdosOc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPfeDdosOc = fmt.Errorf("proto: unexpected end of group")
)
