// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pfe_export_mon_oc.proto

package schema

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type JunosPfeExportMonStats struct {
	System               *JunosPfeExportMonStatsSystemType `protobuf:"bytes,151,opt,name=system" json:"system,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *JunosPfeExportMonStats) Reset()         { *m = JunosPfeExportMonStats{} }
func (m *JunosPfeExportMonStats) String() string { return proto.CompactTextString(m) }
func (*JunosPfeExportMonStats) ProtoMessage()    {}
func (*JunosPfeExportMonStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_daeba95696a69f7b, []int{0}
}
func (m *JunosPfeExportMonStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosPfeExportMonStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosPfeExportMonStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosPfeExportMonStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosPfeExportMonStats.Merge(m, src)
}
func (m *JunosPfeExportMonStats) XXX_Size() int {
	return m.Size()
}
func (m *JunosPfeExportMonStats) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosPfeExportMonStats.DiscardUnknown(m)
}

var xxx_messageInfo_JunosPfeExportMonStats proto.InternalMessageInfo

func (m *JunosPfeExportMonStats) GetSystem() *JunosPfeExportMonStatsSystemType {
	if m != nil {
		return m.System
	}
	return nil
}

type JunosPfeExportMonStatsSystemType struct {
	Linecard             *JunosPfeExportMonStatsSystemTypeLinecardType `protobuf:"bytes,151,opt,name=linecard" json:"linecard,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                      `json:"-"`
	XXX_unrecognized     []byte                                        `json:"-"`
	XXX_sizecache        int32                                         `json:"-"`
}

func (m *JunosPfeExportMonStatsSystemType) Reset()         { *m = JunosPfeExportMonStatsSystemType{} }
func (m *JunosPfeExportMonStatsSystemType) String() string { return proto.CompactTextString(m) }
func (*JunosPfeExportMonStatsSystemType) ProtoMessage()    {}
func (*JunosPfeExportMonStatsSystemType) Descriptor() ([]byte, []int) {
	return fileDescriptor_daeba95696a69f7b, []int{0, 0}
}
func (m *JunosPfeExportMonStatsSystemType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosPfeExportMonStatsSystemType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosPfeExportMonStatsSystemType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosPfeExportMonStatsSystemType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosPfeExportMonStatsSystemType.Merge(m, src)
}
func (m *JunosPfeExportMonStatsSystemType) XXX_Size() int {
	return m.Size()
}
func (m *JunosPfeExportMonStatsSystemType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosPfeExportMonStatsSystemType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosPfeExportMonStatsSystemType proto.InternalMessageInfo

func (m *JunosPfeExportMonStatsSystemType) GetLinecard() *JunosPfeExportMonStatsSystemTypeLinecardType {
	if m != nil {
		return m.Linecard
	}
	return nil
}

type JunosPfeExportMonStatsSystemTypeLinecardType struct {
	ExportMonitor        *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorType `protobuf:"bytes,151,opt,name=export_monitor,json=exportMonitor" json:"export_monitor,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                       `json:"-"`
	XXX_unrecognized     []byte                                                         `json:"-"`
	XXX_sizecache        int32                                                          `json:"-"`
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardType) Reset() {
	*m = JunosPfeExportMonStatsSystemTypeLinecardType{}
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardType) String() string {
	return proto.CompactTextString(m)
}
func (*JunosPfeExportMonStatsSystemTypeLinecardType) ProtoMessage() {}
func (*JunosPfeExportMonStatsSystemTypeLinecardType) Descriptor() ([]byte, []int) {
	return fileDescriptor_daeba95696a69f7b, []int{0, 0, 0}
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosPfeExportMonStatsSystemTypeLinecardType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosPfeExportMonStatsSystemTypeLinecardType.Merge(m, src)
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardType) XXX_Size() int {
	return m.Size()
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosPfeExportMonStatsSystemTypeLinecardType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosPfeExportMonStatsSystemTypeLinecardType proto.InternalMessageInfo

func (m *JunosPfeExportMonStatsSystemTypeLinecardType) GetExportMonitor() *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorType {
	if m != nil {
		return m.ExportMonitor
	}
	return nil
}

type JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorType struct {
	ExportInfo           []*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList `protobuf:"bytes,152,rep,name=export_info,json=exportInfo" json:"export_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                       `json:"-"`
	XXX_unrecognized     []byte                                                                         `json:"-"`
	XXX_sizecache        int32                                                                          `json:"-"`
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorType) Reset() {
	*m = JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorType{}
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorType) String() string {
	return proto.CompactTextString(m)
}
func (*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorType) ProtoMessage() {}
func (*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorType) Descriptor() ([]byte, []int) {
	return fileDescriptor_daeba95696a69f7b, []int{0, 0, 0, 0}
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorType.Merge(m, src)
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorType) XXX_Size() int {
	return m.Size()
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorType proto.InternalMessageInfo

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorType) GetExportInfo() []*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList {
	if m != nil {
		return m.ExportInfo
	}
	return nil
}

type JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList struct {
	Resource             *string                                                                                    `protobuf:"bytes,153,opt,name=resource" json:"resource,omitempty"`
	RepInterval          *uint32                                                                                    `protobuf:"varint,154,opt,name=rep_interval,json=repInterval" json:"rep_interval,omitempty"`
	PayloadSize          *uint32                                                                                    `protobuf:"varint,155,opt,name=payload_size,json=payloadSize" json:"payload_size,omitempty"`
	QosOptions           *uint32                                                                                    `protobuf:"varint,156,opt,name=qos_options,json=qosOptions" json:"qos_options,omitempty"`
	FcOptions            *uint32                                                                                    `protobuf:"varint,157,opt,name=fc_options,json=fcOptions" json:"fc_options,omitempty"`
	PlpOptions           *uint32                                                                                    `protobuf:"varint,158,opt,name=plp_options,json=plpOptions" json:"plp_options,omitempty"`
	Server               *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType     `protobuf:"bytes,159,opt,name=server" json:"server,omitempty"`
	NumClients           *uint32                                                                                    `protobuf:"varint,162,opt,name=num_clients,json=numClients" json:"num_clients,omitempty"`
	Clients              []*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList  `protobuf:"bytes,163,rep,name=clients" json:"clients,omitempty"`
	Accounting           *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType `protobuf:"bytes,167,opt,name=accounting" json:"accounting,omitempty"`
	Wraps                []*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList    `protobuf:"bytes,177,rep,name=wraps" json:"wraps,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                                   `json:"-"`
	XXX_unrecognized     []byte                                                                                     `json:"-"`
	XXX_sizecache        int32                                                                                      `json:"-"`
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) Reset() {
	*m = JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList{}
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) String() string {
	return proto.CompactTextString(m)
}
func (*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) ProtoMessage() {}
func (*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) Descriptor() ([]byte, []int) {
	return fileDescriptor_daeba95696a69f7b, []int{0, 0, 0, 0, 0}
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList.Merge(m, src)
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) XXX_Size() int {
	return m.Size()
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList.DiscardUnknown(m)
}

var xxx_messageInfo_JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList proto.InternalMessageInfo

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) GetResource() string {
	if m != nil && m.Resource != nil {
		return *m.Resource
	}
	return ""
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) GetRepInterval() uint32 {
	if m != nil && m.RepInterval != nil {
		return *m.RepInterval
	}
	return 0
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) GetPayloadSize() uint32 {
	if m != nil && m.PayloadSize != nil {
		return *m.PayloadSize
	}
	return 0
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) GetQosOptions() uint32 {
	if m != nil && m.QosOptions != nil {
		return *m.QosOptions
	}
	return 0
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) GetFcOptions() uint32 {
	if m != nil && m.FcOptions != nil {
		return *m.FcOptions
	}
	return 0
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) GetPlpOptions() uint32 {
	if m != nil && m.PlpOptions != nil {
		return *m.PlpOptions
	}
	return 0
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) GetServer() *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType {
	if m != nil {
		return m.Server
	}
	return nil
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) GetNumClients() uint32 {
	if m != nil && m.NumClients != nil {
		return *m.NumClients
	}
	return 0
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) GetClients() []*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList {
	if m != nil {
		return m.Clients
	}
	return nil
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) GetAccounting() *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType {
	if m != nil {
		return m.Accounting
	}
	return nil
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) GetWraps() []*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList {
	if m != nil {
		return m.Wraps
	}
	return nil
}

type JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType struct {
	Ip                   *string  `protobuf:"bytes,160,opt,name=ip" json:"ip,omitempty"`
	Port                 *uint32  `protobuf:"varint,161,opt,name=port" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType) Reset() {
	*m = JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType{}
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType) String() string {
	return proto.CompactTextString(m)
}
func (*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType) ProtoMessage() {
}
func (*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType) Descriptor() ([]byte, []int) {
	return fileDescriptor_daeba95696a69f7b, []int{0, 0, 0, 0, 0, 0}
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType.Merge(m, src)
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType) XXX_Size() int {
	return m.Size()
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType proto.InternalMessageInfo

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType) GetPort() uint32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

type JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList struct {
	Index                *uint32  `protobuf:"varint,164,opt,name=index" json:"index,omitempty"`
	Ip                   *string  `protobuf:"bytes,165,opt,name=ip" json:"ip,omitempty"`
	Port                 *uint32  `protobuf:"varint,166,opt,name=port" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList) Reset() {
	*m = JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList{}
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList) String() string {
	return proto.CompactTextString(m)
}
func (*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList) ProtoMessage() {
}
func (*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList) Descriptor() ([]byte, []int) {
	return fileDescriptor_daeba95696a69f7b, []int{0, 0, 0, 0, 0, 1}
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList.Merge(m, src)
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList) XXX_Size() int {
	return m.Size()
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList.DiscardUnknown(m)
}

var xxx_messageInfo_JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList proto.InternalMessageInfo

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList) GetIndex() uint32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList) GetPort() uint32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

type JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType struct {
	SuccessfulReaps            *uint64  `protobuf:"varint,168,opt,name=successful_reaps,json=successfulReaps" json:"successful_reaps,omitempty"`
	FailedReaps                *uint64  `protobuf:"varint,169,opt,name=failed_reaps,json=failedReaps" json:"failed_reaps,omitempty"`
	ReapsInLastRepInterval     *uint32  `protobuf:"varint,170,opt,name=reaps_in_last_rep_interval,json=reapsInLastRepInterval" json:"reaps_in_last_rep_interval,omitempty"`
	PacketsInLastRepInterval   *uint32  `protobuf:"varint,171,opt,name=packets_in_last_rep_interval,json=packetsInLastRepInterval" json:"packets_in_last_rep_interval,omitempty"`
	InstancesInLastRepInterval *uint32  `protobuf:"varint,172,opt,name=instances_in_last_rep_interval,json=instancesInLastRepInterval" json:"instances_in_last_rep_interval,omitempty"`
	TotalPackets               *uint64  `protobuf:"varint,173,opt,name=total_packets,json=totalPackets" json:"total_packets,omitempty"`
	NumWraps                   *uint64  `protobuf:"varint,174,opt,name=num_wraps,json=numWraps" json:"num_wraps,omitempty"`
	AverageReaps               *uint64  `protobuf:"varint,175,opt,name=average_reaps,json=averageReaps" json:"average_reaps,omitempty"`
	LastPacketSize             *uint32  `protobuf:"varint,176,opt,name=last_packet_size,json=lastPacketSize" json:"last_packet_size,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType) Reset() {
	*m = JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType{}
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType) String() string {
	return proto.CompactTextString(m)
}
func (*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType) ProtoMessage() {
}
func (*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType) Descriptor() ([]byte, []int) {
	return fileDescriptor_daeba95696a69f7b, []int{0, 0, 0, 0, 0, 2}
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType.Merge(m, src)
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType) XXX_Size() int {
	return m.Size()
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType proto.InternalMessageInfo

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType) GetSuccessfulReaps() uint64 {
	if m != nil && m.SuccessfulReaps != nil {
		return *m.SuccessfulReaps
	}
	return 0
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType) GetFailedReaps() uint64 {
	if m != nil && m.FailedReaps != nil {
		return *m.FailedReaps
	}
	return 0
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType) GetReapsInLastRepInterval() uint32 {
	if m != nil && m.ReapsInLastRepInterval != nil {
		return *m.ReapsInLastRepInterval
	}
	return 0
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType) GetPacketsInLastRepInterval() uint32 {
	if m != nil && m.PacketsInLastRepInterval != nil {
		return *m.PacketsInLastRepInterval
	}
	return 0
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType) GetInstancesInLastRepInterval() uint32 {
	if m != nil && m.InstancesInLastRepInterval != nil {
		return *m.InstancesInLastRepInterval
	}
	return 0
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType) GetTotalPackets() uint64 {
	if m != nil && m.TotalPackets != nil {
		return *m.TotalPackets
	}
	return 0
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType) GetNumWraps() uint64 {
	if m != nil && m.NumWraps != nil {
		return *m.NumWraps
	}
	return 0
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType) GetAverageReaps() uint64 {
	if m != nil && m.AverageReaps != nil {
		return *m.AverageReaps
	}
	return 0
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType) GetLastPacketSize() uint32 {
	if m != nil && m.LastPacketSize != nil {
		return *m.LastPacketSize
	}
	return 0
}

type JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList struct {
	Index                *uint32  `protobuf:"varint,178,opt,name=index" json:"index,omitempty"`
	Time                 *string  `protobuf:"bytes,179,opt,name=time" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList) Reset() {
	*m = JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList{}
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList) String() string {
	return proto.CompactTextString(m)
}
func (*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList) ProtoMessage() {
}
func (*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList) Descriptor() ([]byte, []int) {
	return fileDescriptor_daeba95696a69f7b, []int{0, 0, 0, 0, 0, 3}
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList.Merge(m, src)
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList) XXX_Size() int {
	return m.Size()
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList.DiscardUnknown(m)
}

var xxx_messageInfo_JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList proto.InternalMessageInfo

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList) GetIndex() uint32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

var E_JnprJunosPfeExportMonStatsExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*JunosPfeExportMonStats)(nil),
	Field:         129,
	Name:          "jnpr_junos_pfe_export_mon_stats_ext",
	Tag:           "bytes,129,opt,name=jnpr_junos_pfe_export_mon_stats_ext",
	Filename:      "pfe_export_mon_oc.proto",
}

func init() {
	proto.RegisterType((*JunosPfeExportMonStats)(nil), "junos_pfe_export_mon_stats")
	proto.RegisterType((*JunosPfeExportMonStatsSystemType)(nil), "junos_pfe_export_mon_stats.system_type")
	proto.RegisterType((*JunosPfeExportMonStatsSystemTypeLinecardType)(nil), "junos_pfe_export_mon_stats.system_type.linecard_type")
	proto.RegisterType((*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorType)(nil), "junos_pfe_export_mon_stats.system_type.linecard_type.export_monitor_type")
	proto.RegisterType((*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList)(nil), "junos_pfe_export_mon_stats.system_type.linecard_type.export_monitor_type.export_info_list")
	proto.RegisterType((*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType)(nil), "junos_pfe_export_mon_stats.system_type.linecard_type.export_monitor_type.export_info_list.server_type")
	proto.RegisterType((*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList)(nil), "junos_pfe_export_mon_stats.system_type.linecard_type.export_monitor_type.export_info_list.clients_list")
	proto.RegisterType((*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType)(nil), "junos_pfe_export_mon_stats.system_type.linecard_type.export_monitor_type.export_info_list.accounting_type")
	proto.RegisterType((*JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList)(nil), "junos_pfe_export_mon_stats.system_type.linecard_type.export_monitor_type.export_info_list.wraps_list")
	proto.RegisterExtension(E_JnprJunosPfeExportMonStatsExt)
}

func init() { proto.RegisterFile("pfe_export_mon_oc.proto", fileDescriptor_daeba95696a69f7b) }

var fileDescriptor_daeba95696a69f7b = []byte{
	// 868 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xcb, 0x6e, 0x1c, 0x45,
	0x14, 0x55, 0x3b, 0x76, 0xb0, 0x6f, 0x7b, 0x6c, 0xab, 0x2d, 0x91, 0x56, 0x63, 0x46, 0x96, 0x41,
	0x22, 0x20, 0x79, 0x46, 0x0a, 0x62, 0x03, 0x8b, 0x44, 0x89, 0xb2, 0x70, 0xc4, 0x23, 0x6a, 0x2f,
	0x90, 0xb2, 0x29, 0x2a, 0x3d, 0xb7, 0xc7, 0x35, 0xee, 0xa9, 0x2a, 0x57, 0x55, 0x3b, 0x76, 0x14,
	0x09, 0x25, 0x5b, 0x3e, 0x80, 0x47, 0xc2, 0xfb, 0xfd, 0x86, 0xb0, 0x40, 0xfc, 0x01, 0x4b, 0x3e,
	0x01, 0xf9, 0x3b, 0x58, 0xa0, 0xea, 0xdb, 0x3d, 0x33, 0xb6, 0x63, 0x84, 0x10, 0x5e, 0xf6, 0xb9,
	0xe7, 0x9e, 0x73, 0xe7, 0xf4, 0xbd, 0x3d, 0x70, 0x4e, 0xe7, 0xc8, 0x70, 0x4f, 0x2b, 0xe3, 0xd8,
	0x50, 0x49, 0xa6, 0xb2, 0x8e, 0x36, 0xca, 0xa9, 0x64, 0xd9, 0x61, 0x81, 0x43, 0x74, 0x66, 0x9f,
	0x39, 0xa5, 0x09, 0x5c, 0xfb, 0x6b, 0x01, 0x92, 0x41, 0x29, 0x95, 0x65, 0x47, 0xda, 0xac, 0xe3,
	0xce, 0x46, 0x97, 0xe0, 0xac, 0xdd, 0xb7, 0x0e, 0x87, 0xf1, 0xdb, 0xc1, 0x6a, 0x70, 0x3e, 0xbc,
	0xf0, 0x4c, 0xe7, 0x64, 0x76, 0x87, 0xa8, 0xcc, 0xed, 0x6b, 0x4c, 0xeb, 0xbe, 0xe4, 0xfe, 0x02,
	0x84, 0x13, 0x78, 0x94, 0xc2, 0x6c, 0x21, 0x24, 0x66, 0xdc, 0xf4, 0x1a, 0xcd, 0x17, 0xfe, 0xa5,
	0x66, 0xa7, 0x69, 0x24, 0x87, 0x91, 0x4e, 0xf2, 0x6b, 0x0b, 0x5a, 0x87, 0x6a, 0xd1, 0x0e, 0x2c,
	0x8c, 0x95, 0x84, 0x53, 0xa6, 0xf1, 0xda, 0xf8, 0x4f, 0x5e, 0x9d, 0xc3, 0x62, 0xe4, 0xdf, 0x22,
	0xf0, 0x15, 0xc2, 0x92, 0x87, 0xf3, 0xb0, 0xfc, 0x08, 0x5a, 0x74, 0x07, 0xc2, 0x1a, 0x16, 0x32,
	0x57, 0xf1, 0x3b, 0xc1, 0xea, 0x99, 0xf3, 0xe1, 0x85, 0x1b, 0xff, 0xdb, 0x1c, 0x9d, 0x09, 0x75,
	0x56, 0x08, 0xeb, 0x52, 0x20, 0x64, 0x43, 0xe6, 0x2a, 0x79, 0x10, 0xc2, 0xd2, 0x51, 0x42, 0xb4,
	0x06, 0xb3, 0x06, 0xad, 0x2a, 0x4d, 0x86, 0xf1, 0xbb, 0x3e, 0x97, 0xb9, 0xcb, 0x33, 0xf7, 0x2e,
	0x4d, 0xcd, 0x06, 0xe9, 0x08, 0x8f, 0xd6, 0x60, 0xde, 0xa0, 0x66, 0x42, 0x3a, 0x34, 0xbb, 0xbc,
	0x88, 0xdf, 0xf3, 0xbc, 0x56, 0x1a, 0x1a, 0xd4, 0x1b, 0x35, 0xe6, 0x39, 0x9a, 0xef, 0x17, 0x8a,
	0xf7, 0x98, 0x15, 0xb7, 0x31, 0xbe, 0x5f, 0x73, 0x6a, 0x70, 0x53, 0xdc, 0xc6, 0x68, 0x15, 0xc2,
	0x1d, 0x65, 0x99, 0xd2, 0x4e, 0x28, 0x69, 0xe3, 0x07, 0x44, 0x81, 0x1d, 0x65, 0x5f, 0x23, 0x28,
	0x6a, 0x03, 0xe4, 0xd9, 0x88, 0xf0, 0x3e, 0x11, 0xe6, 0xf2, 0xac, 0xa9, 0xaf, 0x42, 0xa8, 0x0b,
	0x3d, 0x22, 0x7c, 0x50, 0x2b, 0xe8, 0x42, 0x37, 0x8c, 0x37, 0xe1, 0xac, 0x45, 0xb3, 0x8b, 0x26,
	0xfe, 0x90, 0xde, 0x72, 0x7e, 0x7a, 0xe9, 0x76, 0xc8, 0xa9, 0x59, 0xf2, 0xea, 0xc1, 0x8f, 0x28,
	0xcb, 0x21, 0xcb, 0x0a, 0x81, 0xd2, 0xd9, 0xf8, 0x93, 0x7a, 0x44, 0x59, 0x0e, 0xaf, 0x10, 0x14,
	0xdd, 0x0b, 0xe0, 0xb1, 0xa6, 0xfc, 0x29, 0xad, 0x40, 0xff, 0x14, 0x87, 0xac, 0xad, 0x68, 0x1f,
	0x1a, 0xe3, 0xe8, 0xad, 0x00, 0x80, 0x67, 0x99, 0x2a, 0xa5, 0x13, 0xb2, 0x1f, 0x7f, 0x49, 0x61,
	0x0d, 0x4e, 0x71, 0x8e, 0xb1, 0x1b, 0x05, 0x36, 0x61, 0x1f, 0xdd, 0x81, 0x99, 0x5b, 0x86, 0x6b,
	0x1b, 0xff, 0x4c, 0x79, 0xe0, 0x29, 0xce, 0x51, 0x19, 0x51, 0x1a, 0x64, 0x9a, 0x3c, 0x0f, 0xe1,
	0xc4, 0x9b, 0x8c, 0x16, 0x61, 0x4a, 0xe8, 0xf8, 0xa3, 0xea, 0x18, 0xd2, 0x29, 0xa1, 0xa3, 0x65,
	0x98, 0xf6, 0x1a, 0xf1, 0xc7, 0xf4, 0x2e, 0xab, 0x87, 0x24, 0x85, 0xf9, 0xc9, 0x64, 0xa3, 0x15,
	0x98, 0x11, 0xb2, 0x87, 0x7b, 0xf1, 0x67, 0x15, 0xab, 0xb9, 0x22, 0x02, 0x6b, 0xcd, 0xcf, 0x8f,
	0x6b, 0x7e, 0x31, 0xa9, 0xf9, 0xdb, 0x19, 0x58, 0x3c, 0x12, 0x53, 0xf4, 0x1c, 0x2c, 0xd9, 0x32,
	0xcb, 0xd0, 0xda, 0xbc, 0x2c, 0x98, 0x41, 0x9f, 0xd2, 0x57, 0xbe, 0x69, 0x3a, 0x5d, 0x1c, 0x17,
	0x52, 0x8f, 0xfb, 0x23, 0xcc, 0xb9, 0x28, 0xb0, 0x57, 0xf3, 0xbe, 0x26, 0x5e, 0x48, 0x20, 0x71,
	0x5e, 0x82, 0xa4, 0x2a, 0x32, 0x21, 0x59, 0xc1, 0xad, 0x63, 0x87, 0x4e, 0xfb, 0x1b, 0x1a, 0xe7,
	0xf1, 0x8a, 0xb2, 0x21, 0x5f, 0xe6, 0xd6, 0xa5, 0x13, 0x57, 0x7e, 0x11, 0x56, 0x34, 0xcf, 0xb6,
	0xd1, 0x9d, 0xd0, 0xfe, 0x2d, 0xb5, 0xc7, 0x35, 0xe9, 0xb8, 0xc0, 0x15, 0x68, 0x0b, 0x69, 0x1d,
	0x97, 0x19, 0x9e, 0x20, 0xf1, 0x1d, 0x49, 0x24, 0x23, 0xda, 0x71, 0x91, 0xa7, 0xa1, 0xe5, 0x94,
	0xe3, 0x05, 0xab, 0x6d, 0xe2, 0xef, 0xe9, 0x77, 0xce, 0x57, 0xe8, 0x75, 0x02, 0xa3, 0x15, 0x98,
	0xf3, 0x87, 0x48, 0x7b, 0xf5, 0x03, 0x31, 0x66, 0x65, 0x39, 0x7c, 0xdd, 0x03, 0x5e, 0x83, 0xef,
	0xa2, 0xe1, 0x7d, 0xac, 0xb3, 0xfa, 0xb1, 0xd6, 0xa8, 0x51, 0x0a, 0xeb, 0x59, 0x58, 0xaa, 0x26,
	0x24, 0x23, 0xfa, 0xb2, 0xfd, 0x44, 0x03, 0x2e, 0xf8, 0x02, 0x79, 0xf9, 0x8f, 0x5b, 0x72, 0x11,
	0x60, 0xbc, 0x59, 0xe3, 0x6d, 0x78, 0xf8, 0xa8, 0x6d, 0x58, 0x86, 0x69, 0x27, 0x86, 0x18, 0xff,
	0x42, 0xfb, 0x50, 0x3d, 0xbc, 0x78, 0x37, 0x80, 0xa7, 0x06, 0x52, 0x1b, 0x76, 0xf2, 0xea, 0x33,
	0xdc, 0x73, 0xd1, 0xb9, 0xce, 0xb5, 0x52, 0x0a, 0x8d, 0xe6, 0x55, 0x74, 0xb7, 0x94, 0xd9, 0xb6,
	0x9b, 0x28, 0xad, 0x32, 0x36, 0xbe, 0x4b, 0x37, 0xfc, 0xc4, 0x3f, 0xdc, 0x4e, 0xfa, 0xa4, 0x77,
	0xb8, 0xe6, 0xeb, 0xd7, 0x73, 0xbc, 0xda, 0xfc, 0x69, 0x6d, 0xfa, 0xda, 0xd5, 0x3d, 0x77, 0xf9,
	0x8d, 0xdf, 0x0f, 0xda, 0xc1, 0x1f, 0x07, 0xed, 0xe0, 0xcf, 0x83, 0x76, 0x70, 0x23, 0xed, 0x0b,
	0xe7, 0xc5, 0xbc, 0x59, 0x47, 0xa2, 0xeb, 0x8a, 0x0c, 0x6f, 0xa2, 0xe9, 0x77, 0xb7, 0x90, 0x17,
	0x6e, 0xeb, 0xa6, 0x72, 0xeb, 0x42, 0xf6, 0xd1, 0xba, 0xf5, 0x81, 0x13, 0xeb, 0x92, 0x3b, 0xb1,
	0x8b, 0x5d, 0xbd, 0xdd, 0xef, 0x0e, 0x9c, 0xe8, 0xf2, 0x1e, 0xd7, 0x0e, 0x8d, 0xed, 0xd2, 0xef,
	0xe9, 0xda, 0x6c, 0x0b, 0x87, 0xfc, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x53, 0x6f, 0xfd, 0xa0,
	0x93, 0x08, 0x00, 0x00,
}

func (m *JunosPfeExportMonStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosPfeExportMonStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosPfeExportMonStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.System != nil {
		{
			size, err := m.System.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPfeExportMonOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *JunosPfeExportMonStatsSystemType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosPfeExportMonStatsSystemType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosPfeExportMonStatsSystemType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Linecard != nil {
		{
			size, err := m.Linecard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPfeExportMonOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExportMonitor != nil {
		{
			size, err := m.ExportMonitor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPfeExportMonOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExportInfo) > 0 {
		for iNdEx := len(m.ExportInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExportInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPfeExportMonOc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xc2
		}
	}
	return len(dAtA) - i, nil
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Wraps) > 0 {
		for iNdEx := len(m.Wraps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Wraps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPfeExportMonOc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xb
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.Accounting != nil {
		{
			size, err := m.Accounting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPfeExportMonOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xba
	}
	if len(m.Clients) > 0 {
		for iNdEx := len(m.Clients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Clients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPfeExportMonOc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
			i--
			dAtA[i] = 0x9a
		}
	}
	if m.NumClients != nil {
		i = encodeVarintPfeExportMonOc(dAtA, i, uint64(*m.NumClients))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0x90
	}
	if m.Server != nil {
		{
			size, err := m.Server.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPfeExportMonOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xfa
	}
	if m.PlpOptions != nil {
		i = encodeVarintPfeExportMonOc(dAtA, i, uint64(*m.PlpOptions))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xf0
	}
	if m.FcOptions != nil {
		i = encodeVarintPfeExportMonOc(dAtA, i, uint64(*m.FcOptions))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xe8
	}
	if m.QosOptions != nil {
		i = encodeVarintPfeExportMonOc(dAtA, i, uint64(*m.QosOptions))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xe0
	}
	if m.PayloadSize != nil {
		i = encodeVarintPfeExportMonOc(dAtA, i, uint64(*m.PayloadSize))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xd8
	}
	if m.RepInterval != nil {
		i = encodeVarintPfeExportMonOc(dAtA, i, uint64(*m.RepInterval))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xd0
	}
	if m.Resource != nil {
		i -= len(*m.Resource)
		copy(dAtA[i:], *m.Resource)
		i = encodeVarintPfeExportMonOc(dAtA, i, uint64(len(*m.Resource)))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Port != nil {
		i = encodeVarintPfeExportMonOc(dAtA, i, uint64(*m.Port))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0x88
	}
	if m.Ip != nil {
		i -= len(*m.Ip)
		copy(dAtA[i:], *m.Ip)
		i = encodeVarintPfeExportMonOc(dAtA, i, uint64(len(*m.Ip)))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Port != nil {
		i = encodeVarintPfeExportMonOc(dAtA, i, uint64(*m.Port))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xb0
	}
	if m.Ip != nil {
		i -= len(*m.Ip)
		copy(dAtA[i:], *m.Ip)
		i = encodeVarintPfeExportMonOc(dAtA, i, uint64(len(*m.Ip)))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xaa
	}
	if m.Index != nil {
		i = encodeVarintPfeExportMonOc(dAtA, i, uint64(*m.Index))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xa0
	}
	return len(dAtA) - i, nil
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastPacketSize != nil {
		i = encodeVarintPfeExportMonOc(dAtA, i, uint64(*m.LastPacketSize))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0x80
	}
	if m.AverageReaps != nil {
		i = encodeVarintPfeExportMonOc(dAtA, i, uint64(*m.AverageReaps))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xf8
	}
	if m.NumWraps != nil {
		i = encodeVarintPfeExportMonOc(dAtA, i, uint64(*m.NumWraps))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xf0
	}
	if m.TotalPackets != nil {
		i = encodeVarintPfeExportMonOc(dAtA, i, uint64(*m.TotalPackets))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xe8
	}
	if m.InstancesInLastRepInterval != nil {
		i = encodeVarintPfeExportMonOc(dAtA, i, uint64(*m.InstancesInLastRepInterval))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xe0
	}
	if m.PacketsInLastRepInterval != nil {
		i = encodeVarintPfeExportMonOc(dAtA, i, uint64(*m.PacketsInLastRepInterval))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xd8
	}
	if m.ReapsInLastRepInterval != nil {
		i = encodeVarintPfeExportMonOc(dAtA, i, uint64(*m.ReapsInLastRepInterval))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xd0
	}
	if m.FailedReaps != nil {
		i = encodeVarintPfeExportMonOc(dAtA, i, uint64(*m.FailedReaps))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xc8
	}
	if m.SuccessfulReaps != nil {
		i = encodeVarintPfeExportMonOc(dAtA, i, uint64(*m.SuccessfulReaps))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xc0
	}
	return len(dAtA) - i, nil
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Time != nil {
		i -= len(*m.Time)
		copy(dAtA[i:], *m.Time)
		i = encodeVarintPfeExportMonOc(dAtA, i, uint64(len(*m.Time)))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0x9a
	}
	if m.Index != nil {
		i = encodeVarintPfeExportMonOc(dAtA, i, uint64(*m.Index))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0x90
	}
	return len(dAtA) - i, nil
}

func encodeVarintPfeExportMonOc(dAtA []byte, offset int, v uint64) int {
	offset -= sovPfeExportMonOc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *JunosPfeExportMonStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.System != nil {
		l = m.System.Size()
		n += 2 + l + sovPfeExportMonOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosPfeExportMonStatsSystemType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Linecard != nil {
		l = m.Linecard.Size()
		n += 2 + l + sovPfeExportMonOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExportMonitor != nil {
		l = m.ExportMonitor.Size()
		n += 2 + l + sovPfeExportMonOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExportInfo) > 0 {
		for _, e := range m.ExportInfo {
			l = e.Size()
			n += 2 + l + sovPfeExportMonOc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resource != nil {
		l = len(*m.Resource)
		n += 2 + l + sovPfeExportMonOc(uint64(l))
	}
	if m.RepInterval != nil {
		n += 2 + sovPfeExportMonOc(uint64(*m.RepInterval))
	}
	if m.PayloadSize != nil {
		n += 2 + sovPfeExportMonOc(uint64(*m.PayloadSize))
	}
	if m.QosOptions != nil {
		n += 2 + sovPfeExportMonOc(uint64(*m.QosOptions))
	}
	if m.FcOptions != nil {
		n += 2 + sovPfeExportMonOc(uint64(*m.FcOptions))
	}
	if m.PlpOptions != nil {
		n += 2 + sovPfeExportMonOc(uint64(*m.PlpOptions))
	}
	if m.Server != nil {
		l = m.Server.Size()
		n += 2 + l + sovPfeExportMonOc(uint64(l))
	}
	if m.NumClients != nil {
		n += 2 + sovPfeExportMonOc(uint64(*m.NumClients))
	}
	if len(m.Clients) > 0 {
		for _, e := range m.Clients {
			l = e.Size()
			n += 2 + l + sovPfeExportMonOc(uint64(l))
		}
	}
	if m.Accounting != nil {
		l = m.Accounting.Size()
		n += 2 + l + sovPfeExportMonOc(uint64(l))
	}
	if len(m.Wraps) > 0 {
		for _, e := range m.Wraps {
			l = e.Size()
			n += 2 + l + sovPfeExportMonOc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ip != nil {
		l = len(*m.Ip)
		n += 2 + l + sovPfeExportMonOc(uint64(l))
	}
	if m.Port != nil {
		n += 2 + sovPfeExportMonOc(uint64(*m.Port))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != nil {
		n += 2 + sovPfeExportMonOc(uint64(*m.Index))
	}
	if m.Ip != nil {
		l = len(*m.Ip)
		n += 2 + l + sovPfeExportMonOc(uint64(l))
	}
	if m.Port != nil {
		n += 2 + sovPfeExportMonOc(uint64(*m.Port))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SuccessfulReaps != nil {
		n += 2 + sovPfeExportMonOc(uint64(*m.SuccessfulReaps))
	}
	if m.FailedReaps != nil {
		n += 2 + sovPfeExportMonOc(uint64(*m.FailedReaps))
	}
	if m.ReapsInLastRepInterval != nil {
		n += 2 + sovPfeExportMonOc(uint64(*m.ReapsInLastRepInterval))
	}
	if m.PacketsInLastRepInterval != nil {
		n += 2 + sovPfeExportMonOc(uint64(*m.PacketsInLastRepInterval))
	}
	if m.InstancesInLastRepInterval != nil {
		n += 2 + sovPfeExportMonOc(uint64(*m.InstancesInLastRepInterval))
	}
	if m.TotalPackets != nil {
		n += 2 + sovPfeExportMonOc(uint64(*m.TotalPackets))
	}
	if m.NumWraps != nil {
		n += 2 + sovPfeExportMonOc(uint64(*m.NumWraps))
	}
	if m.AverageReaps != nil {
		n += 2 + sovPfeExportMonOc(uint64(*m.AverageReaps))
	}
	if m.LastPacketSize != nil {
		n += 2 + sovPfeExportMonOc(uint64(*m.LastPacketSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != nil {
		n += 2 + sovPfeExportMonOc(uint64(*m.Index))
	}
	if m.Time != nil {
		l = len(*m.Time)
		n += 2 + l + sovPfeExportMonOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPfeExportMonOc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPfeExportMonOc(x uint64) (n int) {
	return sovPfeExportMonOc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *JunosPfeExportMonStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfeExportMonOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: junos_pfe_export_mon_stats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: junos_pfe_export_mon_stats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field System", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeExportMonOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.System == nil {
				m.System = &JunosPfeExportMonStatsSystemType{}
			}
			if err := m.System.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPfeExportMonOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosPfeExportMonStatsSystemType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfeExportMonOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: system_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: system_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Linecard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeExportMonOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Linecard == nil {
				m.Linecard = &JunosPfeExportMonStatsSystemTypeLinecardType{}
			}
			if err := m.Linecard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPfeExportMonOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfeExportMonOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: linecard_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: linecard_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportMonitor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeExportMonOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExportMonitor == nil {
				m.ExportMonitor = &JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorType{}
			}
			if err := m.ExportMonitor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPfeExportMonOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfeExportMonOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: export_monitor_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: export_monitor_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 152:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeExportMonOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportInfo = append(m.ExportInfo, &JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList{})
			if err := m.ExportInfo[len(m.ExportInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPfeExportMonOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfeExportMonOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: export_info_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: export_info_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 153:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeExportMonOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Resource = &s
			iNdEx = postIndex
		case 154:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepInterval", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeExportMonOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RepInterval = &v
		case 155:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayloadSize", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeExportMonOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PayloadSize = &v
		case 156:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QosOptions", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeExportMonOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.QosOptions = &v
		case 157:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FcOptions", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeExportMonOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FcOptions = &v
		case 158:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlpOptions", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeExportMonOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlpOptions = &v
		case 159:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeExportMonOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Server == nil {
				m.Server = &JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType{}
			}
			if err := m.Server.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 162:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumClients", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeExportMonOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumClients = &v
		case 163:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeExportMonOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Clients = append(m.Clients, &JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList{})
			if err := m.Clients[len(m.Clients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 167:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeExportMonOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Accounting == nil {
				m.Accounting = &JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType{}
			}
			if err := m.Accounting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 177:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wraps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeExportMonOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wraps = append(m.Wraps, &JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList{})
			if err := m.Wraps[len(m.Wraps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPfeExportMonOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListServerType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfeExportMonOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: server_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: server_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 160:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeExportMonOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Ip = &s
			iNdEx = postIndex
		case 161:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeExportMonOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Port = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPfeExportMonOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListClientsList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfeExportMonOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: clients_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: clients_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 164:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeExportMonOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Index = &v
		case 165:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeExportMonOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Ip = &s
			iNdEx = postIndex
		case 166:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeExportMonOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Port = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPfeExportMonOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListAccountingType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfeExportMonOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: accounting_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: accounting_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 168:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessfulReaps", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeExportMonOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SuccessfulReaps = &v
		case 169:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailedReaps", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeExportMonOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FailedReaps = &v
		case 170:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReapsInLastRepInterval", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeExportMonOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReapsInLastRepInterval = &v
		case 171:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketsInLastRepInterval", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeExportMonOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PacketsInLastRepInterval = &v
		case 172:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstancesInLastRepInterval", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeExportMonOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InstancesInLastRepInterval = &v
		case 173:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPackets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeExportMonOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalPackets = &v
		case 174:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumWraps", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeExportMonOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumWraps = &v
		case 175:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageReaps", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeExportMonOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AverageReaps = &v
		case 176:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPacketSize", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeExportMonOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastPacketSize = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPfeExportMonOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosPfeExportMonStatsSystemTypeLinecardTypeExportMonitorTypeExportInfoListWrapsList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfeExportMonOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: wraps_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: wraps_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 178:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeExportMonOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Index = &v
		case 179:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeExportMonOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Time = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPfeExportMonOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPfeExportMonOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPfeExportMonOc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPfeExportMonOc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPfeExportMonOc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPfeExportMonOc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPfeExportMonOc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPfeExportMonOc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPfeExportMonOc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPfeExportMonOc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPfeExportMonOc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPfeExportMonOc = fmt.Errorf("proto: unexpected end of group")
)
