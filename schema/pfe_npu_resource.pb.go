// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pfe_npu_resource.proto

package schema

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type JunosPfeNpu struct {
	NpuMemory            []*JunosPfeNpuNpuMemoryList `protobuf:"bytes,151,rep,name=npu_memory,json=npuMemory" json:"npu_memory,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *JunosPfeNpu) Reset()         { *m = JunosPfeNpu{} }
func (m *JunosPfeNpu) String() string { return proto.CompactTextString(m) }
func (*JunosPfeNpu) ProtoMessage()    {}
func (*JunosPfeNpu) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdd8cb97f7b6deb1, []int{0}
}
func (m *JunosPfeNpu) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosPfeNpu) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosPfeNpu.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosPfeNpu) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosPfeNpu.Merge(m, src)
}
func (m *JunosPfeNpu) XXX_Size() int {
	return m.Size()
}
func (m *JunosPfeNpu) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosPfeNpu.DiscardUnknown(m)
}

var xxx_messageInfo_JunosPfeNpu proto.InternalMessageInfo

func (m *JunosPfeNpu) GetNpuMemory() []*JunosPfeNpuNpuMemoryList {
	if m != nil {
		return m.NpuMemory
	}
	return nil
}

type JunosPfeNpuNpuMemoryList struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JunosPfeNpuNpuMemoryList) Reset()         { *m = JunosPfeNpuNpuMemoryList{} }
func (m *JunosPfeNpuNpuMemoryList) String() string { return proto.CompactTextString(m) }
func (*JunosPfeNpuNpuMemoryList) ProtoMessage()    {}
func (*JunosPfeNpuNpuMemoryList) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdd8cb97f7b6deb1, []int{0, 0}
}
func (m *JunosPfeNpuNpuMemoryList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosPfeNpuNpuMemoryList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosPfeNpuNpuMemoryList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosPfeNpuNpuMemoryList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosPfeNpuNpuMemoryList.Merge(m, src)
}
func (m *JunosPfeNpuNpuMemoryList) XXX_Size() int {
	return m.Size()
}
func (m *JunosPfeNpuNpuMemoryList) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosPfeNpuNpuMemoryList.DiscardUnknown(m)
}

var xxx_messageInfo_JunosPfeNpuNpuMemoryList proto.InternalMessageInfo

var E_JnprJunosPfeNpuExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*JunosPfeNpu)(nil),
	Field:         59,
	Name:          "jnpr_junos_pfe_npu_ext",
	Tag:           "bytes,59,opt,name=jnpr_junos_pfe_npu_ext",
	Filename:      "pfe_npu_resource.proto",
}

func init() {
	proto.RegisterType((*JunosPfeNpu)(nil), "junos_pfe_npu")
	proto.RegisterType((*JunosPfeNpuNpuMemoryList)(nil), "junos_pfe_npu.npu_memory_list")
	proto.RegisterExtension(E_JnprJunosPfeNpuExt)
}

func init() { proto.RegisterFile("pfe_npu_resource.proto", fileDescriptor_cdd8cb97f7b6deb1) }

var fileDescriptor_cdd8cb97f7b6deb1 = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8e, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x09, 0x9e, 0xdc, 0xa2, 0x62, 0x84, 0x5a, 0x7a, 0x08, 0xc5, 0x53, 0x2f, 0xc9, 0x42,
	0x8f, 0x0a, 0x1e, 0x04, 0x2f, 0x05, 0x8b, 0xc4, 0x9b, 0x1e, 0xd6, 0x24, 0x4e, 0x93, 0x4d, 0x93,
	0xdd, 0x61, 0x76, 0x56, 0xdb, 0x27, 0xf1, 0x95, 0x3c, 0xfa, 0x08, 0x92, 0x27, 0x91, 0x58, 0x41,
	0xe2, 0x71, 0xfe, 0xf9, 0xbf, 0x6f, 0x46, 0x8c, 0x71, 0x0d, 0xca, 0xa0, 0x57, 0x04, 0xce, 0x7a,
	0x2a, 0x20, 0x41, 0xb2, 0x6c, 0xa7, 0x67, 0x0c, 0x0d, 0xb4, 0xc0, 0xb4, 0x53, 0x6c, 0x71, 0x1f,
	0x5e, 0xe4, 0xe2, 0xa8, 0xf6, 0xc6, 0x3a, 0xf5, 0x0b, 0x85, 0xd7, 0x42, 0xf4, 0x6c, 0x0b, 0xad,
	0xa5, 0xdd, 0xe4, 0x3d, 0x98, 0x1d, 0xcc, 0x47, 0x8b, 0x28, 0x19, 0x94, 0x92, 0xbf, 0x86, 0x6a,
	0xb4, 0xe3, 0xf4, 0xd0, 0xa0, 0xbf, 0xfb, 0x99, 0xa7, 0xa7, 0xe2, 0xe4, 0xdf, 0xf6, 0xf2, 0x49,
	0x8c, 0x6b, 0x83, 0xa4, 0x06, 0x0e, 0x05, 0x5b, 0x0e, 0xcf, 0x93, 0xa5, 0x37, 0x1a, 0x81, 0x56,
	0xc0, 0x6f, 0x96, 0x36, 0xee, 0x01, 0x8c, 0xb3, 0xe4, 0x26, 0x57, 0xb3, 0x60, 0x3e, 0x5a, 0x1c,
	0x0f, 0xcf, 0xa6, 0x61, 0xaf, 0x59, 0xf6, 0xd1, 0xfd, 0x1a, 0x56, 0xe8, 0x6f, 0xb7, 0x7c, 0xf3,
	0xfc, 0xd1, 0x45, 0xc1, 0x67, 0x17, 0x05, 0x5f, 0x5d, 0x14, 0x3c, 0xa6, 0xa5, 0xe6, 0x1e, 0xea,
	0x9d, 0x89, 0x01, 0x96, 0xba, 0x80, 0x1c, 0xa8, 0x94, 0x15, 0x64, 0x0d, 0x57, 0xb9, 0xe5, 0x58,
	0x9b, 0x12, 0x1c, 0xc7, 0x35, 0xeb, 0xd8, 0x64, 0xac, 0x5f, 0x41, 0xe2, 0xa6, 0x94, 0x35, 0x6b,
	0x99, 0xbd, 0x64, 0xc8, 0x40, 0x4e, 0xee, 0x3f, 0x95, 0xae, 0xa8, 0xa0, 0xcd, 0xbe, 0x03, 0x00,
	0x00, 0xff, 0xff, 0x79, 0x29, 0xa7, 0x65, 0x50, 0x01, 0x00, 0x00,
}

func (m *JunosPfeNpu) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosPfeNpu) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosPfeNpu) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NpuMemory) > 0 {
		for iNdEx := len(m.NpuMemory) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NpuMemory[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPfeNpuResource(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *JunosPfeNpuNpuMemoryList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosPfeNpuNpuMemoryList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosPfeNpuNpuMemoryList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintPfeNpuResource(dAtA []byte, offset int, v uint64) int {
	offset -= sovPfeNpuResource(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *JunosPfeNpu) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NpuMemory) > 0 {
		for _, e := range m.NpuMemory {
			l = e.Size()
			n += 2 + l + sovPfeNpuResource(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosPfeNpuNpuMemoryList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPfeNpuResource(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPfeNpuResource(x uint64) (n int) {
	return sovPfeNpuResource(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *JunosPfeNpu) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfeNpuResource
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: junos_pfe_npu: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: junos_pfe_npu: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NpuMemory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfeNpuResource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfeNpuResource
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfeNpuResource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NpuMemory = append(m.NpuMemory, &JunosPfeNpuNpuMemoryList{})
			if err := m.NpuMemory[len(m.NpuMemory)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPfeNpuResource(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPfeNpuResource
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPfeNpuResource
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosPfeNpuNpuMemoryList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfeNpuResource
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: npu_memory_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: npu_memory_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPfeNpuResource(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPfeNpuResource
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPfeNpuResource
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPfeNpuResource(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPfeNpuResource
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPfeNpuResource
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPfeNpuResource
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPfeNpuResource
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPfeNpuResource
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPfeNpuResource
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPfeNpuResource        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPfeNpuResource          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPfeNpuResource = fmt.Errorf("proto: unexpected end of group")
)
