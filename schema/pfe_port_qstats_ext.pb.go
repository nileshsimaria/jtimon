// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pfe_port_qstats_ext.proto

package schema

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InterfacesPfePortQstats struct {
	Interface            []*InterfacesPfePortQstatsInterfaceList `protobuf:"bytes,151,rep,name=interface" json:"interface,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *InterfacesPfePortQstats) Reset()         { *m = InterfacesPfePortQstats{} }
func (m *InterfacesPfePortQstats) String() string { return proto.CompactTextString(m) }
func (*InterfacesPfePortQstats) ProtoMessage()    {}
func (*InterfacesPfePortQstats) Descriptor() ([]byte, []int) {
	return fileDescriptor_b03c49f876c4931e, []int{0}
}
func (m *InterfacesPfePortQstats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesPfePortQstats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesPfePortQstats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesPfePortQstats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesPfePortQstats.Merge(m, src)
}
func (m *InterfacesPfePortQstats) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesPfePortQstats) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesPfePortQstats.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesPfePortQstats proto.InternalMessageInfo

func (m *InterfacesPfePortQstats) GetInterface() []*InterfacesPfePortQstatsInterfaceList {
	if m != nil {
		return m.Interface
	}
	return nil
}

type InterfacesPfePortQstatsInterfaceList struct {
	Name                 *string                                        `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	State                *InterfacesPfePortQstatsInterfaceListStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                       `json:"-"`
	XXX_unrecognized     []byte                                         `json:"-"`
	XXX_sizecache        int32                                          `json:"-"`
}

func (m *InterfacesPfePortQstatsInterfaceList) Reset()         { *m = InterfacesPfePortQstatsInterfaceList{} }
func (m *InterfacesPfePortQstatsInterfaceList) String() string { return proto.CompactTextString(m) }
func (*InterfacesPfePortQstatsInterfaceList) ProtoMessage()    {}
func (*InterfacesPfePortQstatsInterfaceList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b03c49f876c4931e, []int{0, 0}
}
func (m *InterfacesPfePortQstatsInterfaceList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesPfePortQstatsInterfaceList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesPfePortQstatsInterfaceList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesPfePortQstatsInterfaceList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesPfePortQstatsInterfaceList.Merge(m, src)
}
func (m *InterfacesPfePortQstatsInterfaceList) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesPfePortQstatsInterfaceList) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesPfePortQstatsInterfaceList.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesPfePortQstatsInterfaceList proto.InternalMessageInfo

func (m *InterfacesPfePortQstatsInterfaceList) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *InterfacesPfePortQstatsInterfaceList) GetState() *InterfacesPfePortQstatsInterfaceListStateType {
	if m != nil {
		return m.State
	}
	return nil
}

type InterfacesPfePortQstatsInterfaceListStateType struct {
	Counters             *InterfacesPfePortQstatsInterfaceListStateTypeCountersType `protobuf:"bytes,151,opt,name=counters" json:"counters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                   `json:"-"`
	XXX_unrecognized     []byte                                                     `json:"-"`
	XXX_sizecache        int32                                                      `json:"-"`
}

func (m *InterfacesPfePortQstatsInterfaceListStateType) Reset() {
	*m = InterfacesPfePortQstatsInterfaceListStateType{}
}
func (m *InterfacesPfePortQstatsInterfaceListStateType) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesPfePortQstatsInterfaceListStateType) ProtoMessage() {}
func (*InterfacesPfePortQstatsInterfaceListStateType) Descriptor() ([]byte, []int) {
	return fileDescriptor_b03c49f876c4931e, []int{0, 0, 0}
}
func (m *InterfacesPfePortQstatsInterfaceListStateType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesPfePortQstatsInterfaceListStateType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesPfePortQstatsInterfaceListStateType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesPfePortQstatsInterfaceListStateType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesPfePortQstatsInterfaceListStateType.Merge(m, src)
}
func (m *InterfacesPfePortQstatsInterfaceListStateType) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesPfePortQstatsInterfaceListStateType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesPfePortQstatsInterfaceListStateType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesPfePortQstatsInterfaceListStateType proto.InternalMessageInfo

func (m *InterfacesPfePortQstatsInterfaceListStateType) GetCounters() *InterfacesPfePortQstatsInterfaceListStateTypeCountersType {
	if m != nil {
		return m.Counters
	}
	return nil
}

type InterfacesPfePortQstatsInterfaceListStateTypeCountersType struct {
	OutQueue             []*InterfacesPfePortQstatsInterfaceListStateTypeCountersTypeOutQueueList `protobuf:"bytes,151,rep,name=out_queue,json=outQueue" json:"out_queue,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                 `json:"-"`
	XXX_unrecognized     []byte                                                                   `json:"-"`
	XXX_sizecache        int32                                                                    `json:"-"`
}

func (m *InterfacesPfePortQstatsInterfaceListStateTypeCountersType) Reset() {
	*m = InterfacesPfePortQstatsInterfaceListStateTypeCountersType{}
}
func (m *InterfacesPfePortQstatsInterfaceListStateTypeCountersType) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesPfePortQstatsInterfaceListStateTypeCountersType) ProtoMessage() {}
func (*InterfacesPfePortQstatsInterfaceListStateTypeCountersType) Descriptor() ([]byte, []int) {
	return fileDescriptor_b03c49f876c4931e, []int{0, 0, 0, 0}
}
func (m *InterfacesPfePortQstatsInterfaceListStateTypeCountersType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesPfePortQstatsInterfaceListStateTypeCountersType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesPfePortQstatsInterfaceListStateTypeCountersType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesPfePortQstatsInterfaceListStateTypeCountersType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesPfePortQstatsInterfaceListStateTypeCountersType.Merge(m, src)
}
func (m *InterfacesPfePortQstatsInterfaceListStateTypeCountersType) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesPfePortQstatsInterfaceListStateTypeCountersType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesPfePortQstatsInterfaceListStateTypeCountersType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesPfePortQstatsInterfaceListStateTypeCountersType proto.InternalMessageInfo

func (m *InterfacesPfePortQstatsInterfaceListStateTypeCountersType) GetOutQueue() []*InterfacesPfePortQstatsInterfaceListStateTypeCountersTypeOutQueueList {
	if m != nil {
		return m.OutQueue
	}
	return nil
}

type InterfacesPfePortQstatsInterfaceListStateTypeCountersTypeOutQueueList struct {
	QueueNumber          *uint32  `protobuf:"varint,51,opt,name=queue_number,json=queueNumber" json:"queue_number,omitempty"`
	QueuedPkts           *uint64  `protobuf:"varint,52,opt,name=queued_pkts,json=queuedPkts" json:"queued_pkts,omitempty"`
	QueuedBytes          *uint64  `protobuf:"varint,53,opt,name=queued_bytes,json=queuedBytes" json:"queued_bytes,omitempty"`
	LpRedDropPkts        *uint64  `protobuf:"varint,54,opt,name=lp_red_drop_pkts,json=lpRedDropPkts" json:"lp_red_drop_pkts,omitempty"`
	HpRedDropPkts        *uint64  `protobuf:"varint,55,opt,name=hp_red_drop_pkts,json=hpRedDropPkts" json:"hp_red_drop_pkts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InterfacesPfePortQstatsInterfaceListStateTypeCountersTypeOutQueueList) Reset() {
	*m = InterfacesPfePortQstatsInterfaceListStateTypeCountersTypeOutQueueList{}
}
func (m *InterfacesPfePortQstatsInterfaceListStateTypeCountersTypeOutQueueList) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesPfePortQstatsInterfaceListStateTypeCountersTypeOutQueueList) ProtoMessage() {}
func (*InterfacesPfePortQstatsInterfaceListStateTypeCountersTypeOutQueueList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b03c49f876c4931e, []int{0, 0, 0, 0, 0}
}
func (m *InterfacesPfePortQstatsInterfaceListStateTypeCountersTypeOutQueueList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesPfePortQstatsInterfaceListStateTypeCountersTypeOutQueueList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesPfePortQstatsInterfaceListStateTypeCountersTypeOutQueueList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesPfePortQstatsInterfaceListStateTypeCountersTypeOutQueueList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesPfePortQstatsInterfaceListStateTypeCountersTypeOutQueueList.Merge(m, src)
}
func (m *InterfacesPfePortQstatsInterfaceListStateTypeCountersTypeOutQueueList) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesPfePortQstatsInterfaceListStateTypeCountersTypeOutQueueList) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesPfePortQstatsInterfaceListStateTypeCountersTypeOutQueueList.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesPfePortQstatsInterfaceListStateTypeCountersTypeOutQueueList proto.InternalMessageInfo

func (m *InterfacesPfePortQstatsInterfaceListStateTypeCountersTypeOutQueueList) GetQueueNumber() uint32 {
	if m != nil && m.QueueNumber != nil {
		return *m.QueueNumber
	}
	return 0
}

func (m *InterfacesPfePortQstatsInterfaceListStateTypeCountersTypeOutQueueList) GetQueuedPkts() uint64 {
	if m != nil && m.QueuedPkts != nil {
		return *m.QueuedPkts
	}
	return 0
}

func (m *InterfacesPfePortQstatsInterfaceListStateTypeCountersTypeOutQueueList) GetQueuedBytes() uint64 {
	if m != nil && m.QueuedBytes != nil {
		return *m.QueuedBytes
	}
	return 0
}

func (m *InterfacesPfePortQstatsInterfaceListStateTypeCountersTypeOutQueueList) GetLpRedDropPkts() uint64 {
	if m != nil && m.LpRedDropPkts != nil {
		return *m.LpRedDropPkts
	}
	return 0
}

func (m *InterfacesPfePortQstatsInterfaceListStateTypeCountersTypeOutQueueList) GetHpRedDropPkts() uint64 {
	if m != nil && m.HpRedDropPkts != nil {
		return *m.HpRedDropPkts
	}
	return 0
}

var E_JnprInterfacesPfePortQstatsExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*InterfacesPfePortQstats)(nil),
	Field:         133,
	Name:          "jnpr_interfaces_pfe_port_qstats_ext",
	Tag:           "bytes,133,opt,name=jnpr_interfaces_pfe_port_qstats_ext",
	Filename:      "pfe_port_qstats_ext.proto",
}

func init() {
	proto.RegisterType((*InterfacesPfePortQstats)(nil), "interfaces_pfe_port_qstats")
	proto.RegisterType((*InterfacesPfePortQstatsInterfaceList)(nil), "interfaces_pfe_port_qstats.interface_list")
	proto.RegisterType((*InterfacesPfePortQstatsInterfaceListStateType)(nil), "interfaces_pfe_port_qstats.interface_list.state_type")
	proto.RegisterType((*InterfacesPfePortQstatsInterfaceListStateTypeCountersType)(nil), "interfaces_pfe_port_qstats.interface_list.state_type.counters_type")
	proto.RegisterType((*InterfacesPfePortQstatsInterfaceListStateTypeCountersTypeOutQueueList)(nil), "interfaces_pfe_port_qstats.interface_list.state_type.counters_type.out_queue_list")
	proto.RegisterExtension(E_JnprInterfacesPfePortQstatsExt)
}

func init() { proto.RegisterFile("pfe_port_qstats_ext.proto", fileDescriptor_b03c49f876c4931e) }

var fileDescriptor_b03c49f876c4931e = []byte{
	// 488 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xc1, 0x6a, 0x13, 0x41,
	0x18, 0xc7, 0x99, 0x36, 0x81, 0x64, 0x62, 0x4a, 0x19, 0x0f, 0xa6, 0x2b, 0xc4, 0xa8, 0x87, 0x06,
	0x21, 0xbb, 0x50, 0xad, 0x82, 0x27, 0x89, 0x7a, 0xa8, 0x48, 0x49, 0xd7, 0x9b, 0x97, 0xe9, 0x26,
	0xfb, 0x25, 0xd9, 0xcd, 0x66, 0x66, 0x3a, 0xf3, 0xad, 0x36, 0xd7, 0x82, 0xcf, 0xe0, 0x43, 0xf8,
	0x14, 0x1e, 0x04, 0x8f, 0x3d, 0xf8, 0x00, 0x92, 0x27, 0x91, 0x9d, 0x69, 0x36, 0xa6, 0x50, 0x11,
	0xf1, 0xf8, 0x7d, 0xff, 0xef, 0xff, 0xfb, 0xc3, 0x7f, 0x86, 0xee, 0xa9, 0x31, 0x70, 0x25, 0x35,
	0xf2, 0x33, 0x83, 0x11, 0x1a, 0x0e, 0xe7, 0xe8, 0x2b, 0x2d, 0x51, 0x7a, 0xb7, 0x11, 0x32, 0x98,
	0x03, 0xea, 0x05, 0x47, 0xa9, 0xdc, 0xf2, 0xc1, 0x97, 0x2a, 0xf5, 0x12, 0x81, 0xa0, 0xc7, 0xd1,
	0x08, 0x0c, 0xbf, 0xe6, 0x66, 0x47, 0xb4, 0x5e, 0xaa, 0xad, 0xcf, 0xa4, 0xb3, 0xdd, 0x6d, 0x1c,
	0x3c, 0xf2, 0x6f, 0x36, 0xac, 0x25, 0x9e, 0x25, 0x06, 0xc3, 0xb5, 0xdb, 0xfb, 0x5a, 0xa1, 0x3b,
	0x9b, 0x2a, 0xdb, 0xa3, 0x15, 0x11, 0xcd, 0xa1, 0xf5, 0xb8, 0x43, 0xba, 0xf5, 0x7e, 0xf5, 0xe2,
	0xc5, 0x56, 0x8d, 0x84, 0x76, 0xc5, 0xde, 0xd2, 0x6a, 0x01, 0xb4, 0xa1, 0xa4, 0xdb, 0x38, 0x38,
	0xfc, 0xfb, 0x50, 0xdf, 0x1a, 0x39, 0x2e, 0x14, 0x84, 0x0e, 0xe2, 0x7d, 0xdb, 0xa6, 0x74, 0xbd,
	0x65, 0xa7, 0xb4, 0x36, 0x92, 0x79, 0x61, 0x32, 0x2b, 0xfe, 0xcb, 0x7f, 0xe2, 0xfb, 0x2b, 0x8c,
	0x4b, 0x2b, 0xa9, 0xde, 0x8f, 0x2d, 0xda, 0xdc, 0xd0, 0x98, 0xa2, 0x75, 0x99, 0x23, 0x3f, 0xcb,
	0x21, 0x2f, 0x9b, 0x0c, 0xff, 0x43, 0xa8, 0x5f, 0x52, 0x5d, 0xe3, 0x35, 0x99, 0xe3, 0x49, 0x31,
	0x7a, 0x97, 0x84, 0xee, 0x6c, 0x8a, 0xac, 0x4b, 0x6f, 0xb9, 0x49, 0xe4, 0xf3, 0x21, 0x68, 0x5b,
	0x7c, 0x73, 0x55, 0x7c, 0xc3, 0x4a, 0xc7, 0x56, 0x61, 0xf7, 0xa8, 0x1b, 0x63, 0xae, 0x66, 0x68,
	0x5a, 0x4f, 0x3a, 0xa4, 0x5b, 0x09, 0xa9, 0x5b, 0x0d, 0x66, 0x68, 0xd8, 0xfd, 0x2b, 0x54, 0xcc,
	0x87, 0x0b, 0x04, 0xd3, 0x3a, 0xb4, 0x17, 0x57, 0xa6, 0x7e, 0xb1, 0x62, 0xfb, 0x74, 0x37, 0x53,
	0x5c, 0x43, 0xcc, 0x63, 0x2d, 0x95, 0x03, 0x3d, 0xb5, 0x67, 0xcd, 0x4c, 0x85, 0x10, 0xbf, 0xd2,
	0x52, 0x59, 0xd6, 0x3e, 0xdd, 0x9d, 0x5e, 0x3f, 0x7c, 0xe6, 0x0e, 0xa7, 0xbf, 0x1f, 0x3e, 0xbf,
	0x20, 0xf4, 0x61, 0x2a, 0x94, 0xe6, 0x37, 0xf7, 0x56, 0x7c, 0x78, 0x76, 0xc7, 0x7f, 0x93, 0x8b,
	0x44, 0x81, 0x3e, 0x06, 0xfc, 0x28, 0xf5, 0xcc, 0xbc, 0x03, 0x61, 0xa4, 0x36, 0xad, 0x4f, 0xee,
	0xb5, 0xef, 0xfe, 0xa1, 0xf8, 0xb0, 0x5d, 0x24, 0x1c, 0x95, 0xfa, 0x60, 0x0c, 0x03, 0xa9, 0xf1,
	0xc4, 0x8a, 0xaf, 0xcf, 0xb1, 0x7f, 0xfa, 0x7d, 0xd9, 0x26, 0x97, 0xcb, 0x36, 0xf9, 0xb9, 0x6c,
	0x93, 0xf7, 0xe1, 0x24, 0x41, 0x3f, 0x75, 0x69, 0xbe, 0x00, 0x0c, 0x92, 0x11, 0x0c, 0x41, 0x4f,
	0x82, 0x29, 0x44, 0x19, 0x4e, 0x87, 0x12, 0x7b, 0x89, 0x98, 0x80, 0xc1, 0x5e, 0x8a, 0x49, 0x4f,
	0x44, 0x98, 0x7c, 0x80, 0x40, 0xcd, 0x26, 0x41, 0x8a, 0x49, 0x10, 0xc5, 0x91, 0x2a, 0x5e, 0x32,
	0xe0, 0x69, 0x2e, 0xa4, 0x09, 0xcc, 0x68, 0x0a, 0xf3, 0xe8, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xa4, 0x20, 0x10, 0xe8, 0xc5, 0x03, 0x00, 0x00,
}

func (m *InterfacesPfePortQstats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesPfePortQstats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesPfePortQstats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Interface) > 0 {
		for iNdEx := len(m.Interface) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Interface[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPfePortQstatsExt(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesPfePortQstatsInterfaceList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesPfePortQstatsInterfaceList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesPfePortQstatsInterfaceList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPfePortQstatsExt(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintPfePortQstatsExt(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesPfePortQstatsInterfaceListStateType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesPfePortQstatsInterfaceListStateType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesPfePortQstatsInterfaceListStateType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Counters != nil {
		{
			size, err := m.Counters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPfePortQstatsExt(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesPfePortQstatsInterfaceListStateTypeCountersType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesPfePortQstatsInterfaceListStateTypeCountersType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesPfePortQstatsInterfaceListStateTypeCountersType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OutQueue) > 0 {
		for iNdEx := len(m.OutQueue) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutQueue[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPfePortQstatsExt(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesPfePortQstatsInterfaceListStateTypeCountersTypeOutQueueList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesPfePortQstatsInterfaceListStateTypeCountersTypeOutQueueList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesPfePortQstatsInterfaceListStateTypeCountersTypeOutQueueList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HpRedDropPkts != nil {
		i = encodeVarintPfePortQstatsExt(dAtA, i, uint64(*m.HpRedDropPkts))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.LpRedDropPkts != nil {
		i = encodeVarintPfePortQstatsExt(dAtA, i, uint64(*m.LpRedDropPkts))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.QueuedBytes != nil {
		i = encodeVarintPfePortQstatsExt(dAtA, i, uint64(*m.QueuedBytes))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.QueuedPkts != nil {
		i = encodeVarintPfePortQstatsExt(dAtA, i, uint64(*m.QueuedPkts))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.QueueNumber != nil {
		i = encodeVarintPfePortQstatsExt(dAtA, i, uint64(*m.QueueNumber))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func encodeVarintPfePortQstatsExt(dAtA []byte, offset int, v uint64) int {
	offset -= sovPfePortQstatsExt(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InterfacesPfePortQstats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Interface) > 0 {
		for _, e := range m.Interface {
			l = e.Size()
			n += 2 + l + sovPfePortQstatsExt(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesPfePortQstatsInterfaceList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 2 + l + sovPfePortQstatsExt(uint64(l))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 2 + l + sovPfePortQstatsExt(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesPfePortQstatsInterfaceListStateType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Counters != nil {
		l = m.Counters.Size()
		n += 2 + l + sovPfePortQstatsExt(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesPfePortQstatsInterfaceListStateTypeCountersType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OutQueue) > 0 {
		for _, e := range m.OutQueue {
			l = e.Size()
			n += 2 + l + sovPfePortQstatsExt(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesPfePortQstatsInterfaceListStateTypeCountersTypeOutQueueList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueueNumber != nil {
		n += 2 + sovPfePortQstatsExt(uint64(*m.QueueNumber))
	}
	if m.QueuedPkts != nil {
		n += 2 + sovPfePortQstatsExt(uint64(*m.QueuedPkts))
	}
	if m.QueuedBytes != nil {
		n += 2 + sovPfePortQstatsExt(uint64(*m.QueuedBytes))
	}
	if m.LpRedDropPkts != nil {
		n += 2 + sovPfePortQstatsExt(uint64(*m.LpRedDropPkts))
	}
	if m.HpRedDropPkts != nil {
		n += 2 + sovPfePortQstatsExt(uint64(*m.HpRedDropPkts))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPfePortQstatsExt(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPfePortQstatsExt(x uint64) (n int) {
	return sovPfePortQstatsExt(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InterfacesPfePortQstats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfePortQstatsExt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: interfaces_pfe_port_qstats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: interfaces_pfe_port_qstats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfePortQstatsExt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfePortQstatsExt
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfePortQstatsExt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interface = append(m.Interface, &InterfacesPfePortQstatsInterfaceList{})
			if err := m.Interface[len(m.Interface)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPfePortQstatsExt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPfePortQstatsExt
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPfePortQstatsExt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesPfePortQstatsInterfaceList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfePortQstatsExt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: interface_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: interface_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfePortQstatsExt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPfePortQstatsExt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPfePortQstatsExt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfePortQstatsExt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfePortQstatsExt
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfePortQstatsExt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &InterfacesPfePortQstatsInterfaceListStateType{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPfePortQstatsExt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPfePortQstatsExt
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPfePortQstatsExt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesPfePortQstatsInterfaceListStateType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfePortQstatsExt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: state_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: state_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfePortQstatsExt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfePortQstatsExt
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfePortQstatsExt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Counters == nil {
				m.Counters = &InterfacesPfePortQstatsInterfaceListStateTypeCountersType{}
			}
			if err := m.Counters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPfePortQstatsExt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPfePortQstatsExt
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPfePortQstatsExt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesPfePortQstatsInterfaceListStateTypeCountersType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfePortQstatsExt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: counters_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: counters_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfePortQstatsExt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfePortQstatsExt
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfePortQstatsExt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutQueue = append(m.OutQueue, &InterfacesPfePortQstatsInterfaceListStateTypeCountersTypeOutQueueList{})
			if err := m.OutQueue[len(m.OutQueue)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPfePortQstatsExt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPfePortQstatsExt
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPfePortQstatsExt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesPfePortQstatsInterfaceListStateTypeCountersTypeOutQueueList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfePortQstatsExt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: out_queue_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: out_queue_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueNumber", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfePortQstatsExt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.QueueNumber = &v
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueuedPkts", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfePortQstatsExt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.QueuedPkts = &v
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueuedBytes", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfePortQstatsExt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.QueuedBytes = &v
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LpRedDropPkts", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfePortQstatsExt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LpRedDropPkts = &v
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HpRedDropPkts", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfePortQstatsExt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HpRedDropPkts = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPfePortQstatsExt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPfePortQstatsExt
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPfePortQstatsExt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPfePortQstatsExt(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPfePortQstatsExt
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPfePortQstatsExt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPfePortQstatsExt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPfePortQstatsExt
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPfePortQstatsExt
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPfePortQstatsExt
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPfePortQstatsExt        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPfePortQstatsExt          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPfePortQstatsExt = fmt.Errorf("proto: unexpected end of group")
)
