// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pfed_oc.proto

package schema

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type JunosPfe struct {
	NpuMemory            []*JunosPfeNpuMemoryList `protobuf:"bytes,151,rep,name=npu_memory,json=npuMemory" json:"npu_memory,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *JunosPfe) Reset()         { *m = JunosPfe{} }
func (m *JunosPfe) String() string { return proto.CompactTextString(m) }
func (*JunosPfe) ProtoMessage()    {}
func (*JunosPfe) Descriptor() ([]byte, []int) {
	return fileDescriptor_5714edf97ed06d9c, []int{0}
}
func (m *JunosPfe) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosPfe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosPfe.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosPfe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosPfe.Merge(m, src)
}
func (m *JunosPfe) XXX_Size() int {
	return m.Size()
}
func (m *JunosPfe) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosPfe.DiscardUnknown(m)
}

var xxx_messageInfo_JunosPfe proto.InternalMessageInfo

func (m *JunosPfe) GetNpuMemory() []*JunosPfeNpuMemoryList {
	if m != nil {
		return m.NpuMemory
	}
	return nil
}

type JunosPfeNpuMemoryList struct {
	PfeName              *string  `protobuf:"bytes,51,opt,name=pfe_name,json=pfeName" json:"pfe_name,omitempty"`
	CombinedPoolName     *string  `protobuf:"bytes,52,opt,name=combined_pool_name,json=combinedPoolName" json:"combined_pool_name,omitempty"`
	CombinedSize         *uint32  `protobuf:"varint,53,opt,name=combined_size,json=combinedSize" json:"combined_size,omitempty"`
	CombinedUsageCount   *uint32  `protobuf:"varint,54,opt,name=combined_usage_count,json=combinedUsageCount" json:"combined_usage_count,omitempty"`
	CombinedUtilization  *uint32  `protobuf:"varint,55,opt,name=combined_utilization,json=combinedUtilization" json:"combined_utilization,omitempty"`
	GlobalPoolName       *string  `protobuf:"bytes,56,opt,name=global_pool_name,json=globalPoolName" json:"global_pool_name,omitempty"`
	GlobalUsageCount     *uint32  `protobuf:"varint,57,opt,name=global_usage_count,json=globalUsageCount" json:"global_usage_count,omitempty"`
	GlobalAllocCount     *uint32  `protobuf:"varint,58,opt,name=global_alloc_count,json=globalAllocCount" json:"global_alloc_count,omitempty"`
	GlobalFreeCount      *uint32  `protobuf:"varint,59,opt,name=global_free_count,json=globalFreeCount" json:"global_free_count,omitempty"`
	LocalPoolName        *string  `protobuf:"bytes,60,opt,name=local_pool_name,json=localPoolName" json:"local_pool_name,omitempty"`
	LocalUsageCount      *uint32  `protobuf:"varint,61,opt,name=local_usage_count,json=localUsageCount" json:"local_usage_count,omitempty"`
	LocalAllocCount      *uint32  `protobuf:"varint,62,opt,name=local_alloc_count,json=localAllocCount" json:"local_alloc_count,omitempty"`
	LocalFreeCount       *uint32  `protobuf:"varint,63,opt,name=local_free_count,json=localFreeCount" json:"local_free_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JunosPfeNpuMemoryList) Reset()         { *m = JunosPfeNpuMemoryList{} }
func (m *JunosPfeNpuMemoryList) String() string { return proto.CompactTextString(m) }
func (*JunosPfeNpuMemoryList) ProtoMessage()    {}
func (*JunosPfeNpuMemoryList) Descriptor() ([]byte, []int) {
	return fileDescriptor_5714edf97ed06d9c, []int{0, 0}
}
func (m *JunosPfeNpuMemoryList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosPfeNpuMemoryList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosPfeNpuMemoryList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosPfeNpuMemoryList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosPfeNpuMemoryList.Merge(m, src)
}
func (m *JunosPfeNpuMemoryList) XXX_Size() int {
	return m.Size()
}
func (m *JunosPfeNpuMemoryList) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosPfeNpuMemoryList.DiscardUnknown(m)
}

var xxx_messageInfo_JunosPfeNpuMemoryList proto.InternalMessageInfo

func (m *JunosPfeNpuMemoryList) GetPfeName() string {
	if m != nil && m.PfeName != nil {
		return *m.PfeName
	}
	return ""
}

func (m *JunosPfeNpuMemoryList) GetCombinedPoolName() string {
	if m != nil && m.CombinedPoolName != nil {
		return *m.CombinedPoolName
	}
	return ""
}

func (m *JunosPfeNpuMemoryList) GetCombinedSize() uint32 {
	if m != nil && m.CombinedSize != nil {
		return *m.CombinedSize
	}
	return 0
}

func (m *JunosPfeNpuMemoryList) GetCombinedUsageCount() uint32 {
	if m != nil && m.CombinedUsageCount != nil {
		return *m.CombinedUsageCount
	}
	return 0
}

func (m *JunosPfeNpuMemoryList) GetCombinedUtilization() uint32 {
	if m != nil && m.CombinedUtilization != nil {
		return *m.CombinedUtilization
	}
	return 0
}

func (m *JunosPfeNpuMemoryList) GetGlobalPoolName() string {
	if m != nil && m.GlobalPoolName != nil {
		return *m.GlobalPoolName
	}
	return ""
}

func (m *JunosPfeNpuMemoryList) GetGlobalUsageCount() uint32 {
	if m != nil && m.GlobalUsageCount != nil {
		return *m.GlobalUsageCount
	}
	return 0
}

func (m *JunosPfeNpuMemoryList) GetGlobalAllocCount() uint32 {
	if m != nil && m.GlobalAllocCount != nil {
		return *m.GlobalAllocCount
	}
	return 0
}

func (m *JunosPfeNpuMemoryList) GetGlobalFreeCount() uint32 {
	if m != nil && m.GlobalFreeCount != nil {
		return *m.GlobalFreeCount
	}
	return 0
}

func (m *JunosPfeNpuMemoryList) GetLocalPoolName() string {
	if m != nil && m.LocalPoolName != nil {
		return *m.LocalPoolName
	}
	return ""
}

func (m *JunosPfeNpuMemoryList) GetLocalUsageCount() uint32 {
	if m != nil && m.LocalUsageCount != nil {
		return *m.LocalUsageCount
	}
	return 0
}

func (m *JunosPfeNpuMemoryList) GetLocalAllocCount() uint32 {
	if m != nil && m.LocalAllocCount != nil {
		return *m.LocalAllocCount
	}
	return 0
}

func (m *JunosPfeNpuMemoryList) GetLocalFreeCount() uint32 {
	if m != nil && m.LocalFreeCount != nil {
		return *m.LocalFreeCount
	}
	return 0
}

var E_JnprJunosPfeExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*JunosPfe)(nil),
	Field:         57,
	Name:          "jnpr_junos_pfe_ext",
	Tag:           "bytes,57,opt,name=jnpr_junos_pfe_ext",
	Filename:      "pfed_oc.proto",
}

func init() {
	proto.RegisterType((*JunosPfe)(nil), "junos_pfe")
	proto.RegisterType((*JunosPfeNpuMemoryList)(nil), "junos_pfe.npu_memory_list")
	proto.RegisterExtension(E_JnprJunosPfeExt)
}

func init() { proto.RegisterFile("pfed_oc.proto", fileDescriptor_5714edf97ed06d9c) }

var fileDescriptor_5714edf97ed06d9c = []byte{
	// 497 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x86, 0xe5, 0xef, 0xa3, 0xa2, 0x99, 0x92, 0x26, 0x75, 0x91, 0x88, 0xb2, 0x88, 0x22, 0x90,
	0x50, 0x54, 0x35, 0x31, 0x94, 0xff, 0xf0, 0x5f, 0x04, 0x8b, 0x4a, 0x54, 0x91, 0x2b, 0x36, 0x6c,
	0xcc, 0xc4, 0x39, 0x76, 0x26, 0x1d, 0xcf, 0x8c, 0xc6, 0xc7, 0xd0, 0x66, 0xc9, 0x1d, 0xb0, 0xe2,
	0x92, 0x60, 0xc9, 0x25, 0xa0, 0x5c, 0x09, 0xf2, 0xd8, 0x99, 0x0c, 0x2c, 0xe7, 0xbc, 0xcf, 0x79,
	0xfd, 0xc8, 0x3a, 0xa4, 0xa9, 0x12, 0x98, 0x45, 0x32, 0x1e, 0x29, 0x2d, 0x51, 0x76, 0xf7, 0x11,
	0x38, 0x64, 0x80, 0xfa, 0x32, 0x42, 0xa9, 0xaa, 0xe1, 0xcd, 0x6f, 0x5b, 0xa4, 0xb1, 0x28, 0x84,
	0xcc, 0x23, 0x95, 0x80, 0x3f, 0x26, 0x44, 0xa8, 0x22, 0xca, 0x20, 0x93, 0xfa, 0xb2, 0xf3, 0xdd,
	0xeb, 0xff, 0x3f, 0xd8, 0x39, 0xea, 0x8e, 0x2c, 0x30, 0xda, 0xa4, 0x11, 0x67, 0x39, 0x86, 0x0d,
	0xa1, 0x8a, 0xf7, 0xe6, 0xdd, 0xfd, 0x71, 0x85, 0xb4, 0xfe, 0x89, 0xfd, 0x3e, 0xd9, 0x56, 0x09,
	0x44, 0x82, 0x66, 0xd0, 0xb9, 0xd7, 0xf7, 0x06, 0x8d, 0xe3, 0xad, 0xaf, 0xaf, 0xfe, 0xdb, 0xf6,
	0xc2, 0xab, 0x2a, 0x81, 0x53, 0x9a, 0x81, 0x7f, 0x48, 0xfc, 0x58, 0x66, 0x53, 0x26, 0x60, 0x16,
	0x29, 0x29, 0x79, 0xc5, 0xde, 0x2f, 0xd9, 0xb0, 0xbd, 0x4e, 0x26, 0x52, 0x72, 0x43, 0xdf, 0x22,
	0x4d, 0x4b, 0xe7, 0x6c, 0x09, 0x9d, 0x07, 0x7d, 0x6f, 0xd0, 0x0c, 0xaf, 0xad, 0x87, 0x67, 0x6c,
	0x09, 0xfe, 0x1d, 0x72, 0xdd, 0x42, 0x45, 0x4e, 0x53, 0x88, 0x62, 0x59, 0x08, 0xec, 0x3c, 0x34,
	0xac, 0xfd, 0xdc, 0x87, 0x32, 0x7a, 0x53, 0x26, 0xfe, 0x5d, 0x77, 0x03, 0x19, 0x67, 0x4b, 0x8a,
	0x4c, 0x8a, 0xce, 0x23, 0xb3, 0xb1, 0x6f, 0x37, 0x36, 0x91, 0x3f, 0x20, 0xed, 0x94, 0xcb, 0x29,
	0xe5, 0x8e, 0xf5, 0x63, 0x63, 0xbd, 0x5b, 0xcd, 0xad, 0xf3, 0x21, 0xf1, 0x6b, 0xd2, 0x95, 0x79,
	0x62, 0xaa, 0xeb, 0x0e, 0x47, 0x65, 0x43, 0x53, 0xce, 0x65, 0x5c, 0xd3, 0x63, 0x97, 0x7e, 0x5d,
	0x06, 0x15, 0x7d, 0x40, 0xf6, 0x6a, 0x3a, 0xd1, 0xb0, 0xae, 0x7e, 0x6a, 0xe0, 0x56, 0x15, 0xbc,
	0xd3, 0x50, 0x37, 0xdf, 0x26, 0x2d, 0x2e, 0xe3, 0xbf, 0x84, 0x9f, 0x19, 0xe1, 0xa6, 0x19, 0x5b,
	0xdf, 0x03, 0xb2, 0x57, 0x71, 0xae, 0xee, 0xf3, 0xaa, 0xd3, 0x04, 0x8e, 0xad, 0x65, 0x5d, 0xd9,
	0x17, 0x0e, 0xeb, 0xb8, 0x0e, 0x48, 0xbb, 0x62, 0x1d, 0xd5, 0x97, 0x06, 0xdd, 0x35, 0x73, 0x6b,
	0x3a, 0x9e, 0x10, 0x7f, 0x21, 0x94, 0x8e, 0xec, 0xd9, 0x45, 0x70, 0x81, 0xfe, 0x8d, 0xd1, 0x49,
	0x21, 0x98, 0x02, 0x7d, 0x0a, 0xf8, 0x45, 0xea, 0xf3, 0xfc, 0x0c, 0x44, 0x2e, 0x75, 0x6e, 0x7e,
	0xe5, 0xce, 0x11, 0xd9, 0x5c, 0x69, 0xd8, 0x2a, 0xd7, 0x4f, 0xca, 0xe7, 0x24, 0x81, 0xb7, 0x17,
	0x78, 0xfc, 0xe9, 0xe7, 0xaa, 0xe7, 0xfd, 0x5a, 0xf5, 0xbc, 0xdf, 0xab, 0x9e, 0xf7, 0x31, 0x4c,
	0x19, 0x96, 0x74, 0x59, 0x36, 0x12, 0x80, 0x01, 0x8b, 0x61, 0x0a, 0x3a, 0x0d, 0xe6, 0x40, 0x39,
	0xce, 0xa7, 0x12, 0x87, 0x4c, 0xa4, 0x90, 0xe3, 0x70, 0x81, 0x6c, 0x28, 0x28, 0xb2, 0xcf, 0x10,
	0xa8, 0xf3, 0x34, 0x58, 0x20, 0x0b, 0xe8, 0x8c, 0x2a, 0x04, 0x9d, 0x07, 0x95, 0x5e, 0x90, 0xc7,
	0x73, 0xc8, 0xe8, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2f, 0xf0, 0xa5, 0x27, 0x6c, 0x03, 0x00,
	0x00,
}

func (m *JunosPfe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosPfe) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosPfe) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NpuMemory) > 0 {
		for iNdEx := len(m.NpuMemory) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NpuMemory[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPfedOc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *JunosPfeNpuMemoryList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosPfeNpuMemoryList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosPfeNpuMemoryList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LocalFreeCount != nil {
		i = encodeVarintPfedOc(dAtA, i, uint64(*m.LocalFreeCount))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf8
	}
	if m.LocalAllocCount != nil {
		i = encodeVarintPfedOc(dAtA, i, uint64(*m.LocalAllocCount))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf0
	}
	if m.LocalUsageCount != nil {
		i = encodeVarintPfedOc(dAtA, i, uint64(*m.LocalUsageCount))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe8
	}
	if m.LocalPoolName != nil {
		i -= len(*m.LocalPoolName)
		copy(dAtA[i:], *m.LocalPoolName)
		i = encodeVarintPfedOc(dAtA, i, uint64(len(*m.LocalPoolName)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	if m.GlobalFreeCount != nil {
		i = encodeVarintPfedOc(dAtA, i, uint64(*m.GlobalFreeCount))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd8
	}
	if m.GlobalAllocCount != nil {
		i = encodeVarintPfedOc(dAtA, i, uint64(*m.GlobalAllocCount))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd0
	}
	if m.GlobalUsageCount != nil {
		i = encodeVarintPfedOc(dAtA, i, uint64(*m.GlobalUsageCount))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc8
	}
	if m.GlobalPoolName != nil {
		i -= len(*m.GlobalPoolName)
		copy(dAtA[i:], *m.GlobalPoolName)
		i = encodeVarintPfedOc(dAtA, i, uint64(len(*m.GlobalPoolName)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc2
	}
	if m.CombinedUtilization != nil {
		i = encodeVarintPfedOc(dAtA, i, uint64(*m.CombinedUtilization))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.CombinedUsageCount != nil {
		i = encodeVarintPfedOc(dAtA, i, uint64(*m.CombinedUsageCount))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.CombinedSize != nil {
		i = encodeVarintPfedOc(dAtA, i, uint64(*m.CombinedSize))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.CombinedPoolName != nil {
		i -= len(*m.CombinedPoolName)
		copy(dAtA[i:], *m.CombinedPoolName)
		i = encodeVarintPfedOc(dAtA, i, uint64(len(*m.CombinedPoolName)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	if m.PfeName != nil {
		i -= len(*m.PfeName)
		copy(dAtA[i:], *m.PfeName)
		i = encodeVarintPfedOc(dAtA, i, uint64(len(*m.PfeName)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func encodeVarintPfedOc(dAtA []byte, offset int, v uint64) int {
	offset -= sovPfedOc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *JunosPfe) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NpuMemory) > 0 {
		for _, e := range m.NpuMemory {
			l = e.Size()
			n += 2 + l + sovPfedOc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosPfeNpuMemoryList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PfeName != nil {
		l = len(*m.PfeName)
		n += 2 + l + sovPfedOc(uint64(l))
	}
	if m.CombinedPoolName != nil {
		l = len(*m.CombinedPoolName)
		n += 2 + l + sovPfedOc(uint64(l))
	}
	if m.CombinedSize != nil {
		n += 2 + sovPfedOc(uint64(*m.CombinedSize))
	}
	if m.CombinedUsageCount != nil {
		n += 2 + sovPfedOc(uint64(*m.CombinedUsageCount))
	}
	if m.CombinedUtilization != nil {
		n += 2 + sovPfedOc(uint64(*m.CombinedUtilization))
	}
	if m.GlobalPoolName != nil {
		l = len(*m.GlobalPoolName)
		n += 2 + l + sovPfedOc(uint64(l))
	}
	if m.GlobalUsageCount != nil {
		n += 2 + sovPfedOc(uint64(*m.GlobalUsageCount))
	}
	if m.GlobalAllocCount != nil {
		n += 2 + sovPfedOc(uint64(*m.GlobalAllocCount))
	}
	if m.GlobalFreeCount != nil {
		n += 2 + sovPfedOc(uint64(*m.GlobalFreeCount))
	}
	if m.LocalPoolName != nil {
		l = len(*m.LocalPoolName)
		n += 2 + l + sovPfedOc(uint64(l))
	}
	if m.LocalUsageCount != nil {
		n += 2 + sovPfedOc(uint64(*m.LocalUsageCount))
	}
	if m.LocalAllocCount != nil {
		n += 2 + sovPfedOc(uint64(*m.LocalAllocCount))
	}
	if m.LocalFreeCount != nil {
		n += 2 + sovPfedOc(uint64(*m.LocalFreeCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPfedOc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPfedOc(x uint64) (n int) {
	return sovPfedOc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *JunosPfe) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfedOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: junos_pfe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: junos_pfe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NpuMemory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfedOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfedOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfedOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NpuMemory = append(m.NpuMemory, &JunosPfeNpuMemoryList{})
			if err := m.NpuMemory[len(m.NpuMemory)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPfedOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPfedOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPfedOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosPfeNpuMemoryList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfedOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: npu_memory_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: npu_memory_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PfeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfedOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPfedOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPfedOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PfeName = &s
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CombinedPoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfedOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPfedOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPfedOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CombinedPoolName = &s
			iNdEx = postIndex
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CombinedSize", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfedOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CombinedSize = &v
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CombinedUsageCount", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfedOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CombinedUsageCount = &v
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CombinedUtilization", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfedOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CombinedUtilization = &v
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalPoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfedOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPfedOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPfedOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GlobalPoolName = &s
			iNdEx = postIndex
		case 57:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalUsageCount", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfedOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GlobalUsageCount = &v
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalAllocCount", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfedOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GlobalAllocCount = &v
		case 59:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalFreeCount", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfedOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GlobalFreeCount = &v
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfedOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPfedOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPfedOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LocalPoolName = &s
			iNdEx = postIndex
		case 61:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalUsageCount", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfedOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LocalUsageCount = &v
		case 62:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalAllocCount", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfedOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LocalAllocCount = &v
		case 63:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalFreeCount", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfedOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LocalFreeCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipPfedOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPfedOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPfedOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPfedOc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPfedOc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPfedOc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPfedOc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPfedOc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPfedOc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPfedOc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPfedOc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPfedOc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPfedOc = fmt.Errorf("proto: unexpected end of group")
)
