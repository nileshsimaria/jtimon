// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qmon.proto

package schema

import (
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueueMonitor struct {
	QueueMonitorElementInfo []*QueueMonitorElement `protobuf:"bytes,1,rep,name=queue_monitor_element_info,json=queueMonitorElementInfo" json:"queue_monitor_element_info,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}               `json:"-"`
	XXX_unrecognized        []byte                 `json:"-"`
	XXX_sizecache           int32                  `json:"-"`
}

func (m *QueueMonitor) Reset()         { *m = QueueMonitor{} }
func (m *QueueMonitor) String() string { return proto.CompactTextString(m) }
func (*QueueMonitor) ProtoMessage()    {}
func (*QueueMonitor) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0a18ca619b514d6, []int{0}
}
func (m *QueueMonitor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueueMonitor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueueMonitor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueueMonitor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueueMonitor.Merge(m, src)
}
func (m *QueueMonitor) XXX_Size() int {
	return m.Size()
}
func (m *QueueMonitor) XXX_DiscardUnknown() {
	xxx_messageInfo_QueueMonitor.DiscardUnknown(m)
}

var xxx_messageInfo_QueueMonitor proto.InternalMessageInfo

func (m *QueueMonitor) GetQueueMonitorElementInfo() []*QueueMonitorElement {
	if m != nil {
		return m.QueueMonitorElementInfo
	}
	return nil
}

// QueueMonitorElement for an interface
type QueueMonitorElement struct {
	// interface name
	IfName *string `protobuf:"bytes,1,req,name=if_name,json=ifName" json:"if_name,omitempty"`
	// parent ae interface name
	ParentAeName *string `protobuf:"bytes,2,opt,name=parent_ae_name,json=parentAeName" json:"parent_ae_name,omitempty"`
	// ingress stats
	QueueMonitorStatsIngress *QueueMonitorDirection `protobuf:"bytes,3,opt,name=queue_monitor_stats_ingress,json=queueMonitorStatsIngress" json:"queue_monitor_stats_ingress,omitempty"`
	// egress stats
	QueueMonitorStatsEgress *QueueMonitorDirection `protobuf:"bytes,4,opt,name=queue_monitor_stats_egress,json=queueMonitorStatsEgress" json:"queue_monitor_stats_egress,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}               `json:"-"`
	XXX_unrecognized        []byte                 `json:"-"`
	XXX_sizecache           int32                  `json:"-"`
}

func (m *QueueMonitorElement) Reset()         { *m = QueueMonitorElement{} }
func (m *QueueMonitorElement) String() string { return proto.CompactTextString(m) }
func (*QueueMonitorElement) ProtoMessage()    {}
func (*QueueMonitorElement) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0a18ca619b514d6, []int{1}
}
func (m *QueueMonitorElement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueueMonitorElement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueueMonitorElement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueueMonitorElement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueueMonitorElement.Merge(m, src)
}
func (m *QueueMonitorElement) XXX_Size() int {
	return m.Size()
}
func (m *QueueMonitorElement) XXX_DiscardUnknown() {
	xxx_messageInfo_QueueMonitorElement.DiscardUnknown(m)
}

var xxx_messageInfo_QueueMonitorElement proto.InternalMessageInfo

func (m *QueueMonitorElement) GetIfName() string {
	if m != nil && m.IfName != nil {
		return *m.IfName
	}
	return ""
}

func (m *QueueMonitorElement) GetParentAeName() string {
	if m != nil && m.ParentAeName != nil {
		return *m.ParentAeName
	}
	return ""
}

func (m *QueueMonitorElement) GetQueueMonitorStatsIngress() *QueueMonitorDirection {
	if m != nil {
		return m.QueueMonitorStatsIngress
	}
	return nil
}

func (m *QueueMonitorElement) GetQueueMonitorStatsEgress() *QueueMonitorDirection {
	if m != nil {
		return m.QueueMonitorStatsEgress
	}
	return nil
}

type QueueMonitorDirection struct {
	QueueMonitorStatsInfo []*QueueMonitorStats `protobuf:"bytes,1,rep,name=queue_monitor_stats_info,json=queueMonitorStatsInfo" json:"queue_monitor_stats_info,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}             `json:"-"`
	XXX_unrecognized      []byte               `json:"-"`
	XXX_sizecache         int32                `json:"-"`
}

func (m *QueueMonitorDirection) Reset()         { *m = QueueMonitorDirection{} }
func (m *QueueMonitorDirection) String() string { return proto.CompactTextString(m) }
func (*QueueMonitorDirection) ProtoMessage()    {}
func (*QueueMonitorDirection) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0a18ca619b514d6, []int{2}
}
func (m *QueueMonitorDirection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueueMonitorDirection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueueMonitorDirection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueueMonitorDirection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueueMonitorDirection.Merge(m, src)
}
func (m *QueueMonitorDirection) XXX_Size() int {
	return m.Size()
}
func (m *QueueMonitorDirection) XXX_DiscardUnknown() {
	xxx_messageInfo_QueueMonitorDirection.DiscardUnknown(m)
}

var xxx_messageInfo_QueueMonitorDirection proto.InternalMessageInfo

func (m *QueueMonitorDirection) GetQueueMonitorStatsInfo() []*QueueMonitorStats {
	if m != nil {
		return m.QueueMonitorStatsInfo
	}
	return nil
}

// QueueMonitorStats for a queue
type QueueMonitorStats struct {
	// queue number, 0-7
	QueueNumber *uint32 `protobuf:"varint,1,req,name=queue_number,json=queueNumber" json:"queue_number,omitempty"`
	// queue id, 0-max(16k for version 1)
	QueueId *uint32 `protobuf:"varint,2,req,name=queue_id,json=queueId" json:"queue_id,omitempty"`
	// peak_buffer_occupancy in bytes
	PeakBufferOccupancyBytes *uint32 `protobuf:"varint,3,req,name=peak_buffer_occupancy_bytes,json=peakBufferOccupancyBytes" json:"peak_buffer_occupancy_bytes,omitempty"`
	// (peak_buffer_occupancy/max_queue_size) * 100
	PeakBufferOccupancyPercent *uint32 `protobuf:"varint,4,opt,name=peak_buffer_occupancy_percent,json=peakBufferOccupancyPercent" json:"peak_buffer_occupancy_percent,omitempty"`
	// Count of packets/bytes forwarded
	Packets *uint64 `protobuf:"varint,5,req,name=packets" json:"packets,omitempty"`
	Octets  *uint64 `protobuf:"varint,6,req,name=octets" json:"octets,omitempty"`
	// Count of packets/bytes due to dropped tail/force/error
	TailDropPackets *uint64 `protobuf:"varint,7,req,name=tail_drop_packets,json=tailDropPackets" json:"tail_drop_packets,omitempty"`
	TailDropOctets  *uint64 `protobuf:"varint,8,req,name=tail_drop_octets,json=tailDropOctets" json:"tail_drop_octets,omitempty"`
	// Count of packets/bytes due to WRED color 0
	RedDropPacketsColor_0 *uint64 `protobuf:"varint,9,req,name=red_drop_packets_color_0,json=redDropPacketsColor0" json:"red_drop_packets_color_0,omitempty"`
	RedDropOctetsColor_0  *uint64 `protobuf:"varint,10,req,name=red_drop_octets_color_0,json=redDropOctetsColor0" json:"red_drop_octets_color_0,omitempty"`
	// Count of packets/bytes due to WRED color 1
	RedDropPacketsColor_1 *uint64 `protobuf:"varint,11,req,name=red_drop_packets_color_1,json=redDropPacketsColor1" json:"red_drop_packets_color_1,omitempty"`
	RedDropOctetsColor_1  *uint64 `protobuf:"varint,12,req,name=red_drop_octets_color_1,json=redDropOctetsColor1" json:"red_drop_octets_color_1,omitempty"`
	// Count of packets/bytes due to WRED color 2
	RedDropPacketsColor_2 *uint64 `protobuf:"varint,13,req,name=red_drop_packets_color_2,json=redDropPacketsColor2" json:"red_drop_packets_color_2,omitempty"`
	RedDropOctetsColor_2  *uint64 `protobuf:"varint,14,req,name=red_drop_octets_color_2,json=redDropOctetsColor2" json:"red_drop_octets_color_2,omitempty"`
	// Count of packets/bytes due to WRED color 3
	RedDropPacketsColor_3 *uint64  `protobuf:"varint,15,req,name=red_drop_packets_color_3,json=redDropPacketsColor3" json:"red_drop_packets_color_3,omitempty"`
	RedDropOctetsColor_3  *uint64  `protobuf:"varint,16,req,name=red_drop_octets_color_3,json=redDropOctetsColor3" json:"red_drop_octets_color_3,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *QueueMonitorStats) Reset()         { *m = QueueMonitorStats{} }
func (m *QueueMonitorStats) String() string { return proto.CompactTextString(m) }
func (*QueueMonitorStats) ProtoMessage()    {}
func (*QueueMonitorStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0a18ca619b514d6, []int{3}
}
func (m *QueueMonitorStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueueMonitorStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueueMonitorStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueueMonitorStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueueMonitorStats.Merge(m, src)
}
func (m *QueueMonitorStats) XXX_Size() int {
	return m.Size()
}
func (m *QueueMonitorStats) XXX_DiscardUnknown() {
	xxx_messageInfo_QueueMonitorStats.DiscardUnknown(m)
}

var xxx_messageInfo_QueueMonitorStats proto.InternalMessageInfo

func (m *QueueMonitorStats) GetQueueNumber() uint32 {
	if m != nil && m.QueueNumber != nil {
		return *m.QueueNumber
	}
	return 0
}

func (m *QueueMonitorStats) GetQueueId() uint32 {
	if m != nil && m.QueueId != nil {
		return *m.QueueId
	}
	return 0
}

func (m *QueueMonitorStats) GetPeakBufferOccupancyBytes() uint32 {
	if m != nil && m.PeakBufferOccupancyBytes != nil {
		return *m.PeakBufferOccupancyBytes
	}
	return 0
}

func (m *QueueMonitorStats) GetPeakBufferOccupancyPercent() uint32 {
	if m != nil && m.PeakBufferOccupancyPercent != nil {
		return *m.PeakBufferOccupancyPercent
	}
	return 0
}

func (m *QueueMonitorStats) GetPackets() uint64 {
	if m != nil && m.Packets != nil {
		return *m.Packets
	}
	return 0
}

func (m *QueueMonitorStats) GetOctets() uint64 {
	if m != nil && m.Octets != nil {
		return *m.Octets
	}
	return 0
}

func (m *QueueMonitorStats) GetTailDropPackets() uint64 {
	if m != nil && m.TailDropPackets != nil {
		return *m.TailDropPackets
	}
	return 0
}

func (m *QueueMonitorStats) GetTailDropOctets() uint64 {
	if m != nil && m.TailDropOctets != nil {
		return *m.TailDropOctets
	}
	return 0
}

func (m *QueueMonitorStats) GetRedDropPacketsColor_0() uint64 {
	if m != nil && m.RedDropPacketsColor_0 != nil {
		return *m.RedDropPacketsColor_0
	}
	return 0
}

func (m *QueueMonitorStats) GetRedDropOctetsColor_0() uint64 {
	if m != nil && m.RedDropOctetsColor_0 != nil {
		return *m.RedDropOctetsColor_0
	}
	return 0
}

func (m *QueueMonitorStats) GetRedDropPacketsColor_1() uint64 {
	if m != nil && m.RedDropPacketsColor_1 != nil {
		return *m.RedDropPacketsColor_1
	}
	return 0
}

func (m *QueueMonitorStats) GetRedDropOctetsColor_1() uint64 {
	if m != nil && m.RedDropOctetsColor_1 != nil {
		return *m.RedDropOctetsColor_1
	}
	return 0
}

func (m *QueueMonitorStats) GetRedDropPacketsColor_2() uint64 {
	if m != nil && m.RedDropPacketsColor_2 != nil {
		return *m.RedDropPacketsColor_2
	}
	return 0
}

func (m *QueueMonitorStats) GetRedDropOctetsColor_2() uint64 {
	if m != nil && m.RedDropOctetsColor_2 != nil {
		return *m.RedDropOctetsColor_2
	}
	return 0
}

func (m *QueueMonitorStats) GetRedDropPacketsColor_3() uint64 {
	if m != nil && m.RedDropPacketsColor_3 != nil {
		return *m.RedDropPacketsColor_3
	}
	return 0
}

func (m *QueueMonitorStats) GetRedDropOctetsColor_3() uint64 {
	if m != nil && m.RedDropOctetsColor_3 != nil {
		return *m.RedDropOctetsColor_3
	}
	return 0
}

var E_JnprQmonExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*QueueMonitor)(nil),
	Field:         15,
	Name:          "jnpr_qmon_ext",
	Tag:           "bytes,15,opt,name=jnpr_qmon_ext",
	Filename:      "qmon.proto",
}

func init() {
	proto.RegisterType((*QueueMonitor)(nil), "QueueMonitor")
	proto.RegisterType((*QueueMonitorElement)(nil), "QueueMonitorElement")
	proto.RegisterType((*QueueMonitorDirection)(nil), "QueueMonitorDirection")
	proto.RegisterType((*QueueMonitorStats)(nil), "QueueMonitorStats")
	proto.RegisterExtension(E_JnprQmonExt)
}

func init() { proto.RegisterFile("qmon.proto", fileDescriptor_b0a18ca619b514d6) }

var fileDescriptor_b0a18ca619b514d6 = []byte{
	// 692 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0xcd, 0x6e, 0x1a, 0x3b,
	0x18, 0x86, 0x35, 0x24, 0xe1, 0xc7, 0x40, 0x42, 0x9c, 0xe4, 0x60, 0x25, 0x4a, 0x0e, 0xe2, 0x6c,
	0x90, 0x8e, 0xc2, 0x04, 0xd8, 0xb5, 0xaa, 0xd2, 0xd2, 0x44, 0x6a, 0x22, 0x35, 0x3f, 0x13, 0x75,
	0xd1, 0x6e, 0xdc, 0x61, 0xf8, 0x20, 0x06, 0xc6, 0x9e, 0x78, 0x4c, 0x9b, 0xec, 0xaa, 0xf6, 0x12,
	0x7a, 0x53, 0x5d, 0xf6, 0x12, 0x2a, 0xae, 0xa4, 0x1a, 0x1b, 0xe8, 0xd0, 0x40, 0xd8, 0x81, 0xbf,
	0xf7, 0x79, 0x9f, 0xb1, 0xad, 0x19, 0x84, 0xee, 0x7c, 0xc1, 0xab, 0x81, 0x14, 0x4a, 0xec, 0x66,
	0x82, 0x56, 0x6f, 0xfc, 0x73, 0x4b, 0xc1, 0x00, 0x7c, 0x50, 0xf2, 0x81, 0x2a, 0x11, 0x98, 0xc5,
	0x32, 0x43, 0xb9, 0xeb, 0x21, 0x0c, 0xe1, 0xad, 0xe0, 0x4c, 0x09, 0x89, 0xdf, 0xa3, 0xdd, 0xbb,
	0xe8, 0x3f, 0xf5, 0xcd, 0x02, 0xd5, 0x0c, 0x57, 0x94, 0xf1, 0x8e, 0x20, 0x56, 0x69, 0xa5, 0x92,
	0xad, 0x6f, 0x57, 0xe3, 0xc8, 0xa9, 0x09, 0x34, 0x93, 0xa3, 0xe3, 0x95, 0xc2, 0x97, 0x82, 0x53,
	0xbc, 0x7b, 0x3c, 0x3c, 0xe3, 0x1d, 0x51, 0xfe, 0x9e, 0x40, 0x5b, 0x73, 0x40, 0xfc, 0x1f, 0x4a,
	0xb1, 0x0e, 0xe5, 0xae, 0x0f, 0xc4, 0x2a, 0x25, 0x2a, 0x99, 0x26, 0x1a, 0x1d, 0x27, 0xc8, 0xea,
	0xd7, 0x97, 0x89, 0xb4, 0xe5, 0x24, 0x59, 0xe7, 0xc2, 0xf5, 0x01, 0xff, 0x8f, 0xd6, 0x03, 0x57,
	0x46, 0x0f, 0xe2, 0x82, 0xc9, 0x26, 0x4a, 0x56, 0x25, 0xd3, 0x5c, 0xd3, 0x59, 0x27, 0x67, 0x86,
	0xaf, 0x40, 0x87, 0xdf, 0xa1, 0xbd, 0xd9, 0x4d, 0x84, 0xca, 0x55, 0x21, 0x65, 0xbc, 0x2b, 0x21,
	0x0c, 0xc9, 0x4a, 0xc9, 0xaa, 0x64, 0xeb, 0xff, 0xcc, 0xec, 0xe2, 0x84, 0x49, 0xf0, 0x14, 0x13,
	0xdc, 0x21, 0xf1, 0xe7, 0xbf, 0x89, 0xc0, 0x33, 0xc3, 0xe1, 0x9b, 0xbf, 0xcf, 0xc6, 0xd4, 0x82,
	0x69, 0x5d, 0x7d, 0xb2, 0xb5, 0xf8, 0xa8, 0xf5, 0x54, 0x63, 0xe5, 0x3e, 0xda, 0x99, 0x4b, 0x60,
	0x07, 0x91, 0xf9, 0x9b, 0x98, 0xde, 0x03, 0x9e, 0x71, 0xe9, 0x52, 0x7d, 0x1e, 0x85, 0xb4, 0xb3,
	0x33, 0x67, 0x13, 0x1d, 0x51, 0xfe, 0x96, 0x42, 0x9b, 0x8f, 0x18, 0x5c, 0x41, 0x39, 0x63, 0xe2,
	0x43, 0xbf, 0x05, 0x52, 0xdf, 0x42, 0xbe, 0xb9, 0x66, 0x2e, 0x20, 0xab, 0x47, 0x17, 0x7a, 0x82,
	0x4b, 0x28, 0x6d, 0x92, 0xac, 0x4d, 0x12, 0xf1, 0x54, 0x4a, 0x2f, 0x9f, 0xb5, 0xf1, 0x09, 0xda,
	0x0b, 0xc0, 0xed, 0xd3, 0xd6, 0xb0, 0xd3, 0x01, 0x49, 0x85, 0xe7, 0x0d, 0x03, 0x97, 0x7b, 0x0f,
	0xb4, 0xf5, 0xa0, 0x20, 0x3a, 0xfa, 0x09, 0x54, 0xb2, 0x1c, 0x12, 0x25, 0x9b, 0x3a, 0x78, 0x39,
	0xc9, 0x35, 0xa3, 0x18, 0x7e, 0x83, 0xf6, 0xe7, 0xb7, 0x04, 0x20, 0x3d, 0xe0, 0x4a, 0x1f, 0xf6,
	0xb4, 0x67, 0x77, 0x4e, 0xcf, 0x95, 0x09, 0xe2, 0x7f, 0x51, 0x2a, 0x70, 0xbd, 0x3e, 0xa8, 0x90,
	0xac, 0x95, 0x12, 0x95, 0x55, 0xcd, 0x10, 0xcb, 0x99, 0xac, 0xe2, 0x7d, 0x94, 0x14, 0x9e, 0x8a,
	0xe6, 0xc9, 0xf8, 0x7c, 0xbc, 0x88, 0x6b, 0x68, 0x53, 0xb9, 0x6c, 0x40, 0xdb, 0x52, 0x04, 0x74,
	0xd2, 0x94, 0x8a, 0x27, 0x37, 0xa2, 0xf9, 0x89, 0x14, 0xc1, 0xd5, 0xb8, 0xd1, 0x46, 0x85, 0x3f,
	0xc8, 0xb8, 0x3b, 0x1d, 0x27, 0xd6, 0x27, 0xc4, 0xa5, 0x71, 0xbc, 0x40, 0x44, 0x42, 0x7b, 0x46,
	0x41, 0x3d, 0x31, 0x10, 0x92, 0x1e, 0x91, 0x4c, 0x1c, 0xdc, 0x96, 0xd0, 0x8e, 0x99, 0x5e, 0x47,
	0x99, 0x23, 0xfc, 0x1c, 0x15, 0xa7, 0xb8, 0xd1, 0x4d, 0x69, 0x14, 0xa7, 0xb7, 0xc6, 0xb4, 0xb1,
	0x8e, 0xe1, 0xc5, 0xee, 0x1a, 0xc9, 0x2e, 0x73, 0xd7, 0x16, 0xbb, 0x6b, 0x24, 0xb7, 0xc4, 0x5d,
	0x7b, 0xc2, 0x5d, 0x27, 0xf9, 0x65, 0xee, 0xfa, 0x62, 0x77, 0x9d, 0xac, 0x2f, 0x71, 0xd7, 0x9f,
	0x70, 0x37, 0xc8, 0xc6, 0x32, 0x77, 0x63, 0xb1, 0xbb, 0x41, 0x0a, 0x4b, 0xdc, 0x8d, 0x67, 0xe7,
	0x28, 0xdf, 0xe3, 0x81, 0xa4, 0xd1, 0x67, 0x9a, 0xc2, 0xbd, 0xc2, 0xc5, 0xea, 0xf9, 0x90, 0xb3,
	0x00, 0xe4, 0x05, 0xa8, 0xcf, 0x42, 0xf6, 0xc3, 0x1b, 0xe0, 0xa1, 0x90, 0x21, 0xd9, 0xd0, 0xdf,
	0x94, 0xfc, 0xcc, 0x7b, 0xee, 0x64, 0x23, 0xf8, 0xda, 0x17, 0xfc, 0xf4, 0x5e, 0x35, 0x3f, 0xfe,
	0x18, 0x1d, 0x58, 0x3f, 0x47, 0x07, 0xd6, 0xaf, 0xd1, 0x81, 0xf5, 0xc1, 0xe9, 0x32, 0x55, 0xed,
	0x99, 0xae, 0x2a, 0x07, 0x65, 0x33, 0x0f, 0x5a, 0x20, 0xbb, 0xf6, 0x2d, 0xb8, 0x03, 0x75, 0xdb,
	0x12, 0xea, 0x90, 0xf1, 0x2e, 0x84, 0xea, 0xb0, 0xa7, 0xd8, 0x21, 0x77, 0x15, 0xfb, 0x04, 0x76,
	0xd0, 0xef, 0xda, 0x3d, 0xc5, 0x6c, 0xb7, 0xed, 0x06, 0x0a, 0x64, 0x68, 0xd3, 0xde, 0x90, 0x8b,
	0xd0, 0x0e, 0xbd, 0x5b, 0xf0, 0xdd, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x09, 0xb1, 0xb2, 0x83,
	0x4e, 0x06, 0x00, 0x00,
}

func (m *QueueMonitor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueueMonitor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueueMonitor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.QueueMonitorElementInfo) > 0 {
		for iNdEx := len(m.QueueMonitorElementInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.QueueMonitorElementInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQmon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueueMonitorElement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueueMonitorElement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueueMonitorElement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.QueueMonitorStatsEgress != nil {
		{
			size, err := m.QueueMonitorStatsEgress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQmon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.QueueMonitorStatsIngress != nil {
		{
			size, err := m.QueueMonitorStatsIngress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQmon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ParentAeName != nil {
		i -= len(*m.ParentAeName)
		copy(dAtA[i:], *m.ParentAeName)
		i = encodeVarintQmon(dAtA, i, uint64(len(*m.ParentAeName)))
		i--
		dAtA[i] = 0x12
	}
	if m.IfName == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("if_name")
	} else {
		i -= len(*m.IfName)
		copy(dAtA[i:], *m.IfName)
		i = encodeVarintQmon(dAtA, i, uint64(len(*m.IfName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueueMonitorDirection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueueMonitorDirection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueueMonitorDirection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.QueueMonitorStatsInfo) > 0 {
		for iNdEx := len(m.QueueMonitorStatsInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.QueueMonitorStatsInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQmon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueueMonitorStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueueMonitorStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueueMonitorStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RedDropOctetsColor_3 == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("red_drop_octets_color_3")
	} else {
		i = encodeVarintQmon(dAtA, i, uint64(*m.RedDropOctetsColor_3))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.RedDropPacketsColor_3 == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("red_drop_packets_color_3")
	} else {
		i = encodeVarintQmon(dAtA, i, uint64(*m.RedDropPacketsColor_3))
		i--
		dAtA[i] = 0x78
	}
	if m.RedDropOctetsColor_2 == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("red_drop_octets_color_2")
	} else {
		i = encodeVarintQmon(dAtA, i, uint64(*m.RedDropOctetsColor_2))
		i--
		dAtA[i] = 0x70
	}
	if m.RedDropPacketsColor_2 == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("red_drop_packets_color_2")
	} else {
		i = encodeVarintQmon(dAtA, i, uint64(*m.RedDropPacketsColor_2))
		i--
		dAtA[i] = 0x68
	}
	if m.RedDropOctetsColor_1 == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("red_drop_octets_color_1")
	} else {
		i = encodeVarintQmon(dAtA, i, uint64(*m.RedDropOctetsColor_1))
		i--
		dAtA[i] = 0x60
	}
	if m.RedDropPacketsColor_1 == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("red_drop_packets_color_1")
	} else {
		i = encodeVarintQmon(dAtA, i, uint64(*m.RedDropPacketsColor_1))
		i--
		dAtA[i] = 0x58
	}
	if m.RedDropOctetsColor_0 == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("red_drop_octets_color_0")
	} else {
		i = encodeVarintQmon(dAtA, i, uint64(*m.RedDropOctetsColor_0))
		i--
		dAtA[i] = 0x50
	}
	if m.RedDropPacketsColor_0 == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("red_drop_packets_color_0")
	} else {
		i = encodeVarintQmon(dAtA, i, uint64(*m.RedDropPacketsColor_0))
		i--
		dAtA[i] = 0x48
	}
	if m.TailDropOctets == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("tail_drop_octets")
	} else {
		i = encodeVarintQmon(dAtA, i, uint64(*m.TailDropOctets))
		i--
		dAtA[i] = 0x40
	}
	if m.TailDropPackets == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("tail_drop_packets")
	} else {
		i = encodeVarintQmon(dAtA, i, uint64(*m.TailDropPackets))
		i--
		dAtA[i] = 0x38
	}
	if m.Octets == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("octets")
	} else {
		i = encodeVarintQmon(dAtA, i, uint64(*m.Octets))
		i--
		dAtA[i] = 0x30
	}
	if m.Packets == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("packets")
	} else {
		i = encodeVarintQmon(dAtA, i, uint64(*m.Packets))
		i--
		dAtA[i] = 0x28
	}
	if m.PeakBufferOccupancyPercent != nil {
		i = encodeVarintQmon(dAtA, i, uint64(*m.PeakBufferOccupancyPercent))
		i--
		dAtA[i] = 0x20
	}
	if m.PeakBufferOccupancyBytes == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("peak_buffer_occupancy_bytes")
	} else {
		i = encodeVarintQmon(dAtA, i, uint64(*m.PeakBufferOccupancyBytes))
		i--
		dAtA[i] = 0x18
	}
	if m.QueueId == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("queue_id")
	} else {
		i = encodeVarintQmon(dAtA, i, uint64(*m.QueueId))
		i--
		dAtA[i] = 0x10
	}
	if m.QueueNumber == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("queue_number")
	} else {
		i = encodeVarintQmon(dAtA, i, uint64(*m.QueueNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQmon(dAtA []byte, offset int, v uint64) int {
	offset -= sovQmon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueueMonitor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.QueueMonitorElementInfo) > 0 {
		for _, e := range m.QueueMonitorElementInfo {
			l = e.Size()
			n += 1 + l + sovQmon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueueMonitorElement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IfName != nil {
		l = len(*m.IfName)
		n += 1 + l + sovQmon(uint64(l))
	}
	if m.ParentAeName != nil {
		l = len(*m.ParentAeName)
		n += 1 + l + sovQmon(uint64(l))
	}
	if m.QueueMonitorStatsIngress != nil {
		l = m.QueueMonitorStatsIngress.Size()
		n += 1 + l + sovQmon(uint64(l))
	}
	if m.QueueMonitorStatsEgress != nil {
		l = m.QueueMonitorStatsEgress.Size()
		n += 1 + l + sovQmon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueueMonitorDirection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.QueueMonitorStatsInfo) > 0 {
		for _, e := range m.QueueMonitorStatsInfo {
			l = e.Size()
			n += 1 + l + sovQmon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueueMonitorStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueueNumber != nil {
		n += 1 + sovQmon(uint64(*m.QueueNumber))
	}
	if m.QueueId != nil {
		n += 1 + sovQmon(uint64(*m.QueueId))
	}
	if m.PeakBufferOccupancyBytes != nil {
		n += 1 + sovQmon(uint64(*m.PeakBufferOccupancyBytes))
	}
	if m.PeakBufferOccupancyPercent != nil {
		n += 1 + sovQmon(uint64(*m.PeakBufferOccupancyPercent))
	}
	if m.Packets != nil {
		n += 1 + sovQmon(uint64(*m.Packets))
	}
	if m.Octets != nil {
		n += 1 + sovQmon(uint64(*m.Octets))
	}
	if m.TailDropPackets != nil {
		n += 1 + sovQmon(uint64(*m.TailDropPackets))
	}
	if m.TailDropOctets != nil {
		n += 1 + sovQmon(uint64(*m.TailDropOctets))
	}
	if m.RedDropPacketsColor_0 != nil {
		n += 1 + sovQmon(uint64(*m.RedDropPacketsColor_0))
	}
	if m.RedDropOctetsColor_0 != nil {
		n += 1 + sovQmon(uint64(*m.RedDropOctetsColor_0))
	}
	if m.RedDropPacketsColor_1 != nil {
		n += 1 + sovQmon(uint64(*m.RedDropPacketsColor_1))
	}
	if m.RedDropOctetsColor_1 != nil {
		n += 1 + sovQmon(uint64(*m.RedDropOctetsColor_1))
	}
	if m.RedDropPacketsColor_2 != nil {
		n += 1 + sovQmon(uint64(*m.RedDropPacketsColor_2))
	}
	if m.RedDropOctetsColor_2 != nil {
		n += 1 + sovQmon(uint64(*m.RedDropOctetsColor_2))
	}
	if m.RedDropPacketsColor_3 != nil {
		n += 1 + sovQmon(uint64(*m.RedDropPacketsColor_3))
	}
	if m.RedDropOctetsColor_3 != nil {
		n += 2 + sovQmon(uint64(*m.RedDropOctetsColor_3))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovQmon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQmon(x uint64) (n int) {
	return sovQmon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueueMonitor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQmon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueueMonitor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueueMonitor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueMonitorElementInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQmon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQmon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQmon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueueMonitorElementInfo = append(m.QueueMonitorElementInfo, &QueueMonitorElement{})
			if err := m.QueueMonitorElementInfo[len(m.QueueMonitorElementInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQmon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQmon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQmon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueueMonitorElement) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQmon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueueMonitorElement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueueMonitorElement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQmon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQmon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQmon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.IfName = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentAeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQmon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQmon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQmon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ParentAeName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueMonitorStatsIngress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQmon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQmon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQmon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueueMonitorStatsIngress == nil {
				m.QueueMonitorStatsIngress = &QueueMonitorDirection{}
			}
			if err := m.QueueMonitorStatsIngress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueMonitorStatsEgress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQmon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQmon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQmon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueueMonitorStatsEgress == nil {
				m.QueueMonitorStatsEgress = &QueueMonitorDirection{}
			}
			if err := m.QueueMonitorStatsEgress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQmon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQmon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQmon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("if_name")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueueMonitorDirection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQmon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueueMonitorDirection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueueMonitorDirection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueMonitorStatsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQmon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQmon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQmon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueueMonitorStatsInfo = append(m.QueueMonitorStatsInfo, &QueueMonitorStats{})
			if err := m.QueueMonitorStatsInfo[len(m.QueueMonitorStatsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQmon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQmon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQmon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueueMonitorStats) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQmon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueueMonitorStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueueMonitorStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueNumber", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQmon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.QueueNumber = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQmon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.QueueId = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeakBufferOccupancyBytes", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQmon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PeakBufferOccupancyBytes = &v
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeakBufferOccupancyPercent", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQmon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PeakBufferOccupancyPercent = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQmon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Packets = &v
			hasFields[0] |= uint64(0x00000008)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Octets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQmon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Octets = &v
			hasFields[0] |= uint64(0x00000010)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TailDropPackets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQmon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TailDropPackets = &v
			hasFields[0] |= uint64(0x00000020)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TailDropOctets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQmon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TailDropOctets = &v
			hasFields[0] |= uint64(0x00000040)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedDropPacketsColor_0", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQmon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RedDropPacketsColor_0 = &v
			hasFields[0] |= uint64(0x00000080)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedDropOctetsColor_0", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQmon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RedDropOctetsColor_0 = &v
			hasFields[0] |= uint64(0x00000100)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedDropPacketsColor_1", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQmon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RedDropPacketsColor_1 = &v
			hasFields[0] |= uint64(0x00000200)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedDropOctetsColor_1", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQmon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RedDropOctetsColor_1 = &v
			hasFields[0] |= uint64(0x00000400)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedDropPacketsColor_2", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQmon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RedDropPacketsColor_2 = &v
			hasFields[0] |= uint64(0x00000800)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedDropOctetsColor_2", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQmon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RedDropOctetsColor_2 = &v
			hasFields[0] |= uint64(0x00001000)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedDropPacketsColor_3", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQmon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RedDropPacketsColor_3 = &v
			hasFields[0] |= uint64(0x00002000)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedDropOctetsColor_3", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQmon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RedDropOctetsColor_3 = &v
			hasFields[0] |= uint64(0x00004000)
		default:
			iNdEx = preIndex
			skippy, err := skipQmon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQmon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQmon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("queue_number")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("queue_id")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("peak_buffer_occupancy_bytes")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("packets")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("octets")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("tail_drop_packets")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("tail_drop_octets")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("red_drop_packets_color_0")
	}
	if hasFields[0]&uint64(0x00000100) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("red_drop_octets_color_0")
	}
	if hasFields[0]&uint64(0x00000200) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("red_drop_packets_color_1")
	}
	if hasFields[0]&uint64(0x00000400) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("red_drop_octets_color_1")
	}
	if hasFields[0]&uint64(0x00000800) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("red_drop_packets_color_2")
	}
	if hasFields[0]&uint64(0x00001000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("red_drop_octets_color_2")
	}
	if hasFields[0]&uint64(0x00002000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("red_drop_packets_color_3")
	}
	if hasFields[0]&uint64(0x00004000) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("red_drop_octets_color_3")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQmon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQmon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQmon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQmon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQmon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQmon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQmon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQmon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQmon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQmon = fmt.Errorf("proto: unexpected end of group")
)
