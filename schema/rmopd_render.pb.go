// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rmopd_render.proto

package schema

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Junos struct {
	Rpm                  *JunosRpmType   `protobuf:"bytes,151,opt,name=rpm" json:"rpm,omitempty"`
	Twamp                *JunosTwampType `protobuf:"bytes,152,opt,name=twamp" json:"twamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Junos) Reset()         { *m = Junos{} }
func (m *Junos) String() string { return proto.CompactTextString(m) }
func (*Junos) ProtoMessage()    {}
func (*Junos) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ea3d1731efd5e28, []int{0}
}
func (m *Junos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Junos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Junos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Junos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Junos.Merge(m, src)
}
func (m *Junos) XXX_Size() int {
	return m.Size()
}
func (m *Junos) XXX_DiscardUnknown() {
	xxx_messageInfo_Junos.DiscardUnknown(m)
}

var xxx_messageInfo_Junos proto.InternalMessageInfo

func (m *Junos) GetRpm() *JunosRpmType {
	if m != nil {
		return m.Rpm
	}
	return nil
}

func (m *Junos) GetTwamp() *JunosTwampType {
	if m != nil {
		return m.Twamp
	}
	return nil
}

type JunosRpmType struct {
	ProbeResults         *JunosRpmTypeProbeResultsType   `protobuf:"bytes,151,opt,name=probe_results,json=probeResults" json:"probe_results,omitempty"`
	HistoryResults       *JunosRpmTypeHistoryResultsType `protobuf:"bytes,152,opt,name=history_results,json=historyResults" json:"history_results,omitempty"`
	Server               *JunosRpmTypeServerType         `protobuf:"bytes,153,opt,name=server" json:"server,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *JunosRpmType) Reset()         { *m = JunosRpmType{} }
func (m *JunosRpmType) String() string { return proto.CompactTextString(m) }
func (*JunosRpmType) ProtoMessage()    {}
func (*JunosRpmType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ea3d1731efd5e28, []int{0, 0}
}
func (m *JunosRpmType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosRpmType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosRpmType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosRpmType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosRpmType.Merge(m, src)
}
func (m *JunosRpmType) XXX_Size() int {
	return m.Size()
}
func (m *JunosRpmType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosRpmType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosRpmType proto.InternalMessageInfo

func (m *JunosRpmType) GetProbeResults() *JunosRpmTypeProbeResultsType {
	if m != nil {
		return m.ProbeResults
	}
	return nil
}

func (m *JunosRpmType) GetHistoryResults() *JunosRpmTypeHistoryResultsType {
	if m != nil {
		return m.HistoryResults
	}
	return nil
}

func (m *JunosRpmType) GetServer() *JunosRpmTypeServerType {
	if m != nil {
		return m.Server
	}
	return nil
}

type JunosRpmTypeProbeResultsType struct {
	ProbeTestResults     []*JunosRpmTypeProbeResultsTypeProbeTestResultsList `protobuf:"bytes,151,rep,name=probe_test_results,json=probeTestResults" json:"probe_test_results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                            `json:"-"`
	XXX_unrecognized     []byte                                              `json:"-"`
	XXX_sizecache        int32                                               `json:"-"`
}

func (m *JunosRpmTypeProbeResultsType) Reset()         { *m = JunosRpmTypeProbeResultsType{} }
func (m *JunosRpmTypeProbeResultsType) String() string { return proto.CompactTextString(m) }
func (*JunosRpmTypeProbeResultsType) ProtoMessage()    {}
func (*JunosRpmTypeProbeResultsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ea3d1731efd5e28, []int{0, 0, 0}
}
func (m *JunosRpmTypeProbeResultsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosRpmTypeProbeResultsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosRpmTypeProbeResultsType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosRpmTypeProbeResultsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosRpmTypeProbeResultsType.Merge(m, src)
}
func (m *JunosRpmTypeProbeResultsType) XXX_Size() int {
	return m.Size()
}
func (m *JunosRpmTypeProbeResultsType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosRpmTypeProbeResultsType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosRpmTypeProbeResultsType proto.InternalMessageInfo

func (m *JunosRpmTypeProbeResultsType) GetProbeTestResults() []*JunosRpmTypeProbeResultsTypeProbeTestResultsList {
	if m != nil {
		return m.ProbeTestResults
	}
	return nil
}

type JunosRpmTypeProbeResultsTypeProbeTestResultsList struct {
	Owner                   *string                                                                        `protobuf:"bytes,51,opt,name=owner" json:"owner,omitempty"`
	TestName                *string                                                                        `protobuf:"bytes,52,opt,name=test_name,json=testName" json:"test_name,omitempty"`
	TargetAddress           *string                                                                        `protobuf:"bytes,53,opt,name=target_address,json=targetAddress" json:"target_address,omitempty"`
	TargetUrl               *string                                                                        `protobuf:"bytes,54,opt,name=target_url,json=targetUrl" json:"target_url,omitempty"`
	SourceAddress           *string                                                                        `protobuf:"bytes,55,opt,name=source_address,json=sourceAddress" json:"source_address,omitempty"`
	DestinationInterface    *string                                                                        `protobuf:"bytes,56,opt,name=destination_interface,json=destinationInterface" json:"destination_interface,omitempty"`
	ProbeType               *string                                                                        `protobuf:"bytes,57,opt,name=probe_type,json=probeType" json:"probe_type,omitempty"`
	IcmpId                  *uint32                                                                        `protobuf:"varint,58,opt,name=icmp_id,json=icmpId" json:"icmp_id,omitempty"`
	TestSize                *uint32                                                                        `protobuf:"varint,59,opt,name=test_size,json=testSize" json:"test_size,omitempty"`
	HttpStatus              *uint32                                                                        `protobuf:"varint,60,opt,name=http_status,json=httpStatus" json:"http_status,omitempty"`
	RoutingInstanceName     *string                                                                        `protobuf:"bytes,61,opt,name=routing_instance_name,json=routingInstanceName" json:"routing_instance_name,omitempty"`
	RttThresh               *uint32                                                                        `protobuf:"varint,62,opt,name=rtt_thresh,json=rttThresh" json:"rtt_thresh,omitempty"`
	RttJitterThresh         *uint32                                                                        `protobuf:"varint,63,opt,name=rtt_jitter_thresh,json=rttJitterThresh" json:"rtt_jitter_thresh,omitempty"`
	RttStddevThresh         *uint32                                                                        `protobuf:"varint,64,opt,name=rtt_stddev_thresh,json=rttStddevThresh" json:"rtt_stddev_thresh,omitempty"`
	IgrThresh               *uint32                                                                        `protobuf:"varint,65,opt,name=igr_thresh,json=igrThresh" json:"igr_thresh,omitempty"`
	IgrJitterThresh         *uint32                                                                        `protobuf:"varint,66,opt,name=igr_jitter_thresh,json=igrJitterThresh" json:"igr_jitter_thresh,omitempty"`
	IgrStddevThresh         *uint32                                                                        `protobuf:"varint,67,opt,name=igr_stddev_thresh,json=igrStddevThresh" json:"igr_stddev_thresh,omitempty"`
	EgrThresh               *uint32                                                                        `protobuf:"varint,68,opt,name=egr_thresh,json=egrThresh" json:"egr_thresh,omitempty"`
	EgrJitterThresh         *uint32                                                                        `protobuf:"varint,69,opt,name=egr_jitter_thresh,json=egrJitterThresh" json:"egr_jitter_thresh,omitempty"`
	EgrStddevThresh         *uint32                                                                        `protobuf:"varint,70,opt,name=egr_stddev_thresh,json=egrStddevThresh" json:"egr_stddev_thresh,omitempty"`
	ProbeTestsHwTsErr       *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType         `protobuf:"bytes,151,opt,name=probe_tests_hw_ts_err,json=probeTestsHwTsErr" json:"probe_tests_hw_ts_err,omitempty"`
	ProbeSingleResults      *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType        `protobuf:"bytes,152,opt,name=probe_single_results,json=probeSingleResults" json:"probe_single_results,omitempty"`
	ProbeTestGenericResults []*JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList `protobuf:"bytes,153,rep,name=probe_test_generic_results,json=probeTestGenericResults" json:"probe_test_generic_results,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}                                                                       `json:"-"`
	XXX_unrecognized        []byte                                                                         `json:"-"`
	XXX_sizecache           int32                                                                          `json:"-"`
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsList) Reset() {
	*m = JunosRpmTypeProbeResultsTypeProbeTestResultsList{}
}
func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsList) String() string {
	return proto.CompactTextString(m)
}
func (*JunosRpmTypeProbeResultsTypeProbeTestResultsList) ProtoMessage() {}
func (*JunosRpmTypeProbeResultsTypeProbeTestResultsList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ea3d1731efd5e28, []int{0, 0, 0, 0}
}
func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosRpmTypeProbeResultsTypeProbeTestResultsList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosRpmTypeProbeResultsTypeProbeTestResultsList.Merge(m, src)
}
func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsList) XXX_Size() int {
	return m.Size()
}
func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsList) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosRpmTypeProbeResultsTypeProbeTestResultsList.DiscardUnknown(m)
}

var xxx_messageInfo_JunosRpmTypeProbeResultsTypeProbeTestResultsList proto.InternalMessageInfo

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetOwner() string {
	if m != nil && m.Owner != nil {
		return *m.Owner
	}
	return ""
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetTestName() string {
	if m != nil && m.TestName != nil {
		return *m.TestName
	}
	return ""
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetTargetAddress() string {
	if m != nil && m.TargetAddress != nil {
		return *m.TargetAddress
	}
	return ""
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetTargetUrl() string {
	if m != nil && m.TargetUrl != nil {
		return *m.TargetUrl
	}
	return ""
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetSourceAddress() string {
	if m != nil && m.SourceAddress != nil {
		return *m.SourceAddress
	}
	return ""
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetDestinationInterface() string {
	if m != nil && m.DestinationInterface != nil {
		return *m.DestinationInterface
	}
	return ""
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetProbeType() string {
	if m != nil && m.ProbeType != nil {
		return *m.ProbeType
	}
	return ""
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetIcmpId() uint32 {
	if m != nil && m.IcmpId != nil {
		return *m.IcmpId
	}
	return 0
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetTestSize() uint32 {
	if m != nil && m.TestSize != nil {
		return *m.TestSize
	}
	return 0
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetHttpStatus() uint32 {
	if m != nil && m.HttpStatus != nil {
		return *m.HttpStatus
	}
	return 0
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetRoutingInstanceName() string {
	if m != nil && m.RoutingInstanceName != nil {
		return *m.RoutingInstanceName
	}
	return ""
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetRttThresh() uint32 {
	if m != nil && m.RttThresh != nil {
		return *m.RttThresh
	}
	return 0
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetRttJitterThresh() uint32 {
	if m != nil && m.RttJitterThresh != nil {
		return *m.RttJitterThresh
	}
	return 0
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetRttStddevThresh() uint32 {
	if m != nil && m.RttStddevThresh != nil {
		return *m.RttStddevThresh
	}
	return 0
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetIgrThresh() uint32 {
	if m != nil && m.IgrThresh != nil {
		return *m.IgrThresh
	}
	return 0
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetIgrJitterThresh() uint32 {
	if m != nil && m.IgrJitterThresh != nil {
		return *m.IgrJitterThresh
	}
	return 0
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetIgrStddevThresh() uint32 {
	if m != nil && m.IgrStddevThresh != nil {
		return *m.IgrStddevThresh
	}
	return 0
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetEgrThresh() uint32 {
	if m != nil && m.EgrThresh != nil {
		return *m.EgrThresh
	}
	return 0
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetEgrJitterThresh() uint32 {
	if m != nil && m.EgrJitterThresh != nil {
		return *m.EgrJitterThresh
	}
	return 0
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetEgrStddevThresh() uint32 {
	if m != nil && m.EgrStddevThresh != nil {
		return *m.EgrStddevThresh
	}
	return 0
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetProbeTestsHwTsErr() *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType {
	if m != nil {
		return m.ProbeTestsHwTsErr
	}
	return nil
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetProbeSingleResults() *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType {
	if m != nil {
		return m.ProbeSingleResults
	}
	return nil
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsList) GetProbeTestGenericResults() []*JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList {
	if m != nil {
		return m.ProbeTestGenericResults
	}
	return nil
}

type JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType struct {
	InvalidClientRecvTsCntr    *uint32  `protobuf:"varint,51,opt,name=invalid_client_recv_ts_cntr,json=invalidClientRecvTsCntr" json:"invalid_client_recv_ts_cntr,omitempty"`
	InvalidClientNotsCntr      *uint32  `protobuf:"varint,52,opt,name=invalid_client_nots_cntr,json=invalidClientNotsCntr" json:"invalid_client_nots_cntr,omitempty"`
	InvalidServerSendTsCntr    *uint32  `protobuf:"varint,53,opt,name=invalid_server_send_ts_cntr,json=invalidServerSendTsCntr" json:"invalid_server_send_ts_cntr,omitempty"`
	InvalidServerSpentTimeCntr *uint32  `protobuf:"varint,54,opt,name=invalid_server_spent_time_cntr,json=invalidServerSpentTimeCntr" json:"invalid_server_spent_time_cntr,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType) Reset() {
	*m = JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType{}
}
func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType) String() string {
	return proto.CompactTextString(m)
}
func (*JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType) ProtoMessage() {}
func (*JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ea3d1731efd5e28, []int{0, 0, 0, 0, 0}
}
func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType.Merge(m, src)
}
func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType) XXX_Size() int {
	return m.Size()
}
func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType proto.InternalMessageInfo

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType) GetInvalidClientRecvTsCntr() uint32 {
	if m != nil && m.InvalidClientRecvTsCntr != nil {
		return *m.InvalidClientRecvTsCntr
	}
	return 0
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType) GetInvalidClientNotsCntr() uint32 {
	if m != nil && m.InvalidClientNotsCntr != nil {
		return *m.InvalidClientNotsCntr
	}
	return 0
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType) GetInvalidServerSendTsCntr() uint32 {
	if m != nil && m.InvalidServerSendTsCntr != nil {
		return *m.InvalidServerSendTsCntr
	}
	return 0
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType) GetInvalidServerSpentTimeCntr() uint32 {
	if m != nil && m.InvalidServerSpentTimeCntr != nil {
		return *m.InvalidServerSpentTimeCntr
	}
	return 0
}

type JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType struct {
	ProbeTime                   *string  `protobuf:"bytes,51,opt,name=probe_time,json=probeTime" json:"probe_time,omitempty"`
	ProbeSentTime               *string  `protobuf:"bytes,52,opt,name=probe_sent_time,json=probeSentTime" json:"probe_sent_time,omitempty"`
	ProbeStatus                 *string  `protobuf:"bytes,53,opt,name=probe_status,json=probeStatus" json:"probe_status,omitempty"`
	HardwareTimestampStatus     *string  `protobuf:"bytes,54,opt,name=hardware_timestamp_status,json=hardwareTimestampStatus" json:"hardware_timestamp_status,omitempty"`
	Rtt                         *uint32  `protobuf:"varint,55,opt,name=rtt" json:"rtt,omitempty"`
	Egress                      *uint32  `protobuf:"varint,56,opt,name=egress" json:"egress,omitempty"`
	Ingress                     *uint32  `protobuf:"varint,57,opt,name=ingress" json:"ingress,omitempty"`
	EgressJitter                *int32   `protobuf:"varint,58,opt,name=egress_jitter,json=egressJitter" json:"egress_jitter,omitempty"`
	IngressJitter               *int32   `protobuf:"varint,59,opt,name=ingress_jitter,json=ingressJitter" json:"ingress_jitter,omitempty"`
	RoundTripJitter             *int32   `protobuf:"varint,60,opt,name=round_trip_jitter,json=roundTripJitter" json:"round_trip_jitter,omitempty"`
	EgressInterarrivalJitter    *int32   `protobuf:"varint,61,opt,name=egress_interarrival_jitter,json=egressInterarrivalJitter" json:"egress_interarrival_jitter,omitempty"`
	IngressInterarrivalJitter   *int32   `protobuf:"varint,62,opt,name=ingress_interarrival_jitter,json=ingressInterarrivalJitter" json:"ingress_interarrival_jitter,omitempty"`
	RoundTripInterarrivalJitter *int32   `protobuf:"varint,63,opt,name=round_trip_interarrival_jitter,json=roundTripInterarrivalJitter" json:"round_trip_interarrival_jitter,omitempty"`
	HttpStatus                  *uint32  `protobuf:"varint,64,opt,name=http_status,json=httpStatus" json:"http_status,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) Reset() {
	*m = JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType{}
}
func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) String() string {
	return proto.CompactTextString(m)
}
func (*JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) ProtoMessage() {}
func (*JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ea3d1731efd5e28, []int{0, 0, 0, 0, 1}
}
func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType.Merge(m, src)
}
func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) XXX_Size() int {
	return m.Size()
}
func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType proto.InternalMessageInfo

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) GetProbeTime() string {
	if m != nil && m.ProbeTime != nil {
		return *m.ProbeTime
	}
	return ""
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) GetProbeSentTime() string {
	if m != nil && m.ProbeSentTime != nil {
		return *m.ProbeSentTime
	}
	return ""
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) GetProbeStatus() string {
	if m != nil && m.ProbeStatus != nil {
		return *m.ProbeStatus
	}
	return ""
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) GetHardwareTimestampStatus() string {
	if m != nil && m.HardwareTimestampStatus != nil {
		return *m.HardwareTimestampStatus
	}
	return ""
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) GetRtt() uint32 {
	if m != nil && m.Rtt != nil {
		return *m.Rtt
	}
	return 0
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) GetEgress() uint32 {
	if m != nil && m.Egress != nil {
		return *m.Egress
	}
	return 0
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) GetIngress() uint32 {
	if m != nil && m.Ingress != nil {
		return *m.Ingress
	}
	return 0
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) GetEgressJitter() int32 {
	if m != nil && m.EgressJitter != nil {
		return *m.EgressJitter
	}
	return 0
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) GetIngressJitter() int32 {
	if m != nil && m.IngressJitter != nil {
		return *m.IngressJitter
	}
	return 0
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) GetRoundTripJitter() int32 {
	if m != nil && m.RoundTripJitter != nil {
		return *m.RoundTripJitter
	}
	return 0
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) GetEgressInterarrivalJitter() int32 {
	if m != nil && m.EgressInterarrivalJitter != nil {
		return *m.EgressInterarrivalJitter
	}
	return 0
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) GetIngressInterarrivalJitter() int32 {
	if m != nil && m.IngressInterarrivalJitter != nil {
		return *m.IngressInterarrivalJitter
	}
	return 0
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) GetRoundTripInterarrivalJitter() int32 {
	if m != nil && m.RoundTripInterarrivalJitter != nil {
		return *m.RoundTripInterarrivalJitter
	}
	return 0
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) GetHttpStatus() uint32 {
	if m != nil && m.HttpStatus != nil {
		return *m.HttpStatus
	}
	return 0
}

type JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList struct {
	ResultsScope                 *string                                                                                                        `protobuf:"bytes,51,opt,name=results_scope,json=resultsScope" json:"results_scope,omitempty"`
	ProbesSent                   *uint32                                                                                                        `protobuf:"varint,52,opt,name=probes_sent,json=probesSent" json:"probes_sent,omitempty"`
	ProbeResponses               *uint32                                                                                                        `protobuf:"varint,53,opt,name=probe_responses,json=probeResponses" json:"probe_responses,omitempty"`
	LossPercentage               *uint32                                                                                                        `protobuf:"varint,54,opt,name=loss_percentage,json=lossPercentage" json:"loss_percentage,omitempty"`
	LastTestTime                 *string                                                                                                        `protobuf:"bytes,55,opt,name=last_test_time,json=lastTestTime" json:"last_test_time,omitempty"`
	ProbeTestGenericMeasurements []*JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList `protobuf:"bytes,151,rep,name=probe_test_generic_measurements,json=probeTestGenericMeasurements" json:"probe_test_generic_measurements,omitempty"`
	XXX_NoUnkeyedLiteral         struct{}                                                                                                       `json:"-"`
	XXX_unrecognized             []byte                                                                                                         `json:"-"`
	XXX_sizecache                int32                                                                                                          `json:"-"`
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList) Reset() {
	*m = JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList{}
}
func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList) String() string {
	return proto.CompactTextString(m)
}
func (*JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList) ProtoMessage() {}
func (*JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ea3d1731efd5e28, []int{0, 0, 0, 0, 2}
}
func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList.Merge(m, src)
}
func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList) XXX_Size() int {
	return m.Size()
}
func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList.DiscardUnknown(m)
}

var xxx_messageInfo_JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList proto.InternalMessageInfo

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList) GetResultsScope() string {
	if m != nil && m.ResultsScope != nil {
		return *m.ResultsScope
	}
	return ""
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList) GetProbesSent() uint32 {
	if m != nil && m.ProbesSent != nil {
		return *m.ProbesSent
	}
	return 0
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList) GetProbeResponses() uint32 {
	if m != nil && m.ProbeResponses != nil {
		return *m.ProbeResponses
	}
	return 0
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList) GetLossPercentage() uint32 {
	if m != nil && m.LossPercentage != nil {
		return *m.LossPercentage
	}
	return 0
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList) GetLastTestTime() string {
	if m != nil && m.LastTestTime != nil {
		return *m.LastTestTime
	}
	return ""
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList) GetProbeTestGenericMeasurements() []*JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList {
	if m != nil {
		return m.ProbeTestGenericMeasurements
	}
	return nil
}

type JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList struct {
	ProbeMeasurementType *string  `protobuf:"bytes,51,opt,name=probe_measurement_type,json=probeMeasurementType" json:"probe_measurement_type,omitempty"`
	Samples              *uint32  `protobuf:"varint,52,opt,name=samples" json:"samples,omitempty"`
	MinDelay             *uint32  `protobuf:"varint,53,opt,name=min_delay,json=minDelay" json:"min_delay,omitempty"`
	MaxDelay             *uint32  `protobuf:"varint,54,opt,name=max_delay,json=maxDelay" json:"max_delay,omitempty"`
	AvgDelay             *uint32  `protobuf:"varint,55,opt,name=avg_delay,json=avgDelay" json:"avg_delay,omitempty"`
	JitterDelay          *uint32  `protobuf:"varint,56,opt,name=jitter_delay,json=jitterDelay" json:"jitter_delay,omitempty"`
	StddevDelay          *uint64  `protobuf:"varint,57,opt,name=stddev_delay,json=stddevDelay" json:"stddev_delay,omitempty"`
	SumDelay             *uint64  `protobuf:"varint,58,opt,name=sum_delay,json=sumDelay" json:"sum_delay,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) Reset() {
	*m = JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList{}
}
func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) String() string {
	return proto.CompactTextString(m)
}
func (*JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) ProtoMessage() {
}
func (*JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ea3d1731efd5e28, []int{0, 0, 0, 0, 2, 0}
}
func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList.Merge(m, src)
}
func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) XXX_Size() int {
	return m.Size()
}
func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList.DiscardUnknown(m)
}

var xxx_messageInfo_JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList proto.InternalMessageInfo

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) GetProbeMeasurementType() string {
	if m != nil && m.ProbeMeasurementType != nil {
		return *m.ProbeMeasurementType
	}
	return ""
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) GetSamples() uint32 {
	if m != nil && m.Samples != nil {
		return *m.Samples
	}
	return 0
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) GetMinDelay() uint32 {
	if m != nil && m.MinDelay != nil {
		return *m.MinDelay
	}
	return 0
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) GetMaxDelay() uint32 {
	if m != nil && m.MaxDelay != nil {
		return *m.MaxDelay
	}
	return 0
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) GetAvgDelay() uint32 {
	if m != nil && m.AvgDelay != nil {
		return *m.AvgDelay
	}
	return 0
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) GetJitterDelay() uint32 {
	if m != nil && m.JitterDelay != nil {
		return *m.JitterDelay
	}
	return 0
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) GetStddevDelay() uint64 {
	if m != nil && m.StddevDelay != nil {
		return *m.StddevDelay
	}
	return 0
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) GetSumDelay() uint64 {
	if m != nil && m.SumDelay != nil {
		return *m.SumDelay
	}
	return 0
}

type JunosRpmTypeHistoryResultsType struct {
	HistoryTestResults   []*JunosRpmTypeHistoryResultsTypeHistoryTestResultsList `protobuf:"bytes,151,rep,name=history_test_results,json=historyTestResults" json:"history_test_results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                `json:"-"`
	XXX_unrecognized     []byte                                                  `json:"-"`
	XXX_sizecache        int32                                                   `json:"-"`
}

func (m *JunosRpmTypeHistoryResultsType) Reset()         { *m = JunosRpmTypeHistoryResultsType{} }
func (m *JunosRpmTypeHistoryResultsType) String() string { return proto.CompactTextString(m) }
func (*JunosRpmTypeHistoryResultsType) ProtoMessage()    {}
func (*JunosRpmTypeHistoryResultsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ea3d1731efd5e28, []int{0, 0, 1}
}
func (m *JunosRpmTypeHistoryResultsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosRpmTypeHistoryResultsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosRpmTypeHistoryResultsType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosRpmTypeHistoryResultsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosRpmTypeHistoryResultsType.Merge(m, src)
}
func (m *JunosRpmTypeHistoryResultsType) XXX_Size() int {
	return m.Size()
}
func (m *JunosRpmTypeHistoryResultsType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosRpmTypeHistoryResultsType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosRpmTypeHistoryResultsType proto.InternalMessageInfo

func (m *JunosRpmTypeHistoryResultsType) GetHistoryTestResults() []*JunosRpmTypeHistoryResultsTypeHistoryTestResultsList {
	if m != nil {
		return m.HistoryTestResults
	}
	return nil
}

type JunosRpmTypeHistoryResultsTypeHistoryTestResultsList struct {
	HistorySingleTestResults []*JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList `protobuf:"bytes,151,rep,name=history_single_test_results,json=historySingleTestResults" json:"history_single_test_results,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                                                                            `json:"-"`
	XXX_unrecognized         []byte                                                                              `json:"-"`
	XXX_sizecache            int32                                                                               `json:"-"`
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsList) Reset() {
	*m = JunosRpmTypeHistoryResultsTypeHistoryTestResultsList{}
}
func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsList) String() string {
	return proto.CompactTextString(m)
}
func (*JunosRpmTypeHistoryResultsTypeHistoryTestResultsList) ProtoMessage() {}
func (*JunosRpmTypeHistoryResultsTypeHistoryTestResultsList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ea3d1731efd5e28, []int{0, 0, 1, 0}
}
func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosRpmTypeHistoryResultsTypeHistoryTestResultsList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosRpmTypeHistoryResultsTypeHistoryTestResultsList.Merge(m, src)
}
func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsList) XXX_Size() int {
	return m.Size()
}
func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsList) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosRpmTypeHistoryResultsTypeHistoryTestResultsList.DiscardUnknown(m)
}

var xxx_messageInfo_JunosRpmTypeHistoryResultsTypeHistoryTestResultsList proto.InternalMessageInfo

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsList) GetHistorySingleTestResults() []*JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList {
	if m != nil {
		return m.HistorySingleTestResults
	}
	return nil
}

type JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList struct {
	Owner                *string                                                                                                 `protobuf:"bytes,51,opt,name=owner" json:"owner,omitempty"`
	TestName             *string                                                                                                 `protobuf:"bytes,52,opt,name=test_name,json=testName" json:"test_name,omitempty"`
	TargetAddress        *string                                                                                                 `protobuf:"bytes,53,opt,name=target_address,json=targetAddress" json:"target_address,omitempty"`
	TargetUrl            *string                                                                                                 `protobuf:"bytes,54,opt,name=target_url,json=targetUrl" json:"target_url,omitempty"`
	SourceAddress        *string                                                                                                 `protobuf:"bytes,55,opt,name=source_address,json=sourceAddress" json:"source_address,omitempty"`
	DestinationInterface *string                                                                                                 `protobuf:"bytes,56,opt,name=destination_interface,json=destinationInterface" json:"destination_interface,omitempty"`
	ProbeType            *string                                                                                                 `protobuf:"bytes,57,opt,name=probe_type,json=probeType" json:"probe_type,omitempty"`
	IcmpId               *uint32                                                                                                 `protobuf:"varint,58,opt,name=icmp_id,json=icmpId" json:"icmp_id,omitempty"`
	TestSize             *uint32                                                                                                 `protobuf:"varint,59,opt,name=test_size,json=testSize" json:"test_size,omitempty"`
	HttpStatus           *uint32                                                                                                 `protobuf:"varint,60,opt,name=http_status,json=httpStatus" json:"http_status,omitempty"`
	RoutingInstanceName  *string                                                                                                 `protobuf:"bytes,61,opt,name=routing_instance_name,json=routingInstanceName" json:"routing_instance_name,omitempty"`
	RttThresh            *uint32                                                                                                 `protobuf:"varint,62,opt,name=rtt_thresh,json=rttThresh" json:"rtt_thresh,omitempty"`
	RttJitterThresh      *uint32                                                                                                 `protobuf:"varint,63,opt,name=rtt_jitter_thresh,json=rttJitterThresh" json:"rtt_jitter_thresh,omitempty"`
	RttStddevThresh      *uint32                                                                                                 `protobuf:"varint,64,opt,name=rtt_stddev_thresh,json=rttStddevThresh" json:"rtt_stddev_thresh,omitempty"`
	IgrThresh            *uint32                                                                                                 `protobuf:"varint,65,opt,name=igr_thresh,json=igrThresh" json:"igr_thresh,omitempty"`
	IgrJitterThresh      *uint32                                                                                                 `protobuf:"varint,66,opt,name=igr_jitter_thresh,json=igrJitterThresh" json:"igr_jitter_thresh,omitempty"`
	IgrStddevThresh      *uint32                                                                                                 `protobuf:"varint,67,opt,name=igr_stddev_thresh,json=igrStddevThresh" json:"igr_stddev_thresh,omitempty"`
	EgrThresh            *uint32                                                                                                 `protobuf:"varint,68,opt,name=egr_thresh,json=egrThresh" json:"egr_thresh,omitempty"`
	EgrJitterThresh      *uint32                                                                                                 `protobuf:"varint,69,opt,name=egr_jitter_thresh,json=egrJitterThresh" json:"egr_jitter_thresh,omitempty"`
	EgrStddevThresh      *uint32                                                                                                 `protobuf:"varint,70,opt,name=egr_stddev_thresh,json=egrStddevThresh" json:"egr_stddev_thresh,omitempty"`
	ProbeSingleResults   *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType `protobuf:"bytes,151,opt,name=probe_single_results,json=probeSingleResults" json:"probe_single_results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                                                `json:"-"`
	XXX_unrecognized     []byte                                                                                                  `json:"-"`
	XXX_sizecache        int32                                                                                                   `json:"-"`
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) Reset() {
	*m = JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList{}
}
func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) String() string {
	return proto.CompactTextString(m)
}
func (*JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) ProtoMessage() {
}
func (*JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ea3d1731efd5e28, []int{0, 0, 1, 0, 0}
}
func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList.Merge(m, src)
}
func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) XXX_Size() int {
	return m.Size()
}
func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList.DiscardUnknown(m)
}

var xxx_messageInfo_JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList proto.InternalMessageInfo

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetOwner() string {
	if m != nil && m.Owner != nil {
		return *m.Owner
	}
	return ""
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetTestName() string {
	if m != nil && m.TestName != nil {
		return *m.TestName
	}
	return ""
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetTargetAddress() string {
	if m != nil && m.TargetAddress != nil {
		return *m.TargetAddress
	}
	return ""
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetTargetUrl() string {
	if m != nil && m.TargetUrl != nil {
		return *m.TargetUrl
	}
	return ""
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetSourceAddress() string {
	if m != nil && m.SourceAddress != nil {
		return *m.SourceAddress
	}
	return ""
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetDestinationInterface() string {
	if m != nil && m.DestinationInterface != nil {
		return *m.DestinationInterface
	}
	return ""
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetProbeType() string {
	if m != nil && m.ProbeType != nil {
		return *m.ProbeType
	}
	return ""
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetIcmpId() uint32 {
	if m != nil && m.IcmpId != nil {
		return *m.IcmpId
	}
	return 0
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetTestSize() uint32 {
	if m != nil && m.TestSize != nil {
		return *m.TestSize
	}
	return 0
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetHttpStatus() uint32 {
	if m != nil && m.HttpStatus != nil {
		return *m.HttpStatus
	}
	return 0
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetRoutingInstanceName() string {
	if m != nil && m.RoutingInstanceName != nil {
		return *m.RoutingInstanceName
	}
	return ""
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetRttThresh() uint32 {
	if m != nil && m.RttThresh != nil {
		return *m.RttThresh
	}
	return 0
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetRttJitterThresh() uint32 {
	if m != nil && m.RttJitterThresh != nil {
		return *m.RttJitterThresh
	}
	return 0
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetRttStddevThresh() uint32 {
	if m != nil && m.RttStddevThresh != nil {
		return *m.RttStddevThresh
	}
	return 0
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetIgrThresh() uint32 {
	if m != nil && m.IgrThresh != nil {
		return *m.IgrThresh
	}
	return 0
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetIgrJitterThresh() uint32 {
	if m != nil && m.IgrJitterThresh != nil {
		return *m.IgrJitterThresh
	}
	return 0
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetIgrStddevThresh() uint32 {
	if m != nil && m.IgrStddevThresh != nil {
		return *m.IgrStddevThresh
	}
	return 0
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetEgrThresh() uint32 {
	if m != nil && m.EgrThresh != nil {
		return *m.EgrThresh
	}
	return 0
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetEgrJitterThresh() uint32 {
	if m != nil && m.EgrJitterThresh != nil {
		return *m.EgrJitterThresh
	}
	return 0
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetEgrStddevThresh() uint32 {
	if m != nil && m.EgrStddevThresh != nil {
		return *m.EgrStddevThresh
	}
	return 0
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) GetProbeSingleResults() *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType {
	if m != nil {
		return m.ProbeSingleResults
	}
	return nil
}

type JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType struct {
	ProbeTime                   *string  `protobuf:"bytes,51,opt,name=probe_time,json=probeTime" json:"probe_time,omitempty"`
	ProbeSentTime               *string  `protobuf:"bytes,52,opt,name=probe_sent_time,json=probeSentTime" json:"probe_sent_time,omitempty"`
	ProbeStatus                 *string  `protobuf:"bytes,53,opt,name=probe_status,json=probeStatus" json:"probe_status,omitempty"`
	HardwareTimestampStatus     *string  `protobuf:"bytes,54,opt,name=hardware_timestamp_status,json=hardwareTimestampStatus" json:"hardware_timestamp_status,omitempty"`
	Rtt                         *uint32  `protobuf:"varint,55,opt,name=rtt" json:"rtt,omitempty"`
	Egress                      *uint32  `protobuf:"varint,56,opt,name=egress" json:"egress,omitempty"`
	Ingress                     *uint32  `protobuf:"varint,57,opt,name=ingress" json:"ingress,omitempty"`
	EgressJitter                *int32   `protobuf:"varint,58,opt,name=egress_jitter,json=egressJitter" json:"egress_jitter,omitempty"`
	IngressJitter               *int32   `protobuf:"varint,59,opt,name=ingress_jitter,json=ingressJitter" json:"ingress_jitter,omitempty"`
	RoundTripJitter             *int32   `protobuf:"varint,60,opt,name=round_trip_jitter,json=roundTripJitter" json:"round_trip_jitter,omitempty"`
	EgressInterarrivalJitter    *int32   `protobuf:"varint,61,opt,name=egress_interarrival_jitter,json=egressInterarrivalJitter" json:"egress_interarrival_jitter,omitempty"`
	IngressInterarrivalJitter   *int32   `protobuf:"varint,62,opt,name=ingress_interarrival_jitter,json=ingressInterarrivalJitter" json:"ingress_interarrival_jitter,omitempty"`
	RoundTripInterarrivalJitter *int32   `protobuf:"varint,63,opt,name=round_trip_interarrival_jitter,json=roundTripInterarrivalJitter" json:"round_trip_interarrival_jitter,omitempty"`
	HttpStatus                  *uint32  `protobuf:"varint,64,opt,name=http_status,json=httpStatus" json:"http_status,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) Reset() {
	*m = JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType{}
}
func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) String() string {
	return proto.CompactTextString(m)
}
func (*JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) ProtoMessage() {
}
func (*JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ea3d1731efd5e28, []int{0, 0, 1, 0, 0, 0}
}
func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType.Merge(m, src)
}
func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) XXX_Size() int {
	return m.Size()
}
func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType proto.InternalMessageInfo

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetProbeTime() string {
	if m != nil && m.ProbeTime != nil {
		return *m.ProbeTime
	}
	return ""
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetProbeSentTime() string {
	if m != nil && m.ProbeSentTime != nil {
		return *m.ProbeSentTime
	}
	return ""
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetProbeStatus() string {
	if m != nil && m.ProbeStatus != nil {
		return *m.ProbeStatus
	}
	return ""
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetHardwareTimestampStatus() string {
	if m != nil && m.HardwareTimestampStatus != nil {
		return *m.HardwareTimestampStatus
	}
	return ""
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetRtt() uint32 {
	if m != nil && m.Rtt != nil {
		return *m.Rtt
	}
	return 0
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetEgress() uint32 {
	if m != nil && m.Egress != nil {
		return *m.Egress
	}
	return 0
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetIngress() uint32 {
	if m != nil && m.Ingress != nil {
		return *m.Ingress
	}
	return 0
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetEgressJitter() int32 {
	if m != nil && m.EgressJitter != nil {
		return *m.EgressJitter
	}
	return 0
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetIngressJitter() int32 {
	if m != nil && m.IngressJitter != nil {
		return *m.IngressJitter
	}
	return 0
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetRoundTripJitter() int32 {
	if m != nil && m.RoundTripJitter != nil {
		return *m.RoundTripJitter
	}
	return 0
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetEgressInterarrivalJitter() int32 {
	if m != nil && m.EgressInterarrivalJitter != nil {
		return *m.EgressInterarrivalJitter
	}
	return 0
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetIngressInterarrivalJitter() int32 {
	if m != nil && m.IngressInterarrivalJitter != nil {
		return *m.IngressInterarrivalJitter
	}
	return 0
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetRoundTripInterarrivalJitter() int32 {
	if m != nil && m.RoundTripInterarrivalJitter != nil {
		return *m.RoundTripInterarrivalJitter
	}
	return 0
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetHttpStatus() uint32 {
	if m != nil && m.HttpStatus != nil {
		return *m.HttpStatus
	}
	return 0
}

type JunosRpmTypeServerType struct {
	ActiveServers        []*JunosRpmTypeServerTypeActiveServersList `protobuf:"bytes,151,rep,name=active_servers,json=activeServers" json:"active_servers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *JunosRpmTypeServerType) Reset()         { *m = JunosRpmTypeServerType{} }
func (m *JunosRpmTypeServerType) String() string { return proto.CompactTextString(m) }
func (*JunosRpmTypeServerType) ProtoMessage()    {}
func (*JunosRpmTypeServerType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ea3d1731efd5e28, []int{0, 0, 2}
}
func (m *JunosRpmTypeServerType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosRpmTypeServerType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosRpmTypeServerType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosRpmTypeServerType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosRpmTypeServerType.Merge(m, src)
}
func (m *JunosRpmTypeServerType) XXX_Size() int {
	return m.Size()
}
func (m *JunosRpmTypeServerType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosRpmTypeServerType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosRpmTypeServerType proto.InternalMessageInfo

func (m *JunosRpmTypeServerType) GetActiveServers() []*JunosRpmTypeServerTypeActiveServersList {
	if m != nil {
		return m.ActiveServers
	}
	return nil
}

type JunosRpmTypeServerTypeActiveServersList struct {
	Protocol             *string  `protobuf:"bytes,51,opt,name=protocol" json:"protocol,omitempty"`
	Port                 *uint32  `protobuf:"varint,52,opt,name=port" json:"port,omitempty"`
	DstInterface         *string  `protobuf:"bytes,53,opt,name=dst_interface,json=dstInterface" json:"dst_interface,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JunosRpmTypeServerTypeActiveServersList) Reset() {
	*m = JunosRpmTypeServerTypeActiveServersList{}
}
func (m *JunosRpmTypeServerTypeActiveServersList) String() string { return proto.CompactTextString(m) }
func (*JunosRpmTypeServerTypeActiveServersList) ProtoMessage()    {}
func (*JunosRpmTypeServerTypeActiveServersList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ea3d1731efd5e28, []int{0, 0, 2, 0}
}
func (m *JunosRpmTypeServerTypeActiveServersList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosRpmTypeServerTypeActiveServersList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosRpmTypeServerTypeActiveServersList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosRpmTypeServerTypeActiveServersList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosRpmTypeServerTypeActiveServersList.Merge(m, src)
}
func (m *JunosRpmTypeServerTypeActiveServersList) XXX_Size() int {
	return m.Size()
}
func (m *JunosRpmTypeServerTypeActiveServersList) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosRpmTypeServerTypeActiveServersList.DiscardUnknown(m)
}

var xxx_messageInfo_JunosRpmTypeServerTypeActiveServersList proto.InternalMessageInfo

func (m *JunosRpmTypeServerTypeActiveServersList) GetProtocol() string {
	if m != nil && m.Protocol != nil {
		return *m.Protocol
	}
	return ""
}

func (m *JunosRpmTypeServerTypeActiveServersList) GetPort() uint32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

func (m *JunosRpmTypeServerTypeActiveServersList) GetDstInterface() string {
	if m != nil && m.DstInterface != nil {
		return *m.DstInterface
	}
	return ""
}

type JunosTwampType struct {
	Server               *JunosTwampTypeServerType `protobuf:"bytes,151,opt,name=server" json:"server,omitempty"`
	Client               *JunosTwampTypeClientType `protobuf:"bytes,152,opt,name=client" json:"client,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *JunosTwampType) Reset()         { *m = JunosTwampType{} }
func (m *JunosTwampType) String() string { return proto.CompactTextString(m) }
func (*JunosTwampType) ProtoMessage()    {}
func (*JunosTwampType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ea3d1731efd5e28, []int{0, 1}
}
func (m *JunosTwampType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosTwampType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosTwampType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosTwampType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosTwampType.Merge(m, src)
}
func (m *JunosTwampType) XXX_Size() int {
	return m.Size()
}
func (m *JunosTwampType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosTwampType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosTwampType proto.InternalMessageInfo

func (m *JunosTwampType) GetServer() *JunosTwampTypeServerType {
	if m != nil {
		return m.Server
	}
	return nil
}

func (m *JunosTwampType) GetClient() *JunosTwampTypeClientType {
	if m != nil {
		return m.Client
	}
	return nil
}

type JunosTwampTypeServerType struct {
	ControlConnection    []*JunosTwampTypeServerTypeControlConnectionList `protobuf:"bytes,151,rep,name=control_connection,json=controlConnection" json:"control_connection,omitempty"`
	TestSession          []*JunosTwampTypeServerTypeTestSessionList       `protobuf:"bytes,152,rep,name=test_session,json=testSession" json:"test_session,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                         `json:"-"`
	XXX_unrecognized     []byte                                           `json:"-"`
	XXX_sizecache        int32                                            `json:"-"`
}

func (m *JunosTwampTypeServerType) Reset()         { *m = JunosTwampTypeServerType{} }
func (m *JunosTwampTypeServerType) String() string { return proto.CompactTextString(m) }
func (*JunosTwampTypeServerType) ProtoMessage()    {}
func (*JunosTwampTypeServerType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ea3d1731efd5e28, []int{0, 1, 0}
}
func (m *JunosTwampTypeServerType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosTwampTypeServerType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosTwampTypeServerType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosTwampTypeServerType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosTwampTypeServerType.Merge(m, src)
}
func (m *JunosTwampTypeServerType) XXX_Size() int {
	return m.Size()
}
func (m *JunosTwampTypeServerType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosTwampTypeServerType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosTwampTypeServerType proto.InternalMessageInfo

func (m *JunosTwampTypeServerType) GetControlConnection() []*JunosTwampTypeServerTypeControlConnectionList {
	if m != nil {
		return m.ControlConnection
	}
	return nil
}

func (m *JunosTwampTypeServerType) GetTestSession() []*JunosTwampTypeServerTypeTestSessionList {
	if m != nil {
		return m.TestSession
	}
	return nil
}

type JunosTwampTypeServerTypeControlConnectionList struct {
	ConnectionId         *uint32  `protobuf:"varint,51,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	ClientAddress        *string  `protobuf:"bytes,52,opt,name=client_address,json=clientAddress" json:"client_address,omitempty"`
	ClientPort           *uint32  `protobuf:"varint,53,opt,name=client_port,json=clientPort" json:"client_port,omitempty"`
	ServerAddress        *string  `protobuf:"bytes,54,opt,name=server_address,json=serverAddress" json:"server_address,omitempty"`
	ServerPort           *uint32  `protobuf:"varint,55,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	SessionCount         *uint32  `protobuf:"varint,56,opt,name=session_count,json=sessionCount" json:"session_count,omitempty"`
	AuthenticationMode   *string  `protobuf:"bytes,57,opt,name=authentication_mode,json=authenticationMode" json:"authentication_mode,omitempty"`
	SessionState         *string  `protobuf:"bytes,58,opt,name=session_state,json=sessionState" json:"session_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JunosTwampTypeServerTypeControlConnectionList) Reset() {
	*m = JunosTwampTypeServerTypeControlConnectionList{}
}
func (m *JunosTwampTypeServerTypeControlConnectionList) String() string {
	return proto.CompactTextString(m)
}
func (*JunosTwampTypeServerTypeControlConnectionList) ProtoMessage() {}
func (*JunosTwampTypeServerTypeControlConnectionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ea3d1731efd5e28, []int{0, 1, 0, 0}
}
func (m *JunosTwampTypeServerTypeControlConnectionList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosTwampTypeServerTypeControlConnectionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosTwampTypeServerTypeControlConnectionList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosTwampTypeServerTypeControlConnectionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosTwampTypeServerTypeControlConnectionList.Merge(m, src)
}
func (m *JunosTwampTypeServerTypeControlConnectionList) XXX_Size() int {
	return m.Size()
}
func (m *JunosTwampTypeServerTypeControlConnectionList) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosTwampTypeServerTypeControlConnectionList.DiscardUnknown(m)
}

var xxx_messageInfo_JunosTwampTypeServerTypeControlConnectionList proto.InternalMessageInfo

func (m *JunosTwampTypeServerTypeControlConnectionList) GetConnectionId() uint32 {
	if m != nil && m.ConnectionId != nil {
		return *m.ConnectionId
	}
	return 0
}

func (m *JunosTwampTypeServerTypeControlConnectionList) GetClientAddress() string {
	if m != nil && m.ClientAddress != nil {
		return *m.ClientAddress
	}
	return ""
}

func (m *JunosTwampTypeServerTypeControlConnectionList) GetClientPort() uint32 {
	if m != nil && m.ClientPort != nil {
		return *m.ClientPort
	}
	return 0
}

func (m *JunosTwampTypeServerTypeControlConnectionList) GetServerAddress() string {
	if m != nil && m.ServerAddress != nil {
		return *m.ServerAddress
	}
	return ""
}

func (m *JunosTwampTypeServerTypeControlConnectionList) GetServerPort() uint32 {
	if m != nil && m.ServerPort != nil {
		return *m.ServerPort
	}
	return 0
}

func (m *JunosTwampTypeServerTypeControlConnectionList) GetSessionCount() uint32 {
	if m != nil && m.SessionCount != nil {
		return *m.SessionCount
	}
	return 0
}

func (m *JunosTwampTypeServerTypeControlConnectionList) GetAuthenticationMode() string {
	if m != nil && m.AuthenticationMode != nil {
		return *m.AuthenticationMode
	}
	return ""
}

func (m *JunosTwampTypeServerTypeControlConnectionList) GetSessionState() string {
	if m != nil && m.SessionState != nil {
		return *m.SessionState
	}
	return ""
}

type JunosTwampTypeServerTypeTestSessionList struct {
	ConnectionId         *uint32                                                       `protobuf:"varint,51,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	TestSessionInfo      []*JunosTwampTypeServerTypeTestSessionListTestSessionInfoList `protobuf:"bytes,151,rep,name=test_session_info,json=testSessionInfo" json:"test_session_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                      `json:"-"`
	XXX_unrecognized     []byte                                                        `json:"-"`
	XXX_sizecache        int32                                                         `json:"-"`
}

func (m *JunosTwampTypeServerTypeTestSessionList) Reset() {
	*m = JunosTwampTypeServerTypeTestSessionList{}
}
func (m *JunosTwampTypeServerTypeTestSessionList) String() string { return proto.CompactTextString(m) }
func (*JunosTwampTypeServerTypeTestSessionList) ProtoMessage()    {}
func (*JunosTwampTypeServerTypeTestSessionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ea3d1731efd5e28, []int{0, 1, 0, 1}
}
func (m *JunosTwampTypeServerTypeTestSessionList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosTwampTypeServerTypeTestSessionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosTwampTypeServerTypeTestSessionList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosTwampTypeServerTypeTestSessionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosTwampTypeServerTypeTestSessionList.Merge(m, src)
}
func (m *JunosTwampTypeServerTypeTestSessionList) XXX_Size() int {
	return m.Size()
}
func (m *JunosTwampTypeServerTypeTestSessionList) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosTwampTypeServerTypeTestSessionList.DiscardUnknown(m)
}

var xxx_messageInfo_JunosTwampTypeServerTypeTestSessionList proto.InternalMessageInfo

func (m *JunosTwampTypeServerTypeTestSessionList) GetConnectionId() uint32 {
	if m != nil && m.ConnectionId != nil {
		return *m.ConnectionId
	}
	return 0
}

func (m *JunosTwampTypeServerTypeTestSessionList) GetTestSessionInfo() []*JunosTwampTypeServerTypeTestSessionListTestSessionInfoList {
	if m != nil {
		return m.TestSessionInfo
	}
	return nil
}

type JunosTwampTypeServerTypeTestSessionListTestSessionInfoList struct {
	TestId               *uint32  `protobuf:"varint,51,opt,name=test_id,json=testId" json:"test_id,omitempty"`
	SenderAddress        *string  `protobuf:"bytes,52,opt,name=sender_address,json=senderAddress" json:"sender_address,omitempty"`
	SenderPort           *uint32  `protobuf:"varint,53,opt,name=sender_port,json=senderPort" json:"sender_port,omitempty"`
	ReflectorAddress     *string  `protobuf:"bytes,54,opt,name=reflector_address,json=reflectorAddress" json:"reflector_address,omitempty"`
	ReflectorPort        *uint32  `protobuf:"varint,55,opt,name=reflector_port,json=reflectorPort" json:"reflector_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JunosTwampTypeServerTypeTestSessionListTestSessionInfoList) Reset() {
	*m = JunosTwampTypeServerTypeTestSessionListTestSessionInfoList{}
}
func (m *JunosTwampTypeServerTypeTestSessionListTestSessionInfoList) String() string {
	return proto.CompactTextString(m)
}
func (*JunosTwampTypeServerTypeTestSessionListTestSessionInfoList) ProtoMessage() {}
func (*JunosTwampTypeServerTypeTestSessionListTestSessionInfoList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ea3d1731efd5e28, []int{0, 1, 0, 1, 0}
}
func (m *JunosTwampTypeServerTypeTestSessionListTestSessionInfoList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosTwampTypeServerTypeTestSessionListTestSessionInfoList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosTwampTypeServerTypeTestSessionListTestSessionInfoList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosTwampTypeServerTypeTestSessionListTestSessionInfoList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosTwampTypeServerTypeTestSessionListTestSessionInfoList.Merge(m, src)
}
func (m *JunosTwampTypeServerTypeTestSessionListTestSessionInfoList) XXX_Size() int {
	return m.Size()
}
func (m *JunosTwampTypeServerTypeTestSessionListTestSessionInfoList) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosTwampTypeServerTypeTestSessionListTestSessionInfoList.DiscardUnknown(m)
}

var xxx_messageInfo_JunosTwampTypeServerTypeTestSessionListTestSessionInfoList proto.InternalMessageInfo

func (m *JunosTwampTypeServerTypeTestSessionListTestSessionInfoList) GetTestId() uint32 {
	if m != nil && m.TestId != nil {
		return *m.TestId
	}
	return 0
}

func (m *JunosTwampTypeServerTypeTestSessionListTestSessionInfoList) GetSenderAddress() string {
	if m != nil && m.SenderAddress != nil {
		return *m.SenderAddress
	}
	return ""
}

func (m *JunosTwampTypeServerTypeTestSessionListTestSessionInfoList) GetSenderPort() uint32 {
	if m != nil && m.SenderPort != nil {
		return *m.SenderPort
	}
	return 0
}

func (m *JunosTwampTypeServerTypeTestSessionListTestSessionInfoList) GetReflectorAddress() string {
	if m != nil && m.ReflectorAddress != nil {
		return *m.ReflectorAddress
	}
	return ""
}

func (m *JunosTwampTypeServerTypeTestSessionListTestSessionInfoList) GetReflectorPort() uint32 {
	if m != nil && m.ReflectorPort != nil {
		return *m.ReflectorPort
	}
	return 0
}

type JunosTwampTypeClientType struct {
	ControlConnection    []*JunosTwampTypeClientTypeControlConnectionList  `protobuf:"bytes,151,rep,name=control_connection,json=controlConnection" json:"control_connection,omitempty"`
	TestSession          []*JunosTwampTypeClientTypeTestSessionList        `protobuf:"bytes,152,rep,name=test_session,json=testSession" json:"test_session,omitempty"`
	ProbeTestResults     []*JunosTwampTypeClientTypeProbeTestResultsList   `protobuf:"bytes,153,rep,name=probe_test_results,json=probeTestResults" json:"probe_test_results,omitempty"`
	HistoryTestResults   []*JunosTwampTypeClientTypeHistoryTestResultsList `protobuf:"bytes,154,rep,name=history_test_results,json=historyTestResults" json:"history_test_results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                          `json:"-"`
	XXX_unrecognized     []byte                                            `json:"-"`
	XXX_sizecache        int32                                             `json:"-"`
}

func (m *JunosTwampTypeClientType) Reset()         { *m = JunosTwampTypeClientType{} }
func (m *JunosTwampTypeClientType) String() string { return proto.CompactTextString(m) }
func (*JunosTwampTypeClientType) ProtoMessage()    {}
func (*JunosTwampTypeClientType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ea3d1731efd5e28, []int{0, 1, 1}
}
func (m *JunosTwampTypeClientType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosTwampTypeClientType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosTwampTypeClientType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosTwampTypeClientType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosTwampTypeClientType.Merge(m, src)
}
func (m *JunosTwampTypeClientType) XXX_Size() int {
	return m.Size()
}
func (m *JunosTwampTypeClientType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosTwampTypeClientType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosTwampTypeClientType proto.InternalMessageInfo

func (m *JunosTwampTypeClientType) GetControlConnection() []*JunosTwampTypeClientTypeControlConnectionList {
	if m != nil {
		return m.ControlConnection
	}
	return nil
}

func (m *JunosTwampTypeClientType) GetTestSession() []*JunosTwampTypeClientTypeTestSessionList {
	if m != nil {
		return m.TestSession
	}
	return nil
}

func (m *JunosTwampTypeClientType) GetProbeTestResults() []*JunosTwampTypeClientTypeProbeTestResultsList {
	if m != nil {
		return m.ProbeTestResults
	}
	return nil
}

func (m *JunosTwampTypeClientType) GetHistoryTestResults() []*JunosTwampTypeClientTypeHistoryTestResultsList {
	if m != nil {
		return m.HistoryTestResults
	}
	return nil
}

type JunosTwampTypeClientTypeControlConnectionList struct {
	ControlName          *string  `protobuf:"bytes,51,opt,name=control_name,json=controlName" json:"control_name,omitempty"`
	ClientAddress        *string  `protobuf:"bytes,52,opt,name=client_address,json=clientAddress" json:"client_address,omitempty"`
	ClientPort           *uint32  `protobuf:"varint,53,opt,name=client_port,json=clientPort" json:"client_port,omitempty"`
	ServerAddress        *string  `protobuf:"bytes,54,opt,name=server_address,json=serverAddress" json:"server_address,omitempty"`
	ServerPort           *uint32  `protobuf:"varint,55,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	SessionCount         *uint32  `protobuf:"varint,56,opt,name=session_count,json=sessionCount" json:"session_count,omitempty"`
	AuthMode             *string  `protobuf:"bytes,57,opt,name=auth_mode,json=authMode" json:"auth_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JunosTwampTypeClientTypeControlConnectionList) Reset() {
	*m = JunosTwampTypeClientTypeControlConnectionList{}
}
func (m *JunosTwampTypeClientTypeControlConnectionList) String() string {
	return proto.CompactTextString(m)
}
func (*JunosTwampTypeClientTypeControlConnectionList) ProtoMessage() {}
func (*JunosTwampTypeClientTypeControlConnectionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ea3d1731efd5e28, []int{0, 1, 1, 0}
}
func (m *JunosTwampTypeClientTypeControlConnectionList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosTwampTypeClientTypeControlConnectionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosTwampTypeClientTypeControlConnectionList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosTwampTypeClientTypeControlConnectionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosTwampTypeClientTypeControlConnectionList.Merge(m, src)
}
func (m *JunosTwampTypeClientTypeControlConnectionList) XXX_Size() int {
	return m.Size()
}
func (m *JunosTwampTypeClientTypeControlConnectionList) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosTwampTypeClientTypeControlConnectionList.DiscardUnknown(m)
}

var xxx_messageInfo_JunosTwampTypeClientTypeControlConnectionList proto.InternalMessageInfo

func (m *JunosTwampTypeClientTypeControlConnectionList) GetControlName() string {
	if m != nil && m.ControlName != nil {
		return *m.ControlName
	}
	return ""
}

func (m *JunosTwampTypeClientTypeControlConnectionList) GetClientAddress() string {
	if m != nil && m.ClientAddress != nil {
		return *m.ClientAddress
	}
	return ""
}

func (m *JunosTwampTypeClientTypeControlConnectionList) GetClientPort() uint32 {
	if m != nil && m.ClientPort != nil {
		return *m.ClientPort
	}
	return 0
}

func (m *JunosTwampTypeClientTypeControlConnectionList) GetServerAddress() string {
	if m != nil && m.ServerAddress != nil {
		return *m.ServerAddress
	}
	return ""
}

func (m *JunosTwampTypeClientTypeControlConnectionList) GetServerPort() uint32 {
	if m != nil && m.ServerPort != nil {
		return *m.ServerPort
	}
	return 0
}

func (m *JunosTwampTypeClientTypeControlConnectionList) GetSessionCount() uint32 {
	if m != nil && m.SessionCount != nil {
		return *m.SessionCount
	}
	return 0
}

func (m *JunosTwampTypeClientTypeControlConnectionList) GetAuthMode() string {
	if m != nil && m.AuthMode != nil {
		return *m.AuthMode
	}
	return ""
}

type JunosTwampTypeClientTypeTestSessionList struct {
	ControlName          *string                                                       `protobuf:"bytes,51,opt,name=control_name,json=controlName" json:"control_name,omitempty"`
	ClientAddress        *string                                                       `protobuf:"bytes,52,opt,name=client_address,json=clientAddress" json:"client_address,omitempty"`
	ClientPort           *uint32                                                       `protobuf:"varint,53,opt,name=client_port,json=clientPort" json:"client_port,omitempty"`
	ServerAddress        *string                                                       `protobuf:"bytes,54,opt,name=server_address,json=serverAddress" json:"server_address,omitempty"`
	ServerPort           *uint32                                                       `protobuf:"varint,55,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	SessionCount         *uint32                                                       `protobuf:"varint,56,opt,name=session_count,json=sessionCount" json:"session_count,omitempty"`
	AuthMode             *string                                                       `protobuf:"bytes,57,opt,name=auth_mode,json=authMode" json:"auth_mode,omitempty"`
	TestSessionInfo      []*JunosTwampTypeClientTypeTestSessionListTestSessionInfoList `protobuf:"bytes,151,rep,name=test_session_info,json=testSessionInfo" json:"test_session_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                      `json:"-"`
	XXX_unrecognized     []byte                                                        `json:"-"`
	XXX_sizecache        int32                                                         `json:"-"`
}

func (m *JunosTwampTypeClientTypeTestSessionList) Reset() {
	*m = JunosTwampTypeClientTypeTestSessionList{}
}
func (m *JunosTwampTypeClientTypeTestSessionList) String() string { return proto.CompactTextString(m) }
func (*JunosTwampTypeClientTypeTestSessionList) ProtoMessage()    {}
func (*JunosTwampTypeClientTypeTestSessionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ea3d1731efd5e28, []int{0, 1, 1, 1}
}
func (m *JunosTwampTypeClientTypeTestSessionList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosTwampTypeClientTypeTestSessionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosTwampTypeClientTypeTestSessionList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosTwampTypeClientTypeTestSessionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosTwampTypeClientTypeTestSessionList.Merge(m, src)
}
func (m *JunosTwampTypeClientTypeTestSessionList) XXX_Size() int {
	return m.Size()
}
func (m *JunosTwampTypeClientTypeTestSessionList) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosTwampTypeClientTypeTestSessionList.DiscardUnknown(m)
}

var xxx_messageInfo_JunosTwampTypeClientTypeTestSessionList proto.InternalMessageInfo

func (m *JunosTwampTypeClientTypeTestSessionList) GetControlName() string {
	if m != nil && m.ControlName != nil {
		return *m.ControlName
	}
	return ""
}

func (m *JunosTwampTypeClientTypeTestSessionList) GetClientAddress() string {
	if m != nil && m.ClientAddress != nil {
		return *m.ClientAddress
	}
	return ""
}

func (m *JunosTwampTypeClientTypeTestSessionList) GetClientPort() uint32 {
	if m != nil && m.ClientPort != nil {
		return *m.ClientPort
	}
	return 0
}

func (m *JunosTwampTypeClientTypeTestSessionList) GetServerAddress() string {
	if m != nil && m.ServerAddress != nil {
		return *m.ServerAddress
	}
	return ""
}

func (m *JunosTwampTypeClientTypeTestSessionList) GetServerPort() uint32 {
	if m != nil && m.ServerPort != nil {
		return *m.ServerPort
	}
	return 0
}

func (m *JunosTwampTypeClientTypeTestSessionList) GetSessionCount() uint32 {
	if m != nil && m.SessionCount != nil {
		return *m.SessionCount
	}
	return 0
}

func (m *JunosTwampTypeClientTypeTestSessionList) GetAuthMode() string {
	if m != nil && m.AuthMode != nil {
		return *m.AuthMode
	}
	return ""
}

func (m *JunosTwampTypeClientTypeTestSessionList) GetTestSessionInfo() []*JunosTwampTypeClientTypeTestSessionListTestSessionInfoList {
	if m != nil {
		return m.TestSessionInfo
	}
	return nil
}

type JunosTwampTypeClientTypeTestSessionListTestSessionInfoList struct {
	SessionName          *string  `protobuf:"bytes,51,opt,name=session_name,json=sessionName" json:"session_name,omitempty"`
	SenderAddress        *string  `protobuf:"bytes,52,opt,name=sender_address,json=senderAddress" json:"sender_address,omitempty"`
	SenderPort           *uint32  `protobuf:"varint,53,opt,name=sender_port,json=senderPort" json:"sender_port,omitempty"`
	ReflectorAddress     *string  `protobuf:"bytes,54,opt,name=reflector_address,json=reflectorAddress" json:"reflector_address,omitempty"`
	ReflectorPort        *uint32  `protobuf:"varint,55,opt,name=reflector_port,json=reflectorPort" json:"reflector_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JunosTwampTypeClientTypeTestSessionListTestSessionInfoList) Reset() {
	*m = JunosTwampTypeClientTypeTestSessionListTestSessionInfoList{}
}
func (m *JunosTwampTypeClientTypeTestSessionListTestSessionInfoList) String() string {
	return proto.CompactTextString(m)
}
func (*JunosTwampTypeClientTypeTestSessionListTestSessionInfoList) ProtoMessage() {}
func (*JunosTwampTypeClientTypeTestSessionListTestSessionInfoList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ea3d1731efd5e28, []int{0, 1, 1, 1, 0}
}
func (m *JunosTwampTypeClientTypeTestSessionListTestSessionInfoList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosTwampTypeClientTypeTestSessionListTestSessionInfoList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosTwampTypeClientTypeTestSessionListTestSessionInfoList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosTwampTypeClientTypeTestSessionListTestSessionInfoList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosTwampTypeClientTypeTestSessionListTestSessionInfoList.Merge(m, src)
}
func (m *JunosTwampTypeClientTypeTestSessionListTestSessionInfoList) XXX_Size() int {
	return m.Size()
}
func (m *JunosTwampTypeClientTypeTestSessionListTestSessionInfoList) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosTwampTypeClientTypeTestSessionListTestSessionInfoList.DiscardUnknown(m)
}

var xxx_messageInfo_JunosTwampTypeClientTypeTestSessionListTestSessionInfoList proto.InternalMessageInfo

func (m *JunosTwampTypeClientTypeTestSessionListTestSessionInfoList) GetSessionName() string {
	if m != nil && m.SessionName != nil {
		return *m.SessionName
	}
	return ""
}

func (m *JunosTwampTypeClientTypeTestSessionListTestSessionInfoList) GetSenderAddress() string {
	if m != nil && m.SenderAddress != nil {
		return *m.SenderAddress
	}
	return ""
}

func (m *JunosTwampTypeClientTypeTestSessionListTestSessionInfoList) GetSenderPort() uint32 {
	if m != nil && m.SenderPort != nil {
		return *m.SenderPort
	}
	return 0
}

func (m *JunosTwampTypeClientTypeTestSessionListTestSessionInfoList) GetReflectorAddress() string {
	if m != nil && m.ReflectorAddress != nil {
		return *m.ReflectorAddress
	}
	return ""
}

func (m *JunosTwampTypeClientTypeTestSessionListTestSessionInfoList) GetReflectorPort() uint32 {
	if m != nil && m.ReflectorPort != nil {
		return *m.ReflectorPort
	}
	return 0
}

type JunosTwampTypeClientTypeProbeTestResultsList struct {
	Owner                   *string                                                                    `protobuf:"bytes,51,opt,name=owner" json:"owner,omitempty"`
	TestName                *string                                                                    `protobuf:"bytes,52,opt,name=test_name,json=testName" json:"test_name,omitempty"`
	DestinationInterface    *string                                                                    `protobuf:"bytes,53,opt,name=destination_interface,json=destinationInterface" json:"destination_interface,omitempty"`
	TestSize                *uint32                                                                    `protobuf:"varint,54,opt,name=test_size,json=testSize" json:"test_size,omitempty"`
	ClientAddress           *string                                                                    `protobuf:"bytes,55,opt,name=client_address,json=clientAddress" json:"client_address,omitempty"`
	ClientPort              *uint32                                                                    `protobuf:"varint,56,opt,name=client_port,json=clientPort" json:"client_port,omitempty"`
	SenderAddress           *string                                                                    `protobuf:"bytes,57,opt,name=sender_address,json=senderAddress" json:"sender_address,omitempty"`
	SenderPort              *uint32                                                                    `protobuf:"varint,58,opt,name=sender_port,json=senderPort" json:"sender_port,omitempty"`
	ReflectorAddress        *string                                                                    `protobuf:"bytes,59,opt,name=reflector_address,json=reflectorAddress" json:"reflector_address,omitempty"`
	ReflectorPort           *uint32                                                                    `protobuf:"varint,60,opt,name=reflector_port,json=reflectorPort" json:"reflector_port,omitempty"`
	ServerAddress           *string                                                                    `protobuf:"bytes,61,opt,name=server_address,json=serverAddress" json:"server_address,omitempty"`
	ServerPort              *uint32                                                                    `protobuf:"varint,62,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	LossThreshTotal         *uint32                                                                    `protobuf:"varint,63,opt,name=loss_thresh_total,json=lossThreshTotal" json:"loss_thresh_total,omitempty"`
	LossThreshSucc          *uint32                                                                    `protobuf:"varint,64,opt,name=loss_thresh_succ,json=lossThreshSucc" json:"loss_thresh_succ,omitempty"`
	RttThresh               *uint32                                                                    `protobuf:"varint,65,opt,name=rtt_thresh,json=rttThresh" json:"rtt_thresh,omitempty"`
	RttJitterThresh         *uint32                                                                    `protobuf:"varint,66,opt,name=rtt_jitter_thresh,json=rttJitterThresh" json:"rtt_jitter_thresh,omitempty"`
	RttStddevThresh         *uint32                                                                    `protobuf:"varint,67,opt,name=rtt_stddev_thresh,json=rttStddevThresh" json:"rtt_stddev_thresh,omitempty"`
	IgrThresh               *uint32                                                                    `protobuf:"varint,68,opt,name=igr_thresh,json=igrThresh" json:"igr_thresh,omitempty"`
	IgrJitterThresh         *uint32                                                                    `protobuf:"varint,69,opt,name=igr_jitter_thresh,json=igrJitterThresh" json:"igr_jitter_thresh,omitempty"`
	IgrStddevThresh         *uint32                                                                    `protobuf:"varint,70,opt,name=igr_stddev_thresh,json=igrStddevThresh" json:"igr_stddev_thresh,omitempty"`
	EgrThresh               *uint32                                                                    `protobuf:"varint,71,opt,name=egr_thresh,json=egrThresh" json:"egr_thresh,omitempty"`
	EgrJitterThresh         *uint32                                                                    `protobuf:"varint,72,opt,name=egr_jitter_thresh,json=egrJitterThresh" json:"egr_jitter_thresh,omitempty"`
	EgrStddevThresh         *uint32                                                                    `protobuf:"varint,73,opt,name=egr_stddev_thresh,json=egrStddevThresh" json:"egr_stddev_thresh,omitempty"`
	RoutingInstanceName     *string                                                                    `protobuf:"bytes,74,opt,name=routing_instance_name,json=routingInstanceName" json:"routing_instance_name,omitempty"`
	ProbeTestsHwTsErr       *JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType         `protobuf:"bytes,151,opt,name=probe_tests_hw_ts_err,json=probeTestsHwTsErr" json:"probe_tests_hw_ts_err,omitempty"`
	ProbeSingleResults      *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType        `protobuf:"bytes,152,opt,name=probe_single_results,json=probeSingleResults" json:"probe_single_results,omitempty"`
	ProbeTestGenericResults []*JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList `protobuf:"bytes,153,rep,name=probe_test_generic_results,json=probeTestGenericResults" json:"probe_test_generic_results,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}                                                                   `json:"-"`
	XXX_unrecognized        []byte                                                                     `json:"-"`
	XXX_sizecache           int32                                                                      `json:"-"`
}

func (m *JunosTwampTypeClientTypeProbeTestResultsList) Reset() {
	*m = JunosTwampTypeClientTypeProbeTestResultsList{}
}
func (m *JunosTwampTypeClientTypeProbeTestResultsList) String() string {
	return proto.CompactTextString(m)
}
func (*JunosTwampTypeClientTypeProbeTestResultsList) ProtoMessage() {}
func (*JunosTwampTypeClientTypeProbeTestResultsList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ea3d1731efd5e28, []int{0, 1, 1, 2}
}
func (m *JunosTwampTypeClientTypeProbeTestResultsList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosTwampTypeClientTypeProbeTestResultsList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosTwampTypeClientTypeProbeTestResultsList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosTwampTypeClientTypeProbeTestResultsList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosTwampTypeClientTypeProbeTestResultsList.Merge(m, src)
}
func (m *JunosTwampTypeClientTypeProbeTestResultsList) XXX_Size() int {
	return m.Size()
}
func (m *JunosTwampTypeClientTypeProbeTestResultsList) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosTwampTypeClientTypeProbeTestResultsList.DiscardUnknown(m)
}

var xxx_messageInfo_JunosTwampTypeClientTypeProbeTestResultsList proto.InternalMessageInfo

func (m *JunosTwampTypeClientTypeProbeTestResultsList) GetOwner() string {
	if m != nil && m.Owner != nil {
		return *m.Owner
	}
	return ""
}

func (m *JunosTwampTypeClientTypeProbeTestResultsList) GetTestName() string {
	if m != nil && m.TestName != nil {
		return *m.TestName
	}
	return ""
}

func (m *JunosTwampTypeClientTypeProbeTestResultsList) GetDestinationInterface() string {
	if m != nil && m.DestinationInterface != nil {
		return *m.DestinationInterface
	}
	return ""
}

func (m *JunosTwampTypeClientTypeProbeTestResultsList) GetTestSize() uint32 {
	if m != nil && m.TestSize != nil {
		return *m.TestSize
	}
	return 0
}

func (m *JunosTwampTypeClientTypeProbeTestResultsList) GetClientAddress() string {
	if m != nil && m.ClientAddress != nil {
		return *m.ClientAddress
	}
	return ""
}

func (m *JunosTwampTypeClientTypeProbeTestResultsList) GetClientPort() uint32 {
	if m != nil && m.ClientPort != nil {
		return *m.ClientPort
	}
	return 0
}

func (m *JunosTwampTypeClientTypeProbeTestResultsList) GetSenderAddress() string {
	if m != nil && m.SenderAddress != nil {
		return *m.SenderAddress
	}
	return ""
}

func (m *JunosTwampTypeClientTypeProbeTestResultsList) GetSenderPort() uint32 {
	if m != nil && m.SenderPort != nil {
		return *m.SenderPort
	}
	return 0
}

func (m *JunosTwampTypeClientTypeProbeTestResultsList) GetReflectorAddress() string {
	if m != nil && m.ReflectorAddress != nil {
		return *m.ReflectorAddress
	}
	return ""
}

func (m *JunosTwampTypeClientTypeProbeTestResultsList) GetReflectorPort() uint32 {
	if m != nil && m.ReflectorPort != nil {
		return *m.ReflectorPort
	}
	return 0
}

func (m *JunosTwampTypeClientTypeProbeTestResultsList) GetServerAddress() string {
	if m != nil && m.ServerAddress != nil {
		return *m.ServerAddress
	}
	return ""
}

func (m *JunosTwampTypeClientTypeProbeTestResultsList) GetServerPort() uint32 {
	if m != nil && m.ServerPort != nil {
		return *m.ServerPort
	}
	return 0
}

func (m *JunosTwampTypeClientTypeProbeTestResultsList) GetLossThreshTotal() uint32 {
	if m != nil && m.LossThreshTotal != nil {
		return *m.LossThreshTotal
	}
	return 0
}

func (m *JunosTwampTypeClientTypeProbeTestResultsList) GetLossThreshSucc() uint32 {
	if m != nil && m.LossThreshSucc != nil {
		return *m.LossThreshSucc
	}
	return 0
}

func (m *JunosTwampTypeClientTypeProbeTestResultsList) GetRttThresh() uint32 {
	if m != nil && m.RttThresh != nil {
		return *m.RttThresh
	}
	return 0
}

func (m *JunosTwampTypeClientTypeProbeTestResultsList) GetRttJitterThresh() uint32 {
	if m != nil && m.RttJitterThresh != nil {
		return *m.RttJitterThresh
	}
	return 0
}

func (m *JunosTwampTypeClientTypeProbeTestResultsList) GetRttStddevThresh() uint32 {
	if m != nil && m.RttStddevThresh != nil {
		return *m.RttStddevThresh
	}
	return 0
}

func (m *JunosTwampTypeClientTypeProbeTestResultsList) GetIgrThresh() uint32 {
	if m != nil && m.IgrThresh != nil {
		return *m.IgrThresh
	}
	return 0
}

func (m *JunosTwampTypeClientTypeProbeTestResultsList) GetIgrJitterThresh() uint32 {
	if m != nil && m.IgrJitterThresh != nil {
		return *m.IgrJitterThresh
	}
	return 0
}

func (m *JunosTwampTypeClientTypeProbeTestResultsList) GetIgrStddevThresh() uint32 {
	if m != nil && m.IgrStddevThresh != nil {
		return *m.IgrStddevThresh
	}
	return 0
}

func (m *JunosTwampTypeClientTypeProbeTestResultsList) GetEgrThresh() uint32 {
	if m != nil && m.EgrThresh != nil {
		return *m.EgrThresh
	}
	return 0
}

func (m *JunosTwampTypeClientTypeProbeTestResultsList) GetEgrJitterThresh() uint32 {
	if m != nil && m.EgrJitterThresh != nil {
		return *m.EgrJitterThresh
	}
	return 0
}

func (m *JunosTwampTypeClientTypeProbeTestResultsList) GetEgrStddevThresh() uint32 {
	if m != nil && m.EgrStddevThresh != nil {
		return *m.EgrStddevThresh
	}
	return 0
}

func (m *JunosTwampTypeClientTypeProbeTestResultsList) GetRoutingInstanceName() string {
	if m != nil && m.RoutingInstanceName != nil {
		return *m.RoutingInstanceName
	}
	return ""
}

func (m *JunosTwampTypeClientTypeProbeTestResultsList) GetProbeTestsHwTsErr() *JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType {
	if m != nil {
		return m.ProbeTestsHwTsErr
	}
	return nil
}

func (m *JunosTwampTypeClientTypeProbeTestResultsList) GetProbeSingleResults() *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType {
	if m != nil {
		return m.ProbeSingleResults
	}
	return nil
}

func (m *JunosTwampTypeClientTypeProbeTestResultsList) GetProbeTestGenericResults() []*JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList {
	if m != nil {
		return m.ProbeTestGenericResults
	}
	return nil
}

type JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType struct {
	InvalidClientRecvTsCntr    *uint32  `protobuf:"varint,51,opt,name=invalid_client_recv_ts_cntr,json=invalidClientRecvTsCntr" json:"invalid_client_recv_ts_cntr,omitempty"`
	InvalidClientNotsCntr      *uint32  `protobuf:"varint,52,opt,name=invalid_client_nots_cntr,json=invalidClientNotsCntr" json:"invalid_client_nots_cntr,omitempty"`
	InvalidServerSendTsCntr    *uint32  `protobuf:"varint,53,opt,name=invalid_server_send_ts_cntr,json=invalidServerSendTsCntr" json:"invalid_server_send_ts_cntr,omitempty"`
	InvalidServerSpentTimeCntr *uint32  `protobuf:"varint,54,opt,name=invalid_server_spent_time_cntr,json=invalidServerSpentTimeCntr" json:"invalid_server_spent_time_cntr,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType) Reset() {
	*m = JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType{}
}
func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType) String() string {
	return proto.CompactTextString(m)
}
func (*JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType) ProtoMessage() {}
func (*JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ea3d1731efd5e28, []int{0, 1, 1, 2, 0}
}
func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType.Merge(m, src)
}
func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType) XXX_Size() int {
	return m.Size()
}
func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType proto.InternalMessageInfo

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType) GetInvalidClientRecvTsCntr() uint32 {
	if m != nil && m.InvalidClientRecvTsCntr != nil {
		return *m.InvalidClientRecvTsCntr
	}
	return 0
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType) GetInvalidClientNotsCntr() uint32 {
	if m != nil && m.InvalidClientNotsCntr != nil {
		return *m.InvalidClientNotsCntr
	}
	return 0
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType) GetInvalidServerSendTsCntr() uint32 {
	if m != nil && m.InvalidServerSendTsCntr != nil {
		return *m.InvalidServerSendTsCntr
	}
	return 0
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType) GetInvalidServerSpentTimeCntr() uint32 {
	if m != nil && m.InvalidServerSpentTimeCntr != nil {
		return *m.InvalidServerSpentTimeCntr
	}
	return 0
}

type JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType struct {
	ProbeTime                   *string  `protobuf:"bytes,51,opt,name=probe_time,json=probeTime" json:"probe_time,omitempty"`
	ProbeSentTime               *string  `protobuf:"bytes,52,opt,name=probe_sent_time,json=probeSentTime" json:"probe_sent_time,omitempty"`
	ProbeStatus                 *string  `protobuf:"bytes,53,opt,name=probe_status,json=probeStatus" json:"probe_status,omitempty"`
	HardwareTimestampStatus     *string  `protobuf:"bytes,54,opt,name=hardware_timestamp_status,json=hardwareTimestampStatus" json:"hardware_timestamp_status,omitempty"`
	Rtt                         *uint32  `protobuf:"varint,55,opt,name=rtt" json:"rtt,omitempty"`
	Egress                      *uint32  `protobuf:"varint,56,opt,name=egress" json:"egress,omitempty"`
	Ingress                     *uint32  `protobuf:"varint,57,opt,name=ingress" json:"ingress,omitempty"`
	EgressJitter                *int32   `protobuf:"varint,58,opt,name=egress_jitter,json=egressJitter" json:"egress_jitter,omitempty"`
	IngressJitter               *int32   `protobuf:"varint,59,opt,name=ingress_jitter,json=ingressJitter" json:"ingress_jitter,omitempty"`
	RoundTripJitter             *int32   `protobuf:"varint,60,opt,name=round_trip_jitter,json=roundTripJitter" json:"round_trip_jitter,omitempty"`
	EgressInterarrivalJitter    *int32   `protobuf:"varint,61,opt,name=egress_interarrival_jitter,json=egressInterarrivalJitter" json:"egress_interarrival_jitter,omitempty"`
	IngressInterarrivalJitter   *int32   `protobuf:"varint,62,opt,name=ingress_interarrival_jitter,json=ingressInterarrivalJitter" json:"ingress_interarrival_jitter,omitempty"`
	RoundTripInterarrivalJitter *int32   `protobuf:"varint,63,opt,name=round_trip_interarrival_jitter,json=roundTripInterarrivalJitter" json:"round_trip_interarrival_jitter,omitempty"`
	HttpStatus                  *uint32  `protobuf:"varint,64,opt,name=http_status,json=httpStatus" json:"http_status,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) Reset() {
	*m = JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType{}
}
func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) String() string {
	return proto.CompactTextString(m)
}
func (*JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) ProtoMessage() {}
func (*JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ea3d1731efd5e28, []int{0, 1, 1, 2, 1}
}
func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType.Merge(m, src)
}
func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) XXX_Size() int {
	return m.Size()
}
func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType proto.InternalMessageInfo

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) GetProbeTime() string {
	if m != nil && m.ProbeTime != nil {
		return *m.ProbeTime
	}
	return ""
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) GetProbeSentTime() string {
	if m != nil && m.ProbeSentTime != nil {
		return *m.ProbeSentTime
	}
	return ""
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) GetProbeStatus() string {
	if m != nil && m.ProbeStatus != nil {
		return *m.ProbeStatus
	}
	return ""
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) GetHardwareTimestampStatus() string {
	if m != nil && m.HardwareTimestampStatus != nil {
		return *m.HardwareTimestampStatus
	}
	return ""
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) GetRtt() uint32 {
	if m != nil && m.Rtt != nil {
		return *m.Rtt
	}
	return 0
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) GetEgress() uint32 {
	if m != nil && m.Egress != nil {
		return *m.Egress
	}
	return 0
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) GetIngress() uint32 {
	if m != nil && m.Ingress != nil {
		return *m.Ingress
	}
	return 0
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) GetEgressJitter() int32 {
	if m != nil && m.EgressJitter != nil {
		return *m.EgressJitter
	}
	return 0
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) GetIngressJitter() int32 {
	if m != nil && m.IngressJitter != nil {
		return *m.IngressJitter
	}
	return 0
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) GetRoundTripJitter() int32 {
	if m != nil && m.RoundTripJitter != nil {
		return *m.RoundTripJitter
	}
	return 0
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) GetEgressInterarrivalJitter() int32 {
	if m != nil && m.EgressInterarrivalJitter != nil {
		return *m.EgressInterarrivalJitter
	}
	return 0
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) GetIngressInterarrivalJitter() int32 {
	if m != nil && m.IngressInterarrivalJitter != nil {
		return *m.IngressInterarrivalJitter
	}
	return 0
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) GetRoundTripInterarrivalJitter() int32 {
	if m != nil && m.RoundTripInterarrivalJitter != nil {
		return *m.RoundTripInterarrivalJitter
	}
	return 0
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) GetHttpStatus() uint32 {
	if m != nil && m.HttpStatus != nil {
		return *m.HttpStatus
	}
	return 0
}

type JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList struct {
	ResultsScope                 *string                                                                                                    `protobuf:"bytes,51,opt,name=results_scope,json=resultsScope" json:"results_scope,omitempty"`
	ProbesSent                   *uint32                                                                                                    `protobuf:"varint,52,opt,name=probes_sent,json=probesSent" json:"probes_sent,omitempty"`
	ProbeResponses               *uint32                                                                                                    `protobuf:"varint,53,opt,name=probe_responses,json=probeResponses" json:"probe_responses,omitempty"`
	LossPercentage               *uint32                                                                                                    `protobuf:"varint,54,opt,name=loss_percentage,json=lossPercentage" json:"loss_percentage,omitempty"`
	LastTestTime                 *string                                                                                                    `protobuf:"bytes,55,opt,name=last_test_time,json=lastTestTime" json:"last_test_time,omitempty"`
	ProbeTestGenericMeasurements []*JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList `protobuf:"bytes,151,rep,name=probe_test_generic_measurements,json=probeTestGenericMeasurements" json:"probe_test_generic_measurements,omitempty"`
	XXX_NoUnkeyedLiteral         struct{}                                                                                                   `json:"-"`
	XXX_unrecognized             []byte                                                                                                     `json:"-"`
	XXX_sizecache                int32                                                                                                      `json:"-"`
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList) Reset() {
	*m = JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList{}
}
func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList) String() string {
	return proto.CompactTextString(m)
}
func (*JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList) ProtoMessage() {}
func (*JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ea3d1731efd5e28, []int{0, 1, 1, 2, 2}
}
func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList.Merge(m, src)
}
func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList) XXX_Size() int {
	return m.Size()
}
func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList.DiscardUnknown(m)
}

var xxx_messageInfo_JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList proto.InternalMessageInfo

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList) GetResultsScope() string {
	if m != nil && m.ResultsScope != nil {
		return *m.ResultsScope
	}
	return ""
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList) GetProbesSent() uint32 {
	if m != nil && m.ProbesSent != nil {
		return *m.ProbesSent
	}
	return 0
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList) GetProbeResponses() uint32 {
	if m != nil && m.ProbeResponses != nil {
		return *m.ProbeResponses
	}
	return 0
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList) GetLossPercentage() uint32 {
	if m != nil && m.LossPercentage != nil {
		return *m.LossPercentage
	}
	return 0
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList) GetLastTestTime() string {
	if m != nil && m.LastTestTime != nil {
		return *m.LastTestTime
	}
	return ""
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList) GetProbeTestGenericMeasurements() []*JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList {
	if m != nil {
		return m.ProbeTestGenericMeasurements
	}
	return nil
}

type JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList struct {
	ProbeMeasurementType *string  `protobuf:"bytes,51,opt,name=probe_measurement_type,json=probeMeasurementType" json:"probe_measurement_type,omitempty"`
	Samples              *uint32  `protobuf:"varint,52,opt,name=samples" json:"samples,omitempty"`
	MinDelay             *uint32  `protobuf:"varint,53,opt,name=min_delay,json=minDelay" json:"min_delay,omitempty"`
	MaxDelay             *uint32  `protobuf:"varint,54,opt,name=max_delay,json=maxDelay" json:"max_delay,omitempty"`
	AvgDelay             *uint32  `protobuf:"varint,55,opt,name=avg_delay,json=avgDelay" json:"avg_delay,omitempty"`
	JitterDelay          *uint32  `protobuf:"varint,56,opt,name=jitter_delay,json=jitterDelay" json:"jitter_delay,omitempty"`
	StddevDelay          *uint64  `protobuf:"varint,57,opt,name=stddev_delay,json=stddevDelay" json:"stddev_delay,omitempty"`
	SumDelay             *uint64  `protobuf:"varint,58,opt,name=sum_delay,json=sumDelay" json:"sum_delay,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) Reset() {
	*m = JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList{}
}
func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) String() string {
	return proto.CompactTextString(m)
}
func (*JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) ProtoMessage() {
}
func (*JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ea3d1731efd5e28, []int{0, 1, 1, 2, 2, 0}
}
func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList.Merge(m, src)
}
func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) XXX_Size() int {
	return m.Size()
}
func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList.DiscardUnknown(m)
}

var xxx_messageInfo_JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList proto.InternalMessageInfo

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) GetProbeMeasurementType() string {
	if m != nil && m.ProbeMeasurementType != nil {
		return *m.ProbeMeasurementType
	}
	return ""
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) GetSamples() uint32 {
	if m != nil && m.Samples != nil {
		return *m.Samples
	}
	return 0
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) GetMinDelay() uint32 {
	if m != nil && m.MinDelay != nil {
		return *m.MinDelay
	}
	return 0
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) GetMaxDelay() uint32 {
	if m != nil && m.MaxDelay != nil {
		return *m.MaxDelay
	}
	return 0
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) GetAvgDelay() uint32 {
	if m != nil && m.AvgDelay != nil {
		return *m.AvgDelay
	}
	return 0
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) GetJitterDelay() uint32 {
	if m != nil && m.JitterDelay != nil {
		return *m.JitterDelay
	}
	return 0
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) GetStddevDelay() uint64 {
	if m != nil && m.StddevDelay != nil {
		return *m.StddevDelay
	}
	return 0
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) GetSumDelay() uint64 {
	if m != nil && m.SumDelay != nil {
		return *m.SumDelay
	}
	return 0
}

type JunosTwampTypeClientTypeHistoryTestResultsList struct {
	HistorySingleTestResults []*JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList `protobuf:"bytes,151,rep,name=history_single_test_results,json=historySingleTestResults" json:"history_single_test_results,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                                                                      `json:"-"`
	XXX_unrecognized         []byte                                                                        `json:"-"`
	XXX_sizecache            int32                                                                         `json:"-"`
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsList) Reset() {
	*m = JunosTwampTypeClientTypeHistoryTestResultsList{}
}
func (m *JunosTwampTypeClientTypeHistoryTestResultsList) String() string {
	return proto.CompactTextString(m)
}
func (*JunosTwampTypeClientTypeHistoryTestResultsList) ProtoMessage() {}
func (*JunosTwampTypeClientTypeHistoryTestResultsList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ea3d1731efd5e28, []int{0, 1, 1, 3}
}
func (m *JunosTwampTypeClientTypeHistoryTestResultsList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosTwampTypeClientTypeHistoryTestResultsList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosTwampTypeClientTypeHistoryTestResultsList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosTwampTypeClientTypeHistoryTestResultsList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosTwampTypeClientTypeHistoryTestResultsList.Merge(m, src)
}
func (m *JunosTwampTypeClientTypeHistoryTestResultsList) XXX_Size() int {
	return m.Size()
}
func (m *JunosTwampTypeClientTypeHistoryTestResultsList) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosTwampTypeClientTypeHistoryTestResultsList.DiscardUnknown(m)
}

var xxx_messageInfo_JunosTwampTypeClientTypeHistoryTestResultsList proto.InternalMessageInfo

func (m *JunosTwampTypeClientTypeHistoryTestResultsList) GetHistorySingleTestResults() []*JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList {
	if m != nil {
		return m.HistorySingleTestResults
	}
	return nil
}

type JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList struct {
	Owner                *string                                                                                           `protobuf:"bytes,51,opt,name=owner" json:"owner,omitempty"`
	TestName             *string                                                                                           `protobuf:"bytes,52,opt,name=test_name,json=testName" json:"test_name,omitempty"`
	DestinationInterface *string                                                                                           `protobuf:"bytes,53,opt,name=destination_interface,json=destinationInterface" json:"destination_interface,omitempty"`
	TestSize             *uint32                                                                                           `protobuf:"varint,54,opt,name=test_size,json=testSize" json:"test_size,omitempty"`
	ClientAddress        *string                                                                                           `protobuf:"bytes,55,opt,name=client_address,json=clientAddress" json:"client_address,omitempty"`
	ClientPort           *uint32                                                                                           `protobuf:"varint,56,opt,name=client_port,json=clientPort" json:"client_port,omitempty"`
	SenderAddress        *string                                                                                           `protobuf:"bytes,57,opt,name=sender_address,json=senderAddress" json:"sender_address,omitempty"`
	SenderPort           *uint32                                                                                           `protobuf:"varint,58,opt,name=sender_port,json=senderPort" json:"sender_port,omitempty"`
	ReflectorAddress     *string                                                                                           `protobuf:"bytes,59,opt,name=reflector_address,json=reflectorAddress" json:"reflector_address,omitempty"`
	ReflectorPort        *uint32                                                                                           `protobuf:"varint,60,opt,name=reflector_port,json=reflectorPort" json:"reflector_port,omitempty"`
	ServerAddress        *string                                                                                           `protobuf:"bytes,61,opt,name=server_address,json=serverAddress" json:"server_address,omitempty"`
	ServerPort           *uint32                                                                                           `protobuf:"varint,62,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	LossThreshTotal      *uint32                                                                                           `protobuf:"varint,63,opt,name=loss_thresh_total,json=lossThreshTotal" json:"loss_thresh_total,omitempty"`
	LossThreshSucc       *uint32                                                                                           `protobuf:"varint,64,opt,name=loss_thresh_succ,json=lossThreshSucc" json:"loss_thresh_succ,omitempty"`
	RttThresh            *uint32                                                                                           `protobuf:"varint,65,opt,name=rtt_thresh,json=rttThresh" json:"rtt_thresh,omitempty"`
	RttJitterThresh      *uint32                                                                                           `protobuf:"varint,66,opt,name=rtt_jitter_thresh,json=rttJitterThresh" json:"rtt_jitter_thresh,omitempty"`
	RttStddevThresh      *uint32                                                                                           `protobuf:"varint,67,opt,name=rtt_stddev_thresh,json=rttStddevThresh" json:"rtt_stddev_thresh,omitempty"`
	IgrThresh            *uint32                                                                                           `protobuf:"varint,68,opt,name=igr_thresh,json=igrThresh" json:"igr_thresh,omitempty"`
	IgrJitterThresh      *uint32                                                                                           `protobuf:"varint,69,opt,name=igr_jitter_thresh,json=igrJitterThresh" json:"igr_jitter_thresh,omitempty"`
	IgrStddevThresh      *uint32                                                                                           `protobuf:"varint,70,opt,name=igr_stddev_thresh,json=igrStddevThresh" json:"igr_stddev_thresh,omitempty"`
	EgrThresh            *uint32                                                                                           `protobuf:"varint,71,opt,name=egr_thresh,json=egrThresh" json:"egr_thresh,omitempty"`
	EgrJitterThresh      *uint32                                                                                           `protobuf:"varint,72,opt,name=egr_jitter_thresh,json=egrJitterThresh" json:"egr_jitter_thresh,omitempty"`
	EgrStddevThresh      *uint32                                                                                           `protobuf:"varint,73,opt,name=egr_stddev_thresh,json=egrStddevThresh" json:"egr_stddev_thresh,omitempty"`
	RoutingInstanceName  *string                                                                                           `protobuf:"bytes,74,opt,name=routing_instance_name,json=routingInstanceName" json:"routing_instance_name,omitempty"`
	ProbeSingleResults   *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType `protobuf:"bytes,151,opt,name=probe_single_results,json=probeSingleResults" json:"probe_single_results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                                          `json:"-"`
	XXX_unrecognized     []byte                                                                                            `json:"-"`
	XXX_sizecache        int32                                                                                             `json:"-"`
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) Reset() {
	*m = JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList{}
}
func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) String() string {
	return proto.CompactTextString(m)
}
func (*JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) ProtoMessage() {}
func (*JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ea3d1731efd5e28, []int{0, 1, 1, 3, 0}
}
func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList.Merge(m, src)
}
func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) XXX_Size() int {
	return m.Size()
}
func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList.DiscardUnknown(m)
}

var xxx_messageInfo_JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList proto.InternalMessageInfo

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetOwner() string {
	if m != nil && m.Owner != nil {
		return *m.Owner
	}
	return ""
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetTestName() string {
	if m != nil && m.TestName != nil {
		return *m.TestName
	}
	return ""
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetDestinationInterface() string {
	if m != nil && m.DestinationInterface != nil {
		return *m.DestinationInterface
	}
	return ""
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetTestSize() uint32 {
	if m != nil && m.TestSize != nil {
		return *m.TestSize
	}
	return 0
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetClientAddress() string {
	if m != nil && m.ClientAddress != nil {
		return *m.ClientAddress
	}
	return ""
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetClientPort() uint32 {
	if m != nil && m.ClientPort != nil {
		return *m.ClientPort
	}
	return 0
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetSenderAddress() string {
	if m != nil && m.SenderAddress != nil {
		return *m.SenderAddress
	}
	return ""
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetSenderPort() uint32 {
	if m != nil && m.SenderPort != nil {
		return *m.SenderPort
	}
	return 0
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetReflectorAddress() string {
	if m != nil && m.ReflectorAddress != nil {
		return *m.ReflectorAddress
	}
	return ""
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetReflectorPort() uint32 {
	if m != nil && m.ReflectorPort != nil {
		return *m.ReflectorPort
	}
	return 0
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetServerAddress() string {
	if m != nil && m.ServerAddress != nil {
		return *m.ServerAddress
	}
	return ""
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetServerPort() uint32 {
	if m != nil && m.ServerPort != nil {
		return *m.ServerPort
	}
	return 0
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetLossThreshTotal() uint32 {
	if m != nil && m.LossThreshTotal != nil {
		return *m.LossThreshTotal
	}
	return 0
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetLossThreshSucc() uint32 {
	if m != nil && m.LossThreshSucc != nil {
		return *m.LossThreshSucc
	}
	return 0
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetRttThresh() uint32 {
	if m != nil && m.RttThresh != nil {
		return *m.RttThresh
	}
	return 0
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetRttJitterThresh() uint32 {
	if m != nil && m.RttJitterThresh != nil {
		return *m.RttJitterThresh
	}
	return 0
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetRttStddevThresh() uint32 {
	if m != nil && m.RttStddevThresh != nil {
		return *m.RttStddevThresh
	}
	return 0
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetIgrThresh() uint32 {
	if m != nil && m.IgrThresh != nil {
		return *m.IgrThresh
	}
	return 0
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetIgrJitterThresh() uint32 {
	if m != nil && m.IgrJitterThresh != nil {
		return *m.IgrJitterThresh
	}
	return 0
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetIgrStddevThresh() uint32 {
	if m != nil && m.IgrStddevThresh != nil {
		return *m.IgrStddevThresh
	}
	return 0
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetEgrThresh() uint32 {
	if m != nil && m.EgrThresh != nil {
		return *m.EgrThresh
	}
	return 0
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetEgrJitterThresh() uint32 {
	if m != nil && m.EgrJitterThresh != nil {
		return *m.EgrJitterThresh
	}
	return 0
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetEgrStddevThresh() uint32 {
	if m != nil && m.EgrStddevThresh != nil {
		return *m.EgrStddevThresh
	}
	return 0
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetRoutingInstanceName() string {
	if m != nil && m.RoutingInstanceName != nil {
		return *m.RoutingInstanceName
	}
	return ""
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) GetProbeSingleResults() *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType {
	if m != nil {
		return m.ProbeSingleResults
	}
	return nil
}

type JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType struct {
	ProbeTime                   *string  `protobuf:"bytes,51,opt,name=probe_time,json=probeTime" json:"probe_time,omitempty"`
	ProbeSentTime               *string  `protobuf:"bytes,52,opt,name=probe_sent_time,json=probeSentTime" json:"probe_sent_time,omitempty"`
	ProbeStatus                 *string  `protobuf:"bytes,53,opt,name=probe_status,json=probeStatus" json:"probe_status,omitempty"`
	HardwareTimestampStatus     *string  `protobuf:"bytes,54,opt,name=hardware_timestamp_status,json=hardwareTimestampStatus" json:"hardware_timestamp_status,omitempty"`
	Rtt                         *uint32  `protobuf:"varint,55,opt,name=rtt" json:"rtt,omitempty"`
	Egress                      *uint32  `protobuf:"varint,56,opt,name=egress" json:"egress,omitempty"`
	Ingress                     *uint32  `protobuf:"varint,57,opt,name=ingress" json:"ingress,omitempty"`
	EgressJitter                *int32   `protobuf:"varint,58,opt,name=egress_jitter,json=egressJitter" json:"egress_jitter,omitempty"`
	IngressJitter               *int32   `protobuf:"varint,59,opt,name=ingress_jitter,json=ingressJitter" json:"ingress_jitter,omitempty"`
	RoundTripJitter             *int32   `protobuf:"varint,60,opt,name=round_trip_jitter,json=roundTripJitter" json:"round_trip_jitter,omitempty"`
	EgressInterarrivalJitter    *int32   `protobuf:"varint,61,opt,name=egress_interarrival_jitter,json=egressInterarrivalJitter" json:"egress_interarrival_jitter,omitempty"`
	IngressInterarrivalJitter   *int32   `protobuf:"varint,62,opt,name=ingress_interarrival_jitter,json=ingressInterarrivalJitter" json:"ingress_interarrival_jitter,omitempty"`
	RoundTripInterarrivalJitter *int32   `protobuf:"varint,63,opt,name=round_trip_interarrival_jitter,json=roundTripInterarrivalJitter" json:"round_trip_interarrival_jitter,omitempty"`
	HttpStatus                  *uint32  `protobuf:"varint,64,opt,name=http_status,json=httpStatus" json:"http_status,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) Reset() {
	*m = JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType{}
}
func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) String() string {
	return proto.CompactTextString(m)
}
func (*JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) ProtoMessage() {
}
func (*JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ea3d1731efd5e28, []int{0, 1, 1, 3, 0, 0}
}
func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType.Merge(m, src)
}
func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) XXX_Size() int {
	return m.Size()
}
func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType proto.InternalMessageInfo

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetProbeTime() string {
	if m != nil && m.ProbeTime != nil {
		return *m.ProbeTime
	}
	return ""
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetProbeSentTime() string {
	if m != nil && m.ProbeSentTime != nil {
		return *m.ProbeSentTime
	}
	return ""
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetProbeStatus() string {
	if m != nil && m.ProbeStatus != nil {
		return *m.ProbeStatus
	}
	return ""
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetHardwareTimestampStatus() string {
	if m != nil && m.HardwareTimestampStatus != nil {
		return *m.HardwareTimestampStatus
	}
	return ""
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetRtt() uint32 {
	if m != nil && m.Rtt != nil {
		return *m.Rtt
	}
	return 0
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetEgress() uint32 {
	if m != nil && m.Egress != nil {
		return *m.Egress
	}
	return 0
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetIngress() uint32 {
	if m != nil && m.Ingress != nil {
		return *m.Ingress
	}
	return 0
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetEgressJitter() int32 {
	if m != nil && m.EgressJitter != nil {
		return *m.EgressJitter
	}
	return 0
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetIngressJitter() int32 {
	if m != nil && m.IngressJitter != nil {
		return *m.IngressJitter
	}
	return 0
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetRoundTripJitter() int32 {
	if m != nil && m.RoundTripJitter != nil {
		return *m.RoundTripJitter
	}
	return 0
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetEgressInterarrivalJitter() int32 {
	if m != nil && m.EgressInterarrivalJitter != nil {
		return *m.EgressInterarrivalJitter
	}
	return 0
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetIngressInterarrivalJitter() int32 {
	if m != nil && m.IngressInterarrivalJitter != nil {
		return *m.IngressInterarrivalJitter
	}
	return 0
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetRoundTripInterarrivalJitter() int32 {
	if m != nil && m.RoundTripInterarrivalJitter != nil {
		return *m.RoundTripInterarrivalJitter
	}
	return 0
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) GetHttpStatus() uint32 {
	if m != nil && m.HttpStatus != nil {
		return *m.HttpStatus
	}
	return 0
}

var E_JnprJunosExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*Junos)(nil),
	Field:         74,
	Name:          "jnpr_junos_ext",
	Tag:           "bytes,74,opt,name=jnpr_junos_ext",
	Filename:      "rmopd_render.proto",
}

func init() {
	proto.RegisterType((*Junos)(nil), "junos")
	proto.RegisterType((*JunosRpmType)(nil), "junos.rpm_type")
	proto.RegisterType((*JunosRpmTypeProbeResultsType)(nil), "junos.rpm_type.probe_results_type")
	proto.RegisterType((*JunosRpmTypeProbeResultsTypeProbeTestResultsList)(nil), "junos.rpm_type.probe_results_type.probe_test_results_list")
	proto.RegisterType((*JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType)(nil), "junos.rpm_type.probe_results_type.probe_test_results_list.probe_tests_hw_ts_err_type")
	proto.RegisterType((*JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType)(nil), "junos.rpm_type.probe_results_type.probe_test_results_list.probe_single_results_type")
	proto.RegisterType((*JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList)(nil), "junos.rpm_type.probe_results_type.probe_test_results_list.probe_test_generic_results_list")
	proto.RegisterType((*JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList)(nil), "junos.rpm_type.probe_results_type.probe_test_results_list.probe_test_generic_results_list.probe_test_generic_measurements_list")
	proto.RegisterType((*JunosRpmTypeHistoryResultsType)(nil), "junos.rpm_type.history_results_type")
	proto.RegisterType((*JunosRpmTypeHistoryResultsTypeHistoryTestResultsList)(nil), "junos.rpm_type.history_results_type.history_test_results_list")
	proto.RegisterType((*JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList)(nil), "junos.rpm_type.history_results_type.history_test_results_list.history_single_test_results_list")
	proto.RegisterType((*JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType)(nil), "junos.rpm_type.history_results_type.history_test_results_list.history_single_test_results_list.probe_single_results_type")
	proto.RegisterType((*JunosRpmTypeServerType)(nil), "junos.rpm_type.server_type")
	proto.RegisterType((*JunosRpmTypeServerTypeActiveServersList)(nil), "junos.rpm_type.server_type.active_servers_list")
	proto.RegisterType((*JunosTwampType)(nil), "junos.twamp_type")
	proto.RegisterType((*JunosTwampTypeServerType)(nil), "junos.twamp_type.server_type")
	proto.RegisterType((*JunosTwampTypeServerTypeControlConnectionList)(nil), "junos.twamp_type.server_type.control_connection_list")
	proto.RegisterType((*JunosTwampTypeServerTypeTestSessionList)(nil), "junos.twamp_type.server_type.test_session_list")
	proto.RegisterType((*JunosTwampTypeServerTypeTestSessionListTestSessionInfoList)(nil), "junos.twamp_type.server_type.test_session_list.test_session_info_list")
	proto.RegisterType((*JunosTwampTypeClientType)(nil), "junos.twamp_type.client_type")
	proto.RegisterType((*JunosTwampTypeClientTypeControlConnectionList)(nil), "junos.twamp_type.client_type.control_connection_list")
	proto.RegisterType((*JunosTwampTypeClientTypeTestSessionList)(nil), "junos.twamp_type.client_type.test_session_list")
	proto.RegisterType((*JunosTwampTypeClientTypeTestSessionListTestSessionInfoList)(nil), "junos.twamp_type.client_type.test_session_list.test_session_info_list")
	proto.RegisterType((*JunosTwampTypeClientTypeProbeTestResultsList)(nil), "junos.twamp_type.client_type.probe_test_results_list")
	proto.RegisterType((*JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType)(nil), "junos.twamp_type.client_type.probe_test_results_list.probe_tests_hw_ts_err_type")
	proto.RegisterType((*JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType)(nil), "junos.twamp_type.client_type.probe_test_results_list.probe_single_results_type")
	proto.RegisterType((*JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList)(nil), "junos.twamp_type.client_type.probe_test_results_list.probe_test_generic_results_list")
	proto.RegisterType((*JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList)(nil), "junos.twamp_type.client_type.probe_test_results_list.probe_test_generic_results_list.probe_test_generic_measurements_list")
	proto.RegisterType((*JunosTwampTypeClientTypeHistoryTestResultsList)(nil), "junos.twamp_type.client_type.history_test_results_list")
	proto.RegisterType((*JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList)(nil), "junos.twamp_type.client_type.history_test_results_list.history_single_test_results_list")
	proto.RegisterType((*JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType)(nil), "junos.twamp_type.client_type.history_test_results_list.history_single_test_results_list.probe_single_results_type")
	proto.RegisterExtension(E_JnprJunosExt)
}

func init() { proto.RegisterFile("rmopd_render.proto", fileDescriptor_0ea3d1731efd5e28) }

var fileDescriptor_0ea3d1731efd5e28 = []byte{
	// 2263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0xcf, 0x6f, 0x1c, 0x49,
	0xf5, 0xd7, 0x24, 0x71, 0x62, 0xd7, 0xfc, 0x70, 0x5c, 0xf9, 0xe1, 0x49, 0xfb, 0x1b, 0x27, 0x9b,
	0x6f, 0x16, 0x4c, 0x50, 0xc6, 0x28, 0x9b, 0x38, 0x89, 0xe3, 0x78, 0x13, 0x3b, 0xce, 0xc6, 0x91,
	0x36, 0x44, 0x33, 0x8e, 0x40, 0x7b, 0x69, 0x3a, 0xdd, 0x95, 0x99, 0xf2, 0x4e, 0xff, 0xa0, 0xaa,
	0x66, 0x1c, 0xe7, 0x82, 0xb4, 0x1c, 0x16, 0x89, 0x1b, 0x68, 0xc1, 0xe1, 0xb2, 0x27, 0x2e, 0x88,
	0x13, 0x17, 0x6e, 0x1c, 0xb8, 0xc0, 0x09, 0xad, 0x10, 0x17, 0x2e, 0x08, 0x22, 0x85, 0x03, 0x7f,
	0x05, 0xaa, 0x7a, 0x55, 0xed, 0x9e, 0x9e, 0x1e, 0xbb, 0x1d, 0xaf, 0x61, 0x97, 0x9d, 0xdb, 0xf4,
	0x7b, 0x9f, 0xf7, 0x5e, 0x4d, 0xfd, 0xf8, 0xd4, 0x7b, 0xaf, 0x10, 0x66, 0x7e, 0x18, 0x79, 0x36,
	0x23, 0x81, 0x47, 0x58, 0x2d, 0x62, 0xa1, 0x08, 0xad, 0x13, 0x82, 0xb4, 0x89, 0x4f, 0x04, 0xdb,
	0xb4, 0x45, 0x18, 0x81, 0xf0, 0xc2, 0xa7, 0x2e, 0x1a, 0x59, 0xef, 0x04, 0x21, 0xc7, 0x17, 0xd0,
	0x61, 0x16, 0xf9, 0xd5, 0x9f, 0x17, 0xce, 0x17, 0x66, 0x8a, 0x57, 0xc6, 0x6b, 0x4a, 0x5a, 0x63,
	0x91, 0x6f, 0x8b, 0xcd, 0x88, 0xd4, 0xa5, 0x12, 0xcf, 0xa0, 0x11, 0xb1, 0xe1, 0xf8, 0x51, 0x75,
	0x0b, 0x50, 0x13, 0x1a, 0xa5, 0x84, 0x80, 0x03, 0x80, 0xf5, 0x9b, 0x6f, 0xa0, 0x51, 0x63, 0x8b,
	0x1f, 0xa0, 0x72, 0xc4, 0xc2, 0xa7, 0xc4, 0x66, 0x84, 0x77, 0xda, 0x82, 0x9b, 0x20, 0x17, 0x52,
	0x41, 0x6a, 0x3d, 0x28, 0xf0, 0x57, 0x52, 0xb2, 0x3a, 0x88, 0xf0, 0x23, 0x34, 0xde, 0xa2, 0x5c,
	0x84, 0x6c, 0x33, 0xf6, 0xa5, 0x87, 0x72, 0x31, 0xed, 0x2b, 0x85, 0x03, 0x6f, 0x15, 0x2d, 0x35,
	0xfe, 0xae, 0xa2, 0xa3, 0x9c, 0xb0, 0x2e, 0x61, 0xd5, 0x97, 0xe0, 0x66, 0x2a, 0xed, 0x06, 0xd4,
	0x60, 0xad, 0xb1, 0xd6, 0xd6, 0x24, 0xc2, 0xfd, 0x43, 0xc5, 0xd4, 0x48, 0x05, 0xe1, 0x22, 0xf9,
	0x5f, 0x0f, 0xcf, 0x14, 0xaf, 0xcc, 0xef, 0xfe, 0x5f, 0x6b, 0xfd, 0xd6, 0x76, 0x9b, 0x72, 0x51,
	0x3f, 0xae, 0x14, 0x6b, 0x84, 0x0b, 0x3d, 0x6e, 0xeb, 0x67, 0xa7, 0xd1, 0xe4, 0x00, 0x34, 0x3e,
	0x89, 0x46, 0xc2, 0x8d, 0x80, 0xb0, 0xea, 0x3b, 0xe7, 0x0b, 0x33, 0x63, 0x75, 0xf8, 0xc0, 0x53,
	0x68, 0x4c, 0x41, 0x03, 0xc7, 0x27, 0xd5, 0xab, 0x4a, 0x33, 0x2a, 0x05, 0x8f, 0x1c, 0x9f, 0xe0,
	0xb7, 0x51, 0x45, 0x38, 0xac, 0x49, 0x84, 0xed, 0x78, 0x1e, 0x23, 0x9c, 0x57, 0xaf, 0x29, 0x44,
	0x19, 0xa4, 0x77, 0x41, 0x88, 0xcf, 0x22, 0xa4, 0x61, 0x1d, 0xd6, 0xae, 0xce, 0x29, 0xc8, 0x18,
	0x48, 0x9e, 0xb0, 0xb6, 0xf4, 0xc2, 0xc3, 0x0e, 0x73, 0x49, 0xec, 0xe5, 0x3a, 0x78, 0x01, 0xa9,
	0xf1, 0xf2, 0x0e, 0x3a, 0xe5, 0x11, 0x2e, 0x68, 0xe0, 0x08, 0x1a, 0x06, 0x36, 0x0d, 0x04, 0x61,
	0xcf, 0x1c, 0x97, 0x54, 0x6f, 0x28, 0xf4, 0xc9, 0x84, 0x72, 0xd5, 0xe8, 0x64, 0x68, 0xfd, 0x7f,
	0x37, 0x23, 0x52, 0xbd, 0x09, 0xa1, 0x61, 0x5a, 0xe4, 0xd4, 0x4f, 0xa2, 0x63, 0xd4, 0xf5, 0x23,
	0x9b, 0x7a, 0xd5, 0xf9, 0xf3, 0x85, 0x99, 0x72, 0xfd, 0xa8, 0xfc, 0x5c, 0xf5, 0xe2, 0xbf, 0xcd,
	0xe9, 0x0b, 0x52, 0xbd, 0xa5, 0x54, 0xea, 0x6f, 0x37, 0xe8, 0x0b, 0x82, 0xcf, 0xa1, 0x62, 0x4b,
	0x88, 0xc8, 0xe6, 0xc2, 0x11, 0x1d, 0x5e, 0x5d, 0x50, 0x6a, 0x24, 0x45, 0x0d, 0x25, 0xc1, 0x57,
	0xd0, 0x29, 0x16, 0x76, 0x04, 0x0d, 0x9a, 0x36, 0x0d, 0xb8, 0x70, 0x02, 0x97, 0xc0, 0x04, 0xde,
	0x56, 0x03, 0x38, 0xa1, 0x95, 0xab, 0x5a, 0xa7, 0xe6, 0xf2, 0x2c, 0x42, 0x4c, 0x08, 0x5b, 0xb4,
	0x18, 0xe1, 0xad, 0xea, 0xa2, 0xf2, 0x39, 0xc6, 0x84, 0x58, 0x53, 0x02, 0x7c, 0x09, 0x4d, 0x48,
	0xf5, 0x3a, 0x15, 0x42, 0x6e, 0x2b, 0x40, 0xbd, 0xab, 0x50, 0xe3, 0x4c, 0x88, 0x87, 0x4a, 0xde,
	0x8b, 0xe5, 0xc2, 0xf3, 0x48, 0xd7, 0x60, 0xef, 0xc4, 0xd8, 0x86, 0x92, 0x6b, 0xec, 0x59, 0x84,
	0x68, 0x33, 0x76, 0x78, 0x17, 0xc2, 0xd2, 0x66, 0xc2, 0x95, 0x54, 0xf7, 0x86, 0x5d, 0x02, 0x57,
	0xb4, 0xc9, 0xd2, 0x61, 0x25, 0xb6, 0x37, 0xec, 0x72, 0x8c, 0x4d, 0x87, 0x25, 0xdb, 0x61, 0xef,
	0x41, 0x58, 0x92, 0x0c, 0x4b, 0xfa, 0xc2, 0xae, 0x80, 0x2b, 0xd2, 0x1f, 0x96, 0xf4, 0x85, 0xbd,
	0x1f, 0x63, 0x7b, 0xc2, 0xfe, 0xa8, 0x80, 0x4e, 0x6d, 0xef, 0x7f, 0x6e, 0xb7, 0x36, 0x6c, 0xc1,
	0x6d, 0xc2, 0x98, 0xa1, 0x96, 0x27, 0x6f, 0x7e, 0xdc, 0x6a, 0x99, 0x8e, 0x81, 0x01, 0x26, 0xe2,
	0x93, 0xc8, 0x1f, 0x6c, 0xac, 0xf1, 0x15, 0xc6, 0xf0, 0xc7, 0x05, 0x74, 0x12, 0x2c, 0x38, 0x0d,
	0x9a, 0x6d, 0x92, 0x26, 0xa6, 0xb5, 0x7d, 0x8f, 0xa4, 0xd7, 0x2f, 0x0c, 0x04, 0x98, 0xa6, 0xa1,
	0x34, 0x86, 0xcc, 0xb6, 0x0a, 0xc8, 0x4a, 0x78, 0x6a, 0x92, 0x80, 0x30, 0xea, 0xc6, 0xe3, 0x79,
	0x09, 0x44, 0xf4, 0xc1, 0xe7, 0x32, 0x33, 0x69, 0xef, 0x40, 0x54, 0x93, 0xf1, 0xf4, 0xbc, 0x07,
	0x6a, 0xc3, 0x57, 0x9f, 0x1c, 0x4a, 0x0e, 0x2d, 0x3d, 0xad, 0x78, 0x01, 0x4d, 0xd1, 0xa0, 0xeb,
	0xb4, 0xa9, 0x67, 0xbb, 0x6d, 0x4a, 0x02, 0x19, 0xd6, 0xed, 0x4a, 0x88, 0x1b, 0x08, 0x20, 0xb2,
	0x72, 0x7d, 0x52, 0x43, 0x96, 0x15, 0xa2, 0x4e, 0xdc, 0xee, 0x1a, 0x5f, 0x0e, 0x04, 0xc3, 0xd7,
	0x51, 0x35, 0x65, 0x1d, 0x84, 0xc6, 0xf4, 0xaa, 0x32, 0x3d, 0xd5, 0x63, 0xfa, 0x28, 0x14, 0x60,
	0x98, 0x08, 0xab, 0x69, 0x9e, 0x93, 0xc0, 0x8b, 0xc3, 0x5e, 0xeb, 0x09, 0xdb, 0x50, 0x88, 0x06,
	0x09, 0x3c, 0x1d, 0x76, 0x09, 0x4d, 0xa7, 0xad, 0x23, 0x19, 0x5c, 0x50, 0x9f, 0x80, 0x83, 0x39,
	0xe5, 0xc0, 0xea, 0x75, 0x20, 0x31, 0x6b, 0xd4, 0x27, 0xd2, 0x87, 0xf5, 0x8f, 0x23, 0xe8, 0xcc,
	0xc0, 0x45, 0x4e, 0x90, 0x1e, 0xf5, 0x89, 0xa6, 0x73, 0x4d, 0x7a, 0xd4, 0x27, 0xf8, 0x6b, 0x68,
	0x5c, 0xdb, 0x9a, 0xb0, 0x9a, 0xd8, 0xe1, 0xb6, 0x6d, 0xe8, 0x40, 0xf8, 0x2d, 0x54, 0xd2, 0x38,
	0xe0, 0x39, 0xe0, 0xf6, 0x22, 0x80, 0x80, 0xe8, 0xe6, 0xd1, 0x99, 0x96, 0xc3, 0xbc, 0x0d, 0x87,
	0x41, 0x30, 0x2e, 0xe4, 0x85, 0xae, 0xf1, 0x40, 0xf4, 0x93, 0x06, 0xb0, 0x66, 0xf4, 0xda, 0xf6,
	0x38, 0x3a, 0xcc, 0x84, 0x50, 0x5c, 0x5f, 0xae, 0xcb, 0x9f, 0xf8, 0x34, 0x3a, 0x4a, 0x9a, 0xea,
	0x02, 0xb8, 0x01, 0x64, 0x0c, 0x5f, 0xb8, 0x8a, 0x8e, 0xd1, 0x00, 0x14, 0x37, 0x95, 0xc2, 0x7c,
	0xe2, 0xff, 0x47, 0x65, 0xc0, 0x68, 0xaa, 0x50, 0x2c, 0x3e, 0x52, 0x2f, 0x81, 0x10, 0x68, 0x42,
	0xde, 0x2f, 0x1a, 0x6f, 0x50, 0xb7, 0x14, 0xaa, 0xac, 0xa5, 0x1a, 0x26, 0x59, 0x33, 0xec, 0xc8,
	0x75, 0x64, 0x34, 0x32, 0xc8, 0x05, 0x85, 0x1c, 0x57, 0x8a, 0x35, 0x46, 0x23, 0x8d, 0x5d, 0x40,
	0x96, 0x8e, 0xab, 0xae, 0x21, 0x87, 0x31, 0xda, 0x75, 0xda, 0xc6, 0xe8, 0xb6, 0x32, 0xaa, 0x02,
	0x62, 0x35, 0x01, 0xd0, 0xd6, 0x8b, 0x72, 0xff, 0x0c, 0x36, 0x5f, 0x54, 0xe6, 0x67, 0x34, 0x24,
	0xc3, 0x7e, 0x19, 0x4d, 0x27, 0x46, 0x9a, 0xe5, 0xe2, 0x5d, 0xe5, 0x62, 0x2a, 0x1e, 0x76, 0x86,
	0x93, 0xd4, 0x25, 0x76, 0x27, 0x7d, 0x89, 0x59, 0xff, 0x1a, 0x41, 0xe7, 0x76, 0x39, 0xb8, 0xf8,
	0x12, 0x2a, 0x9b, 0x6f, 0xee, 0x86, 0x91, 0xde, 0x6c, 0x4b, 0x23, 0x1f, 0xdd, 0x39, 0x34, 0x5a,
	0xa8, 0x97, 0xb4, 0xae, 0x21, 0x55, 0x32, 0xa0, 0x72, 0xc7, 0xd5, 0xbe, 0xd3, 0x27, 0x0c, 0x36,
	0x2a, 0x97, 0x7b, 0x0e, 0x7f, 0xdd, 0xec, 0x4b, 0x46, 0x78, 0x14, 0x06, 0x9c, 0x70, 0x7d, 0x94,
	0x2a, 0x26, 0x97, 0x03, 0xa9, 0x04, 0xb6, 0x43, 0xce, 0xed, 0x88, 0x30, 0x97, 0x04, 0xc2, 0x69,
	0x12, 0x7d, 0x64, 0x2a, 0x52, 0xfc, 0x38, 0x96, 0xe2, 0x8b, 0xa8, 0xd2, 0x76, 0xb8, 0x80, 0x3f,
	0xa0, 0x36, 0x3a, 0x64, 0x16, 0x25, 0x29, 0x95, 0x74, 0xa3, 0xf6, 0xf9, 0x1f, 0x0a, 0x99, 0x7f,
	0xd4, 0x27, 0x0e, 0xef, 0x30, 0xe2, 0x93, 0x60, 0x3b, 0x1b, 0xfb, 0xc1, 0xc1, 0x91, 0x60, 0x6d,
	0x97, 0x21, 0x00, 0x53, 0xfe, 0x5f, 0x9a, 0x29, 0xdf, 0x4f, 0x40, 0xac, 0xdf, 0x1e, 0x42, 0x17,
	0xf3, 0xb8, 0xc1, 0xb7, 0xd0, 0x69, 0xc0, 0x25, 0x54, 0x90, 0x22, 0xf5, 0x2c, 0x20, 0x5c, 0x50,
	0x89, 0x10, 0x2a, 0x69, 0xaa, 0xa2, 0x63, 0xdc, 0xf1, 0xa3, 0x36, 0xe1, 0x7a, 0x11, 0xcd, 0xa7,
	0xcc, 0x9a, 0x7c, 0x1a, 0xd8, 0x1e, 0x69, 0x3b, 0x9b, 0x7a, 0xed, 0x46, 0x7d, 0x1a, 0xdc, 0x93,
	0xdf, 0x4a, 0xe9, 0x3c, 0xd7, 0xca, 0x39, 0xad, 0x74, 0x9e, 0xc7, 0x4a, 0xa7, 0xdb, 0xd4, 0x4a,
	0xa0, 0x84, 0x51, 0xa7, 0xdb, 0x04, 0xe5, 0x5b, 0xa8, 0xa4, 0x33, 0x01, 0xd0, 0x03, 0x3b, 0x14,
	0x41, 0x16, 0x43, 0x74, 0x02, 0x00, 0x10, 0xc9, 0x13, 0x47, 0xea, 0x45, 0x90, 0xc5, 0x21, 0x78,
	0xc7, 0xd7, 0xfa, 0x79, 0xa5, 0x1f, 0xe5, 0x1d, 0x5f, 0x29, 0xad, 0xd7, 0x15, 0x74, 0x32, 0x2b,
	0xf3, 0xc7, 0xdf, 0xdf, 0x96, 0x67, 0xa5, 0xe7, 0x8b, 0x79, 0xca, 0x87, 0x5a, 0x96, 0x07, 0x58,
	0x4f, 0xac, 0x55, 0xc9, 0x24, 0xfd, 0xaf, 0x65, 0x74, 0x66, 0xa0, 0x05, 0xfe, 0xb4, 0x80, 0xa6,
	0x8c, 0x56, 0x93, 0x7f, 0xd6, 0xc0, 0xec, 0xfd, 0x0d, 0xac, 0xb6, 0x43, 0x08, 0x18, 0x79, 0x55,
	0x23, 0x20, 0x97, 0x48, 0x8e, 0xff, 0x65, 0x09, 0x9d, 0xdf, 0xcd, 0x7c, 0x58, 0x6d, 0x0c, 0xab,
	0x8d, 0xff, 0xf9, 0x6a, 0xe3, 0xd7, 0x83, 0x52, 0x7c, 0x5d, 0x6c, 0x6c, 0x1e, 0xf0, 0x19, 0xdd,
	0x5b, 0x1d, 0x30, 0x4c, 0x2a, 0x87, 0x49, 0xe5, 0x81, 0x27, 0x95, 0x7f, 0x2e, 0xa0, 0x62, 0xa2,
	0x35, 0x86, 0xbf, 0x83, 0x2a, 0x8e, 0x2b, 0x68, 0x97, 0xe8, 0x5a, 0x28, 0xbe, 0xbf, 0x66, 0x77,
	0x68, 0xa8, 0xd5, 0x7a, 0x4d, 0xe0, 0x3e, 0x2a, 0x83, 0x10, 0xaa, 0x25, 0x6e, 0xad, 0xa3, 0x13,
	0x19, 0x28, 0x6c, 0xa1, 0x51, 0xd5, 0xc0, 0x74, 0xc3, 0xb6, 0xde, 0xc3, 0xf1, 0x37, 0xc6, 0xe8,
	0x48, 0x14, 0x32, 0x93, 0x99, 0xaa, 0xdf, 0x72, 0x2f, 0x78, 0x5c, 0x24, 0xe8, 0x1f, 0xf6, 0x6b,
	0xc9, 0xe3, 0x22, 0xa6, 0x7d, 0xeb, 0x27, 0x37, 0x11, 0xda, 0x6e, 0x65, 0xe2, 0xb9, 0xb8, 0x39,
	0xa8, 0xcf, 0xf9, 0xd9, 0xbe, 0x76, 0x67, 0x56, 0x7b, 0x50, 0xda, 0x41, 0x1d, 0x6a, 0x5a, 0x00,
	0x19, 0x76, 0xba, 0x50, 0x05, 0x3b, 0xf8, 0xb0, 0x7e, 0x75, 0xac, 0x77, 0x4e, 0x09, 0xc2, 0x6e,
	0x18, 0x08, 0x16, 0xb6, 0x6d, 0x37, 0x0c, 0x02, 0xe2, 0xca, 0x4b, 0xca, 0xcc, 0xeb, 0xb5, 0x1d,
	0xc7, 0x52, 0xeb, 0x37, 0x84, 0xd9, 0x9d, 0xd0, 0x8a, 0xe5, 0x58, 0x8e, 0x1b, 0xa8, 0x04, 0x97,
	0x16, 0xe1, 0x5c, 0x06, 0xd8, 0xea, 0x5d, 0xb8, 0x01, 0x01, 0x92, 0x26, 0xe0, 0xba, 0xa8, 0x6e,
	0x3a, 0x90, 0x58, 0x9f, 0x1d, 0x42, 0x93, 0x03, 0xc6, 0x20, 0x8b, 0x8d, 0x84, 0x88, 0x7a, 0x50,
	0xdf, 0xc7, 0xc5, 0xc6, 0xb6, 0x6e, 0xd5, 0x93, 0xc7, 0x53, 0x4f, 0x95, 0xb9, 0xe5, 0x35, 0x1b,
	0x81, 0xd4, 0xdc, 0xf2, 0xe7, 0x50, 0x51, 0xc3, 0xd4, 0xca, 0x43, 0xca, 0x8a, 0x40, 0xf4, 0x58,
	0xae, 0xbf, 0xcc, 0x16, 0x60, 0xf4, 0xc6, 0xcf, 0x9c, 0xce, 0x16, 0x94, 0x34, 0xe1, 0x47, 0xc3,
	0x94, 0x1f, 0xa0, 0x1f, 0x04, 0xa2, 0xc7, 0x7a, 0x1f, 0x99, 0x3f, 0xed, 0x86, 0x9d, 0x40, 0x68,
	0x32, 0x2a, 0x69, 0xe1, 0xb2, 0x94, 0xe1, 0x59, 0x74, 0xc2, 0xe9, 0x88, 0x16, 0x09, 0x04, 0x75,
	0x21, 0xed, 0xf0, 0x43, 0xcf, 0xe4, 0x11, 0xb8, 0x57, 0xf5, 0x7e, 0xe8, 0x91, 0xa4, 0x57, 0x79,
	0xe2, 0x88, 0x62, 0xaa, 0xb1, 0xd8, 0xab, 0x3c, 0x73, 0xc4, 0xfa, 0xf1, 0x61, 0x34, 0xd1, 0x37,
	0xeb, 0x7b, 0x9a, 0x4c, 0x9e, 0x72, 0x40, 0x83, 0x67, 0xa1, 0xd9, 0x4f, 0xf7, 0xf7, 0xb8, 0xdc,
	0xb5, 0x3e, 0x4f, 0xb0, 0x0b, 0xc6, 0x13, 0xbb, 0x60, 0x35, 0x78, 0x16, 0x5a, 0x7f, 0x29, 0xa0,
	0xd3, 0xd9, 0x58, 0x3c, 0x8d, 0x8e, 0x29, 0x4d, 0x7a, 0xd4, 0x47, 0xa5, 0x14, 0x16, 0x9f, 0xab,
	0x17, 0x8c, 0xf4, 0xe2, 0x83, 0xb4, 0x67, 0xd1, 0x14, 0x2c, 0xb9, 0xf8, 0x20, 0x52, 0x8b, 0xf6,
	0x4d, 0x34, 0xc1, 0xc8, 0xb3, 0x36, 0x71, 0x45, 0x98, 0x5e, 0xff, 0xe3, 0xb1, 0xc2, 0x78, 0x7b,
	0x1b, 0x55, 0xb6, 0xc1, 0x89, 0x5d, 0x50, 0x8e, 0xa5, 0xd2, 0xa7, 0xf5, 0xcf, 0x6f, 0xc5, 0x5b,
	0xee, 0x8d, 0x0e, 0x6b, 0xc2, 0xf6, 0x60, 0x0e, 0x6b, 0x32, 0xc0, 0xce, 0x87, 0x15, 0x7b, 0x99,
	0x0f, 0x17, 0x2f, 0x73, 0x8d, 0x3d, 0xf7, 0x9b, 0x05, 0x5e, 0x1f, 0x50, 0x81, 0xfd, 0x02, 0xe2,
	0x5c, 0xdf, 0x39, 0xce, 0xde, 0x4a, 0xaf, 0x4f, 0x76, 0xa0, 0x9f, 0x19, 0x54, 0x32, 0x2a, 0x95,
	0x5d, 0xf7, 0x54, 0xca, 0x45, 0xad, 0x32, 0x85, 0xca, 0x97, 0x8f, 0x7c, 0x64, 0x05, 0xde, 0x11,
	0xad, 0x24, 0xe5, 0x8c, 0x4a, 0x81, 0x24, 0x1a, 0xeb, 0xf5, 0x91, 0x2c, 0x0e, 0xf9, 0x0a, 0xcf,
	0xc8, 0x5e, 0x39, 0x71, 0xc7, 0x53, 0x95, 0x9b, 0x13, 0xff, 0x36, 0x98, 0x13, 0x67, 0x90, 0x19,
	0x7c, 0xd6, 0x5a, 0x68, 0x95, 0x59, 0x8b, 0x2f, 0x2c, 0x3b, 0xfe, 0x6e, 0xf2, 0x73, 0x7d, 0x9f,
	0x1c, 0x58, 0xc4, 0x5f, 0xdb, 0xa1, 0x88, 0xef, 0x29, 0xc6, 0xe7, 0x52, 0xc5, 0x78, 0xff, 0x46,
	0xbe, 0x9e, 0x63, 0x23, 0xdf, 0xc8, 0xde, 0xc8, 0x3d, 0x8b, 0x70, 0x33, 0xc7, 0x22, 0xcc, 0xe7,
	0x5b, 0x84, 0x5b, 0xb9, 0x17, 0x61, 0x21, 0x63, 0x11, 0x32, 0x0e, 0xd9, 0xed, 0x1c, 0x87, 0x6c,
	0xb1, 0xef, 0x90, 0x5d, 0x42, 0x13, 0xaa, 0x4d, 0x0b, 0x45, 0xb2, 0x2d, 0x42, 0xe1, 0xb4, 0x4d,
	0x13, 0x41, 0x2a, 0xa0, 0x4a, 0x5e, 0x93, 0x62, 0x3c, 0x83, 0x8e, 0x27, 0xb1, 0xbc, 0xe3, 0xba,
	0xba, 0x7a, 0xa8, 0x6c, 0x43, 0x1b, 0x1d, 0xd7, 0x4d, 0x75, 0x2e, 0xee, 0xe6, 0xea, 0x5c, 0x2c,
	0xed, 0xa1, 0x73, 0xb1, 0x9c, 0xa7, 0x73, 0x71, 0x2f, 0x57, 0xe7, 0x62, 0x65, 0x0f, 0x9d, 0x8b,
	0xfb, 0x79, 0x3a, 0x17, 0xef, 0xe5, 0xea, 0x5c, 0x3c, 0xd8, 0x43, 0xe7, 0x62, 0x35, 0xbb, 0x73,
	0x31, 0xb0, 0xa5, 0xf4, 0x70, 0x70, 0x4b, 0xe9, 0x87, 0xbb, 0xbd, 0xad, 0x3e, 0x7e, 0xa3, 0x8c,
	0x60, 0x8f, 0xcf, 0xaa, 0x1f, 0xed, 0xf2, 0xac, 0xfa, 0xed, 0xfd, 0x0c, 0x22, 0xef, 0x8b, 0xea,
	0x4f, 0x73, 0xbd, 0xa8, 0x3e, 0xd9, 0xef, 0x7c, 0x0c, 0x1f, 0x53, 0x87, 0x8f, 0xa9, 0xc3, 0xbe,
	0xd7, 0x97, 0xa2, 0xef, 0xf5, 0xfa, 0xab, 0xf2, 0x98, 0xfa, 0xfb, 0xfc, 0x8f, 0xa9, 0x2f, 0x0e,
	0x84, 0xff, 0x86, 0xef, 0xa8, 0xff, 0xcd, 0x77, 0xd4, 0x8f, 0xc7, 0x77, 0x7a, 0xbb, 0xdc, 0xca,
	0xf7, 0x76, 0xf9, 0xdd, 0x37, 0x2c, 0xe9, 0xf7, 0xf3, 0x68, 0xf9, 0xa7, 0xf2, 0xc1, 0x3c, 0x5a,
	0x0e, 0x4b, 0x90, 0x61, 0x09, 0x32, 0x2c, 0x41, 0xfe, 0x43, 0x25, 0xc8, 0x2f, 0x77, 0x79, 0x70,
	0x65, 0x07, 0x45, 0x2c, 0xc3, 0x97, 0xd6, 0x61, 0xc6, 0xf9, 0xc5, 0xca, 0x38, 0xe7, 0x57, 0x50,
	0x65, 0x3d, 0x88, 0x98, 0xad, 0x76, 0xbc, 0x4d, 0x9e, 0x0b, 0x3c, 0x59, 0x7b, 0xd8, 0x09, 0x68,
	0x44, 0xd8, 0x23, 0x22, 0x36, 0x42, 0xf6, 0xa1, 0x4c, 0x14, 0x79, 0xc8, 0xb8, 0x3a, 0x51, 0xc5,
	0x2b, 0x47, 0xe1, 0x70, 0xd4, 0x4b, 0xd2, 0xec, 0xa1, 0xfc, 0xb9, 0xf2, 0x5c, 0x2c, 0x7d, 0xef,
	0x8f, 0xaf, 0xa6, 0x0b, 0x9f, 0xbd, 0x9a, 0x2e, 0xfc, 0xfd, 0xd5, 0x74, 0xe1, 0x83, 0x7a, 0x93,
	0x0a, 0x09, 0x93, 0x5e, 0x6a, 0x01, 0x11, 0xb3, 0xd4, 0x25, 0x4f, 0x09, 0x6b, 0xce, 0xb6, 0x88,
	0xd3, 0x16, 0xad, 0xa7, 0xa1, 0xb8, 0x4c, 0x83, 0x26, 0xe1, 0xe2, 0xf2, 0xba, 0xa0, 0x97, 0xe5,
	0xb5, 0xd6, 0x25, 0xb3, 0xd1, 0x87, 0xcd, 0xd9, 0x75, 0x41, 0x67, 0x1d, 0xcf, 0x89, 0x04, 0x61,
	0x7c, 0x16, 0xc6, 0x34, 0xcb, 0xdd, 0x16, 0xf1, 0x9d, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xa7,
	0x0b, 0x0a, 0xda, 0x74, 0x32, 0x00, 0x00,
}

func (m *Junos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Junos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Junos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Twamp != nil {
		{
			size, err := m.Twamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRmopdRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xc2
	}
	if m.Rpm != nil {
		{
			size, err := m.Rpm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRmopdRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *JunosRpmType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosRpmType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosRpmType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Server != nil {
		{
			size, err := m.Server.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRmopdRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xca
	}
	if m.HistoryResults != nil {
		{
			size, err := m.HistoryResults.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRmopdRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xc2
	}
	if m.ProbeResults != nil {
		{
			size, err := m.ProbeResults.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRmopdRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *JunosRpmTypeProbeResultsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosRpmTypeProbeResultsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosRpmTypeProbeResultsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ProbeTestResults) > 0 {
		for iNdEx := len(m.ProbeTestResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProbeTestResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRmopdRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ProbeTestGenericResults) > 0 {
		for iNdEx := len(m.ProbeTestGenericResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProbeTestGenericResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRmopdRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xca
		}
	}
	if m.ProbeSingleResults != nil {
		{
			size, err := m.ProbeSingleResults.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRmopdRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xc2
	}
	if m.ProbeTestsHwTsErr != nil {
		{
			size, err := m.ProbeTestsHwTsErr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRmopdRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	if m.EgrStddevThresh != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.EgrStddevThresh))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb0
	}
	if m.EgrJitterThresh != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.EgrJitterThresh))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xa8
	}
	if m.EgrThresh != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.EgrThresh))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xa0
	}
	if m.IgrStddevThresh != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.IgrStddevThresh))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x98
	}
	if m.IgrJitterThresh != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.IgrJitterThresh))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x90
	}
	if m.IgrThresh != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.IgrThresh))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x88
	}
	if m.RttStddevThresh != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.RttStddevThresh))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x80
	}
	if m.RttJitterThresh != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.RttJitterThresh))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf8
	}
	if m.RttThresh != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.RttThresh))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf0
	}
	if m.RoutingInstanceName != nil {
		i -= len(*m.RoutingInstanceName)
		copy(dAtA[i:], *m.RoutingInstanceName)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.RoutingInstanceName)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xea
	}
	if m.HttpStatus != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.HttpStatus))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe0
	}
	if m.TestSize != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.TestSize))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd8
	}
	if m.IcmpId != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.IcmpId))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd0
	}
	if m.ProbeType != nil {
		i -= len(*m.ProbeType)
		copy(dAtA[i:], *m.ProbeType)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.ProbeType)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	if m.DestinationInterface != nil {
		i -= len(*m.DestinationInterface)
		copy(dAtA[i:], *m.DestinationInterface)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.DestinationInterface)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc2
	}
	if m.SourceAddress != nil {
		i -= len(*m.SourceAddress)
		copy(dAtA[i:], *m.SourceAddress)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.SourceAddress)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	if m.TargetUrl != nil {
		i -= len(*m.TargetUrl)
		copy(dAtA[i:], *m.TargetUrl)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.TargetUrl)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	if m.TargetAddress != nil {
		i -= len(*m.TargetAddress)
		copy(dAtA[i:], *m.TargetAddress)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.TargetAddress)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	if m.TestName != nil {
		i -= len(*m.TestName)
		copy(dAtA[i:], *m.TestName)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.TestName)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	if m.Owner != nil {
		i -= len(*m.Owner)
		copy(dAtA[i:], *m.Owner)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.Owner)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.InvalidServerSpentTimeCntr != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.InvalidServerSpentTimeCntr))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.InvalidServerSendTsCntr != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.InvalidServerSendTsCntr))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.InvalidClientNotsCntr != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.InvalidClientNotsCntr))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.InvalidClientRecvTsCntr != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.InvalidClientRecvTsCntr))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HttpStatus != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.HttpStatus))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x80
	}
	if m.RoundTripInterarrivalJitter != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.RoundTripInterarrivalJitter))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf8
	}
	if m.IngressInterarrivalJitter != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.IngressInterarrivalJitter))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf0
	}
	if m.EgressInterarrivalJitter != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.EgressInterarrivalJitter))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe8
	}
	if m.RoundTripJitter != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.RoundTripJitter))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe0
	}
	if m.IngressJitter != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.IngressJitter))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd8
	}
	if m.EgressJitter != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.EgressJitter))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd0
	}
	if m.Ingress != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.Ingress))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc8
	}
	if m.Egress != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.Egress))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc0
	}
	if m.Rtt != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.Rtt))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.HardwareTimestampStatus != nil {
		i -= len(*m.HardwareTimestampStatus)
		copy(dAtA[i:], *m.HardwareTimestampStatus)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.HardwareTimestampStatus)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	if m.ProbeStatus != nil {
		i -= len(*m.ProbeStatus)
		copy(dAtA[i:], *m.ProbeStatus)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.ProbeStatus)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	if m.ProbeSentTime != nil {
		i -= len(*m.ProbeSentTime)
		copy(dAtA[i:], *m.ProbeSentTime)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.ProbeSentTime)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	if m.ProbeTime != nil {
		i -= len(*m.ProbeTime)
		copy(dAtA[i:], *m.ProbeTime)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.ProbeTime)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ProbeTestGenericMeasurements) > 0 {
		for iNdEx := len(m.ProbeTestGenericMeasurements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProbeTestGenericMeasurements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRmopdRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	if m.LastTestTime != nil {
		i -= len(*m.LastTestTime)
		copy(dAtA[i:], *m.LastTestTime)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.LastTestTime)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	if m.LossPercentage != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.LossPercentage))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.ProbeResponses != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.ProbeResponses))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.ProbesSent != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.ProbesSent))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.ResultsScope != nil {
		i -= len(*m.ResultsScope)
		copy(dAtA[i:], *m.ResultsScope)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.ResultsScope)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SumDelay != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.SumDelay))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd0
	}
	if m.StddevDelay != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.StddevDelay))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc8
	}
	if m.JitterDelay != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.JitterDelay))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc0
	}
	if m.AvgDelay != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.AvgDelay))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.MaxDelay != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.MaxDelay))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.MinDelay != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.MinDelay))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.Samples != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.Samples))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.ProbeMeasurementType != nil {
		i -= len(*m.ProbeMeasurementType)
		copy(dAtA[i:], *m.ProbeMeasurementType)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.ProbeMeasurementType)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *JunosRpmTypeHistoryResultsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosRpmTypeHistoryResultsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosRpmTypeHistoryResultsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.HistoryTestResults) > 0 {
		for iNdEx := len(m.HistoryTestResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HistoryTestResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRmopdRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.HistorySingleTestResults) > 0 {
		for iNdEx := len(m.HistorySingleTestResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HistorySingleTestResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRmopdRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ProbeSingleResults != nil {
		{
			size, err := m.ProbeSingleResults.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRmopdRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	if m.EgrStddevThresh != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.EgrStddevThresh))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb0
	}
	if m.EgrJitterThresh != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.EgrJitterThresh))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xa8
	}
	if m.EgrThresh != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.EgrThresh))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xa0
	}
	if m.IgrStddevThresh != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.IgrStddevThresh))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x98
	}
	if m.IgrJitterThresh != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.IgrJitterThresh))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x90
	}
	if m.IgrThresh != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.IgrThresh))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x88
	}
	if m.RttStddevThresh != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.RttStddevThresh))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x80
	}
	if m.RttJitterThresh != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.RttJitterThresh))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf8
	}
	if m.RttThresh != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.RttThresh))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf0
	}
	if m.RoutingInstanceName != nil {
		i -= len(*m.RoutingInstanceName)
		copy(dAtA[i:], *m.RoutingInstanceName)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.RoutingInstanceName)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xea
	}
	if m.HttpStatus != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.HttpStatus))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe0
	}
	if m.TestSize != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.TestSize))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd8
	}
	if m.IcmpId != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.IcmpId))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd0
	}
	if m.ProbeType != nil {
		i -= len(*m.ProbeType)
		copy(dAtA[i:], *m.ProbeType)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.ProbeType)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	if m.DestinationInterface != nil {
		i -= len(*m.DestinationInterface)
		copy(dAtA[i:], *m.DestinationInterface)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.DestinationInterface)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc2
	}
	if m.SourceAddress != nil {
		i -= len(*m.SourceAddress)
		copy(dAtA[i:], *m.SourceAddress)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.SourceAddress)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	if m.TargetUrl != nil {
		i -= len(*m.TargetUrl)
		copy(dAtA[i:], *m.TargetUrl)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.TargetUrl)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	if m.TargetAddress != nil {
		i -= len(*m.TargetAddress)
		copy(dAtA[i:], *m.TargetAddress)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.TargetAddress)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	if m.TestName != nil {
		i -= len(*m.TestName)
		copy(dAtA[i:], *m.TestName)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.TestName)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	if m.Owner != nil {
		i -= len(*m.Owner)
		copy(dAtA[i:], *m.Owner)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.Owner)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HttpStatus != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.HttpStatus))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x80
	}
	if m.RoundTripInterarrivalJitter != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.RoundTripInterarrivalJitter))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf8
	}
	if m.IngressInterarrivalJitter != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.IngressInterarrivalJitter))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf0
	}
	if m.EgressInterarrivalJitter != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.EgressInterarrivalJitter))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe8
	}
	if m.RoundTripJitter != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.RoundTripJitter))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe0
	}
	if m.IngressJitter != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.IngressJitter))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd8
	}
	if m.EgressJitter != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.EgressJitter))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd0
	}
	if m.Ingress != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.Ingress))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc8
	}
	if m.Egress != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.Egress))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc0
	}
	if m.Rtt != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.Rtt))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.HardwareTimestampStatus != nil {
		i -= len(*m.HardwareTimestampStatus)
		copy(dAtA[i:], *m.HardwareTimestampStatus)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.HardwareTimestampStatus)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	if m.ProbeStatus != nil {
		i -= len(*m.ProbeStatus)
		copy(dAtA[i:], *m.ProbeStatus)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.ProbeStatus)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	if m.ProbeSentTime != nil {
		i -= len(*m.ProbeSentTime)
		copy(dAtA[i:], *m.ProbeSentTime)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.ProbeSentTime)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	if m.ProbeTime != nil {
		i -= len(*m.ProbeTime)
		copy(dAtA[i:], *m.ProbeTime)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.ProbeTime)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *JunosRpmTypeServerType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosRpmTypeServerType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosRpmTypeServerType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ActiveServers) > 0 {
		for iNdEx := len(m.ActiveServers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ActiveServers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRmopdRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *JunosRpmTypeServerTypeActiveServersList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosRpmTypeServerTypeActiveServersList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosRpmTypeServerTypeActiveServersList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DstInterface != nil {
		i -= len(*m.DstInterface)
		copy(dAtA[i:], *m.DstInterface)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.DstInterface)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	if m.Port != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.Port))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.Protocol != nil {
		i -= len(*m.Protocol)
		copy(dAtA[i:], *m.Protocol)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.Protocol)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *JunosTwampType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosTwampType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosTwampType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Client != nil {
		{
			size, err := m.Client.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRmopdRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xc2
	}
	if m.Server != nil {
		{
			size, err := m.Server.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRmopdRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *JunosTwampTypeServerType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosTwampTypeServerType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosTwampTypeServerType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TestSession) > 0 {
		for iNdEx := len(m.TestSession) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TestSession[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRmopdRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.ControlConnection) > 0 {
		for iNdEx := len(m.ControlConnection) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ControlConnection[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRmopdRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *JunosTwampTypeServerTypeControlConnectionList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosTwampTypeServerTypeControlConnectionList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosTwampTypeServerTypeControlConnectionList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SessionState != nil {
		i -= len(*m.SessionState)
		copy(dAtA[i:], *m.SessionState)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.SessionState)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd2
	}
	if m.AuthenticationMode != nil {
		i -= len(*m.AuthenticationMode)
		copy(dAtA[i:], *m.AuthenticationMode)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.AuthenticationMode)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	if m.SessionCount != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.SessionCount))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc0
	}
	if m.ServerPort != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.ServerPort))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.ServerAddress != nil {
		i -= len(*m.ServerAddress)
		copy(dAtA[i:], *m.ServerAddress)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.ServerAddress)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	if m.ClientPort != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.ClientPort))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.ClientAddress != nil {
		i -= len(*m.ClientAddress)
		copy(dAtA[i:], *m.ClientAddress)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.ClientAddress)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	if m.ConnectionId != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.ConnectionId))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func (m *JunosTwampTypeServerTypeTestSessionList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosTwampTypeServerTypeTestSessionList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosTwampTypeServerTypeTestSessionList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TestSessionInfo) > 0 {
		for iNdEx := len(m.TestSessionInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TestSessionInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRmopdRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	if m.ConnectionId != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.ConnectionId))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func (m *JunosTwampTypeServerTypeTestSessionListTestSessionInfoList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosTwampTypeServerTypeTestSessionListTestSessionInfoList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosTwampTypeServerTypeTestSessionListTestSessionInfoList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ReflectorPort != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.ReflectorPort))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.ReflectorAddress != nil {
		i -= len(*m.ReflectorAddress)
		copy(dAtA[i:], *m.ReflectorAddress)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.ReflectorAddress)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	if m.SenderPort != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.SenderPort))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.SenderAddress != nil {
		i -= len(*m.SenderAddress)
		copy(dAtA[i:], *m.SenderAddress)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.SenderAddress)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	if m.TestId != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.TestId))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func (m *JunosTwampTypeClientType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosTwampTypeClientType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosTwampTypeClientType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.HistoryTestResults) > 0 {
		for iNdEx := len(m.HistoryTestResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HistoryTestResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRmopdRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.ProbeTestResults) > 0 {
		for iNdEx := len(m.ProbeTestResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProbeTestResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRmopdRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xca
		}
	}
	if len(m.TestSession) > 0 {
		for iNdEx := len(m.TestSession) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TestSession[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRmopdRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.ControlConnection) > 0 {
		for iNdEx := len(m.ControlConnection) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ControlConnection[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRmopdRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *JunosTwampTypeClientTypeControlConnectionList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosTwampTypeClientTypeControlConnectionList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosTwampTypeClientTypeControlConnectionList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AuthMode != nil {
		i -= len(*m.AuthMode)
		copy(dAtA[i:], *m.AuthMode)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.AuthMode)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	if m.SessionCount != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.SessionCount))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc0
	}
	if m.ServerPort != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.ServerPort))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.ServerAddress != nil {
		i -= len(*m.ServerAddress)
		copy(dAtA[i:], *m.ServerAddress)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.ServerAddress)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	if m.ClientPort != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.ClientPort))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.ClientAddress != nil {
		i -= len(*m.ClientAddress)
		copy(dAtA[i:], *m.ClientAddress)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.ClientAddress)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	if m.ControlName != nil {
		i -= len(*m.ControlName)
		copy(dAtA[i:], *m.ControlName)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.ControlName)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *JunosTwampTypeClientTypeTestSessionList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosTwampTypeClientTypeTestSessionList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosTwampTypeClientTypeTestSessionList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TestSessionInfo) > 0 {
		for iNdEx := len(m.TestSessionInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TestSessionInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRmopdRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	if m.AuthMode != nil {
		i -= len(*m.AuthMode)
		copy(dAtA[i:], *m.AuthMode)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.AuthMode)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	if m.SessionCount != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.SessionCount))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc0
	}
	if m.ServerPort != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.ServerPort))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.ServerAddress != nil {
		i -= len(*m.ServerAddress)
		copy(dAtA[i:], *m.ServerAddress)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.ServerAddress)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	if m.ClientPort != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.ClientPort))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.ClientAddress != nil {
		i -= len(*m.ClientAddress)
		copy(dAtA[i:], *m.ClientAddress)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.ClientAddress)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	if m.ControlName != nil {
		i -= len(*m.ControlName)
		copy(dAtA[i:], *m.ControlName)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.ControlName)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *JunosTwampTypeClientTypeTestSessionListTestSessionInfoList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosTwampTypeClientTypeTestSessionListTestSessionInfoList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosTwampTypeClientTypeTestSessionListTestSessionInfoList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ReflectorPort != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.ReflectorPort))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.ReflectorAddress != nil {
		i -= len(*m.ReflectorAddress)
		copy(dAtA[i:], *m.ReflectorAddress)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.ReflectorAddress)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	if m.SenderPort != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.SenderPort))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.SenderAddress != nil {
		i -= len(*m.SenderAddress)
		copy(dAtA[i:], *m.SenderAddress)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.SenderAddress)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	if m.SessionName != nil {
		i -= len(*m.SessionName)
		copy(dAtA[i:], *m.SessionName)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.SessionName)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *JunosTwampTypeClientTypeProbeTestResultsList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosTwampTypeClientTypeProbeTestResultsList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosTwampTypeClientTypeProbeTestResultsList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ProbeTestGenericResults) > 0 {
		for iNdEx := len(m.ProbeTestGenericResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProbeTestGenericResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRmopdRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xca
		}
	}
	if m.ProbeSingleResults != nil {
		{
			size, err := m.ProbeSingleResults.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRmopdRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xc2
	}
	if m.ProbeTestsHwTsErr != nil {
		{
			size, err := m.ProbeTestsHwTsErr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRmopdRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	if m.RoutingInstanceName != nil {
		i -= len(*m.RoutingInstanceName)
		copy(dAtA[i:], *m.RoutingInstanceName)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.RoutingInstanceName)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xd2
	}
	if m.EgrStddevThresh != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.EgrStddevThresh))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xc8
	}
	if m.EgrJitterThresh != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.EgrJitterThresh))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xc0
	}
	if m.EgrThresh != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.EgrThresh))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb8
	}
	if m.IgrStddevThresh != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.IgrStddevThresh))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb0
	}
	if m.IgrJitterThresh != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.IgrJitterThresh))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xa8
	}
	if m.IgrThresh != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.IgrThresh))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xa0
	}
	if m.RttStddevThresh != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.RttStddevThresh))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x98
	}
	if m.RttJitterThresh != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.RttJitterThresh))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x90
	}
	if m.RttThresh != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.RttThresh))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x88
	}
	if m.LossThreshSucc != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.LossThreshSucc))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x80
	}
	if m.LossThreshTotal != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.LossThreshTotal))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf8
	}
	if m.ServerPort != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.ServerPort))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf0
	}
	if m.ServerAddress != nil {
		i -= len(*m.ServerAddress)
		copy(dAtA[i:], *m.ServerAddress)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.ServerAddress)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xea
	}
	if m.ReflectorPort != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.ReflectorPort))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe0
	}
	if m.ReflectorAddress != nil {
		i -= len(*m.ReflectorAddress)
		copy(dAtA[i:], *m.ReflectorAddress)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.ReflectorAddress)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xda
	}
	if m.SenderPort != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.SenderPort))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd0
	}
	if m.SenderAddress != nil {
		i -= len(*m.SenderAddress)
		copy(dAtA[i:], *m.SenderAddress)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.SenderAddress)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	if m.ClientPort != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.ClientPort))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc0
	}
	if m.ClientAddress != nil {
		i -= len(*m.ClientAddress)
		copy(dAtA[i:], *m.ClientAddress)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.ClientAddress)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	if m.TestSize != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.TestSize))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.DestinationInterface != nil {
		i -= len(*m.DestinationInterface)
		copy(dAtA[i:], *m.DestinationInterface)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.DestinationInterface)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	if m.TestName != nil {
		i -= len(*m.TestName)
		copy(dAtA[i:], *m.TestName)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.TestName)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	if m.Owner != nil {
		i -= len(*m.Owner)
		copy(dAtA[i:], *m.Owner)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.Owner)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.InvalidServerSpentTimeCntr != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.InvalidServerSpentTimeCntr))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.InvalidServerSendTsCntr != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.InvalidServerSendTsCntr))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.InvalidClientNotsCntr != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.InvalidClientNotsCntr))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.InvalidClientRecvTsCntr != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.InvalidClientRecvTsCntr))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HttpStatus != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.HttpStatus))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x80
	}
	if m.RoundTripInterarrivalJitter != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.RoundTripInterarrivalJitter))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf8
	}
	if m.IngressInterarrivalJitter != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.IngressInterarrivalJitter))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf0
	}
	if m.EgressInterarrivalJitter != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.EgressInterarrivalJitter))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe8
	}
	if m.RoundTripJitter != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.RoundTripJitter))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe0
	}
	if m.IngressJitter != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.IngressJitter))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd8
	}
	if m.EgressJitter != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.EgressJitter))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd0
	}
	if m.Ingress != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.Ingress))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc8
	}
	if m.Egress != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.Egress))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc0
	}
	if m.Rtt != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.Rtt))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.HardwareTimestampStatus != nil {
		i -= len(*m.HardwareTimestampStatus)
		copy(dAtA[i:], *m.HardwareTimestampStatus)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.HardwareTimestampStatus)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	if m.ProbeStatus != nil {
		i -= len(*m.ProbeStatus)
		copy(dAtA[i:], *m.ProbeStatus)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.ProbeStatus)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	if m.ProbeSentTime != nil {
		i -= len(*m.ProbeSentTime)
		copy(dAtA[i:], *m.ProbeSentTime)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.ProbeSentTime)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	if m.ProbeTime != nil {
		i -= len(*m.ProbeTime)
		copy(dAtA[i:], *m.ProbeTime)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.ProbeTime)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ProbeTestGenericMeasurements) > 0 {
		for iNdEx := len(m.ProbeTestGenericMeasurements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProbeTestGenericMeasurements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRmopdRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	if m.LastTestTime != nil {
		i -= len(*m.LastTestTime)
		copy(dAtA[i:], *m.LastTestTime)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.LastTestTime)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	if m.LossPercentage != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.LossPercentage))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.ProbeResponses != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.ProbeResponses))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.ProbesSent != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.ProbesSent))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.ResultsScope != nil {
		i -= len(*m.ResultsScope)
		copy(dAtA[i:], *m.ResultsScope)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.ResultsScope)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SumDelay != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.SumDelay))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd0
	}
	if m.StddevDelay != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.StddevDelay))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc8
	}
	if m.JitterDelay != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.JitterDelay))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc0
	}
	if m.AvgDelay != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.AvgDelay))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.MaxDelay != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.MaxDelay))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.MinDelay != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.MinDelay))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.Samples != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.Samples))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.ProbeMeasurementType != nil {
		i -= len(*m.ProbeMeasurementType)
		copy(dAtA[i:], *m.ProbeMeasurementType)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.ProbeMeasurementType)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.HistorySingleTestResults) > 0 {
		for iNdEx := len(m.HistorySingleTestResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HistorySingleTestResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRmopdRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ProbeSingleResults != nil {
		{
			size, err := m.ProbeSingleResults.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRmopdRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	if m.RoutingInstanceName != nil {
		i -= len(*m.RoutingInstanceName)
		copy(dAtA[i:], *m.RoutingInstanceName)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.RoutingInstanceName)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xd2
	}
	if m.EgrStddevThresh != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.EgrStddevThresh))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xc8
	}
	if m.EgrJitterThresh != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.EgrJitterThresh))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xc0
	}
	if m.EgrThresh != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.EgrThresh))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb8
	}
	if m.IgrStddevThresh != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.IgrStddevThresh))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb0
	}
	if m.IgrJitterThresh != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.IgrJitterThresh))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xa8
	}
	if m.IgrThresh != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.IgrThresh))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xa0
	}
	if m.RttStddevThresh != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.RttStddevThresh))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x98
	}
	if m.RttJitterThresh != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.RttJitterThresh))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x90
	}
	if m.RttThresh != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.RttThresh))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x88
	}
	if m.LossThreshSucc != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.LossThreshSucc))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x80
	}
	if m.LossThreshTotal != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.LossThreshTotal))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf8
	}
	if m.ServerPort != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.ServerPort))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf0
	}
	if m.ServerAddress != nil {
		i -= len(*m.ServerAddress)
		copy(dAtA[i:], *m.ServerAddress)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.ServerAddress)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xea
	}
	if m.ReflectorPort != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.ReflectorPort))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe0
	}
	if m.ReflectorAddress != nil {
		i -= len(*m.ReflectorAddress)
		copy(dAtA[i:], *m.ReflectorAddress)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.ReflectorAddress)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xda
	}
	if m.SenderPort != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.SenderPort))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd0
	}
	if m.SenderAddress != nil {
		i -= len(*m.SenderAddress)
		copy(dAtA[i:], *m.SenderAddress)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.SenderAddress)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	if m.ClientPort != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.ClientPort))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc0
	}
	if m.ClientAddress != nil {
		i -= len(*m.ClientAddress)
		copy(dAtA[i:], *m.ClientAddress)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.ClientAddress)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	if m.TestSize != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.TestSize))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.DestinationInterface != nil {
		i -= len(*m.DestinationInterface)
		copy(dAtA[i:], *m.DestinationInterface)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.DestinationInterface)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	if m.TestName != nil {
		i -= len(*m.TestName)
		copy(dAtA[i:], *m.TestName)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.TestName)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	if m.Owner != nil {
		i -= len(*m.Owner)
		copy(dAtA[i:], *m.Owner)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.Owner)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HttpStatus != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.HttpStatus))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x80
	}
	if m.RoundTripInterarrivalJitter != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.RoundTripInterarrivalJitter))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf8
	}
	if m.IngressInterarrivalJitter != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.IngressInterarrivalJitter))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf0
	}
	if m.EgressInterarrivalJitter != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.EgressInterarrivalJitter))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe8
	}
	if m.RoundTripJitter != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.RoundTripJitter))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe0
	}
	if m.IngressJitter != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.IngressJitter))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd8
	}
	if m.EgressJitter != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.EgressJitter))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd0
	}
	if m.Ingress != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.Ingress))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc8
	}
	if m.Egress != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.Egress))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc0
	}
	if m.Rtt != nil {
		i = encodeVarintRmopdRender(dAtA, i, uint64(*m.Rtt))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.HardwareTimestampStatus != nil {
		i -= len(*m.HardwareTimestampStatus)
		copy(dAtA[i:], *m.HardwareTimestampStatus)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.HardwareTimestampStatus)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	if m.ProbeStatus != nil {
		i -= len(*m.ProbeStatus)
		copy(dAtA[i:], *m.ProbeStatus)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.ProbeStatus)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	if m.ProbeSentTime != nil {
		i -= len(*m.ProbeSentTime)
		copy(dAtA[i:], *m.ProbeSentTime)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.ProbeSentTime)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	if m.ProbeTime != nil {
		i -= len(*m.ProbeTime)
		copy(dAtA[i:], *m.ProbeTime)
		i = encodeVarintRmopdRender(dAtA, i, uint64(len(*m.ProbeTime)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func encodeVarintRmopdRender(dAtA []byte, offset int, v uint64) int {
	offset -= sovRmopdRender(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Junos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rpm != nil {
		l = m.Rpm.Size()
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.Twamp != nil {
		l = m.Twamp.Size()
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosRpmType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProbeResults != nil {
		l = m.ProbeResults.Size()
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.HistoryResults != nil {
		l = m.HistoryResults.Size()
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.Server != nil {
		l = m.Server.Size()
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosRpmTypeProbeResultsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProbeTestResults) > 0 {
		for _, e := range m.ProbeTestResults {
			l = e.Size()
			n += 2 + l + sovRmopdRender(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Owner != nil {
		l = len(*m.Owner)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.TestName != nil {
		l = len(*m.TestName)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.TargetAddress != nil {
		l = len(*m.TargetAddress)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.TargetUrl != nil {
		l = len(*m.TargetUrl)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.SourceAddress != nil {
		l = len(*m.SourceAddress)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.DestinationInterface != nil {
		l = len(*m.DestinationInterface)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.ProbeType != nil {
		l = len(*m.ProbeType)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.IcmpId != nil {
		n += 2 + sovRmopdRender(uint64(*m.IcmpId))
	}
	if m.TestSize != nil {
		n += 2 + sovRmopdRender(uint64(*m.TestSize))
	}
	if m.HttpStatus != nil {
		n += 2 + sovRmopdRender(uint64(*m.HttpStatus))
	}
	if m.RoutingInstanceName != nil {
		l = len(*m.RoutingInstanceName)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.RttThresh != nil {
		n += 2 + sovRmopdRender(uint64(*m.RttThresh))
	}
	if m.RttJitterThresh != nil {
		n += 2 + sovRmopdRender(uint64(*m.RttJitterThresh))
	}
	if m.RttStddevThresh != nil {
		n += 2 + sovRmopdRender(uint64(*m.RttStddevThresh))
	}
	if m.IgrThresh != nil {
		n += 2 + sovRmopdRender(uint64(*m.IgrThresh))
	}
	if m.IgrJitterThresh != nil {
		n += 2 + sovRmopdRender(uint64(*m.IgrJitterThresh))
	}
	if m.IgrStddevThresh != nil {
		n += 2 + sovRmopdRender(uint64(*m.IgrStddevThresh))
	}
	if m.EgrThresh != nil {
		n += 2 + sovRmopdRender(uint64(*m.EgrThresh))
	}
	if m.EgrJitterThresh != nil {
		n += 2 + sovRmopdRender(uint64(*m.EgrJitterThresh))
	}
	if m.EgrStddevThresh != nil {
		n += 2 + sovRmopdRender(uint64(*m.EgrStddevThresh))
	}
	if m.ProbeTestsHwTsErr != nil {
		l = m.ProbeTestsHwTsErr.Size()
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.ProbeSingleResults != nil {
		l = m.ProbeSingleResults.Size()
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if len(m.ProbeTestGenericResults) > 0 {
		for _, e := range m.ProbeTestGenericResults {
			l = e.Size()
			n += 2 + l + sovRmopdRender(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InvalidClientRecvTsCntr != nil {
		n += 2 + sovRmopdRender(uint64(*m.InvalidClientRecvTsCntr))
	}
	if m.InvalidClientNotsCntr != nil {
		n += 2 + sovRmopdRender(uint64(*m.InvalidClientNotsCntr))
	}
	if m.InvalidServerSendTsCntr != nil {
		n += 2 + sovRmopdRender(uint64(*m.InvalidServerSendTsCntr))
	}
	if m.InvalidServerSpentTimeCntr != nil {
		n += 2 + sovRmopdRender(uint64(*m.InvalidServerSpentTimeCntr))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProbeTime != nil {
		l = len(*m.ProbeTime)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.ProbeSentTime != nil {
		l = len(*m.ProbeSentTime)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.ProbeStatus != nil {
		l = len(*m.ProbeStatus)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.HardwareTimestampStatus != nil {
		l = len(*m.HardwareTimestampStatus)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.Rtt != nil {
		n += 2 + sovRmopdRender(uint64(*m.Rtt))
	}
	if m.Egress != nil {
		n += 2 + sovRmopdRender(uint64(*m.Egress))
	}
	if m.Ingress != nil {
		n += 2 + sovRmopdRender(uint64(*m.Ingress))
	}
	if m.EgressJitter != nil {
		n += 2 + sovRmopdRender(uint64(*m.EgressJitter))
	}
	if m.IngressJitter != nil {
		n += 2 + sovRmopdRender(uint64(*m.IngressJitter))
	}
	if m.RoundTripJitter != nil {
		n += 2 + sovRmopdRender(uint64(*m.RoundTripJitter))
	}
	if m.EgressInterarrivalJitter != nil {
		n += 2 + sovRmopdRender(uint64(*m.EgressInterarrivalJitter))
	}
	if m.IngressInterarrivalJitter != nil {
		n += 2 + sovRmopdRender(uint64(*m.IngressInterarrivalJitter))
	}
	if m.RoundTripInterarrivalJitter != nil {
		n += 2 + sovRmopdRender(uint64(*m.RoundTripInterarrivalJitter))
	}
	if m.HttpStatus != nil {
		n += 2 + sovRmopdRender(uint64(*m.HttpStatus))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResultsScope != nil {
		l = len(*m.ResultsScope)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.ProbesSent != nil {
		n += 2 + sovRmopdRender(uint64(*m.ProbesSent))
	}
	if m.ProbeResponses != nil {
		n += 2 + sovRmopdRender(uint64(*m.ProbeResponses))
	}
	if m.LossPercentage != nil {
		n += 2 + sovRmopdRender(uint64(*m.LossPercentage))
	}
	if m.LastTestTime != nil {
		l = len(*m.LastTestTime)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if len(m.ProbeTestGenericMeasurements) > 0 {
		for _, e := range m.ProbeTestGenericMeasurements {
			l = e.Size()
			n += 2 + l + sovRmopdRender(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProbeMeasurementType != nil {
		l = len(*m.ProbeMeasurementType)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.Samples != nil {
		n += 2 + sovRmopdRender(uint64(*m.Samples))
	}
	if m.MinDelay != nil {
		n += 2 + sovRmopdRender(uint64(*m.MinDelay))
	}
	if m.MaxDelay != nil {
		n += 2 + sovRmopdRender(uint64(*m.MaxDelay))
	}
	if m.AvgDelay != nil {
		n += 2 + sovRmopdRender(uint64(*m.AvgDelay))
	}
	if m.JitterDelay != nil {
		n += 2 + sovRmopdRender(uint64(*m.JitterDelay))
	}
	if m.StddevDelay != nil {
		n += 2 + sovRmopdRender(uint64(*m.StddevDelay))
	}
	if m.SumDelay != nil {
		n += 2 + sovRmopdRender(uint64(*m.SumDelay))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosRpmTypeHistoryResultsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HistoryTestResults) > 0 {
		for _, e := range m.HistoryTestResults {
			l = e.Size()
			n += 2 + l + sovRmopdRender(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HistorySingleTestResults) > 0 {
		for _, e := range m.HistorySingleTestResults {
			l = e.Size()
			n += 2 + l + sovRmopdRender(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Owner != nil {
		l = len(*m.Owner)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.TestName != nil {
		l = len(*m.TestName)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.TargetAddress != nil {
		l = len(*m.TargetAddress)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.TargetUrl != nil {
		l = len(*m.TargetUrl)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.SourceAddress != nil {
		l = len(*m.SourceAddress)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.DestinationInterface != nil {
		l = len(*m.DestinationInterface)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.ProbeType != nil {
		l = len(*m.ProbeType)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.IcmpId != nil {
		n += 2 + sovRmopdRender(uint64(*m.IcmpId))
	}
	if m.TestSize != nil {
		n += 2 + sovRmopdRender(uint64(*m.TestSize))
	}
	if m.HttpStatus != nil {
		n += 2 + sovRmopdRender(uint64(*m.HttpStatus))
	}
	if m.RoutingInstanceName != nil {
		l = len(*m.RoutingInstanceName)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.RttThresh != nil {
		n += 2 + sovRmopdRender(uint64(*m.RttThresh))
	}
	if m.RttJitterThresh != nil {
		n += 2 + sovRmopdRender(uint64(*m.RttJitterThresh))
	}
	if m.RttStddevThresh != nil {
		n += 2 + sovRmopdRender(uint64(*m.RttStddevThresh))
	}
	if m.IgrThresh != nil {
		n += 2 + sovRmopdRender(uint64(*m.IgrThresh))
	}
	if m.IgrJitterThresh != nil {
		n += 2 + sovRmopdRender(uint64(*m.IgrJitterThresh))
	}
	if m.IgrStddevThresh != nil {
		n += 2 + sovRmopdRender(uint64(*m.IgrStddevThresh))
	}
	if m.EgrThresh != nil {
		n += 2 + sovRmopdRender(uint64(*m.EgrThresh))
	}
	if m.EgrJitterThresh != nil {
		n += 2 + sovRmopdRender(uint64(*m.EgrJitterThresh))
	}
	if m.EgrStddevThresh != nil {
		n += 2 + sovRmopdRender(uint64(*m.EgrStddevThresh))
	}
	if m.ProbeSingleResults != nil {
		l = m.ProbeSingleResults.Size()
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProbeTime != nil {
		l = len(*m.ProbeTime)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.ProbeSentTime != nil {
		l = len(*m.ProbeSentTime)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.ProbeStatus != nil {
		l = len(*m.ProbeStatus)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.HardwareTimestampStatus != nil {
		l = len(*m.HardwareTimestampStatus)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.Rtt != nil {
		n += 2 + sovRmopdRender(uint64(*m.Rtt))
	}
	if m.Egress != nil {
		n += 2 + sovRmopdRender(uint64(*m.Egress))
	}
	if m.Ingress != nil {
		n += 2 + sovRmopdRender(uint64(*m.Ingress))
	}
	if m.EgressJitter != nil {
		n += 2 + sovRmopdRender(uint64(*m.EgressJitter))
	}
	if m.IngressJitter != nil {
		n += 2 + sovRmopdRender(uint64(*m.IngressJitter))
	}
	if m.RoundTripJitter != nil {
		n += 2 + sovRmopdRender(uint64(*m.RoundTripJitter))
	}
	if m.EgressInterarrivalJitter != nil {
		n += 2 + sovRmopdRender(uint64(*m.EgressInterarrivalJitter))
	}
	if m.IngressInterarrivalJitter != nil {
		n += 2 + sovRmopdRender(uint64(*m.IngressInterarrivalJitter))
	}
	if m.RoundTripInterarrivalJitter != nil {
		n += 2 + sovRmopdRender(uint64(*m.RoundTripInterarrivalJitter))
	}
	if m.HttpStatus != nil {
		n += 2 + sovRmopdRender(uint64(*m.HttpStatus))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosRpmTypeServerType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ActiveServers) > 0 {
		for _, e := range m.ActiveServers {
			l = e.Size()
			n += 2 + l + sovRmopdRender(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosRpmTypeServerTypeActiveServersList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Protocol != nil {
		l = len(*m.Protocol)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.Port != nil {
		n += 2 + sovRmopdRender(uint64(*m.Port))
	}
	if m.DstInterface != nil {
		l = len(*m.DstInterface)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosTwampType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Server != nil {
		l = m.Server.Size()
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.Client != nil {
		l = m.Client.Size()
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosTwampTypeServerType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ControlConnection) > 0 {
		for _, e := range m.ControlConnection {
			l = e.Size()
			n += 2 + l + sovRmopdRender(uint64(l))
		}
	}
	if len(m.TestSession) > 0 {
		for _, e := range m.TestSession {
			l = e.Size()
			n += 2 + l + sovRmopdRender(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosTwampTypeServerTypeControlConnectionList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConnectionId != nil {
		n += 2 + sovRmopdRender(uint64(*m.ConnectionId))
	}
	if m.ClientAddress != nil {
		l = len(*m.ClientAddress)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.ClientPort != nil {
		n += 2 + sovRmopdRender(uint64(*m.ClientPort))
	}
	if m.ServerAddress != nil {
		l = len(*m.ServerAddress)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.ServerPort != nil {
		n += 2 + sovRmopdRender(uint64(*m.ServerPort))
	}
	if m.SessionCount != nil {
		n += 2 + sovRmopdRender(uint64(*m.SessionCount))
	}
	if m.AuthenticationMode != nil {
		l = len(*m.AuthenticationMode)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.SessionState != nil {
		l = len(*m.SessionState)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosTwampTypeServerTypeTestSessionList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConnectionId != nil {
		n += 2 + sovRmopdRender(uint64(*m.ConnectionId))
	}
	if len(m.TestSessionInfo) > 0 {
		for _, e := range m.TestSessionInfo {
			l = e.Size()
			n += 2 + l + sovRmopdRender(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosTwampTypeServerTypeTestSessionListTestSessionInfoList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TestId != nil {
		n += 2 + sovRmopdRender(uint64(*m.TestId))
	}
	if m.SenderAddress != nil {
		l = len(*m.SenderAddress)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.SenderPort != nil {
		n += 2 + sovRmopdRender(uint64(*m.SenderPort))
	}
	if m.ReflectorAddress != nil {
		l = len(*m.ReflectorAddress)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.ReflectorPort != nil {
		n += 2 + sovRmopdRender(uint64(*m.ReflectorPort))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosTwampTypeClientType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ControlConnection) > 0 {
		for _, e := range m.ControlConnection {
			l = e.Size()
			n += 2 + l + sovRmopdRender(uint64(l))
		}
	}
	if len(m.TestSession) > 0 {
		for _, e := range m.TestSession {
			l = e.Size()
			n += 2 + l + sovRmopdRender(uint64(l))
		}
	}
	if len(m.ProbeTestResults) > 0 {
		for _, e := range m.ProbeTestResults {
			l = e.Size()
			n += 2 + l + sovRmopdRender(uint64(l))
		}
	}
	if len(m.HistoryTestResults) > 0 {
		for _, e := range m.HistoryTestResults {
			l = e.Size()
			n += 2 + l + sovRmopdRender(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosTwampTypeClientTypeControlConnectionList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ControlName != nil {
		l = len(*m.ControlName)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.ClientAddress != nil {
		l = len(*m.ClientAddress)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.ClientPort != nil {
		n += 2 + sovRmopdRender(uint64(*m.ClientPort))
	}
	if m.ServerAddress != nil {
		l = len(*m.ServerAddress)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.ServerPort != nil {
		n += 2 + sovRmopdRender(uint64(*m.ServerPort))
	}
	if m.SessionCount != nil {
		n += 2 + sovRmopdRender(uint64(*m.SessionCount))
	}
	if m.AuthMode != nil {
		l = len(*m.AuthMode)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosTwampTypeClientTypeTestSessionList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ControlName != nil {
		l = len(*m.ControlName)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.ClientAddress != nil {
		l = len(*m.ClientAddress)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.ClientPort != nil {
		n += 2 + sovRmopdRender(uint64(*m.ClientPort))
	}
	if m.ServerAddress != nil {
		l = len(*m.ServerAddress)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.ServerPort != nil {
		n += 2 + sovRmopdRender(uint64(*m.ServerPort))
	}
	if m.SessionCount != nil {
		n += 2 + sovRmopdRender(uint64(*m.SessionCount))
	}
	if m.AuthMode != nil {
		l = len(*m.AuthMode)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if len(m.TestSessionInfo) > 0 {
		for _, e := range m.TestSessionInfo {
			l = e.Size()
			n += 2 + l + sovRmopdRender(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosTwampTypeClientTypeTestSessionListTestSessionInfoList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionName != nil {
		l = len(*m.SessionName)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.SenderAddress != nil {
		l = len(*m.SenderAddress)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.SenderPort != nil {
		n += 2 + sovRmopdRender(uint64(*m.SenderPort))
	}
	if m.ReflectorAddress != nil {
		l = len(*m.ReflectorAddress)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.ReflectorPort != nil {
		n += 2 + sovRmopdRender(uint64(*m.ReflectorPort))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosTwampTypeClientTypeProbeTestResultsList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Owner != nil {
		l = len(*m.Owner)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.TestName != nil {
		l = len(*m.TestName)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.DestinationInterface != nil {
		l = len(*m.DestinationInterface)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.TestSize != nil {
		n += 2 + sovRmopdRender(uint64(*m.TestSize))
	}
	if m.ClientAddress != nil {
		l = len(*m.ClientAddress)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.ClientPort != nil {
		n += 2 + sovRmopdRender(uint64(*m.ClientPort))
	}
	if m.SenderAddress != nil {
		l = len(*m.SenderAddress)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.SenderPort != nil {
		n += 2 + sovRmopdRender(uint64(*m.SenderPort))
	}
	if m.ReflectorAddress != nil {
		l = len(*m.ReflectorAddress)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.ReflectorPort != nil {
		n += 2 + sovRmopdRender(uint64(*m.ReflectorPort))
	}
	if m.ServerAddress != nil {
		l = len(*m.ServerAddress)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.ServerPort != nil {
		n += 2 + sovRmopdRender(uint64(*m.ServerPort))
	}
	if m.LossThreshTotal != nil {
		n += 2 + sovRmopdRender(uint64(*m.LossThreshTotal))
	}
	if m.LossThreshSucc != nil {
		n += 2 + sovRmopdRender(uint64(*m.LossThreshSucc))
	}
	if m.RttThresh != nil {
		n += 2 + sovRmopdRender(uint64(*m.RttThresh))
	}
	if m.RttJitterThresh != nil {
		n += 2 + sovRmopdRender(uint64(*m.RttJitterThresh))
	}
	if m.RttStddevThresh != nil {
		n += 2 + sovRmopdRender(uint64(*m.RttStddevThresh))
	}
	if m.IgrThresh != nil {
		n += 2 + sovRmopdRender(uint64(*m.IgrThresh))
	}
	if m.IgrJitterThresh != nil {
		n += 2 + sovRmopdRender(uint64(*m.IgrJitterThresh))
	}
	if m.IgrStddevThresh != nil {
		n += 2 + sovRmopdRender(uint64(*m.IgrStddevThresh))
	}
	if m.EgrThresh != nil {
		n += 2 + sovRmopdRender(uint64(*m.EgrThresh))
	}
	if m.EgrJitterThresh != nil {
		n += 2 + sovRmopdRender(uint64(*m.EgrJitterThresh))
	}
	if m.EgrStddevThresh != nil {
		n += 2 + sovRmopdRender(uint64(*m.EgrStddevThresh))
	}
	if m.RoutingInstanceName != nil {
		l = len(*m.RoutingInstanceName)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.ProbeTestsHwTsErr != nil {
		l = m.ProbeTestsHwTsErr.Size()
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.ProbeSingleResults != nil {
		l = m.ProbeSingleResults.Size()
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if len(m.ProbeTestGenericResults) > 0 {
		for _, e := range m.ProbeTestGenericResults {
			l = e.Size()
			n += 2 + l + sovRmopdRender(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InvalidClientRecvTsCntr != nil {
		n += 2 + sovRmopdRender(uint64(*m.InvalidClientRecvTsCntr))
	}
	if m.InvalidClientNotsCntr != nil {
		n += 2 + sovRmopdRender(uint64(*m.InvalidClientNotsCntr))
	}
	if m.InvalidServerSendTsCntr != nil {
		n += 2 + sovRmopdRender(uint64(*m.InvalidServerSendTsCntr))
	}
	if m.InvalidServerSpentTimeCntr != nil {
		n += 2 + sovRmopdRender(uint64(*m.InvalidServerSpentTimeCntr))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProbeTime != nil {
		l = len(*m.ProbeTime)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.ProbeSentTime != nil {
		l = len(*m.ProbeSentTime)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.ProbeStatus != nil {
		l = len(*m.ProbeStatus)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.HardwareTimestampStatus != nil {
		l = len(*m.HardwareTimestampStatus)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.Rtt != nil {
		n += 2 + sovRmopdRender(uint64(*m.Rtt))
	}
	if m.Egress != nil {
		n += 2 + sovRmopdRender(uint64(*m.Egress))
	}
	if m.Ingress != nil {
		n += 2 + sovRmopdRender(uint64(*m.Ingress))
	}
	if m.EgressJitter != nil {
		n += 2 + sovRmopdRender(uint64(*m.EgressJitter))
	}
	if m.IngressJitter != nil {
		n += 2 + sovRmopdRender(uint64(*m.IngressJitter))
	}
	if m.RoundTripJitter != nil {
		n += 2 + sovRmopdRender(uint64(*m.RoundTripJitter))
	}
	if m.EgressInterarrivalJitter != nil {
		n += 2 + sovRmopdRender(uint64(*m.EgressInterarrivalJitter))
	}
	if m.IngressInterarrivalJitter != nil {
		n += 2 + sovRmopdRender(uint64(*m.IngressInterarrivalJitter))
	}
	if m.RoundTripInterarrivalJitter != nil {
		n += 2 + sovRmopdRender(uint64(*m.RoundTripInterarrivalJitter))
	}
	if m.HttpStatus != nil {
		n += 2 + sovRmopdRender(uint64(*m.HttpStatus))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResultsScope != nil {
		l = len(*m.ResultsScope)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.ProbesSent != nil {
		n += 2 + sovRmopdRender(uint64(*m.ProbesSent))
	}
	if m.ProbeResponses != nil {
		n += 2 + sovRmopdRender(uint64(*m.ProbeResponses))
	}
	if m.LossPercentage != nil {
		n += 2 + sovRmopdRender(uint64(*m.LossPercentage))
	}
	if m.LastTestTime != nil {
		l = len(*m.LastTestTime)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if len(m.ProbeTestGenericMeasurements) > 0 {
		for _, e := range m.ProbeTestGenericMeasurements {
			l = e.Size()
			n += 2 + l + sovRmopdRender(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProbeMeasurementType != nil {
		l = len(*m.ProbeMeasurementType)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.Samples != nil {
		n += 2 + sovRmopdRender(uint64(*m.Samples))
	}
	if m.MinDelay != nil {
		n += 2 + sovRmopdRender(uint64(*m.MinDelay))
	}
	if m.MaxDelay != nil {
		n += 2 + sovRmopdRender(uint64(*m.MaxDelay))
	}
	if m.AvgDelay != nil {
		n += 2 + sovRmopdRender(uint64(*m.AvgDelay))
	}
	if m.JitterDelay != nil {
		n += 2 + sovRmopdRender(uint64(*m.JitterDelay))
	}
	if m.StddevDelay != nil {
		n += 2 + sovRmopdRender(uint64(*m.StddevDelay))
	}
	if m.SumDelay != nil {
		n += 2 + sovRmopdRender(uint64(*m.SumDelay))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HistorySingleTestResults) > 0 {
		for _, e := range m.HistorySingleTestResults {
			l = e.Size()
			n += 2 + l + sovRmopdRender(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Owner != nil {
		l = len(*m.Owner)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.TestName != nil {
		l = len(*m.TestName)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.DestinationInterface != nil {
		l = len(*m.DestinationInterface)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.TestSize != nil {
		n += 2 + sovRmopdRender(uint64(*m.TestSize))
	}
	if m.ClientAddress != nil {
		l = len(*m.ClientAddress)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.ClientPort != nil {
		n += 2 + sovRmopdRender(uint64(*m.ClientPort))
	}
	if m.SenderAddress != nil {
		l = len(*m.SenderAddress)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.SenderPort != nil {
		n += 2 + sovRmopdRender(uint64(*m.SenderPort))
	}
	if m.ReflectorAddress != nil {
		l = len(*m.ReflectorAddress)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.ReflectorPort != nil {
		n += 2 + sovRmopdRender(uint64(*m.ReflectorPort))
	}
	if m.ServerAddress != nil {
		l = len(*m.ServerAddress)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.ServerPort != nil {
		n += 2 + sovRmopdRender(uint64(*m.ServerPort))
	}
	if m.LossThreshTotal != nil {
		n += 2 + sovRmopdRender(uint64(*m.LossThreshTotal))
	}
	if m.LossThreshSucc != nil {
		n += 2 + sovRmopdRender(uint64(*m.LossThreshSucc))
	}
	if m.RttThresh != nil {
		n += 2 + sovRmopdRender(uint64(*m.RttThresh))
	}
	if m.RttJitterThresh != nil {
		n += 2 + sovRmopdRender(uint64(*m.RttJitterThresh))
	}
	if m.RttStddevThresh != nil {
		n += 2 + sovRmopdRender(uint64(*m.RttStddevThresh))
	}
	if m.IgrThresh != nil {
		n += 2 + sovRmopdRender(uint64(*m.IgrThresh))
	}
	if m.IgrJitterThresh != nil {
		n += 2 + sovRmopdRender(uint64(*m.IgrJitterThresh))
	}
	if m.IgrStddevThresh != nil {
		n += 2 + sovRmopdRender(uint64(*m.IgrStddevThresh))
	}
	if m.EgrThresh != nil {
		n += 2 + sovRmopdRender(uint64(*m.EgrThresh))
	}
	if m.EgrJitterThresh != nil {
		n += 2 + sovRmopdRender(uint64(*m.EgrJitterThresh))
	}
	if m.EgrStddevThresh != nil {
		n += 2 + sovRmopdRender(uint64(*m.EgrStddevThresh))
	}
	if m.RoutingInstanceName != nil {
		l = len(*m.RoutingInstanceName)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.ProbeSingleResults != nil {
		l = m.ProbeSingleResults.Size()
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProbeTime != nil {
		l = len(*m.ProbeTime)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.ProbeSentTime != nil {
		l = len(*m.ProbeSentTime)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.ProbeStatus != nil {
		l = len(*m.ProbeStatus)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.HardwareTimestampStatus != nil {
		l = len(*m.HardwareTimestampStatus)
		n += 2 + l + sovRmopdRender(uint64(l))
	}
	if m.Rtt != nil {
		n += 2 + sovRmopdRender(uint64(*m.Rtt))
	}
	if m.Egress != nil {
		n += 2 + sovRmopdRender(uint64(*m.Egress))
	}
	if m.Ingress != nil {
		n += 2 + sovRmopdRender(uint64(*m.Ingress))
	}
	if m.EgressJitter != nil {
		n += 2 + sovRmopdRender(uint64(*m.EgressJitter))
	}
	if m.IngressJitter != nil {
		n += 2 + sovRmopdRender(uint64(*m.IngressJitter))
	}
	if m.RoundTripJitter != nil {
		n += 2 + sovRmopdRender(uint64(*m.RoundTripJitter))
	}
	if m.EgressInterarrivalJitter != nil {
		n += 2 + sovRmopdRender(uint64(*m.EgressInterarrivalJitter))
	}
	if m.IngressInterarrivalJitter != nil {
		n += 2 + sovRmopdRender(uint64(*m.IngressInterarrivalJitter))
	}
	if m.RoundTripInterarrivalJitter != nil {
		n += 2 + sovRmopdRender(uint64(*m.RoundTripInterarrivalJitter))
	}
	if m.HttpStatus != nil {
		n += 2 + sovRmopdRender(uint64(*m.HttpStatus))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRmopdRender(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRmopdRender(x uint64) (n int) {
	return sovRmopdRender(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Junos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRmopdRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: junos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: junos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rpm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rpm == nil {
				m.Rpm = &JunosRpmType{}
			}
			if err := m.Rpm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 152:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Twamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Twamp == nil {
				m.Twamp = &JunosTwampType{}
			}
			if err := m.Twamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRmopdRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosRpmType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRmopdRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: rpm_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: rpm_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProbeResults == nil {
				m.ProbeResults = &JunosRpmTypeProbeResultsType{}
			}
			if err := m.ProbeResults.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 152:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HistoryResults == nil {
				m.HistoryResults = &JunosRpmTypeHistoryResultsType{}
			}
			if err := m.HistoryResults.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 153:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Server == nil {
				m.Server = &JunosRpmTypeServerType{}
			}
			if err := m.Server.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRmopdRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosRpmTypeProbeResultsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRmopdRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: probe_results_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: probe_results_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeTestResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProbeTestResults = append(m.ProbeTestResults, &JunosRpmTypeProbeResultsTypeProbeTestResultsList{})
			if err := m.ProbeTestResults[len(m.ProbeTestResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRmopdRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRmopdRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: probe_test_results_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: probe_test_results_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Owner = &s
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TestName = &s
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TargetAddress = &s
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TargetUrl = &s
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SourceAddress = &s
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationInterface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DestinationInterface = &s
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProbeType = &s
			iNdEx = postIndex
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IcmpId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IcmpId = &v
		case 59:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestSize", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TestSize = &v
		case 60:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpStatus", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HttpStatus = &v
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoutingInstanceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RoutingInstanceName = &s
			iNdEx = postIndex
		case 62:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RttThresh", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RttThresh = &v
		case 63:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RttJitterThresh", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RttJitterThresh = &v
		case 64:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RttStddevThresh", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RttStddevThresh = &v
		case 65:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgrThresh", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IgrThresh = &v
		case 66:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgrJitterThresh", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IgrJitterThresh = &v
		case 67:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgrStddevThresh", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IgrStddevThresh = &v
		case 68:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgrThresh", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EgrThresh = &v
		case 69:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgrJitterThresh", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EgrJitterThresh = &v
		case 70:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgrStddevThresh", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EgrStddevThresh = &v
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeTestsHwTsErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProbeTestsHwTsErr == nil {
				m.ProbeTestsHwTsErr = &JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType{}
			}
			if err := m.ProbeTestsHwTsErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 152:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeSingleResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProbeSingleResults == nil {
				m.ProbeSingleResults = &JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType{}
			}
			if err := m.ProbeSingleResults.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 153:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeTestGenericResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProbeTestGenericResults = append(m.ProbeTestGenericResults, &JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList{})
			if err := m.ProbeTestGenericResults[len(m.ProbeTestGenericResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRmopdRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestsHwTsErrType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRmopdRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: probe_tests_hw_ts_err_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: probe_tests_hw_ts_err_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidClientRecvTsCntr", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvalidClientRecvTsCntr = &v
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidClientNotsCntr", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvalidClientNotsCntr = &v
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidServerSendTsCntr", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvalidServerSendTsCntr = &v
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidServerSpentTimeCntr", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvalidServerSpentTimeCntr = &v
		default:
			iNdEx = preIndex
			skippy, err := skipRmopdRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeSingleResultsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRmopdRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: probe_single_results_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: probe_single_results_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProbeTime = &s
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeSentTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProbeSentTime = &s
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProbeStatus = &s
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareTimestampStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HardwareTimestampStatus = &s
			iNdEx = postIndex
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Rtt = &v
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Egress", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Egress = &v
		case 57:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ingress", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ingress = &v
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgressJitter", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EgressJitter = &v
		case 59:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressJitter", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IngressJitter = &v
		case 60:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundTripJitter", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RoundTripJitter = &v
		case 61:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgressInterarrivalJitter", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EgressInterarrivalJitter = &v
		case 62:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressInterarrivalJitter", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IngressInterarrivalJitter = &v
		case 63:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundTripInterarrivalJitter", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RoundTripInterarrivalJitter = &v
		case 64:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpStatus", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HttpStatus = &v
		default:
			iNdEx = preIndex
			skippy, err := skipRmopdRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRmopdRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: probe_test_generic_results_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: probe_test_generic_results_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultsScope", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ResultsScope = &s
			iNdEx = postIndex
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbesSent", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProbesSent = &v
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeResponses", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProbeResponses = &v
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LossPercentage", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LossPercentage = &v
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTestTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LastTestTime = &s
			iNdEx = postIndex
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeTestGenericMeasurements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProbeTestGenericMeasurements = append(m.ProbeTestGenericMeasurements, &JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList{})
			if err := m.ProbeTestGenericMeasurements[len(m.ProbeTestGenericMeasurements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRmopdRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosRpmTypeProbeResultsTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRmopdRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: probe_test_generic_measurements_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: probe_test_generic_measurements_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeMeasurementType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProbeMeasurementType = &s
			iNdEx = postIndex
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Samples", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Samples = &v
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDelay", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinDelay = &v
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDelay", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxDelay = &v
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgDelay", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AvgDelay = &v
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JitterDelay", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.JitterDelay = &v
		case 57:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StddevDelay", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StddevDelay = &v
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumDelay", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumDelay = &v
		default:
			iNdEx = preIndex
			skippy, err := skipRmopdRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosRpmTypeHistoryResultsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRmopdRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: history_results_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: history_results_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryTestResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HistoryTestResults = append(m.HistoryTestResults, &JunosRpmTypeHistoryResultsTypeHistoryTestResultsList{})
			if err := m.HistoryTestResults[len(m.HistoryTestResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRmopdRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRmopdRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: history_test_results_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: history_test_results_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistorySingleTestResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HistorySingleTestResults = append(m.HistorySingleTestResults, &JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList{})
			if err := m.HistorySingleTestResults[len(m.HistorySingleTestResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRmopdRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRmopdRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: history_single_test_results_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: history_single_test_results_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Owner = &s
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TestName = &s
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TargetAddress = &s
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TargetUrl = &s
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SourceAddress = &s
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationInterface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DestinationInterface = &s
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProbeType = &s
			iNdEx = postIndex
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IcmpId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IcmpId = &v
		case 59:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestSize", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TestSize = &v
		case 60:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpStatus", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HttpStatus = &v
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoutingInstanceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RoutingInstanceName = &s
			iNdEx = postIndex
		case 62:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RttThresh", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RttThresh = &v
		case 63:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RttJitterThresh", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RttJitterThresh = &v
		case 64:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RttStddevThresh", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RttStddevThresh = &v
		case 65:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgrThresh", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IgrThresh = &v
		case 66:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgrJitterThresh", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IgrJitterThresh = &v
		case 67:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgrStddevThresh", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IgrStddevThresh = &v
		case 68:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgrThresh", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EgrThresh = &v
		case 69:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgrJitterThresh", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EgrJitterThresh = &v
		case 70:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgrStddevThresh", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EgrStddevThresh = &v
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeSingleResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProbeSingleResults == nil {
				m.ProbeSingleResults = &JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType{}
			}
			if err := m.ProbeSingleResults.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRmopdRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosRpmTypeHistoryResultsTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRmopdRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: probe_single_results_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: probe_single_results_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProbeTime = &s
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeSentTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProbeSentTime = &s
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProbeStatus = &s
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareTimestampStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HardwareTimestampStatus = &s
			iNdEx = postIndex
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Rtt = &v
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Egress", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Egress = &v
		case 57:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ingress", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ingress = &v
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgressJitter", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EgressJitter = &v
		case 59:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressJitter", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IngressJitter = &v
		case 60:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundTripJitter", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RoundTripJitter = &v
		case 61:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgressInterarrivalJitter", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EgressInterarrivalJitter = &v
		case 62:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressInterarrivalJitter", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IngressInterarrivalJitter = &v
		case 63:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundTripInterarrivalJitter", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RoundTripInterarrivalJitter = &v
		case 64:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpStatus", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HttpStatus = &v
		default:
			iNdEx = preIndex
			skippy, err := skipRmopdRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosRpmTypeServerType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRmopdRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: server_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: server_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveServers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveServers = append(m.ActiveServers, &JunosRpmTypeServerTypeActiveServersList{})
			if err := m.ActiveServers[len(m.ActiveServers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRmopdRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosRpmTypeServerTypeActiveServersList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRmopdRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: active_servers_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: active_servers_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Protocol = &s
			iNdEx = postIndex
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Port = &v
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstInterface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DstInterface = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRmopdRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosTwampType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRmopdRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: twamp_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: twamp_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Server == nil {
				m.Server = &JunosTwampTypeServerType{}
			}
			if err := m.Server.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 152:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Client == nil {
				m.Client = &JunosTwampTypeClientType{}
			}
			if err := m.Client.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRmopdRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosTwampTypeServerType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRmopdRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: server_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: server_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControlConnection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ControlConnection = append(m.ControlConnection, &JunosTwampTypeServerTypeControlConnectionList{})
			if err := m.ControlConnection[len(m.ControlConnection)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 152:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestSession", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestSession = append(m.TestSession, &JunosTwampTypeServerTypeTestSessionList{})
			if err := m.TestSession[len(m.TestSession)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRmopdRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosTwampTypeServerTypeControlConnectionList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRmopdRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: control_connection_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: control_connection_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConnectionId = &v
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ClientAddress = &s
			iNdEx = postIndex
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClientPort = &v
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ServerAddress = &s
			iNdEx = postIndex
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServerPort = &v
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionCount", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SessionCount = &v
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AuthenticationMode = &s
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SessionState = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRmopdRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosTwampTypeServerTypeTestSessionList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRmopdRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: test_session_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: test_session_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConnectionId = &v
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestSessionInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestSessionInfo = append(m.TestSessionInfo, &JunosTwampTypeServerTypeTestSessionListTestSessionInfoList{})
			if err := m.TestSessionInfo[len(m.TestSessionInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRmopdRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosTwampTypeServerTypeTestSessionListTestSessionInfoList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRmopdRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: test_session_info_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: test_session_info_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TestId = &v
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SenderAddress = &s
			iNdEx = postIndex
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SenderPort = &v
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReflectorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ReflectorAddress = &s
			iNdEx = postIndex
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReflectorPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReflectorPort = &v
		default:
			iNdEx = preIndex
			skippy, err := skipRmopdRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosTwampTypeClientType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRmopdRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: client_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: client_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControlConnection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ControlConnection = append(m.ControlConnection, &JunosTwampTypeClientTypeControlConnectionList{})
			if err := m.ControlConnection[len(m.ControlConnection)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 152:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestSession", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestSession = append(m.TestSession, &JunosTwampTypeClientTypeTestSessionList{})
			if err := m.TestSession[len(m.TestSession)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 153:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeTestResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProbeTestResults = append(m.ProbeTestResults, &JunosTwampTypeClientTypeProbeTestResultsList{})
			if err := m.ProbeTestResults[len(m.ProbeTestResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 154:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryTestResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HistoryTestResults = append(m.HistoryTestResults, &JunosTwampTypeClientTypeHistoryTestResultsList{})
			if err := m.HistoryTestResults[len(m.HistoryTestResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRmopdRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosTwampTypeClientTypeControlConnectionList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRmopdRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: control_connection_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: control_connection_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControlName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ControlName = &s
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ClientAddress = &s
			iNdEx = postIndex
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClientPort = &v
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ServerAddress = &s
			iNdEx = postIndex
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServerPort = &v
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionCount", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SessionCount = &v
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AuthMode = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRmopdRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosTwampTypeClientTypeTestSessionList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRmopdRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: test_session_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: test_session_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControlName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ControlName = &s
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ClientAddress = &s
			iNdEx = postIndex
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClientPort = &v
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ServerAddress = &s
			iNdEx = postIndex
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServerPort = &v
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionCount", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SessionCount = &v
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AuthMode = &s
			iNdEx = postIndex
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestSessionInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestSessionInfo = append(m.TestSessionInfo, &JunosTwampTypeClientTypeTestSessionListTestSessionInfoList{})
			if err := m.TestSessionInfo[len(m.TestSessionInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRmopdRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosTwampTypeClientTypeTestSessionListTestSessionInfoList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRmopdRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: test_session_info_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: test_session_info_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SessionName = &s
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SenderAddress = &s
			iNdEx = postIndex
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SenderPort = &v
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReflectorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ReflectorAddress = &s
			iNdEx = postIndex
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReflectorPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReflectorPort = &v
		default:
			iNdEx = preIndex
			skippy, err := skipRmopdRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosTwampTypeClientTypeProbeTestResultsList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRmopdRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: probe_test_results_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: probe_test_results_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Owner = &s
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TestName = &s
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationInterface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DestinationInterface = &s
			iNdEx = postIndex
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestSize", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TestSize = &v
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ClientAddress = &s
			iNdEx = postIndex
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClientPort = &v
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SenderAddress = &s
			iNdEx = postIndex
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SenderPort = &v
		case 59:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReflectorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ReflectorAddress = &s
			iNdEx = postIndex
		case 60:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReflectorPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReflectorPort = &v
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ServerAddress = &s
			iNdEx = postIndex
		case 62:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServerPort = &v
		case 63:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LossThreshTotal", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LossThreshTotal = &v
		case 64:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LossThreshSucc", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LossThreshSucc = &v
		case 65:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RttThresh", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RttThresh = &v
		case 66:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RttJitterThresh", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RttJitterThresh = &v
		case 67:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RttStddevThresh", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RttStddevThresh = &v
		case 68:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgrThresh", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IgrThresh = &v
		case 69:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgrJitterThresh", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IgrJitterThresh = &v
		case 70:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgrStddevThresh", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IgrStddevThresh = &v
		case 71:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgrThresh", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EgrThresh = &v
		case 72:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgrJitterThresh", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EgrJitterThresh = &v
		case 73:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgrStddevThresh", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EgrStddevThresh = &v
		case 74:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoutingInstanceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RoutingInstanceName = &s
			iNdEx = postIndex
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeTestsHwTsErr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProbeTestsHwTsErr == nil {
				m.ProbeTestsHwTsErr = &JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType{}
			}
			if err := m.ProbeTestsHwTsErr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 152:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeSingleResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProbeSingleResults == nil {
				m.ProbeSingleResults = &JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType{}
			}
			if err := m.ProbeSingleResults.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 153:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeTestGenericResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProbeTestGenericResults = append(m.ProbeTestGenericResults, &JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList{})
			if err := m.ProbeTestGenericResults[len(m.ProbeTestGenericResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRmopdRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestsHwTsErrType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRmopdRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: probe_tests_hw_ts_err_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: probe_tests_hw_ts_err_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidClientRecvTsCntr", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvalidClientRecvTsCntr = &v
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidClientNotsCntr", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvalidClientNotsCntr = &v
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidServerSendTsCntr", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvalidServerSendTsCntr = &v
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidServerSpentTimeCntr", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvalidServerSpentTimeCntr = &v
		default:
			iNdEx = preIndex
			skippy, err := skipRmopdRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeSingleResultsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRmopdRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: probe_single_results_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: probe_single_results_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProbeTime = &s
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeSentTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProbeSentTime = &s
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProbeStatus = &s
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareTimestampStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HardwareTimestampStatus = &s
			iNdEx = postIndex
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Rtt = &v
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Egress", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Egress = &v
		case 57:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ingress", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ingress = &v
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgressJitter", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EgressJitter = &v
		case 59:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressJitter", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IngressJitter = &v
		case 60:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundTripJitter", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RoundTripJitter = &v
		case 61:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgressInterarrivalJitter", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EgressInterarrivalJitter = &v
		case 62:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressInterarrivalJitter", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IngressInterarrivalJitter = &v
		case 63:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundTripInterarrivalJitter", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RoundTripInterarrivalJitter = &v
		case 64:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpStatus", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HttpStatus = &v
		default:
			iNdEx = preIndex
			skippy, err := skipRmopdRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRmopdRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: probe_test_generic_results_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: probe_test_generic_results_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultsScope", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ResultsScope = &s
			iNdEx = postIndex
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbesSent", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProbesSent = &v
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeResponses", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProbeResponses = &v
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LossPercentage", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LossPercentage = &v
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTestTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LastTestTime = &s
			iNdEx = postIndex
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeTestGenericMeasurements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProbeTestGenericMeasurements = append(m.ProbeTestGenericMeasurements, &JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList{})
			if err := m.ProbeTestGenericMeasurements[len(m.ProbeTestGenericMeasurements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRmopdRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosTwampTypeClientTypeProbeTestResultsListProbeTestGenericResultsListProbeTestGenericMeasurementsList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRmopdRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: probe_test_generic_measurements_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: probe_test_generic_measurements_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeMeasurementType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProbeMeasurementType = &s
			iNdEx = postIndex
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Samples", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Samples = &v
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDelay", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinDelay = &v
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDelay", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxDelay = &v
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgDelay", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AvgDelay = &v
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JitterDelay", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.JitterDelay = &v
		case 57:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StddevDelay", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StddevDelay = &v
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumDelay", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SumDelay = &v
		default:
			iNdEx = preIndex
			skippy, err := skipRmopdRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosTwampTypeClientTypeHistoryTestResultsList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRmopdRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: history_test_results_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: history_test_results_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistorySingleTestResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HistorySingleTestResults = append(m.HistorySingleTestResults, &JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList{})
			if err := m.HistorySingleTestResults[len(m.HistorySingleTestResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRmopdRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRmopdRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: history_single_test_results_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: history_single_test_results_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Owner = &s
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TestName = &s
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationInterface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DestinationInterface = &s
			iNdEx = postIndex
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestSize", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TestSize = &v
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ClientAddress = &s
			iNdEx = postIndex
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClientPort = &v
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SenderAddress = &s
			iNdEx = postIndex
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SenderPort = &v
		case 59:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReflectorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ReflectorAddress = &s
			iNdEx = postIndex
		case 60:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReflectorPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReflectorPort = &v
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ServerAddress = &s
			iNdEx = postIndex
		case 62:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServerPort = &v
		case 63:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LossThreshTotal", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LossThreshTotal = &v
		case 64:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LossThreshSucc", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LossThreshSucc = &v
		case 65:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RttThresh", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RttThresh = &v
		case 66:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RttJitterThresh", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RttJitterThresh = &v
		case 67:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RttStddevThresh", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RttStddevThresh = &v
		case 68:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgrThresh", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IgrThresh = &v
		case 69:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgrJitterThresh", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IgrJitterThresh = &v
		case 70:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgrStddevThresh", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IgrStddevThresh = &v
		case 71:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgrThresh", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EgrThresh = &v
		case 72:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgrJitterThresh", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EgrJitterThresh = &v
		case 73:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgrStddevThresh", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EgrStddevThresh = &v
		case 74:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoutingInstanceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RoutingInstanceName = &s
			iNdEx = postIndex
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeSingleResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProbeSingleResults == nil {
				m.ProbeSingleResults = &JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType{}
			}
			if err := m.ProbeSingleResults.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRmopdRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosTwampTypeClientTypeHistoryTestResultsListHistorySingleTestResultsListProbeSingleResultsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRmopdRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: probe_single_results_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: probe_single_results_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProbeTime = &s
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeSentTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProbeSentTime = &s
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProbeStatus = &s
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareTimestampStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRmopdRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HardwareTimestampStatus = &s
			iNdEx = postIndex
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtt", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Rtt = &v
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Egress", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Egress = &v
		case 57:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ingress", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ingress = &v
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgressJitter", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EgressJitter = &v
		case 59:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressJitter", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IngressJitter = &v
		case 60:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundTripJitter", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RoundTripJitter = &v
		case 61:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgressInterarrivalJitter", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EgressInterarrivalJitter = &v
		case 62:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressInterarrivalJitter", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IngressInterarrivalJitter = &v
		case 63:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundTripInterarrivalJitter", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RoundTripInterarrivalJitter = &v
		case 64:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpStatus", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HttpStatus = &v
		default:
			iNdEx = preIndex
			skippy, err := skipRmopdRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRmopdRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRmopdRender(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRmopdRender
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRmopdRender
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRmopdRender
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRmopdRender
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRmopdRender
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRmopdRender        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRmopdRender          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRmopdRender = fmt.Errorf("proto: unexpected end of group")
)
