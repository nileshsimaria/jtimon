// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rpd_evpn_global_render.proto

package schema

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type JunosEvpn struct {
	Evpn                 *JunosEvpnEvpnType `protobuf:"bytes,171,opt,name=evpn" json:"evpn,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *JunosEvpn) Reset()         { *m = JunosEvpn{} }
func (m *JunosEvpn) String() string { return proto.CompactTextString(m) }
func (*JunosEvpn) ProtoMessage()    {}
func (*JunosEvpn) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce797971eeb39af0, []int{0}
}
func (m *JunosEvpn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosEvpn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosEvpn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosEvpn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosEvpn.Merge(m, src)
}
func (m *JunosEvpn) XXX_Size() int {
	return m.Size()
}
func (m *JunosEvpn) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosEvpn.DiscardUnknown(m)
}

var xxx_messageInfo_JunosEvpn proto.InternalMessageInfo

func (m *JunosEvpn) GetEvpn() *JunosEvpnEvpnType {
	if m != nil {
		return m.Evpn
	}
	return nil
}

type JunosEvpnEvpnType struct {
	EvpnSmetForwarding   *JunosEvpnEvpnTypeEvpnSmetForwardingType `protobuf:"bytes,171,opt,name=evpn_smet_forwarding,json=evpnSmetForwarding" json:"evpn_smet_forwarding,omitempty"`
	L3Context            []*JunosEvpnEvpnTypeL3ContextList        `protobuf:"bytes,180,rep,name=l3_context,json=l3Context" json:"l3_context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *JunosEvpnEvpnType) Reset()         { *m = JunosEvpnEvpnType{} }
func (m *JunosEvpnEvpnType) String() string { return proto.CompactTextString(m) }
func (*JunosEvpnEvpnType) ProtoMessage()    {}
func (*JunosEvpnEvpnType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce797971eeb39af0, []int{0, 0}
}
func (m *JunosEvpnEvpnType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosEvpnEvpnType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosEvpnEvpnType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosEvpnEvpnType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosEvpnEvpnType.Merge(m, src)
}
func (m *JunosEvpnEvpnType) XXX_Size() int {
	return m.Size()
}
func (m *JunosEvpnEvpnType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosEvpnEvpnType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosEvpnEvpnType proto.InternalMessageInfo

func (m *JunosEvpnEvpnType) GetEvpnSmetForwarding() *JunosEvpnEvpnTypeEvpnSmetForwardingType {
	if m != nil {
		return m.EvpnSmetForwarding
	}
	return nil
}

func (m *JunosEvpnEvpnType) GetL3Context() []*JunosEvpnEvpnTypeL3ContextList {
	if m != nil {
		return m.L3Context
	}
	return nil
}

type JunosEvpnEvpnTypeEvpnSmetForwardingType struct {
	Enabled              *bool    `protobuf:"varint,71,opt,name=enabled" json:"enabled,omitempty"`
	NexthopLimit         *uint32  `protobuf:"varint,72,opt,name=nexthop_limit,json=nexthopLimit" json:"nexthop_limit,omitempty"`
	NexthopUsage         *uint32  `protobuf:"varint,73,opt,name=nexthop_usage,json=nexthopUsage" json:"nexthop_usage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JunosEvpnEvpnTypeEvpnSmetForwardingType) Reset() {
	*m = JunosEvpnEvpnTypeEvpnSmetForwardingType{}
}
func (m *JunosEvpnEvpnTypeEvpnSmetForwardingType) String() string { return proto.CompactTextString(m) }
func (*JunosEvpnEvpnTypeEvpnSmetForwardingType) ProtoMessage()    {}
func (*JunosEvpnEvpnTypeEvpnSmetForwardingType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce797971eeb39af0, []int{0, 0, 0}
}
func (m *JunosEvpnEvpnTypeEvpnSmetForwardingType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosEvpnEvpnTypeEvpnSmetForwardingType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosEvpnEvpnTypeEvpnSmetForwardingType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosEvpnEvpnTypeEvpnSmetForwardingType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosEvpnEvpnTypeEvpnSmetForwardingType.Merge(m, src)
}
func (m *JunosEvpnEvpnTypeEvpnSmetForwardingType) XXX_Size() int {
	return m.Size()
}
func (m *JunosEvpnEvpnTypeEvpnSmetForwardingType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosEvpnEvpnTypeEvpnSmetForwardingType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosEvpnEvpnTypeEvpnSmetForwardingType proto.InternalMessageInfo

func (m *JunosEvpnEvpnTypeEvpnSmetForwardingType) GetEnabled() bool {
	if m != nil && m.Enabled != nil {
		return *m.Enabled
	}
	return false
}

func (m *JunosEvpnEvpnTypeEvpnSmetForwardingType) GetNexthopLimit() uint32 {
	if m != nil && m.NexthopLimit != nil {
		return *m.NexthopLimit
	}
	return 0
}

func (m *JunosEvpnEvpnTypeEvpnSmetForwardingType) GetNexthopUsage() uint32 {
	if m != nil && m.NexthopUsage != nil {
		return *m.NexthopUsage
	}
	return 0
}

type JunosEvpnEvpnTypeL3ContextList struct {
	ContextName          *string                                               `protobuf:"bytes,71,opt,name=context_name,json=contextName" json:"context_name,omitempty"`
	Encapsulation        *string                                               `protobuf:"bytes,72,opt,name=encapsulation" json:"encapsulation,omitempty"`
	AdvertisementMode    *string                                               `protobuf:"bytes,73,opt,name=advertisement_mode,json=advertisementMode" json:"advertisement_mode,omitempty"`
	MulticastRoutingMode *string                                               `protobuf:"bytes,74,opt,name=multicast_routing_mode,json=multicastRoutingMode" json:"multicast_routing_mode,omitempty"`
	IpPrefixDatabase     []*JunosEvpnEvpnTypeL3ContextListIpPrefixDatabaseList `protobuf:"bytes,170,rep,name=ip_prefix_database,json=ipPrefixDatabase" json:"ip_prefix_database,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                              `json:"-"`
	XXX_unrecognized     []byte                                                `json:"-"`
	XXX_sizecache        int32                                                 `json:"-"`
}

func (m *JunosEvpnEvpnTypeL3ContextList) Reset()         { *m = JunosEvpnEvpnTypeL3ContextList{} }
func (m *JunosEvpnEvpnTypeL3ContextList) String() string { return proto.CompactTextString(m) }
func (*JunosEvpnEvpnTypeL3ContextList) ProtoMessage()    {}
func (*JunosEvpnEvpnTypeL3ContextList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce797971eeb39af0, []int{0, 0, 1}
}
func (m *JunosEvpnEvpnTypeL3ContextList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosEvpnEvpnTypeL3ContextList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosEvpnEvpnTypeL3ContextList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosEvpnEvpnTypeL3ContextList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosEvpnEvpnTypeL3ContextList.Merge(m, src)
}
func (m *JunosEvpnEvpnTypeL3ContextList) XXX_Size() int {
	return m.Size()
}
func (m *JunosEvpnEvpnTypeL3ContextList) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosEvpnEvpnTypeL3ContextList.DiscardUnknown(m)
}

var xxx_messageInfo_JunosEvpnEvpnTypeL3ContextList proto.InternalMessageInfo

func (m *JunosEvpnEvpnTypeL3ContextList) GetContextName() string {
	if m != nil && m.ContextName != nil {
		return *m.ContextName
	}
	return ""
}

func (m *JunosEvpnEvpnTypeL3ContextList) GetEncapsulation() string {
	if m != nil && m.Encapsulation != nil {
		return *m.Encapsulation
	}
	return ""
}

func (m *JunosEvpnEvpnTypeL3ContextList) GetAdvertisementMode() string {
	if m != nil && m.AdvertisementMode != nil {
		return *m.AdvertisementMode
	}
	return ""
}

func (m *JunosEvpnEvpnTypeL3ContextList) GetMulticastRoutingMode() string {
	if m != nil && m.MulticastRoutingMode != nil {
		return *m.MulticastRoutingMode
	}
	return ""
}

func (m *JunosEvpnEvpnTypeL3ContextList) GetIpPrefixDatabase() []*JunosEvpnEvpnTypeL3ContextListIpPrefixDatabaseList {
	if m != nil {
		return m.IpPrefixDatabase
	}
	return nil
}

type JunosEvpnEvpnTypeL3ContextListIpPrefixDatabaseList struct {
	IpPrefix             *string  `protobuf:"bytes,71,opt,name=ip_prefix,json=ipPrefix" json:"ip_prefix,omitempty"`
	RouteStatus          *string  `protobuf:"bytes,72,opt,name=route_status,json=routeStatus" json:"route_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JunosEvpnEvpnTypeL3ContextListIpPrefixDatabaseList) Reset() {
	*m = JunosEvpnEvpnTypeL3ContextListIpPrefixDatabaseList{}
}
func (m *JunosEvpnEvpnTypeL3ContextListIpPrefixDatabaseList) String() string {
	return proto.CompactTextString(m)
}
func (*JunosEvpnEvpnTypeL3ContextListIpPrefixDatabaseList) ProtoMessage() {}
func (*JunosEvpnEvpnTypeL3ContextListIpPrefixDatabaseList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce797971eeb39af0, []int{0, 0, 1, 0}
}
func (m *JunosEvpnEvpnTypeL3ContextListIpPrefixDatabaseList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosEvpnEvpnTypeL3ContextListIpPrefixDatabaseList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosEvpnEvpnTypeL3ContextListIpPrefixDatabaseList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosEvpnEvpnTypeL3ContextListIpPrefixDatabaseList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosEvpnEvpnTypeL3ContextListIpPrefixDatabaseList.Merge(m, src)
}
func (m *JunosEvpnEvpnTypeL3ContextListIpPrefixDatabaseList) XXX_Size() int {
	return m.Size()
}
func (m *JunosEvpnEvpnTypeL3ContextListIpPrefixDatabaseList) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosEvpnEvpnTypeL3ContextListIpPrefixDatabaseList.DiscardUnknown(m)
}

var xxx_messageInfo_JunosEvpnEvpnTypeL3ContextListIpPrefixDatabaseList proto.InternalMessageInfo

func (m *JunosEvpnEvpnTypeL3ContextListIpPrefixDatabaseList) GetIpPrefix() string {
	if m != nil && m.IpPrefix != nil {
		return *m.IpPrefix
	}
	return ""
}

func (m *JunosEvpnEvpnTypeL3ContextListIpPrefixDatabaseList) GetRouteStatus() string {
	if m != nil && m.RouteStatus != nil {
		return *m.RouteStatus
	}
	return ""
}

var E_JnprJunosEvpnExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*JunosEvpn)(nil),
	Field:         113,
	Name:          "jnpr_junos_evpn_ext",
	Tag:           "bytes,113,opt,name=jnpr_junos_evpn_ext",
	Filename:      "rpd_evpn_global_render.proto",
}

func init() {
	proto.RegisterType((*JunosEvpn)(nil), "junos_evpn")
	proto.RegisterType((*JunosEvpnEvpnType)(nil), "junos_evpn.evpn_type")
	proto.RegisterType((*JunosEvpnEvpnTypeEvpnSmetForwardingType)(nil), "junos_evpn.evpn_type.evpn_smet_forwarding_type")
	proto.RegisterType((*JunosEvpnEvpnTypeL3ContextList)(nil), "junos_evpn.evpn_type.l3_context_list")
	proto.RegisterType((*JunosEvpnEvpnTypeL3ContextListIpPrefixDatabaseList)(nil), "junos_evpn.evpn_type.l3_context_list.ip_prefix_database_list")
	proto.RegisterExtension(E_JnprJunosEvpnExt)
}

func init() { proto.RegisterFile("rpd_evpn_global_render.proto", fileDescriptor_ce797971eeb39af0) }

var fileDescriptor_ce797971eeb39af0 = []byte{
	// 568 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x95, 0x29, 0x85, 0x66, 0xd3, 0x8a, 0xb2, 0x2d, 0xd4, 0x44, 0xa8, 0x0a, 0x05, 0xa4, 0x08,
	0x29, 0xb6, 0xd4, 0x72, 0x42, 0x42, 0x42, 0x85, 0xf2, 0x51, 0x41, 0x85, 0x1c, 0x71, 0xe1, 0xb2,
	0xdd, 0xc4, 0x53, 0x67, 0xd3, 0xf5, 0xee, 0xb2, 0x3b, 0x4e, 0xd3, 0x13, 0x12, 0x57, 0xee, 0xfc,
	0x08, 0xb8, 0xf2, 0x23, 0x38, 0xf6, 0x27, 0xa0, 0xfe, 0x12, 0xe4, 0x75, 0x92, 0x36, 0xd0, 0x4a,
	0x9c, 0xac, 0x79, 0xef, 0xcd, 0x9b, 0xb7, 0x33, 0x26, 0x77, 0xad, 0x49, 0x19, 0x0c, 0x8d, 0x62,
	0x99, 0xd4, 0x5d, 0x2e, 0x99, 0x05, 0x95, 0x82, 0x8d, 0x8c, 0xd5, 0xa8, 0x1b, 0x2b, 0x08, 0x12,
	0x72, 0x40, 0x7b, 0xcc, 0x50, 0x9b, 0x0a, 0xdc, 0xf8, 0x7a, 0x8d, 0x90, 0x41, 0xa1, 0xb4, 0xf3,
	0x7d, 0xf4, 0x11, 0xb9, 0x5a, 0x7e, 0xc3, 0x1f, 0x41, 0x33, 0x68, 0xd5, 0x37, 0x6f, 0x45, 0x67,
	0x5c, 0xe4, 0x8d, 0xf1, 0xd8, 0x40, 0xe2, 0x35, 0x8d, 0x93, 0x79, 0x52, 0x9b, 0x62, 0xb4, 0x4b,
	0x56, 0x7d, 0xe1, 0x72, 0x40, 0x76, 0xa0, 0xed, 0x11, 0xb7, 0xa9, 0x50, 0xd9, 0xc4, 0x29, 0xbe,
	0xd0, 0x29, 0xba, 0xa8, 0xa5, 0x9a, 0x41, 0x4b, 0xaa, 0x93, 0x03, 0xbe, 0x9c, 0x12, 0x74, 0x87,
	0x10, 0xb9, 0xc5, 0x7a, 0x5a, 0x21, 0x8c, 0x30, 0xfc, 0x19, 0x34, 0xe7, 0x5a, 0xf5, 0xcd, 0x87,
	0x17, 0x3b, 0x9f, 0x09, 0x99, 0x14, 0x0e, 0x93, 0x9a, 0xdc, 0x7a, 0x5e, 0xd5, 0x8d, 0xcf, 0xe4,
	0xce, 0xa5, 0x73, 0x69, 0x48, 0xae, 0x83, 0xe2, 0x5d, 0x09, 0x69, 0xf8, 0xaa, 0x19, 0xb4, 0x16,
	0x92, 0x49, 0x49, 0xef, 0x93, 0x25, 0x05, 0x23, 0xec, 0x6b, 0xc3, 0xa4, 0xc8, 0x05, 0x86, 0xaf,
	0x9b, 0x41, 0x6b, 0x29, 0x59, 0x1c, 0x83, 0x6f, 0x4b, 0xec, 0xbc, 0xa8, 0x70, 0x3c, 0x83, 0xf0,
	0xcd, 0x8c, 0xe8, 0x43, 0x89, 0x35, 0xbe, 0xcd, 0x91, 0x1b, 0x7f, 0xe5, 0xa3, 0x2d, 0xb2, 0x38,
	0xa9, 0x15, 0xcf, 0xc1, 0x0f, 0xaf, 0x6d, 0xcf, 0x7f, 0x79, 0x76, 0x65, 0x21, 0x48, 0xea, 0x63,
	0x6a, 0x8f, 0xe7, 0x40, 0x1f, 0x90, 0x25, 0x50, 0x3d, 0x6e, 0x5c, 0x21, 0x39, 0x0a, 0xad, 0x7c,
	0x8e, 0x5a, 0x32, 0x0b, 0xd2, 0x36, 0xa1, 0x3c, 0x1d, 0x82, 0x45, 0xe1, 0x20, 0x07, 0x85, 0x2c,
	0xd7, 0x69, 0x95, 0xa6, 0x96, 0xdc, 0x9c, 0x61, 0xde, 0xe9, 0x14, 0xe8, 0x63, 0x72, 0x3b, 0x2f,
	0x24, 0x8a, 0x1e, 0x77, 0xc8, 0xac, 0x2e, 0xb0, 0x5c, 0x88, 0x6f, 0xd9, 0xf5, 0x2d, 0xab, 0x53,
	0x36, 0xa9, 0x48, 0xdf, 0x25, 0x09, 0x15, 0x86, 0x19, 0x0b, 0x07, 0x62, 0xc4, 0x52, 0x8e, 0xbc,
	0xcb, 0x1d, 0x84, 0xdf, 0xab, 0xc3, 0x3c, 0xfd, 0xaf, 0xc3, 0x44, 0xff, 0x1a, 0x54, 0x07, 0x5b,
	0x16, 0xe6, 0xbd, 0xc7, 0x5f, 0x8c, 0xe1, 0xc6, 0x3e, 0x59, 0xbb, 0x44, 0x4c, 0x37, 0x48, 0x6d,
	0x4a, 0xcd, 0xae, 0x6e, 0x61, 0x62, 0x43, 0xef, 0x91, 0xc5, 0xf2, 0x61, 0xc0, 0x1c, 0x72, 0x2c,
	0xdc, 0x78, 0x6d, 0x75, 0x8f, 0x75, 0x3c, 0xf4, 0xa4, 0x43, 0x56, 0x06, 0xca, 0x58, 0x76, 0x16,
	0x9c, 0xc1, 0x08, 0xe9, 0x5a, 0xb4, 0x5b, 0x28, 0x61, 0xc0, 0xee, 0x01, 0x1e, 0x69, 0x7b, 0xe8,
	0x3a, 0xa0, 0x9c, 0xb6, 0x2e, 0xfc, 0xe4, 0xff, 0xed, 0xfa, 0xb9, 0x87, 0x26, 0xcb, 0xa5, 0xc1,
	0x6e, 0x59, 0xef, 0x0c, 0x8d, 0xda, 0x19, 0xe1, 0xf6, 0xfe, 0xaf, 0xd3, 0xf5, 0xe0, 0xe4, 0x74,
	0x3d, 0xf8, 0x7d, 0xba, 0x1e, 0x7c, 0x4c, 0x32, 0x81, 0xa5, 0xbe, 0xb4, 0x8b, 0x14, 0x60, 0x2c,
	0x7a, 0xd0, 0x05, 0x9b, 0xc5, 0x7d, 0xe0, 0x12, 0xfb, 0x5d, 0x8d, 0x6d, 0xa1, 0x32, 0x70, 0xd8,
	0x1e, 0xa0, 0x68, 0x2b, 0x8e, 0x62, 0x08, 0xb1, 0x39, 0xcc, 0xe2, 0x01, 0x8a, 0x98, 0xa7, 0xdc,
	0x20, 0x58, 0x17, 0x57, 0x09, 0x63, 0xd7, 0xeb, 0x43, 0xce, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x85, 0xe0, 0x87, 0x98, 0xf8, 0x03, 0x00, 0x00,
}

func (m *JunosEvpn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosEvpn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosEvpn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Evpn != nil {
		{
			size, err := m.Evpn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRpdEvpnGlobalRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}

func (m *JunosEvpnEvpnType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosEvpnEvpnType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosEvpnEvpnType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.L3Context) > 0 {
		for iNdEx := len(m.L3Context) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.L3Context[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRpdEvpnGlobalRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xb
			i--
			dAtA[i] = 0xa2
		}
	}
	if m.EvpnSmetForwarding != nil {
		{
			size, err := m.EvpnSmetForwarding.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRpdEvpnGlobalRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}

func (m *JunosEvpnEvpnTypeEvpnSmetForwardingType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosEvpnEvpnTypeEvpnSmetForwardingType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosEvpnEvpnTypeEvpnSmetForwardingType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NexthopUsage != nil {
		i = encodeVarintRpdEvpnGlobalRender(dAtA, i, uint64(*m.NexthopUsage))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xc8
	}
	if m.NexthopLimit != nil {
		i = encodeVarintRpdEvpnGlobalRender(dAtA, i, uint64(*m.NexthopLimit))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xc0
	}
	if m.Enabled != nil {
		i--
		if *m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb8
	}
	return len(dAtA) - i, nil
}

func (m *JunosEvpnEvpnTypeL3ContextList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosEvpnEvpnTypeL3ContextList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosEvpnEvpnTypeL3ContextList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IpPrefixDatabase) > 0 {
		for iNdEx := len(m.IpPrefixDatabase) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IpPrefixDatabase[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRpdEvpnGlobalRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
			i--
			dAtA[i] = 0xd2
		}
	}
	if m.MulticastRoutingMode != nil {
		i -= len(*m.MulticastRoutingMode)
		copy(dAtA[i:], *m.MulticastRoutingMode)
		i = encodeVarintRpdEvpnGlobalRender(dAtA, i, uint64(len(*m.MulticastRoutingMode)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xd2
	}
	if m.AdvertisementMode != nil {
		i -= len(*m.AdvertisementMode)
		copy(dAtA[i:], *m.AdvertisementMode)
		i = encodeVarintRpdEvpnGlobalRender(dAtA, i, uint64(len(*m.AdvertisementMode)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xca
	}
	if m.Encapsulation != nil {
		i -= len(*m.Encapsulation)
		copy(dAtA[i:], *m.Encapsulation)
		i = encodeVarintRpdEvpnGlobalRender(dAtA, i, uint64(len(*m.Encapsulation)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xc2
	}
	if m.ContextName != nil {
		i -= len(*m.ContextName)
		copy(dAtA[i:], *m.ContextName)
		i = encodeVarintRpdEvpnGlobalRender(dAtA, i, uint64(len(*m.ContextName)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *JunosEvpnEvpnTypeL3ContextListIpPrefixDatabaseList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosEvpnEvpnTypeL3ContextListIpPrefixDatabaseList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosEvpnEvpnTypeL3ContextListIpPrefixDatabaseList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RouteStatus != nil {
		i -= len(*m.RouteStatus)
		copy(dAtA[i:], *m.RouteStatus)
		i = encodeVarintRpdEvpnGlobalRender(dAtA, i, uint64(len(*m.RouteStatus)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xc2
	}
	if m.IpPrefix != nil {
		i -= len(*m.IpPrefix)
		copy(dAtA[i:], *m.IpPrefix)
		i = encodeVarintRpdEvpnGlobalRender(dAtA, i, uint64(len(*m.IpPrefix)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func encodeVarintRpdEvpnGlobalRender(dAtA []byte, offset int, v uint64) int {
	offset -= sovRpdEvpnGlobalRender(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *JunosEvpn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Evpn != nil {
		l = m.Evpn.Size()
		n += 2 + l + sovRpdEvpnGlobalRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosEvpnEvpnType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EvpnSmetForwarding != nil {
		l = m.EvpnSmetForwarding.Size()
		n += 2 + l + sovRpdEvpnGlobalRender(uint64(l))
	}
	if len(m.L3Context) > 0 {
		for _, e := range m.L3Context {
			l = e.Size()
			n += 2 + l + sovRpdEvpnGlobalRender(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosEvpnEvpnTypeEvpnSmetForwardingType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		n += 3
	}
	if m.NexthopLimit != nil {
		n += 2 + sovRpdEvpnGlobalRender(uint64(*m.NexthopLimit))
	}
	if m.NexthopUsage != nil {
		n += 2 + sovRpdEvpnGlobalRender(uint64(*m.NexthopUsage))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosEvpnEvpnTypeL3ContextList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContextName != nil {
		l = len(*m.ContextName)
		n += 2 + l + sovRpdEvpnGlobalRender(uint64(l))
	}
	if m.Encapsulation != nil {
		l = len(*m.Encapsulation)
		n += 2 + l + sovRpdEvpnGlobalRender(uint64(l))
	}
	if m.AdvertisementMode != nil {
		l = len(*m.AdvertisementMode)
		n += 2 + l + sovRpdEvpnGlobalRender(uint64(l))
	}
	if m.MulticastRoutingMode != nil {
		l = len(*m.MulticastRoutingMode)
		n += 2 + l + sovRpdEvpnGlobalRender(uint64(l))
	}
	if len(m.IpPrefixDatabase) > 0 {
		for _, e := range m.IpPrefixDatabase {
			l = e.Size()
			n += 2 + l + sovRpdEvpnGlobalRender(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosEvpnEvpnTypeL3ContextListIpPrefixDatabaseList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpPrefix != nil {
		l = len(*m.IpPrefix)
		n += 2 + l + sovRpdEvpnGlobalRender(uint64(l))
	}
	if m.RouteStatus != nil {
		l = len(*m.RouteStatus)
		n += 2 + l + sovRpdEvpnGlobalRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRpdEvpnGlobalRender(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRpdEvpnGlobalRender(x uint64) (n int) {
	return sovRpdEvpnGlobalRender(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *JunosEvpn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpdEvpnGlobalRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: junos_evpn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: junos_evpn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 171:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evpn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdEvpnGlobalRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpdEvpnGlobalRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpdEvpnGlobalRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Evpn == nil {
				m.Evpn = &JunosEvpnEvpnType{}
			}
			if err := m.Evpn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpdEvpnGlobalRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpdEvpnGlobalRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpdEvpnGlobalRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosEvpnEvpnType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpdEvpnGlobalRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: evpn_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: evpn_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 171:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvpnSmetForwarding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdEvpnGlobalRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpdEvpnGlobalRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpdEvpnGlobalRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EvpnSmetForwarding == nil {
				m.EvpnSmetForwarding = &JunosEvpnEvpnTypeEvpnSmetForwardingType{}
			}
			if err := m.EvpnSmetForwarding.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 180:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L3Context", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdEvpnGlobalRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpdEvpnGlobalRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpdEvpnGlobalRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.L3Context = append(m.L3Context, &JunosEvpnEvpnTypeL3ContextList{})
			if err := m.L3Context[len(m.L3Context)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpdEvpnGlobalRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpdEvpnGlobalRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpdEvpnGlobalRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosEvpnEvpnTypeEvpnSmetForwardingType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpdEvpnGlobalRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: evpn_smet_forwarding_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: evpn_smet_forwarding_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 71:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdEvpnGlobalRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Enabled = &b
		case 72:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NexthopLimit", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdEvpnGlobalRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NexthopLimit = &v
		case 73:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NexthopUsage", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdEvpnGlobalRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NexthopUsage = &v
		default:
			iNdEx = preIndex
			skippy, err := skipRpdEvpnGlobalRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpdEvpnGlobalRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpdEvpnGlobalRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosEvpnEvpnTypeL3ContextList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpdEvpnGlobalRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: l3_context_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: l3_context_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 71:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdEvpnGlobalRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpdEvpnGlobalRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpdEvpnGlobalRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ContextName = &s
			iNdEx = postIndex
		case 72:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encapsulation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdEvpnGlobalRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpdEvpnGlobalRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpdEvpnGlobalRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Encapsulation = &s
			iNdEx = postIndex
		case 73:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertisementMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdEvpnGlobalRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpdEvpnGlobalRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpdEvpnGlobalRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AdvertisementMode = &s
			iNdEx = postIndex
		case 74:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MulticastRoutingMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdEvpnGlobalRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpdEvpnGlobalRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpdEvpnGlobalRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MulticastRoutingMode = &s
			iNdEx = postIndex
		case 170:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpPrefixDatabase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdEvpnGlobalRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpdEvpnGlobalRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpdEvpnGlobalRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpPrefixDatabase = append(m.IpPrefixDatabase, &JunosEvpnEvpnTypeL3ContextListIpPrefixDatabaseList{})
			if err := m.IpPrefixDatabase[len(m.IpPrefixDatabase)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpdEvpnGlobalRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpdEvpnGlobalRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpdEvpnGlobalRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosEvpnEvpnTypeL3ContextListIpPrefixDatabaseList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpdEvpnGlobalRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ip_prefix_database_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ip_prefix_database_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 71:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdEvpnGlobalRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpdEvpnGlobalRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpdEvpnGlobalRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.IpPrefix = &s
			iNdEx = postIndex
		case 72:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdEvpnGlobalRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpdEvpnGlobalRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpdEvpnGlobalRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RouteStatus = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpdEvpnGlobalRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpdEvpnGlobalRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpdEvpnGlobalRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRpdEvpnGlobalRender(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRpdEvpnGlobalRender
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpdEvpnGlobalRender
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpdEvpnGlobalRender
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRpdEvpnGlobalRender
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRpdEvpnGlobalRender
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRpdEvpnGlobalRender
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRpdEvpnGlobalRender        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRpdEvpnGlobalRender          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRpdEvpnGlobalRender = fmt.Errorf("proto: unexpected end of group")
)
