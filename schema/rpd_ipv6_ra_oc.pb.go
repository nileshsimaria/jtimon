// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rpd_ipv6_ra_oc.proto

package schema

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Ipv6RaIpv6Ra struct {
	Ipv6RaInterface      []*Ipv6RaIpv6RaIpv6RaInterfaceList `protobuf:"bytes,151,rep,name=ipv6_ra_interface,json=ipv6RaInterface" json:"ipv6_ra_interface,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *Ipv6RaIpv6Ra) Reset()         { *m = Ipv6RaIpv6Ra{} }
func (m *Ipv6RaIpv6Ra) String() string { return proto.CompactTextString(m) }
func (*Ipv6RaIpv6Ra) ProtoMessage()    {}
func (*Ipv6RaIpv6Ra) Descriptor() ([]byte, []int) {
	return fileDescriptor_610995566f3f74cb, []int{0}
}
func (m *Ipv6RaIpv6Ra) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ipv6RaIpv6Ra) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ipv6RaIpv6Ra.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ipv6RaIpv6Ra) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ipv6RaIpv6Ra.Merge(m, src)
}
func (m *Ipv6RaIpv6Ra) XXX_Size() int {
	return m.Size()
}
func (m *Ipv6RaIpv6Ra) XXX_DiscardUnknown() {
	xxx_messageInfo_Ipv6RaIpv6Ra.DiscardUnknown(m)
}

var xxx_messageInfo_Ipv6RaIpv6Ra proto.InternalMessageInfo

func (m *Ipv6RaIpv6Ra) GetIpv6RaInterface() []*Ipv6RaIpv6RaIpv6RaInterfaceList {
	if m != nil {
		return m.Ipv6RaInterface
	}
	return nil
}

type Ipv6RaIpv6RaIpv6RaInterfaceList struct {
	Name                 *string  `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	InitialAdvSent       *uint32  `protobuf:"varint,52,opt,name=initial_adv_sent,json=initialAdvSent" json:"initial_adv_sent,omitempty"`
	AdvSent              *uint64  `protobuf:"varint,53,opt,name=adv_sent,json=advSent" json:"adv_sent,omitempty"`
	AdvReceived          *uint64  `protobuf:"varint,54,opt,name=adv_received,json=advReceived" json:"adv_received,omitempty"`
	SolicitsReceived     *uint64  `protobuf:"varint,55,opt,name=solicits_received,json=solicitsReceived" json:"solicits_received,omitempty"`
	LastAdvTime          *uint32  `protobuf:"varint,56,opt,name=last_adv_time,json=lastAdvTime" json:"last_adv_time,omitempty"`
	LastSolicitTime      *uint32  `protobuf:"varint,57,opt,name=last_solicit_time,json=lastSolicitTime" json:"last_solicit_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ipv6RaIpv6RaIpv6RaInterfaceList) Reset()         { *m = Ipv6RaIpv6RaIpv6RaInterfaceList{} }
func (m *Ipv6RaIpv6RaIpv6RaInterfaceList) String() string { return proto.CompactTextString(m) }
func (*Ipv6RaIpv6RaIpv6RaInterfaceList) ProtoMessage()    {}
func (*Ipv6RaIpv6RaIpv6RaInterfaceList) Descriptor() ([]byte, []int) {
	return fileDescriptor_610995566f3f74cb, []int{0, 0}
}
func (m *Ipv6RaIpv6RaIpv6RaInterfaceList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ipv6RaIpv6RaIpv6RaInterfaceList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ipv6RaIpv6RaIpv6RaInterfaceList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ipv6RaIpv6RaIpv6RaInterfaceList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ipv6RaIpv6RaIpv6RaInterfaceList.Merge(m, src)
}
func (m *Ipv6RaIpv6RaIpv6RaInterfaceList) XXX_Size() int {
	return m.Size()
}
func (m *Ipv6RaIpv6RaIpv6RaInterfaceList) XXX_DiscardUnknown() {
	xxx_messageInfo_Ipv6RaIpv6RaIpv6RaInterfaceList.DiscardUnknown(m)
}

var xxx_messageInfo_Ipv6RaIpv6RaIpv6RaInterfaceList proto.InternalMessageInfo

func (m *Ipv6RaIpv6RaIpv6RaInterfaceList) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Ipv6RaIpv6RaIpv6RaInterfaceList) GetInitialAdvSent() uint32 {
	if m != nil && m.InitialAdvSent != nil {
		return *m.InitialAdvSent
	}
	return 0
}

func (m *Ipv6RaIpv6RaIpv6RaInterfaceList) GetAdvSent() uint64 {
	if m != nil && m.AdvSent != nil {
		return *m.AdvSent
	}
	return 0
}

func (m *Ipv6RaIpv6RaIpv6RaInterfaceList) GetAdvReceived() uint64 {
	if m != nil && m.AdvReceived != nil {
		return *m.AdvReceived
	}
	return 0
}

func (m *Ipv6RaIpv6RaIpv6RaInterfaceList) GetSolicitsReceived() uint64 {
	if m != nil && m.SolicitsReceived != nil {
		return *m.SolicitsReceived
	}
	return 0
}

func (m *Ipv6RaIpv6RaIpv6RaInterfaceList) GetLastAdvTime() uint32 {
	if m != nil && m.LastAdvTime != nil {
		return *m.LastAdvTime
	}
	return 0
}

func (m *Ipv6RaIpv6RaIpv6RaInterfaceList) GetLastSolicitTime() uint32 {
	if m != nil && m.LastSolicitTime != nil {
		return *m.LastSolicitTime
	}
	return 0
}

var E_JnprIpv6RaIpv6RaExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*Ipv6RaIpv6Ra)(nil),
	Field:         64,
	Name:          "jnpr_ipv6_ra_ipv6_ra_ext",
	Tag:           "bytes,64,opt,name=jnpr_ipv6_ra_ipv6_ra_ext",
	Filename:      "rpd_ipv6_ra_oc.proto",
}

func init() {
	proto.RegisterType((*Ipv6RaIpv6Ra)(nil), "ipv6_ra_ipv6_ra")
	proto.RegisterType((*Ipv6RaIpv6RaIpv6RaInterfaceList)(nil), "ipv6_ra_ipv6_ra.ipv6_ra_interface_list")
	proto.RegisterExtension(E_JnprIpv6RaIpv6RaExt)
}

func init() { proto.RegisterFile("rpd_ipv6_ra_oc.proto", fileDescriptor_610995566f3f74cb) }

var fileDescriptor_610995566f3f74cb = []byte{
	// 410 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xcf, 0x6e, 0xd4, 0x30,
	0x10, 0xc6, 0x95, 0x52, 0x09, 0xf0, 0x52, 0xba, 0x9b, 0x22, 0x08, 0x3d, 0xac, 0x42, 0x2f, 0x44,
	0xa0, 0x4d, 0xa4, 0x02, 0xe5, 0xcf, 0x89, 0x22, 0x71, 0x28, 0x07, 0x0e, 0xde, 0x9e, 0xb8, 0xb8,
	0x6e, 0x32, 0x64, 0x27, 0x4d, 0x6c, 0xcb, 0x9e, 0x86, 0xe5, 0x31, 0x38, 0xf1, 0x4a, 0x1c, 0x79,
	0x04, 0xb4, 0xaf, 0xc1, 0x05, 0xc5, 0xc9, 0x2e, 0xd2, 0xc2, 0x25, 0xb1, 0x7e, 0xdf, 0xcf, 0x9f,
	0x46, 0x63, 0x76, 0xcf, 0x9a, 0x42, 0xa0, 0x69, 0x4f, 0x84, 0x95, 0x42, 0xe7, 0xa9, 0xb1, 0x9a,
	0xf4, 0xe1, 0x01, 0x41, 0x0d, 0x0d, 0x90, 0xfd, 0x2a, 0x48, 0x9b, 0x1e, 0x1e, 0xfd, 0xde, 0x61,
	0xfb, 0x6b, 0x73, 0xf8, 0x87, 0xe7, 0x6c, 0xb2, 0x41, 0x8a, 0xc0, 0x7e, 0x96, 0x39, 0x44, 0xdf,
	0x83, 0xf8, 0x46, 0x32, 0x3a, 0x7e, 0x9c, 0x6e, 0xd9, 0xe9, 0x3f, 0xaa, 0xa8, 0xd1, 0x11, 0xf7,
	0xad, 0x5c, 0x9e, 0xad, 0xe9, 0xe1, 0xb7, 0x1d, 0x76, 0xff, 0xff, 0x6e, 0x18, 0xb2, 0x5d, 0x25,
	0x1b, 0x88, 0x9e, 0xc5, 0x41, 0x72, 0x9b, 0xfb, 0x73, 0x98, 0xb0, 0x31, 0x2a, 0x24, 0x94, 0xb5,
	0x90, 0x45, 0x2b, 0x1c, 0x28, 0x8a, 0x9e, 0xc7, 0x41, 0xb2, 0xc7, 0xef, 0x0e, 0xfc, 0xb4, 0x68,
	0xe7, 0xa0, 0x28, 0x7c, 0xc8, 0x6e, 0x6d, 0x8c, 0x17, 0x71, 0x90, 0xec, 0xf2, 0x9b, 0x72, 0x88,
	0x1e, 0xb1, 0x3b, 0x5d, 0x64, 0x21, 0x07, 0x6c, 0xa1, 0x88, 0x4e, 0x7c, 0x3c, 0x92, 0x45, 0xcb,
	0x07, 0x14, 0x3e, 0x65, 0x13, 0xa7, 0x6b, 0xcc, 0x91, 0xdc, 0x5f, 0xef, 0xa5, 0xf7, 0xc6, 0xeb,
	0x60, 0x23, 0x1f, 0xb1, 0xbd, 0x5a, 0x3a, 0xf2, 0x13, 0x11, 0x36, 0x10, 0xbd, 0xf2, 0x13, 0x8d,
	0x3a, 0x78, 0x5a, 0xb4, 0xe7, 0xd8, 0x40, 0xf8, 0x84, 0x4d, 0xbc, 0x33, 0x5c, 0xee, 0xbd, 0xd7,
	0xde, 0xdb, 0xef, 0x82, 0x79, 0xcf, 0x3b, 0xf7, 0xcd, 0x05, 0x8b, 0x2a, 0x65, 0xac, 0xd8, 0xda,
	0xa9, 0x80, 0x25, 0x85, 0x0f, 0xd2, 0x0f, 0xd7, 0x0a, 0x0d, 0xd8, 0x8f, 0x40, 0x5f, 0xb4, 0xbd,
	0x72, 0x73, 0x50, 0x4e, 0x5b, 0x17, 0xbd, 0x8d, 0x83, 0x64, 0x74, 0x3c, 0xde, 0x7e, 0x08, 0x7e,
	0xd0, 0x55, 0x9d, 0xf5, 0x5b, 0xf7, 0xdf, 0xf7, 0x4b, 0x7a, 0x77, 0xf1, 0x63, 0x35, 0x0d, 0x7e,
	0xae, 0xa6, 0xc1, 0xaf, 0xd5, 0x34, 0xf8, 0xc4, 0x4b, 0xa4, 0xb4, 0xea, 0x6b, 0x53, 0x05, 0x94,
	0x61, 0x0e, 0x97, 0x60, 0xcb, 0x6c, 0x01, 0xb2, 0xa6, 0xc5, 0xa5, 0xa6, 0x19, 0xaa, 0x12, 0x1c,
	0xcd, 0x2a, 0xc2, 0x99, 0x92, 0x84, 0x2d, 0x64, 0xe6, 0xaa, 0xcc, 0x2a, 0xc2, 0x4c, 0x16, 0xd2,
	0x10, 0x58, 0x97, 0x89, 0xea, 0x5a, 0x69, 0x97, 0xb9, 0x7c, 0x01, 0x8d, 0xfc, 0x13, 0x00, 0x00,
	0xff, 0xff, 0x8e, 0x0d, 0xbf, 0xab, 0x6d, 0x02, 0x00, 0x00,
}

func (m *Ipv6RaIpv6Ra) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ipv6RaIpv6Ra) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ipv6RaIpv6Ra) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ipv6RaInterface) > 0 {
		for iNdEx := len(m.Ipv6RaInterface) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ipv6RaInterface[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRpdIpv6RaOc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *Ipv6RaIpv6RaIpv6RaInterfaceList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ipv6RaIpv6RaIpv6RaInterfaceList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ipv6RaIpv6RaIpv6RaInterfaceList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastSolicitTime != nil {
		i = encodeVarintRpdIpv6RaOc(dAtA, i, uint64(*m.LastSolicitTime))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc8
	}
	if m.LastAdvTime != nil {
		i = encodeVarintRpdIpv6RaOc(dAtA, i, uint64(*m.LastAdvTime))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc0
	}
	if m.SolicitsReceived != nil {
		i = encodeVarintRpdIpv6RaOc(dAtA, i, uint64(*m.SolicitsReceived))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.AdvReceived != nil {
		i = encodeVarintRpdIpv6RaOc(dAtA, i, uint64(*m.AdvReceived))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.AdvSent != nil {
		i = encodeVarintRpdIpv6RaOc(dAtA, i, uint64(*m.AdvSent))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.InitialAdvSent != nil {
		i = encodeVarintRpdIpv6RaOc(dAtA, i, uint64(*m.InitialAdvSent))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintRpdIpv6RaOc(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func encodeVarintRpdIpv6RaOc(dAtA []byte, offset int, v uint64) int {
	offset -= sovRpdIpv6RaOc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Ipv6RaIpv6Ra) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ipv6RaInterface) > 0 {
		for _, e := range m.Ipv6RaInterface {
			l = e.Size()
			n += 2 + l + sovRpdIpv6RaOc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Ipv6RaIpv6RaIpv6RaInterfaceList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 2 + l + sovRpdIpv6RaOc(uint64(l))
	}
	if m.InitialAdvSent != nil {
		n += 2 + sovRpdIpv6RaOc(uint64(*m.InitialAdvSent))
	}
	if m.AdvSent != nil {
		n += 2 + sovRpdIpv6RaOc(uint64(*m.AdvSent))
	}
	if m.AdvReceived != nil {
		n += 2 + sovRpdIpv6RaOc(uint64(*m.AdvReceived))
	}
	if m.SolicitsReceived != nil {
		n += 2 + sovRpdIpv6RaOc(uint64(*m.SolicitsReceived))
	}
	if m.LastAdvTime != nil {
		n += 2 + sovRpdIpv6RaOc(uint64(*m.LastAdvTime))
	}
	if m.LastSolicitTime != nil {
		n += 2 + sovRpdIpv6RaOc(uint64(*m.LastSolicitTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRpdIpv6RaOc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRpdIpv6RaOc(x uint64) (n int) {
	return sovRpdIpv6RaOc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Ipv6RaIpv6Ra) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpdIpv6RaOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ipv6_ra_ipv6_ra: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ipv6_ra_ipv6_ra: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6RaInterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdIpv6RaOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpdIpv6RaOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpdIpv6RaOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv6RaInterface = append(m.Ipv6RaInterface, &Ipv6RaIpv6RaIpv6RaInterfaceList{})
			if err := m.Ipv6RaInterface[len(m.Ipv6RaInterface)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpdIpv6RaOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpdIpv6RaOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpdIpv6RaOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ipv6RaIpv6RaIpv6RaInterfaceList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpdIpv6RaOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ipv6_ra_interface_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ipv6_ra_interface_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdIpv6RaOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpdIpv6RaOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpdIpv6RaOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialAdvSent", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdIpv6RaOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InitialAdvSent = &v
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvSent", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdIpv6RaOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdvSent = &v
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvReceived", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdIpv6RaOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdvReceived = &v
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SolicitsReceived", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdIpv6RaOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SolicitsReceived = &v
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastAdvTime", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdIpv6RaOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastAdvTime = &v
		case 57:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSolicitTime", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdIpv6RaOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastSolicitTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipRpdIpv6RaOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpdIpv6RaOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpdIpv6RaOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRpdIpv6RaOc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRpdIpv6RaOc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpdIpv6RaOc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpdIpv6RaOc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRpdIpv6RaOc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRpdIpv6RaOc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRpdIpv6RaOc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRpdIpv6RaOc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRpdIpv6RaOc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRpdIpv6RaOc = fmt.Errorf("proto: unexpected end of group")
)
