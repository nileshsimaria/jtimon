syntax = "proto2";
option go_package = "git.juniper.net/iceberg/healthbot-ingest-jti-native/pkg/jti/adapters/_junos/schema";
import "telemetry_top.proto";

extend JuniperNetworksSensors {
   optional network_instances_ni_bgp jnpr_network_instances_ni_bgp_ext = 67;
}

message network_instances_ni_bgp {
   message network_instance_list {
      optional string name = 51 [(telemetry_options).is_key = true];
      optional protocols_type protocols = 151;
      message protocols_type {
         optional protocol_type protocol = 151;
         message protocol_type {
            optional bgp_type bgp = 151;
            message bgp_type {
               optional global_type global = 151;
               message global_type {
                  optional state_type state = 151;
                  message state_type {
                     optional uint32 as = 51;
                     optional string router_id = 52;
                     optional uint32 total_paths = 81;
                     optional uint32 total_prefixes = 82;
                  }
                  optional route_selection_options_type route_selection_options = 152;
                  message route_selection_options_type {
                     optional state_type state = 151;
                     message state_type {
                        optional bool always_compare_med = 52;
                        optional bool ignore_as_path_length = 53;
                        optional bool external_compare_router_id = 54;
                        optional bool advertise_inactive_routes = 51;
                     }
                  }
                  optional confederation_type confederation = 153;
                  message confederation_type {
                     optional state_type state = 151;
                     message state_type {
                        optional uint32 identifier = 53;
                        repeated uint32 member_as = 52;
                     }
                  }
                  optional graceful_restart_type graceful_restart = 154;
                  message graceful_restart_type {
                     optional state_type state = 151;
                     message state_type {
                        optional bool enabled = 51;
                        optional uint32 restart_time = 52;
                        optional double stale_routes_time = 53;
                        optional bool helper_only = 54;
                     }
                  }
                  optional apply_policy_type apply_policy = 171;
                  message apply_policy_type {
                     optional state_type state = 151;
                     message state_type {
                        repeated string import_policy = 51;
                        repeated string export_policy = 52;
                     }
                  }
                  optional afi_safis_type afi_safis = 155;
                  message afi_safis_type {
                     message afi_safi_list {
                        optional string afi_safi_name = 51 [(telemetry_options).is_key = true];
                        optional graceful_restart_type graceful_restart = 151;
                        message graceful_restart_type {
                           optional state_type state = 151;
                           message state_type {
                              optional bool enabled = 51;
                           }
                        }
                        optional state_type state = 152;
                        message state_type {
                           optional string afi_safi_name = 51;
                           optional bool enabled = 52;
                           optional uint32 total_paths = 81;
                           optional uint32 total_prefixes = 82;
                        }
                        optional add_paths_type add_paths = 153;
                        message add_paths_type {
                           optional state_type state = 151;
                           message state_type {
                              optional bool receive = 51;
                              optional bool send = 54;
                              optional uint32 send_max = 52;
                              optional string eligible_prefix_policy = 53;
                           }
                        }
                        optional ipv4_unicast_type ipv4_unicast = 154;
                        message ipv4_unicast_type {
                           optional prefix_limit_type prefix_limit = 151;
                           message prefix_limit_type {
                              optional state_type state = 151;
                              message state_type {
                                 optional uint32 max_prefixes = 51;
                                 optional bool prevent_teardown = 54;
                                 optional uint32 shutdown_threshold_pct = 52;
                                 optional double restart_timer = 53;
                              }
                           }
                        }
                        optional ipv6_unicast_type ipv6_unicast = 155;
                        message ipv6_unicast_type {
                           optional prefix_limit_type prefix_limit = 151;
                           message prefix_limit_type {
                              optional state_type state = 151;
                              message state_type {
                                 optional uint32 max_prefixes = 51;
                                 optional bool prevent_teardown = 54;
                                 optional uint32 shutdown_threshold_pct = 52;
                                 optional double restart_timer = 53;
                              }
                           }
                        }
                        optional ipv4_labeled_unicast_type ipv4_labeled_unicast = 156;
                        message ipv4_labeled_unicast_type {
                           optional prefix_limit_type prefix_limit = 151;
                           message prefix_limit_type {
                              optional state_type state = 151;
                              message state_type {
                                 optional uint32 max_prefixes = 51;
                                 optional bool prevent_teardown = 54;
                                 optional uint32 shutdown_threshold_pct = 52;
                                 optional double restart_timer = 53;
                              }
                           }
                        }
                        optional ipv6_labeled_unicast_type ipv6_labeled_unicast = 157;
                        message ipv6_labeled_unicast_type {
                           optional prefix_limit_type prefix_limit = 151;
                           message prefix_limit_type {
                              optional state_type state = 151;
                              message state_type {
                                 optional uint32 max_prefixes = 51;
                                 optional bool prevent_teardown = 54;
                                 optional uint32 shutdown_threshold_pct = 52;
                                 optional double restart_timer = 53;
                              }
                           }
                        }
                        optional l3vpn_ipv4_unicast_type l3vpn_ipv4_unicast = 158;
                        message l3vpn_ipv4_unicast_type {
                           optional prefix_limit_type prefix_limit = 151;
                           message prefix_limit_type {
                              optional state_type state = 151;
                              message state_type {
                                 optional uint32 max_prefixes = 51;
                                 optional bool prevent_teardown = 54;
                                 optional uint32 shutdown_threshold_pct = 52;
                                 optional double restart_timer = 53;
                              }
                           }
                        }
                        optional l3vpn_ipv6_unicast_type l3vpn_ipv6_unicast = 159;
                        message l3vpn_ipv6_unicast_type {
                           optional prefix_limit_type prefix_limit = 151;
                           message prefix_limit_type {
                              optional state_type state = 151;
                              message state_type {
                                 optional uint32 max_prefixes = 51;
                                 optional bool prevent_teardown = 54;
                                 optional uint32 shutdown_threshold_pct = 52;
                                 optional double restart_timer = 53;
                              }
                           }
                        }
                        optional l3vpn_ipv4_multicast_type l3vpn_ipv4_multicast = 160;
                        message l3vpn_ipv4_multicast_type {
                           optional prefix_limit_type prefix_limit = 151;
                           message prefix_limit_type {
                              optional state_type state = 151;
                              message state_type {
                                 optional uint32 max_prefixes = 51;
                                 optional bool prevent_teardown = 54;
                                 optional uint32 shutdown_threshold_pct = 52;
                                 optional double restart_timer = 53;
                              }
                           }
                        }
                        optional l3vpn_ipv6_multicast_type l3vpn_ipv6_multicast = 161;
                        message l3vpn_ipv6_multicast_type {
                           optional prefix_limit_type prefix_limit = 151;
                           message prefix_limit_type {
                              optional state_type state = 151;
                              message state_type {
                                 optional uint32 max_prefixes = 51;
                                 optional bool prevent_teardown = 54;
                                 optional uint32 shutdown_threshold_pct = 52;
                                 optional double restart_timer = 53;
                              }
                           }
                        }
                        optional l2vpn_vpls_type l2vpn_vpls = 162;
                        message l2vpn_vpls_type {
                           optional prefix_limit_type prefix_limit = 151;
                           message prefix_limit_type {
                              optional state_type state = 151;
                              message state_type {
                                 optional uint32 max_prefixes = 51;
                                 optional bool prevent_teardown = 54;
                                 optional uint32 shutdown_threshold_pct = 52;
                                 optional double restart_timer = 53;
                              }
                           }
                        }
                        optional l2vpn_evpn_type l2vpn_evpn = 163;
                        message l2vpn_evpn_type {
                           optional prefix_limit_type prefix_limit = 151;
                           message prefix_limit_type {
                              optional state_type state = 151;
                              message state_type {
                                 optional uint32 max_prefixes = 51;
                                 optional bool prevent_teardown = 54;
                                 optional uint32 shutdown_threshold_pct = 52;
                                 optional double restart_timer = 53;
                              }
                           }
                        }
                     }
                     repeated afi_safi_list afi_safi = 151;
                  }
               }
               optional neighbors_type neighbors = 152;
               message neighbors_type {
                  message neighbor_list {
                     optional string neighbor_address = 51 [(telemetry_options).is_key = true];
                     optional uint32 snmp_peer_index = 61;
                     optional state_type state = 151;
                     message state_type {
                        optional uint32 peer_as = 51;
                        optional uint32 local_as = 52;
                        optional string peer_type = 53;
                        optional string auth_password = 54;
                        optional string remove_private_as = 55;
                        optional bool route_flap_damping = 56;
                        optional string description = 57;
                        optional string session_state = 61;
                        optional uint64 last_established = 62;
                        optional uint64 established_transitions = 63;
                        repeated string supported_capabilities = 64;
                        optional messages_type messages = 151;
                        message messages_type {
                           optional sent_type sent = 151;
                           message sent_type {
                              optional uint64 UPDATE = 65;
                              optional uint64 NOTIFICATION = 66;
                              optional uint64 last_notification_time = 71;
                              optional string last_notification_error_code = 72;
                              optional string last_notification_error_subcode = 73;
                           }
                           optional received_type received = 152;
                           message received_type {
                              optional uint64 UPDATE = 67;
                              optional uint64 NOTIFICATION = 68;
                              optional uint64 last_notification_time = 74;
                              optional string last_notification_error_code = 75;
                              optional string last_notification_error_subcode = 76;
                           }
                        }
                        optional queues_type queues = 152;
                        message queues_type {
                           optional uint32 input = 69;
                           optional uint32 output = 70;
                        }
                        optional bool dynamically_configured = 77;
                        optional string session_status = 71;
                        optional string session_admin_status = 72;
                        optional bool interface_error = 74;
                        optional bool import_eval_pending = 75;
                        optional bool import_eval = 76;
                        optional string peer_group = 81;
                        optional string neighbor_address = 82;
                        optional bool enabled = 83;
                        optional uint32 snmp_peer_index = 84;
                     }
                     optional timers_type timers = 152;
                     message timers_type {
                        optional state_type state = 151;
                        message state_type {
                           optional double connect_retry = 51;
                           optional double hold_time = 52;
                           optional double keepalive_interval = 53;
                           optional double minimum_advertisement_interval = 54;
                           optional double negotiated_hold_time = 61;
                        }
                     }
                     optional transport_type transport = 153;
                     message transport_type {
                        optional state_type state = 151;
                        message state_type {
                           optional uint32 tcp_mss = 51;
                           optional bool mtu_discovery = 52;
                           optional bool passive_mode = 53;
                           optional string local_address = 54;
                           optional uint32 local_port = 61;
                           optional string remote_address = 62;
                           optional uint32 remote_port = 63;
                        }
                     }
                     optional error_handling_type error_handling = 154;
                     message error_handling_type {
                        optional state_type state = 151;
                        message state_type {
                           optional bool treat_as_withdraw = 51;
                           optional uint32 erroneous_update_messages = 61;
                        }
                     }
                     optional logging_options_type logging_options = 155;
                     message logging_options_type {
                        optional state_type state = 151;
                        message state_type {
                           optional bool log_neighbor_state_changes = 51;
                        }
                     }
                     optional ebgp_multihop_type ebgp_multihop = 156;
                     message ebgp_multihop_type {
                        optional state_type state = 151;
                        message state_type {
                           optional bool enabled = 51;
                           optional uint32 multihop_ttl = 52;
                        }
                     }
                     optional route_reflector_type route_reflector = 157;
                     message route_reflector_type {
                        optional state_type state = 151;
                        message state_type {
                           optional string route_reflector_cluster_id = 51;
                           optional bool route_reflector_client = 52;
                        }
                     }
                     optional as_path_options_type as_path_options = 158;
                     message as_path_options_type {
                        optional state_type state = 151;
                        message state_type {
                           optional uint32 allow_own_as = 51;
                           optional bool replace_peer_as = 52;
                           optional bool disable_peer_as_filter = 53;
                        }
                     }
                     optional use_multiple_paths_type use_multiple_paths = 159;
                     message use_multiple_paths_type {
                        optional state_type state = 151;
                        message state_type {
                           optional bool enabled = 51;
                        }
                        optional ebgp_type ebgp = 152;
                        message ebgp_type {
                           optional state_type state = 151;
                           message state_type {
                              optional bool allow_multiple_as = 51;
                           }
                        }
                     }
                     optional afi_safis_type afi_safis = 160;
                     message afi_safis_type {
                        message afi_safi_list {
                           optional string afi_safi_name = 51 [(telemetry_options).is_key = true];
                           optional graceful_restart_type graceful_restart = 151;
                           message graceful_restart_type {
                              optional state_type state = 151;
                              message state_type {
                                 optional bool enabled = 51;
                                 optional bool received = 61;
                                 optional bool advertised = 62;
                              }
                           }
                           optional state_type state = 152;
                           message state_type {
                              optional string afi_safi_name = 51;
                              optional bool enabled = 52;
                              optional bool active = 61;
                              optional prefixes_type prefixes = 151;
                              message prefixes_type {
                                 optional uint32 received = 63;
                                 optional uint32 sent = 64;
                                 optional uint32 installed = 65;
                                 optional uint32 accepted = 62;
                                 optional uint32 received_pre_policy = 69;
                                 optional uint32 rejected = 70;
                              }
                              optional bool prefix_limit_exceeded = 72;
                              optional queues_type queues = 152;
                              message queues_type {
                                 optional uint32 input = 73;
                                 optional uint32 output = 74;
                              }
                           }
                           optional add_paths_type add_paths = 153;
                           message add_paths_type {
                              optional state_type state = 151;
                              message state_type {
                                 optional bool receive = 51;
                                 optional bool send = 54;
                                 optional uint32 send_max = 52;
                                 optional string eligible_prefix_policy = 53;
                              }
                           }
                           optional ipv4_unicast_type ipv4_unicast = 154;
                           message ipv4_unicast_type {
                              optional prefix_limit_type prefix_limit = 151;
                              message prefix_limit_type {
                                 optional state_type state = 151;
                                 message state_type {
                                    optional uint32 max_prefixes = 51;
                                    optional bool prevent_teardown = 54;
                                    optional uint32 shutdown_threshold_pct = 52;
                                    optional double restart_timer = 53;
                                 }
                              }
                           }
                           optional ipv6_unicast_type ipv6_unicast = 155;
                           message ipv6_unicast_type {
                              optional prefix_limit_type prefix_limit = 151;
                              message prefix_limit_type {
                                 optional state_type state = 151;
                                 message state_type {
                                    optional uint32 max_prefixes = 51;
                                    optional bool prevent_teardown = 54;
                                    optional uint32 shutdown_threshold_pct = 52;
                                    optional double restart_timer = 53;
                                 }
                              }
                           }
                           optional ipv4_labeled_unicast_type ipv4_labeled_unicast = 156;
                           message ipv4_labeled_unicast_type {
                              optional prefix_limit_type prefix_limit = 151;
                              message prefix_limit_type {
                                 optional state_type state = 151;
                                 message state_type {
                                    optional uint32 max_prefixes = 51;
                                    optional bool prevent_teardown = 54;
                                    optional uint32 shutdown_threshold_pct = 52;
                                    optional double restart_timer = 53;
                                 }
                              }
                           }
                           optional ipv6_labeled_unicast_type ipv6_labeled_unicast = 157;
                           message ipv6_labeled_unicast_type {
                              optional prefix_limit_type prefix_limit = 151;
                              message prefix_limit_type {
                                 optional state_type state = 151;
                                 message state_type {
                                    optional uint32 max_prefixes = 51;
                                    optional bool prevent_teardown = 54;
                                    optional uint32 shutdown_threshold_pct = 52;
                                    optional double restart_timer = 53;
                                 }
                              }
                           }
                           optional l3vpn_ipv4_unicast_type l3vpn_ipv4_unicast = 158;
                           message l3vpn_ipv4_unicast_type {
                              optional prefix_limit_type prefix_limit = 151;
                              message prefix_limit_type {
                                 optional state_type state = 151;
                                 message state_type {
                                    optional uint32 max_prefixes = 51;
                                    optional bool prevent_teardown = 54;
                                    optional uint32 shutdown_threshold_pct = 52;
                                    optional double restart_timer = 53;
                                 }
                              }
                           }
                           optional l3vpn_ipv6_unicast_type l3vpn_ipv6_unicast = 159;
                           message l3vpn_ipv6_unicast_type {
                              optional prefix_limit_type prefix_limit = 151;
                              message prefix_limit_type {
                                 optional state_type state = 151;
                                 message state_type {
                                    optional uint32 max_prefixes = 51;
                                    optional bool prevent_teardown = 54;
                                    optional uint32 shutdown_threshold_pct = 52;
                                    optional double restart_timer = 53;
                                 }
                              }
                           }
                           optional l3vpn_ipv4_multicast_type l3vpn_ipv4_multicast = 160;
                           message l3vpn_ipv4_multicast_type {
                              optional prefix_limit_type prefix_limit = 151;
                              message prefix_limit_type {
                                 optional state_type state = 151;
                                 message state_type {
                                    optional uint32 max_prefixes = 51;
                                    optional bool prevent_teardown = 54;
                                    optional uint32 shutdown_threshold_pct = 52;
                                    optional double restart_timer = 53;
                                 }
                              }
                           }
                           optional l3vpn_ipv6_multicast_type l3vpn_ipv6_multicast = 161;
                           message l3vpn_ipv6_multicast_type {
                              optional prefix_limit_type prefix_limit = 151;
                              message prefix_limit_type {
                                 optional state_type state = 151;
                                 message state_type {
                                    optional uint32 max_prefixes = 51;
                                    optional bool prevent_teardown = 54;
                                    optional uint32 shutdown_threshold_pct = 52;
                                    optional double restart_timer = 53;
                                 }
                              }
                           }
                           optional l2vpn_vpls_type l2vpn_vpls = 162;
                           message l2vpn_vpls_type {
                              optional prefix_limit_type prefix_limit = 151;
                              message prefix_limit_type {
                                 optional state_type state = 151;
                                 message state_type {
                                    optional uint32 max_prefixes = 51;
                                    optional bool prevent_teardown = 54;
                                    optional uint32 shutdown_threshold_pct = 52;
                                    optional double restart_timer = 53;
                                 }
                              }
                           }
                           optional l2vpn_evpn_type l2vpn_evpn = 163;
                           message l2vpn_evpn_type {
                              optional prefix_limit_type prefix_limit = 151;
                              message prefix_limit_type {
                                 optional state_type state = 151;
                                 message state_type {
                                    optional uint32 max_prefixes = 51;
                                    optional bool prevent_teardown = 54;
                                    optional uint32 shutdown_threshold_pct = 52;
                                    optional double restart_timer = 53;
                                 }
                              }
                           }
                        }
                        repeated afi_safi_list afi_safi = 51;
                     }
                     optional graceful_restart_type graceful_restart = 161;
                     message graceful_restart_type {
                        optional state_type state = 151;
                        message state_type {
                           optional bool enabled = 51;
                           optional uint32 restart_time = 52;
                           optional double stale_routes_time = 53;
                           optional bool helper_only = 54;
                           optional uint32 peer_restart_time = 61;
                           optional bool peer_restarting = 62;
                           optional bool local_restarting = 63;
                           optional string mode = 64;
                        }
                     }
                     optional apply_policy_type apply_policy = 171;
                     message apply_policy_type {
                        optional state_type state = 151;
                        message state_type {
                           repeated string import_policy = 51;
                           repeated string export_policy = 52;
                        }
                     }
                     optional enable_bfd_type enable_bfd = 172;
                     message enable_bfd_type {
                        optional state_type state = 151;
                        message state_type {
                           optional bool enabled = 51;
                           optional uint32 jnx_min_tx_interval = 52;
                           optional uint32 jnx_local_multiplier = 53;
                           optional uint32 jnx_min_rx_interval = 54;
                           optional bool jnx_session_state = 55;
                           optional string jnx_session_mode = 56;
                        }
                     }
                  }
                  repeated neighbor_list neighbor = 151;
               }
               optional peer_groups_type peer_groups = 153;
               message peer_groups_type {
                  message peer_group_list {
                     optional string peer_group_name = 61 [(telemetry_options).is_key = true];
                     optional state_type state = 151;
                     message state_type {
                        optional uint32 peer_as = 51;
                        optional uint32 local_as = 52;
                        optional string peer_type = 53;
                        optional string auth_password = 54;
                        optional string remove_private_as = 55;
                        optional bool route_flap_damping = 56;
                        optional string description = 57;
                        optional string peer_group_name = 61;
                        optional uint32 total_paths = 81;
                        optional uint32 total_prefixes = 82;
                     }
                     optional timers_type timers = 152;
                     message timers_type {
                        optional state_type state = 151;
                        message state_type {
                           optional double connect_retry = 51;
                           optional double hold_time = 52;
                           optional double keepalive_interval = 53;
                           optional double minimum_advertisement_interval = 54;
                        }
                     }
                     optional transport_type transport = 153;
                     message transport_type {
                        optional state_type state = 151;
                        message state_type {
                           optional uint32 tcp_mss = 51;
                           optional bool mtu_discovery = 52;
                           optional bool passive_mode = 53;
                           optional string local_address = 54;
                        }
                     }
                     optional error_handling_type error_handling = 154;
                     message error_handling_type {
                        optional state_type state = 151;
                        message state_type {
                           optional bool treat_as_withdraw = 51;
                        }
                     }
                     optional logging_options_type logging_options = 155;
                     message logging_options_type {
                        optional state_type state = 151;
                        message state_type {
                           optional bool log_neighbor_state_changes = 51;
                        }
                     }
                     optional ebgp_multihop_type ebgp_multihop = 156;
                     message ebgp_multihop_type {
                        optional state_type state = 151;
                        message state_type {
                           optional bool enabled = 51;
                           optional uint32 multihop_ttl = 52;
                        }
                     }
                     optional route_reflector_type route_reflector = 157;
                     message route_reflector_type {
                        optional state_type state = 151;
                        message state_type {
                           optional string route_reflector_cluster_id = 51;
                           optional bool route_reflector_client = 52;
                        }
                     }
                     optional as_path_options_type as_path_options = 158;
                     message as_path_options_type {
                        optional state_type state = 151;
                        message state_type {
                           optional uint32 allow_own_as = 51;
                           optional bool replace_peer_as = 52;
                           optional bool disable_peer_as_filter = 53;
                        }
                     }
                     optional use_multiple_paths_type use_multiple_paths = 159;
                     message use_multiple_paths_type {
                        optional state_type state = 151;
                        message state_type {
                           optional bool enabled = 51;
                        }
                        optional ebgp_type ebgp = 152;
                        message ebgp_type {
                           optional state_type state = 151;
                           message state_type {
                              optional bool allow_multiple_as = 51;
                              optional uint32 maximum_paths = 52;
                           }
                        }
                        optional ibgp_type ibgp = 153;
                        message ibgp_type {
                           optional state_type state = 151;
                           message state_type {
                              optional uint32 maximum_paths = 51;
                           }
                        }
                     }
                     optional afi_safis_type afi_safis = 160;
                     message afi_safis_type {
                        message afi_safi_list {
                           optional string afi_safi_name = 51 [(telemetry_options).is_key = true];
                           optional graceful_restart_type graceful_restart = 151;
                           message graceful_restart_type {
                              optional state_type state = 151;
                              message state_type {
                                 optional bool enabled = 51;
                              }
                           }
                           optional state_type state = 152;
                           message state_type {
                              optional string afi_safi_name = 51;
                              optional bool enabled = 52;
                              optional bool active = 61;
                              optional prefixes_type prefixes = 151;
                              message prefixes_type {
                                 optional uint32 received = 63;
                                 optional uint32 sent = 64;
                                 optional uint32 installed = 65;
                                 optional uint32 accepted = 62;
                                 optional uint32 received_pre_policy = 69;
                                 optional uint32 rejected = 70;
                              }
                              optional uint32 total_paths = 81;
                              optional uint32 total_prefixes = 82;
                           }
                           optional add_paths_type add_paths = 153;
                           message add_paths_type {
                              optional state_type state = 151;
                              message state_type {
                                 optional bool receive = 51;
                                 optional bool send = 54;
                                 optional uint32 send_max = 52;
                                 optional string eligible_prefix_policy = 53;
                              }
                           }
                           optional ipv4_unicast_type ipv4_unicast = 154;
                           message ipv4_unicast_type {
                              optional prefix_limit_type prefix_limit = 151;
                              message prefix_limit_type {
                                 optional state_type state = 151;
                                 message state_type {
                                    optional uint32 max_prefixes = 51;
                                    optional bool prevent_teardown = 54;
                                    optional uint32 shutdown_threshold_pct = 52;
                                    optional double restart_timer = 53;
                                 }
                              }
                           }
                           optional ipv6_unicast_type ipv6_unicast = 155;
                           message ipv6_unicast_type {
                              optional prefix_limit_type prefix_limit = 151;
                              message prefix_limit_type {
                                 optional state_type state = 151;
                                 message state_type {
                                    optional uint32 max_prefixes = 51;
                                    optional bool prevent_teardown = 54;
                                    optional uint32 shutdown_threshold_pct = 52;
                                    optional double restart_timer = 53;
                                 }
                              }
                           }
                           optional ipv4_labeled_unicast_type ipv4_labeled_unicast = 156;
                           message ipv4_labeled_unicast_type {
                              optional prefix_limit_type prefix_limit = 151;
                              message prefix_limit_type {
                                 optional state_type state = 151;
                                 message state_type {
                                    optional uint32 max_prefixes = 51;
                                    optional bool prevent_teardown = 54;
                                    optional uint32 shutdown_threshold_pct = 52;
                                    optional double restart_timer = 53;
                                 }
                              }
                           }
                           optional ipv6_labeled_unicast_type ipv6_labeled_unicast = 157;
                           message ipv6_labeled_unicast_type {
                              optional prefix_limit_type prefix_limit = 151;
                              message prefix_limit_type {
                                 optional state_type state = 151;
                                 message state_type {
                                    optional uint32 max_prefixes = 51;
                                    optional bool prevent_teardown = 54;
                                    optional uint32 shutdown_threshold_pct = 52;
                                    optional double restart_timer = 53;
                                 }
                              }
                           }
                           optional l3vpn_ipv4_unicast_type l3vpn_ipv4_unicast = 158;
                           message l3vpn_ipv4_unicast_type {
                              optional prefix_limit_type prefix_limit = 151;
                              message prefix_limit_type {
                                 optional state_type state = 151;
                                 message state_type {
                                    optional uint32 max_prefixes = 51;
                                    optional bool prevent_teardown = 54;
                                    optional uint32 shutdown_threshold_pct = 52;
                                    optional double restart_timer = 53;
                                 }
                              }
                           }
                           optional l3vpn_ipv6_unicast_type l3vpn_ipv6_unicast = 159;
                           message l3vpn_ipv6_unicast_type {
                              optional prefix_limit_type prefix_limit = 151;
                              message prefix_limit_type {
                                 optional state_type state = 151;
                                 message state_type {
                                    optional uint32 max_prefixes = 51;
                                    optional bool prevent_teardown = 54;
                                    optional uint32 shutdown_threshold_pct = 52;
                                    optional double restart_timer = 53;
                                 }
                              }
                           }
                           optional l3vpn_ipv4_multicast_type l3vpn_ipv4_multicast = 160;
                           message l3vpn_ipv4_multicast_type {
                              optional prefix_limit_type prefix_limit = 151;
                              message prefix_limit_type {
                                 optional state_type state = 151;
                                 message state_type {
                                    optional uint32 max_prefixes = 51;
                                    optional bool prevent_teardown = 54;
                                    optional uint32 shutdown_threshold_pct = 52;
                                    optional double restart_timer = 53;
                                 }
                              }
                           }
                           optional l3vpn_ipv6_multicast_type l3vpn_ipv6_multicast = 161;
                           message l3vpn_ipv6_multicast_type {
                              optional prefix_limit_type prefix_limit = 151;
                              message prefix_limit_type {
                                 optional state_type state = 151;
                                 message state_type {
                                    optional uint32 max_prefixes = 51;
                                    optional bool prevent_teardown = 54;
                                    optional uint32 shutdown_threshold_pct = 52;
                                    optional double restart_timer = 53;
                                 }
                              }
                           }
                           optional l2vpn_vpls_type l2vpn_vpls = 162;
                           message l2vpn_vpls_type {
                              optional prefix_limit_type prefix_limit = 151;
                              message prefix_limit_type {
                                 optional state_type state = 151;
                                 message state_type {
                                    optional uint32 max_prefixes = 51;
                                    optional bool prevent_teardown = 54;
                                    optional uint32 shutdown_threshold_pct = 52;
                                    optional double restart_timer = 53;
                                 }
                              }
                           }
                           optional l2vpn_evpn_type l2vpn_evpn = 163;
                           message l2vpn_evpn_type {
                              optional prefix_limit_type prefix_limit = 151;
                              message prefix_limit_type {
                                 optional state_type state = 151;
                                 message state_type {
                                    optional uint32 max_prefixes = 51;
                                    optional bool prevent_teardown = 54;
                                    optional uint32 shutdown_threshold_pct = 52;
                                    optional double restart_timer = 53;
                                 }
                              }
                           }
                        }
                        repeated afi_safi_list afi_safi = 51;
                     }
                     optional graceful_restart_type graceful_restart = 161;
                     message graceful_restart_type {
                        optional state_type state = 151;
                        message state_type {
                           optional bool enabled = 51;
                           optional uint32 restart_time = 52;
                           optional double stale_routes_time = 53;
                           optional bool helper_only = 54;
                        }
                     }
                     optional apply_policy_type apply_policy = 171;
                     message apply_policy_type {
                        optional state_type state = 151;
                        message state_type {
                           repeated string import_policy = 51;
                           repeated string export_policy = 52;
                        }
                     }
                     optional enable_bfd_type enable_bfd = 172;
                     message enable_bfd_type {
                        optional state_type state = 151;
                        message state_type {
                           optional bool enabled = 51;
                        }
                     }
                     optional dynamic_neighbor_prefixes_type dynamic_neighbor_prefixes = 163;
                     message dynamic_neighbor_prefixes_type {
                        message dynamic_neighbor_prefix_list {
                           optional string prefix = 51 [(telemetry_options).is_key = true];
                           optional state_type state = 151;
                           message state_type {
                              optional string prefix = 51;
                           }
                        }
                        repeated dynamic_neighbor_prefix_list dynamic_neighbor_prefix = 51;
                     }
                  }
                  repeated peer_group_list peer_group = 151;
               }
            }
         }
      }
   }
   repeated network_instance_list network_instance = 151;
}
