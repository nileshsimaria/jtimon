// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rpd_ni_evpn_render.proto

package schema

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NetworkInstancesEvpn struct {
	NetworkInstance      []*NetworkInstancesEvpnNetworkInstanceList `protobuf:"bytes,151,rep,name=network_instance,json=networkInstance" json:"network_instance,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *NetworkInstancesEvpn) Reset()         { *m = NetworkInstancesEvpn{} }
func (m *NetworkInstancesEvpn) String() string { return proto.CompactTextString(m) }
func (*NetworkInstancesEvpn) ProtoMessage()    {}
func (*NetworkInstancesEvpn) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece6942ef07f71da, []int{0}
}
func (m *NetworkInstancesEvpn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkInstancesEvpn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkInstancesEvpn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkInstancesEvpn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInstancesEvpn.Merge(m, src)
}
func (m *NetworkInstancesEvpn) XXX_Size() int {
	return m.Size()
}
func (m *NetworkInstancesEvpn) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInstancesEvpn.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInstancesEvpn proto.InternalMessageInfo

func (m *NetworkInstancesEvpn) GetNetworkInstance() []*NetworkInstancesEvpnNetworkInstanceList {
	if m != nil {
		return m.NetworkInstance
	}
	return nil
}

type NetworkInstancesEvpnNetworkInstanceList struct {
	Name                 *string                                               `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	Protocols            *NetworkInstancesEvpnNetworkInstanceListProtocolsType `protobuf:"bytes,151,opt,name=protocols" json:"protocols,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                              `json:"-"`
	XXX_unrecognized     []byte                                                `json:"-"`
	XXX_sizecache        int32                                                 `json:"-"`
}

func (m *NetworkInstancesEvpnNetworkInstanceList) Reset() {
	*m = NetworkInstancesEvpnNetworkInstanceList{}
}
func (m *NetworkInstancesEvpnNetworkInstanceList) String() string { return proto.CompactTextString(m) }
func (*NetworkInstancesEvpnNetworkInstanceList) ProtoMessage()    {}
func (*NetworkInstancesEvpnNetworkInstanceList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece6942ef07f71da, []int{0, 0}
}
func (m *NetworkInstancesEvpnNetworkInstanceList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkInstancesEvpnNetworkInstanceList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkInstancesEvpnNetworkInstanceList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceList.Merge(m, src)
}
func (m *NetworkInstancesEvpnNetworkInstanceList) XXX_Size() int {
	return m.Size()
}
func (m *NetworkInstancesEvpnNetworkInstanceList) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceList.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceList proto.InternalMessageInfo

func (m *NetworkInstancesEvpnNetworkInstanceList) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *NetworkInstancesEvpnNetworkInstanceList) GetProtocols() *NetworkInstancesEvpnNetworkInstanceListProtocolsType {
	if m != nil {
		return m.Protocols
	}
	return nil
}

type NetworkInstancesEvpnNetworkInstanceListProtocolsType struct {
	Protocol             *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolType `protobuf:"bytes,151,opt,name=protocol" json:"protocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                          `json:"-"`
	XXX_unrecognized     []byte                                                            `json:"-"`
	XXX_sizecache        int32                                                             `json:"-"`
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsType) Reset() {
	*m = NetworkInstancesEvpnNetworkInstanceListProtocolsType{}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsType) String() string {
	return proto.CompactTextString(m)
}
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsType) ProtoMessage() {}
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece6942ef07f71da, []int{0, 0, 0}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsType.Merge(m, src)
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsType) XXX_Size() int {
	return m.Size()
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsType) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsType.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsType proto.InternalMessageInfo

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsType) GetProtocol() *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolType {
	if m != nil {
		return m.Protocol
	}
	return nil
}

type NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolType struct {
	Evpn                 *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType `protobuf:"bytes,151,opt,name=evpn" json:"evpn,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                  `json:"-"`
	XXX_unrecognized     []byte                                                                    `json:"-"`
	XXX_sizecache        int32                                                                     `json:"-"`
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolType) Reset() {
	*m = NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolType{}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolType) String() string {
	return proto.CompactTextString(m)
}
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolType) ProtoMessage() {}
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece6942ef07f71da, []int{0, 0, 0, 0}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolType.Merge(m, src)
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolType) XXX_Size() int {
	return m.Size()
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolType) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolType.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolType proto.InternalMessageInfo

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolType) GetEvpn() *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType {
	if m != nil {
		return m.Evpn
	}
	return nil
}

type NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType struct {
	NumPeers             *uint32                                                                                          `protobuf:"varint,51,opt,name=num_peers,json=numPeers" json:"num_peers,omitempty"`
	NumInterfaces        *uint32                                                                                          `protobuf:"varint,52,opt,name=num_interfaces,json=numInterfaces" json:"num_interfaces,omitempty"`
	NumInterfacesUp      *uint32                                                                                          `protobuf:"varint,53,opt,name=num_interfaces_up,json=numInterfacesUp" json:"num_interfaces_up,omitempty"`
	NumIrbInterfaces     *uint32                                                                                          `protobuf:"varint,54,opt,name=num_irb_interfaces,json=numIrbInterfaces" json:"num_irb_interfaces,omitempty"`
	NumIrbInterfacesUp   *uint32                                                                                          `protobuf:"varint,55,opt,name=num_irb_interfaces_up,json=numIrbInterfacesUp" json:"num_irb_interfaces_up,omitempty"`
	NumRemoteMacs        *uint32                                                                                          `protobuf:"varint,59,opt,name=num_remote_macs,json=numRemoteMacs" json:"num_remote_macs,omitempty"`
	NumRemoteMacIpV4     *uint32                                                                                          `protobuf:"varint,60,opt,name=num_remote_mac_ip_v4,json=numRemoteMacIpV4" json:"num_remote_mac_ip_v4,omitempty"`
	NumRemoteMacIpV6     *uint32                                                                                          `protobuf:"varint,61,opt,name=num_remote_mac_ip_v6,json=numRemoteMacIpV6" json:"num_remote_mac_ip_v6,omitempty"`
	NumRemoteIrbMacs     *uint32                                                                                          `protobuf:"varint,62,opt,name=num_remote_irb_macs,json=numRemoteIrbMacs" json:"num_remote_irb_macs,omitempty"`
	NumEthernetSegments  *uint32                                                                                          `protobuf:"varint,63,opt,name=num_ethernet_segments,json=numEthernetSegments" json:"num_ethernet_segments,omitempty"`
	LabelAllocationMode  *string                                                                                          `protobuf:"bytes,70,opt,name=label_allocation_mode,json=labelAllocationMode" json:"label_allocation_mode,omitempty"`
	Interfaces           []*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList        `protobuf:"bytes,152,rep,name=interfaces" json:"interfaces,omitempty"`
	IrbInterfaces        []*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList     `protobuf:"bytes,153,rep,name=irb_interfaces,json=irbInterfaces" json:"irb_interfaces,omitempty"`
	Peer                 []*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList              `protobuf:"bytes,154,rep,name=peer" json:"peer,omitempty"`
	SgDb                 []*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList              `protobuf:"bytes,156,rep,name=sg_db,json=sgDb" json:"sg_db,omitempty"`
	EthernetSegment      []*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList   `protobuf:"bytes,155,rep,name=ethernet_segment,json=ethernetSegment" json:"ethernet_segment,omitempty"`
	AssistedReplication  *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType `protobuf:"bytes,157,opt,name=assisted_replication,json=assistedReplication" json:"assisted_replication,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                                         `json:"-"`
	XXX_unrecognized     []byte                                                                                           `json:"-"`
	XXX_sizecache        int32                                                                                            `json:"-"`
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) Reset() {
	*m = NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType{}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) String() string {
	return proto.CompactTextString(m)
}
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) ProtoMessage() {}
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece6942ef07f71da, []int{0, 0, 0, 0, 0}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType.Merge(m, src)
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) XXX_Size() int {
	return m.Size()
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType proto.InternalMessageInfo

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) GetNumPeers() uint32 {
	if m != nil && m.NumPeers != nil {
		return *m.NumPeers
	}
	return 0
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) GetNumInterfaces() uint32 {
	if m != nil && m.NumInterfaces != nil {
		return *m.NumInterfaces
	}
	return 0
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) GetNumInterfacesUp() uint32 {
	if m != nil && m.NumInterfacesUp != nil {
		return *m.NumInterfacesUp
	}
	return 0
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) GetNumIrbInterfaces() uint32 {
	if m != nil && m.NumIrbInterfaces != nil {
		return *m.NumIrbInterfaces
	}
	return 0
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) GetNumIrbInterfacesUp() uint32 {
	if m != nil && m.NumIrbInterfacesUp != nil {
		return *m.NumIrbInterfacesUp
	}
	return 0
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) GetNumRemoteMacs() uint32 {
	if m != nil && m.NumRemoteMacs != nil {
		return *m.NumRemoteMacs
	}
	return 0
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) GetNumRemoteMacIpV4() uint32 {
	if m != nil && m.NumRemoteMacIpV4 != nil {
		return *m.NumRemoteMacIpV4
	}
	return 0
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) GetNumRemoteMacIpV6() uint32 {
	if m != nil && m.NumRemoteMacIpV6 != nil {
		return *m.NumRemoteMacIpV6
	}
	return 0
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) GetNumRemoteIrbMacs() uint32 {
	if m != nil && m.NumRemoteIrbMacs != nil {
		return *m.NumRemoteIrbMacs
	}
	return 0
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) GetNumEthernetSegments() uint32 {
	if m != nil && m.NumEthernetSegments != nil {
		return *m.NumEthernetSegments
	}
	return 0
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) GetLabelAllocationMode() string {
	if m != nil && m.LabelAllocationMode != nil {
		return *m.LabelAllocationMode
	}
	return ""
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) GetInterfaces() []*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) GetIrbInterfaces() []*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList {
	if m != nil {
		return m.IrbInterfaces
	}
	return nil
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) GetPeer() []*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) GetSgDb() []*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList {
	if m != nil {
		return m.SgDb
	}
	return nil
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) GetEthernetSegment() []*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList {
	if m != nil {
		return m.EthernetSegment
	}
	return nil
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) GetAssistedReplication() *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType {
	if m != nil {
		return m.AssistedReplication
	}
	return nil
}

type NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList struct {
	Name                 *string  `protobuf:"bytes,61,opt,name=name" json:"name,omitempty"`
	Esi                  *string  `protobuf:"bytes,62,opt,name=esi" json:"esi,omitempty"`
	Mode                 *string  `protobuf:"bytes,63,opt,name=mode" json:"mode,omitempty"`
	Status               *string  `protobuf:"bytes,64,opt,name=status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList) Reset() {
	*m = NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList{}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList) String() string {
	return proto.CompactTextString(m)
}
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList) ProtoMessage() {
}
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece6942ef07f71da, []int{0, 0, 0, 0, 0, 0}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList.Merge(m, src)
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList) XXX_Size() int {
	return m.Size()
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList proto.InternalMessageInfo

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList) GetEsi() string {
	if m != nil && m.Esi != nil {
		return *m.Esi
	}
	return ""
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList) GetMode() string {
	if m != nil && m.Mode != nil {
		return *m.Mode
	}
	return ""
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

type NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList struct {
	Name                 *string  `protobuf:"bytes,61,opt,name=name" json:"name,omitempty"`
	VirtualGatewayEsi    *string  `protobuf:"bytes,62,opt,name=virtual_gateway_esi,json=virtualGatewayEsi" json:"virtual_gateway_esi,omitempty"`
	Status               *string  `protobuf:"bytes,63,opt,name=status" json:"status,omitempty"`
	L3Context            *string  `protobuf:"bytes,64,opt,name=l3_context,json=l3Context" json:"l3_context,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList) Reset() {
	*m = NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList{}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList) String() string {
	return proto.CompactTextString(m)
}
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList) ProtoMessage() {
}
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece6942ef07f71da, []int{0, 0, 0, 0, 0, 1}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList.Merge(m, src)
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList) XXX_Size() int {
	return m.Size()
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList proto.InternalMessageInfo

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList) GetVirtualGatewayEsi() string {
	if m != nil && m.VirtualGatewayEsi != nil {
		return *m.VirtualGatewayEsi
	}
	return ""
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList) GetL3Context() string {
	if m != nil && m.L3Context != nil {
		return *m.L3Context
	}
	return ""
}

type NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList struct {
	PeerAddress                 *string  `protobuf:"bytes,71,opt,name=peer_address,json=peerAddress" json:"peer_address,omitempty"`
	NumAutoDiscoveryRoutes      *uint32  `protobuf:"varint,73,opt,name=num_auto_discovery_routes,json=numAutoDiscoveryRoutes" json:"num_auto_discovery_routes,omitempty"`
	NumMulticastRoutes          *uint32  `protobuf:"varint,74,opt,name=num_multicast_routes,json=numMulticastRoutes" json:"num_multicast_routes,omitempty"`
	NumEthernetSegmentRoutes    *uint32  `protobuf:"varint,75,opt,name=num_ethernet_segment_routes,json=numEthernetSegmentRoutes" json:"num_ethernet_segment_routes,omitempty"`
	NumMacRoutes                *uint32  `protobuf:"varint,76,opt,name=num_mac_routes,json=numMacRoutes" json:"num_mac_routes,omitempty"`
	NumMacIpRoutes              *uint32  `protobuf:"varint,77,opt,name=num_mac_ip_routes,json=numMacIpRoutes" json:"num_mac_ip_routes,omitempty"`
	NumSelectiveMulticastRoutes *uint32  `protobuf:"varint,78,opt,name=num_selective_multicast_routes,json=numSelectiveMulticastRoutes" json:"num_selective_multicast_routes,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList) Reset() {
	*m = NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList{}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList) String() string {
	return proto.CompactTextString(m)
}
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList) ProtoMessage() {
}
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece6942ef07f71da, []int{0, 0, 0, 0, 0, 2}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList.Merge(m, src)
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList) XXX_Size() int {
	return m.Size()
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList proto.InternalMessageInfo

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList) GetPeerAddress() string {
	if m != nil && m.PeerAddress != nil {
		return *m.PeerAddress
	}
	return ""
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList) GetNumAutoDiscoveryRoutes() uint32 {
	if m != nil && m.NumAutoDiscoveryRoutes != nil {
		return *m.NumAutoDiscoveryRoutes
	}
	return 0
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList) GetNumMulticastRoutes() uint32 {
	if m != nil && m.NumMulticastRoutes != nil {
		return *m.NumMulticastRoutes
	}
	return 0
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList) GetNumEthernetSegmentRoutes() uint32 {
	if m != nil && m.NumEthernetSegmentRoutes != nil {
		return *m.NumEthernetSegmentRoutes
	}
	return 0
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList) GetNumMacRoutes() uint32 {
	if m != nil && m.NumMacRoutes != nil {
		return *m.NumMacRoutes
	}
	return 0
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList) GetNumMacIpRoutes() uint32 {
	if m != nil && m.NumMacIpRoutes != nil {
		return *m.NumMacIpRoutes
	}
	return 0
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList) GetNumSelectiveMulticastRoutes() uint32 {
	if m != nil && m.NumSelectiveMulticastRoutes != nil {
		return *m.NumSelectiveMulticastRoutes
	}
	return 0
}

type NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList struct {
	EthernetTagId        *uint32                                                                                        `protobuf:"varint,71,opt,name=ethernet_tag_id,json=ethernetTagId" json:"ethernet_tag_id,omitempty"`
	Group                *string                                                                                        `protobuf:"bytes,72,opt,name=group" json:"group,omitempty"`
	Source               *string                                                                                        `protobuf:"bytes,73,opt,name=source" json:"source,omitempty"`
	TotalEsiFanout       *uint32                                                                                        `protobuf:"varint,74,opt,name=total_esi_fanout,json=totalEsiFanout" json:"total_esi_fanout,omitempty"`
	TotalLocalFanout     *uint32                                                                                        `protobuf:"varint,75,opt,name=total_local_fanout,json=totalLocalFanout" json:"total_local_fanout,omitempty"`
	TotalRemoteFanout    *uint32                                                                                        `protobuf:"varint,76,opt,name=total_remote_fanout,json=totalRemoteFanout" json:"total_remote_fanout,omitempty"`
	SgdbEsi              []*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList `protobuf:"bytes,151,rep,name=sgdb_esi,json=sgdbEsi" json:"sgdb_esi,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                                       `json:"-"`
	XXX_unrecognized     []byte                                                                                         `json:"-"`
	XXX_sizecache        int32                                                                                          `json:"-"`
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList) Reset() {
	*m = NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList{}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList) String() string {
	return proto.CompactTextString(m)
}
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList) ProtoMessage() {
}
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece6942ef07f71da, []int{0, 0, 0, 0, 0, 3}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList.Merge(m, src)
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList) XXX_Size() int {
	return m.Size()
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList proto.InternalMessageInfo

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList) GetEthernetTagId() uint32 {
	if m != nil && m.EthernetTagId != nil {
		return *m.EthernetTagId
	}
	return 0
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList) GetGroup() string {
	if m != nil && m.Group != nil {
		return *m.Group
	}
	return ""
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList) GetSource() string {
	if m != nil && m.Source != nil {
		return *m.Source
	}
	return ""
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList) GetTotalEsiFanout() uint32 {
	if m != nil && m.TotalEsiFanout != nil {
		return *m.TotalEsiFanout
	}
	return 0
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList) GetTotalLocalFanout() uint32 {
	if m != nil && m.TotalLocalFanout != nil {
		return *m.TotalLocalFanout
	}
	return 0
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList) GetTotalRemoteFanout() uint32 {
	if m != nil && m.TotalRemoteFanout != nil {
		return *m.TotalRemoteFanout
	}
	return 0
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList) GetSgdbEsi() []*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList {
	if m != nil {
		return m.SgdbEsi
	}
	return nil
}

type NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList struct {
	Esi                  *string  `protobuf:"bytes,152,opt,name=esi" json:"esi,omitempty"`
	LocalIntfName        *string  `protobuf:"bytes,151,opt,name=local_intf_name,json=localIntfName" json:"local_intf_name,omitempty"`
	JoinSyncStatus       *string  `protobuf:"bytes,153,opt,name=join_sync_status,json=joinSyncStatus" json:"join_sync_status,omitempty"`
	JoinSyncLastUpdated  *string  `protobuf:"bytes,154,opt,name=join_sync_last_updated,json=joinSyncLastUpdated" json:"join_sync_last_updated,omitempty"`
	LeaveSyncStatus      *string  `protobuf:"bytes,155,opt,name=leave_sync_status,json=leaveSyncStatus" json:"leave_sync_status,omitempty"`
	LeaveSyncLastUpdated *string  `protobuf:"bytes,156,opt,name=leave_sync_last_updated,json=leaveSyncLastUpdated" json:"leave_sync_last_updated,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList) Reset() {
	*m = NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList{}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList) String() string {
	return proto.CompactTextString(m)
}
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList) ProtoMessage() {
}
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece6942ef07f71da, []int{0, 0, 0, 0, 0, 3, 0}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList.Merge(m, src)
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList) XXX_Size() int {
	return m.Size()
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList proto.InternalMessageInfo

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList) GetEsi() string {
	if m != nil && m.Esi != nil {
		return *m.Esi
	}
	return ""
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList) GetLocalIntfName() string {
	if m != nil && m.LocalIntfName != nil {
		return *m.LocalIntfName
	}
	return ""
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList) GetJoinSyncStatus() string {
	if m != nil && m.JoinSyncStatus != nil {
		return *m.JoinSyncStatus
	}
	return ""
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList) GetJoinSyncLastUpdated() string {
	if m != nil && m.JoinSyncLastUpdated != nil {
		return *m.JoinSyncLastUpdated
	}
	return ""
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList) GetLeaveSyncStatus() string {
	if m != nil && m.LeaveSyncStatus != nil {
		return *m.LeaveSyncStatus
	}
	return ""
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList) GetLeaveSyncLastUpdated() string {
	if m != nil && m.LeaveSyncLastUpdated != nil {
		return *m.LeaveSyncLastUpdated
	}
	return ""
}

type NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList struct {
	Esi                  *string                                                                                                    `protobuf:"bytes,71,opt,name=esi" json:"esi,omitempty"`
	Status               *string                                                                                                    `protobuf:"bytes,72,opt,name=status" json:"status,omitempty"`
	LocalIntfName        *string                                                                                                    `protobuf:"bytes,73,opt,name=local_intf_name,json=localIntfName" json:"local_intf_name,omitempty"`
	LocalIntfStatus      *string                                                                                                    `protobuf:"bytes,74,opt,name=local_intf_status,json=localIntfStatus" json:"local_intf_status,omitempty"`
	DfElectionAlgorithm  *string                                                                                                    `protobuf:"bytes,75,opt,name=df_election_algorithm,json=dfElectionAlgorithm" json:"df_election_algorithm,omitempty"`
	DesignatedForwarder  *string                                                                                                    `protobuf:"bytes,76,opt,name=designated_forwarder,json=designatedForwarder" json:"designated_forwarder,omitempty"`
	RemotePe             []*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList `protobuf:"bytes,151,rep,name=remote_pe,json=remotePe" json:"remote_pe,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                                                   `json:"-"`
	XXX_unrecognized     []byte                                                                                                     `json:"-"`
	XXX_sizecache        int32                                                                                                      `json:"-"`
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList) Reset() {
	*m = NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList{}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList) String() string {
	return proto.CompactTextString(m)
}
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList) ProtoMessage() {
}
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece6942ef07f71da, []int{0, 0, 0, 0, 0, 4}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList.Merge(m, src)
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList) XXX_Size() int {
	return m.Size()
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList proto.InternalMessageInfo

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList) GetEsi() string {
	if m != nil && m.Esi != nil {
		return *m.Esi
	}
	return ""
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList) GetLocalIntfName() string {
	if m != nil && m.LocalIntfName != nil {
		return *m.LocalIntfName
	}
	return ""
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList) GetLocalIntfStatus() string {
	if m != nil && m.LocalIntfStatus != nil {
		return *m.LocalIntfStatus
	}
	return ""
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList) GetDfElectionAlgorithm() string {
	if m != nil && m.DfElectionAlgorithm != nil {
		return *m.DfElectionAlgorithm
	}
	return ""
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList) GetDesignatedForwarder() string {
	if m != nil && m.DesignatedForwarder != nil {
		return *m.DesignatedForwarder
	}
	return ""
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList) GetRemotePe() []*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList {
	if m != nil {
		return m.RemotePe
	}
	return nil
}

type NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList struct {
	IpAddress            *string  `protobuf:"bytes,71,opt,name=ip_address,json=ipAddress" json:"ip_address,omitempty"`
	Mode                 *string  `protobuf:"bytes,72,opt,name=mode" json:"mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList) Reset() {
	*m = NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList{}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList) String() string {
	return proto.CompactTextString(m)
}
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList) ProtoMessage() {
}
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece6942ef07f71da, []int{0, 0, 0, 0, 0, 4, 0}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList.Merge(m, src)
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList) XXX_Size() int {
	return m.Size()
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList proto.InternalMessageInfo

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList) GetIpAddress() string {
	if m != nil && m.IpAddress != nil {
		return *m.IpAddress
	}
	return ""
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList) GetMode() string {
	if m != nil && m.Mode != nil {
		return *m.Mode
	}
	return ""
}

type NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType struct {
	Role                 *string                                                                                                        `protobuf:"bytes,51,opt,name=role" json:"role,omitempty"`
	L2Domain             []*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList `protobuf:"bytes,171,rep,name=l2_domain,json=l2Domain" json:"l2_domain,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                                                       `json:"-"`
	XXX_unrecognized     []byte                                                                                                         `json:"-"`
	XXX_sizecache        int32                                                                                                          `json:"-"`
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType) Reset() {
	*m = NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType{}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType) String() string {
	return proto.CompactTextString(m)
}
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType) ProtoMessage() {
}
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece6942ef07f71da, []int{0, 0, 0, 0, 0, 5}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType.Merge(m, src)
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType) XXX_Size() int {
	return m.Size()
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType proto.InternalMessageInfo

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType) GetRole() string {
	if m != nil && m.Role != nil {
		return *m.Role
	}
	return ""
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType) GetL2Domain() []*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList {
	if m != nil {
		return m.L2Domain
	}
	return nil
}

type NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList struct {
	VniId                *uint32                                                                                                                    `protobuf:"varint,51,opt,name=vni_id,json=vniId" json:"vni_id,omitempty"`
	Nexthops             []*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList `protobuf:"bytes,171,rep,name=nexthops" json:"nexthops,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                                                                   `json:"-"`
	XXX_unrecognized     []byte                                                                                                                     `json:"-"`
	XXX_sizecache        int32                                                                                                                      `json:"-"`
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList) Reset() {
	*m = NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList{}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList) String() string {
	return proto.CompactTextString(m)
}
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList) ProtoMessage() {
}
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece6942ef07f71da, []int{0, 0, 0, 0, 0, 5, 0}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList.Merge(m, src)
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList) XXX_Size() int {
	return m.Size()
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList proto.InternalMessageInfo

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList) GetVniId() uint32 {
	if m != nil && m.VniId != nil {
		return *m.VniId
	}
	return 0
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList) GetNexthops() []*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList {
	if m != nil {
		return m.Nexthops
	}
	return nil
}

type NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList struct {
	NexthopIndex         *uint32  `protobuf:"varint,72,opt,name=nexthop_index,json=nexthopIndex" json:"nexthop_index,omitempty"`
	VniId                *uint32  `protobuf:"varint,71,opt,name=vni_id,json=vniId" json:"vni_id,omitempty"`
	Interface            *string  `protobuf:"bytes,73,opt,name=interface" json:"interface,omitempty"`
	ReplicatorIp         *string  `protobuf:"bytes,74,opt,name=replicator_ip,json=replicatorIp" json:"replicator_ip,omitempty"`
	IsDesignatedNode     *bool    `protobuf:"varint,75,opt,name=is_designated_node,json=isDesignatedNode" json:"is_designated_node,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList) Reset() {
	*m = NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList{}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList) String() string {
	return proto.CompactTextString(m)
}
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList) ProtoMessage() {
}
func (*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ece6942ef07f71da, []int{0, 0, 0, 0, 0, 5, 0, 0}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList.Merge(m, src)
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList) XXX_Size() int {
	return m.Size()
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList proto.InternalMessageInfo

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList) GetNexthopIndex() uint32 {
	if m != nil && m.NexthopIndex != nil {
		return *m.NexthopIndex
	}
	return 0
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList) GetVniId() uint32 {
	if m != nil && m.VniId != nil {
		return *m.VniId
	}
	return 0
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList) GetInterface() string {
	if m != nil && m.Interface != nil {
		return *m.Interface
	}
	return ""
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList) GetReplicatorIp() string {
	if m != nil && m.ReplicatorIp != nil {
		return *m.ReplicatorIp
	}
	return ""
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList) GetIsDesignatedNode() bool {
	if m != nil && m.IsDesignatedNode != nil {
		return *m.IsDesignatedNode
	}
	return false
}

var E_JnprNetworkInstancesEvpnExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*NetworkInstancesEvpn)(nil),
	Field:         112,
	Name:          "jnpr_network_instances_evpn_ext",
	Tag:           "bytes,112,opt,name=jnpr_network_instances_evpn_ext",
	Filename:      "rpd_ni_evpn_render.proto",
}

func init() {
	proto.RegisterType((*NetworkInstancesEvpn)(nil), "network_instances_evpn")
	proto.RegisterType((*NetworkInstancesEvpnNetworkInstanceList)(nil), "network_instances_evpn.network_instance_list")
	proto.RegisterType((*NetworkInstancesEvpnNetworkInstanceListProtocolsType)(nil), "network_instances_evpn.network_instance_list.protocols_type")
	proto.RegisterType((*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolType)(nil), "network_instances_evpn.network_instance_list.protocols_type.protocol_type")
	proto.RegisterType((*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType)(nil), "network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type")
	proto.RegisterType((*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList)(nil), "network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.interfaces_list")
	proto.RegisterType((*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList)(nil), "network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.irb_interfaces_list")
	proto.RegisterType((*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList)(nil), "network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.peer_list")
	proto.RegisterType((*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList)(nil), "network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.sg_db_list")
	proto.RegisterType((*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList)(nil), "network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.sg_db_list.sgdb_esi_list")
	proto.RegisterType((*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList)(nil), "network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.ethernet_segment_list")
	proto.RegisterType((*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList)(nil), "network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.ethernet_segment_list.remote_pe_list")
	proto.RegisterType((*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType)(nil), "network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.assisted_replication_type")
	proto.RegisterType((*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList)(nil), "network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.assisted_replication_type.l2_domain_list")
	proto.RegisterType((*NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList)(nil), "network_instances_evpn.network_instance_list.protocols_type.protocol_type.evpn_type.assisted_replication_type.l2_domain_list.nexthops_list")
	proto.RegisterExtension(E_JnprNetworkInstancesEvpnExt)
}

func init() { proto.RegisterFile("rpd_ni_evpn_render.proto", fileDescriptor_ece6942ef07f71da) }

var fileDescriptor_ece6942ef07f71da = []byte{
	// 1580 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0xcd, 0x6f, 0x14, 0xc9,
	0x15, 0x57, 0x63, 0x9b, 0x78, 0x1e, 0x9e, 0xb1, 0x5d, 0xe3, 0x8f, 0x66, 0x00, 0x43, 0x12, 0x42,
	0x0c, 0x89, 0xc7, 0xc1, 0x38, 0x8e, 0x92, 0x40, 0xc0, 0x60, 0x03, 0xe3, 0x60, 0x0b, 0xb5, 0x21,
	0x52, 0x12, 0x29, 0x95, 0x9a, 0xee, 0xf2, 0xb8, 0x86, 0x9e, 0xea, 0x56, 0x57, 0xf5, 0x60, 0x1f,
	0x72, 0x89, 0x94, 0x43, 0x94, 0x4b, 0x72, 0x09, 0x10, 0x88, 0x14, 0xe5, 0x16, 0x65, 0x0f, 0x2b,
	0xed, 0x9e, 0xf7, 0xb2, 0x97, 0x3d, 0xee, 0x9f, 0xb0, 0xe2, 0xb6, 0xb7, 0xbd, 0xed, 0x75, 0x55,
	0x1f, 0xdd, 0x33, 0x3d, 0x1e, 0x56, 0x5a, 0xed, 0x9a, 0xbd, 0x4d, 0xbd, 0xdf, 0xef, 0xd5, 0xfb,
	0xe8, 0xf7, 0xd1, 0x3d, 0xe0, 0x26, 0x71, 0x80, 0x39, 0xc3, 0xb4, 0x1b, 0x73, 0x9c, 0x50, 0x1e,
	0xd0, 0xa4, 0x1e, 0x27, 0x91, 0x8c, 0x6a, 0x55, 0x49, 0x43, 0xda, 0xa1, 0x32, 0x39, 0xc4, 0x32,
	0x8a, 0x8d, 0xf0, 0x7b, 0xef, 0x7f, 0x17, 0xe6, 0x38, 0x95, 0x4f, 0xa3, 0xe4, 0x09, 0x66, 0x5c,
	0x48, 0xc2, 0x7d, 0x2a, 0xb4, 0x32, 0xfa, 0x2d, 0x4c, 0x0d, 0x22, 0xee, 0x33, 0xe7, 0xc2, 0xc8,
	0xe2, 0xa9, 0x95, 0xa5, 0xfa, 0x70, 0x9d, 0x23, 0x62, 0x1c, 0x32, 0x21, 0xbd, 0x49, 0x2b, 0x6e,
	0x58, 0x69, 0xed, 0x83, 0x0b, 0x30, 0x3b, 0x94, 0x8a, 0x4e, 0xc3, 0x28, 0x27, 0x1d, 0xea, 0x5e,
	0xbb, 0xe0, 0x2c, 0x96, 0x6e, 0x8f, 0xfd, 0xf9, 0xd6, 0x89, 0x71, 0xc7, 0xd3, 0x22, 0xf4, 0x7b,
	0x28, 0x69, 0x9f, 0xfd, 0x28, 0x14, 0xca, 0x11, 0x67, 0xf1, 0xd4, 0xca, 0xf5, 0xaf, 0xe4, 0x48,
	0x3d, 0xd7, 0xc7, 0xf2, 0x30, 0xa6, 0x5e, 0xef, 0xbe, 0xda, 0x3b, 0xe7, 0xa1, 0x52, 0x44, 0x51,
	0x0b, 0xc6, 0x33, 0x49, 0x66, 0x6e, 0xeb, 0xeb, 0x98, 0xcb, 0x8f, 0xc6, 0x78, 0x7e, 0x79, 0xed,
	0xdd, 0x05, 0x28, 0x17, 0x30, 0xc4, 0x60, 0x54, 0x5d, 0x9b, 0x99, 0x7d, 0xf4, 0xcd, 0x99, 0xad,
	0xeb, 0xba, 0xd0, 0x0e, 0x68, 0x13, 0xb5, 0xf7, 0xce, 0x41, 0x29, 0x97, 0xa1, 0x33, 0x50, 0xe2,
	0x69, 0x07, 0xc7, 0x94, 0x26, 0x42, 0x3f, 0x83, 0xb2, 0x37, 0xce, 0xd3, 0xce, 0x43, 0x75, 0x46,
	0x3f, 0x80, 0x8a, 0x02, 0x19, 0x97, 0x34, 0xd9, 0x23, 0x3e, 0x15, 0xee, 0xaa, 0x66, 0x94, 0x79,
	0xda, 0x69, 0xe4, 0x42, 0x74, 0x05, 0xa6, 0x8b, 0x34, 0x9c, 0xc6, 0xee, 0x4f, 0x35, 0x73, 0xb2,
	0xc0, 0x7c, 0x1c, 0xa3, 0x1f, 0x03, 0xd2, 0xdc, 0xa4, 0xd9, 0x7f, 0xed, 0x9a, 0x26, 0x4f, 0x29,
	0x72, 0xd2, 0xec, 0xbb, 0xf9, 0x2a, 0xcc, 0x1e, 0x65, 0xab, 0xdb, 0x7f, 0xa6, 0x15, 0xd0, 0xa0,
	0xc2, 0xe3, 0x18, 0x5d, 0x02, 0x65, 0x13, 0x27, 0xb4, 0x13, 0x49, 0x8a, 0x3b, 0xc4, 0x17, 0xee,
	0x2f, 0x73, 0xa7, 0x3d, 0x2d, 0xdd, 0x26, 0xbe, 0x40, 0x75, 0x98, 0x29, 0xf2, 0x30, 0x8b, 0x71,
	0x77, 0xd5, 0xbd, 0x9e, 0xbb, 0x92, 0x93, 0x1b, 0xf1, 0x6f, 0x56, 0xdf, 0xc0, 0x5f, 0x73, 0x6f,
	0x0c, 0xe5, 0xaf, 0xa1, 0x25, 0xa8, 0xf6, 0xf1, 0x55, 0x04, 0xda, 0x97, 0x5f, 0x0d, 0xd0, 0x1b,
	0x49, 0x53, 0xbb, 0xb3, 0x62, 0x22, 0xa5, 0x72, 0x9f, 0x26, 0x9c, 0x4a, 0x2c, 0x68, 0xab, 0x43,
	0xb9, 0x14, 0xee, 0x4d, 0xad, 0xa0, 0xee, 0xda, 0xb4, 0xd8, 0xae, 0x85, 0x94, 0x4e, 0x48, 0x9a,
	0x34, 0xc4, 0x24, 0x0c, 0x23, 0x9f, 0x48, 0x16, 0x71, 0xdc, 0x89, 0x02, 0xea, 0xde, 0x55, 0xbd,
	0xe4, 0x55, 0x35, 0xb8, 0x9e, 0x63, 0xdb, 0x51, 0x40, 0xd1, 0x5f, 0x1c, 0x80, 0xbe, 0xc4, 0x3f,
	0x37, 0xed, 0x1d, 0x1c, 0x47, 0xbd, 0xd5, 0xfb, 0x1e, 0x99, 0x9e, 0x0a, 0x7d, 0x86, 0xd1, 0xdf,
	0x1d, 0xa8, 0x0c, 0x14, 0xc1, 0x0b, 0xe3, 0xcb, 0xfe, 0xf1, 0xf8, 0x52, 0x2c, 0x21, 0xed, 0x4f,
	0x99, 0x15, 0x8a, 0x4d, 0xc0, 0xa8, 0x6a, 0x03, 0xf7, 0x5f, 0xc6, 0x8f, 0x3f, 0x1c, 0x8b, 0x1f,
	0xca, 0x82, 0xb1, 0xae, 0x8d, 0xa1, 0x14, 0xc6, 0x44, 0x0b, 0x07, 0x4d, 0xf7, 0x95, 0xb1, 0x8a,
	0x8f, 0xc5, 0xaa, 0x36, 0x61, 0xcd, 0x8a, 0xd6, 0x46, 0x13, 0xfd, 0xd3, 0x81, 0xa9, 0xc1, 0x5a,
	0x73, 0x5f, 0x1a, 0x17, 0xda, 0xc7, 0xe2, 0xc2, 0xa0, 0x35, 0xbb, 0x28, 0x68, 0xb1, 0xa8, 0xd1,
	0x7f, 0x1d, 0x98, 0x21, 0x42, 0x30, 0x21, 0x69, 0x80, 0x13, 0x1a, 0x87, 0xcc, 0x14, 0xaf, 0xfb,
	0x6f, 0x33, 0x19, 0xf9, 0xb1, 0x38, 0x37, 0xcc, 0xa2, 0x99, 0x99, 0xd5, 0x0c, 0xf2, 0x7a, 0x48,
	0xad, 0x0d, 0x93, 0x03, 0xb5, 0x94, 0xaf, 0xb1, 0x1b, 0x47, 0xd7, 0xd8, 0x14, 0x8c, 0x50, 0xc1,
	0x74, 0xe7, 0x97, 0x3c, 0xf5, 0x13, 0x21, 0x18, 0xd5, 0x7d, 0x7a, 0x53, 0x8b, 0xf4, 0x6f, 0x34,
	0x07, 0x27, 0x85, 0x24, 0x32, 0x15, 0xee, 0x2d, 0x2d, 0xb5, 0xa7, 0xda, 0x33, 0x07, 0xaa, 0x43,
	0x8a, 0xf7, 0xcb, 0x0c, 0xd6, 0xa1, 0xda, 0x65, 0x89, 0x4c, 0x49, 0x88, 0x5b, 0x44, 0xd2, 0xa7,
	0xe4, 0x10, 0xf7, 0x1c, 0x98, 0xb6, 0xd0, 0x3d, 0x83, 0x6c, 0x0a, 0xd6, 0x67, 0xfa, 0x66, 0xbf,
	0x69, 0x74, 0x0e, 0x20, 0xbc, 0x86, 0xfd, 0x88, 0x4b, 0x7a, 0x20, 0xad, 0x5b, 0xa5, 0xf0, 0xda,
	0x1d, 0x23, 0xa8, 0x7d, 0x7e, 0x02, 0x4a, 0x79, 0x39, 0xa3, 0x45, 0x98, 0xd0, 0x07, 0x12, 0x04,
	0x09, 0x15, 0xc2, 0xbd, 0xd7, 0xef, 0xd7, 0x29, 0x05, 0xad, 0x1b, 0x04, 0xfd, 0x1c, 0x4e, 0xab,
	0x51, 0x47, 0x52, 0x19, 0xe1, 0x80, 0x09, 0x3f, 0xea, 0xd2, 0xe4, 0x10, 0x27, 0x51, 0x2a, 0xa9,
	0x70, 0x1b, 0x7a, 0xdc, 0xcd, 0xf1, 0xb4, 0xb3, 0x9e, 0xca, 0x68, 0x23, 0x83, 0x3d, 0x8d, 0xa2,
	0x9f, 0x98, 0x21, 0xdc, 0x49, 0x43, 0xc9, 0x7c, 0x22, 0x64, 0xa6, 0xb5, 0x95, 0xaf, 0x83, 0xed,
	0x0c, 0xb2, 0x1a, 0x37, 0xe0, 0xcc, 0xb0, 0xb9, 0x9a, 0x29, 0xfe, 0x5a, 0x2b, 0xba, 0x47, 0xa7,
	0xab, 0x55, 0xbf, 0x68, 0x36, 0xa0, 0x1a, 0xf7, 0x56, 0xe3, 0x81, 0xd6, 0x98, 0x50, 0xa6, 0x88,
	0x6f, 0x59, 0x97, 0xcd, 0x02, 0xb4, 0x4b, 0xc1, 0x12, 0xb7, 0x35, 0xb1, 0x62, 0x88, 0x8d, 0xd8,
	0x52, 0xef, 0xc0, 0x82, 0xa2, 0x0a, 0x1a, 0x52, 0x5f, 0xb2, 0x2e, 0x3d, 0x1a, 0xcb, 0x8e, 0xd6,
	0x53, 0x5e, 0xef, 0x66, 0xa4, 0x81, 0xa0, 0x6a, 0xff, 0x18, 0x03, 0xe8, 0xb5, 0xb4, 0x5a, 0x79,
	0x79, 0x7c, 0x92, 0xb4, 0x30, 0x0b, 0x74, 0xf6, 0xcb, 0x5e, 0x39, 0x13, 0x3f, 0x22, 0xad, 0x46,
	0x80, 0x66, 0x60, 0xac, 0x95, 0x44, 0x69, 0xec, 0xde, 0xd7, 0x8f, 0xd2, 0x1c, 0xf4, 0xd3, 0x8f,
	0xd2, 0xc4, 0xa7, 0x3a, 0xf7, 0xea, 0xe9, 0xeb, 0x13, 0x5a, 0x84, 0x29, 0x19, 0x49, 0x12, 0xaa,
	0xda, 0xc1, 0x7b, 0x84, 0x47, 0xa9, 0xb4, 0x79, 0xae, 0x68, 0xf9, 0xa6, 0x60, 0x77, 0xb5, 0x54,
	0xed, 0x74, 0xc3, 0x54, 0x9b, 0x26, 0xcc, 0xb8, 0x26, 0xb5, 0xe6, 0x8e, 0x07, 0x0a, 0xb0, 0xec,
	0x3a, 0x54, 0x0d, 0xdb, 0xae, 0x46, 0x4b, 0x37, 0x79, 0x9d, 0xd6, 0x90, 0x59, 0x8d, 0x96, 0xff,
	0x57, 0x07, 0xc6, 0x45, 0x2b, 0x68, 0xea, 0x1a, 0xb6, 0xaf, 0xa3, 0x9d, 0x63, 0x9e, 0x92, 0xf5,
	0xcc, 0xa0, 0x99, 0x52, 0xdf, 0x51, 0xc7, 0x4d, 0xc1, 0x6a, 0xcf, 0x4f, 0x40, 0xb9, 0x00, 0x21,
	0xd7, 0x34, 0xf7, 0x73, 0xa7, 0xbf, 0xdc, 0x75, 0x93, 0xff, 0x10, 0x26, 0x4d, 0x3e, 0x18, 0x97,
	0x7b, 0x58, 0xf7, 0xaa, 0x7e, 0xbb, 0x2b, 0x79, 0x65, 0x2d, 0x6f, 0x70, 0xb9, 0xb7, 0xa3, 0xda,
	0xf5, 0x32, 0x4c, 0xb5, 0x23, 0xc6, 0xb1, 0x38, 0xe4, 0x3e, 0xb6, 0x8d, 0xf8, 0xc2, 0x30, 0x2b,
	0x0a, 0xd8, 0x3d, 0xe4, 0xfe, 0xae, 0xe9, 0xc8, 0x55, 0x98, 0xeb, 0x51, 0x43, 0x55, 0x34, 0x69,
	0x1c, 0x10, 0x49, 0x03, 0xb5, 0xb4, 0xf4, 0xce, 0xcf, 0x14, 0x1e, 0x10, 0x21, 0x1f, 0x1b, 0x0c,
	0xfd, 0x08, 0xa6, 0x43, 0x4a, 0xba, 0xb4, 0x60, 0xe1, 0xa5, 0x51, 0x98, 0xd4, 0x48, 0x9f, 0x89,
	0x35, 0x98, 0xef, 0x23, 0x17, 0x6c, 0xbc, 0x32, 0x2a, 0x33, 0xb9, 0x4a, 0x9f, 0x91, 0xda, 0xa7,
	0x23, 0x30, 0x3b, 0x74, 0xc6, 0xa3, 0x79, 0x93, 0xa2, 0x7b, 0x47, 0x32, 0xd4, 0x9b, 0x3b, 0xf7,
	0x0b, 0x73, 0xe7, 0xd2, 0xd1, 0xcc, 0x35, 0x86, 0x25, 0xee, 0x0a, 0x4c, 0xf7, 0xf1, 0xec, 0x55,
	0x5b, 0x36, 0xac, 0x8c, 0x69, 0xc3, 0x5a, 0x81, 0xd9, 0x60, 0x0f, 0x9b, 0x86, 0x8a, 0x38, 0x26,
	0x61, 0x2b, 0x4a, 0x98, 0xdc, 0xef, 0xe8, 0x32, 0x2d, 0x79, 0xd5, 0x60, 0x6f, 0xd3, 0x62, 0xeb,
	0x19, 0x84, 0xae, 0xc2, 0x4c, 0x40, 0x05, 0x6b, 0x71, 0x15, 0x20, 0xde, 0x8b, 0x92, 0xa7, 0x24,
	0x09, 0x68, 0xa2, 0x4b, 0x55, 0xa9, 0xe4, 0xd8, 0xdd, 0x0c, 0x42, 0xcf, 0x1c, 0x28, 0xd9, 0xba,
	0x8e, 0xf3, 0x8f, 0xa7, 0xc3, 0xb7, 0xb7, 0x50, 0xeb, 0xb9, 0x71, 0x53, 0xb9, 0xe3, 0xe6, 0xfc,
	0x90, 0xd6, 0xb6, 0xa0, 0x52, 0xc4, 0xd0, 0x45, 0x00, 0x16, 0x0f, 0x9f, 0xd7, 0x25, 0x16, 0x67,
	0xd3, 0x3a, 0xdb, 0x55, 0xf7, 0x7b, 0xbb, 0xaa, 0xf6, 0xd9, 0x28, 0x9c, 0x7e, 0xe3, 0xca, 0x54,
	0x1a, 0x49, 0x14, 0xda, 0x2f, 0x3a, 0x4f, 0xff, 0x46, 0x2f, 0x1d, 0x28, 0x85, 0x2b, 0x38, 0x88,
	0x3a, 0x84, 0x71, 0xf7, 0xff, 0x26, 0x2f, 0x7f, 0x7a, 0xbb, 0xbb, 0xbc, 0x9e, 0x3b, 0x60, 0x73,
	0x13, 0xae, 0x6c, 0xe8, 0x63, 0xed, 0x3f, 0x23, 0x50, 0x29, 0x82, 0xe8, 0x2c, 0x9c, 0xec, 0x72,
	0xa6, 0x46, 0xa9, 0xfe, 0x28, 0xca, 0x12, 0x33, 0xd6, 0xe5, 0xac, 0x11, 0xa0, 0xff, 0x39, 0x30,
	0xce, 0xe9, 0x81, 0xdc, 0x8f, 0x62, 0x91, 0x45, 0xf3, 0x37, 0xe7, 0x5b, 0x0d, 0xa7, 0x9e, 0xf9,
	0x63, 0x83, 0xcb, 0x8e, 0xb5, 0x0f, 0x1d, 0x28, 0x17, 0x30, 0x74, 0x25, 0x17, 0x60, 0xc6, 0x03,
	0x7a, 0xa0, 0x9f, 0x6d, 0x1e, 0xe2, 0x84, 0xc5, 0x1a, 0x0a, 0x42, 0xb3, 0x79, 0x1e, 0xcc, 0x4a,
	0xb1, 0x09, 0x38, 0x0b, 0xa5, 0xfc, 0x85, 0xc4, 0x36, 0x67, 0x4f, 0x80, 0xbe, 0x0f, 0xe5, 0xcc,
	0xdb, 0x28, 0xc1, 0x2c, 0xb6, 0x4d, 0x39, 0xd1, 0x13, 0x36, 0xf4, 0x97, 0x20, 0x13, 0xb8, 0xaf,
	0xc1, 0xb8, 0x2a, 0x33, 0xd5, 0x8e, 0xe3, 0xde, 0x14, 0x13, 0x1b, 0x39, 0xb0, 0x13, 0x05, 0xf4,
	0x17, 0x5d, 0x38, 0xdf, 0xe6, 0x71, 0x82, 0x87, 0xa7, 0x18, 0xd3, 0x03, 0x89, 0xe6, 0xeb, 0x5b,
	0x29, 0x67, 0x31, 0x4d, 0x76, 0x0c, 0x47, 0xec, 0x52, 0x2e, 0xa2, 0x44, 0xb8, 0xb1, 0x7e, 0x73,
	0x9c, 0x7f, 0xc3, 0xe3, 0xf1, 0xce, 0xa8, 0x8b, 0x77, 0x8a, 0x7f, 0x58, 0x88, 0xcd, 0x6e, 0xcc,
	0x37, 0x0f, 0xe4, 0xed, 0x3f, 0x7e, 0xf4, 0x7a, 0xc1, 0xf9, 0xf8, 0xf5, 0x82, 0xf3, 0xc9, 0xeb,
	0x05, 0xe7, 0x77, 0x5e, 0x8b, 0xc9, 0x7a, 0xdb, 0x58, 0x51, 0xd7, 0x2d, 0x33, 0x9f, 0x36, 0x69,
	0xd2, 0x5a, 0xde, 0xa7, 0x24, 0x94, 0xfb, 0xcd, 0x48, 0x2e, 0x31, 0xde, 0xa2, 0x42, 0x2e, 0xb5,
	0x25, 0x5b, 0xe2, 0x44, 0x2d, 0xef, 0xe5, 0xf8, 0x49, 0x6b, 0xb9, 0x2d, 0xd9, 0x32, 0x09, 0x48,
	0x2c, 0x69, 0x22, 0x96, 0x71, 0x3b, 0xe5, 0x91, 0x58, 0x16, 0xfe, 0x3e, 0xed, 0x90, 0x2f, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x64, 0x77, 0xbd, 0x27, 0xc0, 0x11, 0x00, 0x00,
}

func (m *NetworkInstancesEvpn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInstancesEvpn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkInstancesEvpn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NetworkInstance) > 0 {
		for iNdEx := len(m.NetworkInstance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NetworkInstance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *NetworkInstancesEvpnNetworkInstanceList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInstancesEvpnNetworkInstanceList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkInstancesEvpnNetworkInstanceList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Protocols != nil {
		{
			size, err := m.Protocols.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Protocol != nil {
		{
			size, err := m.Protocol.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Evpn != nil {
		{
			size, err := m.Evpn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AssistedReplication != nil {
		{
			size, err := m.AssistedReplication.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xea
	}
	if len(m.SgDb) > 0 {
		for iNdEx := len(m.SgDb) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SgDb[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xe2
		}
	}
	if len(m.EthernetSegment) > 0 {
		for iNdEx := len(m.EthernetSegment) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EthernetSegment[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xda
		}
	}
	if len(m.Peer) > 0 {
		for iNdEx := len(m.Peer) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Peer[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.IrbInterfaces) > 0 {
		for iNdEx := len(m.IrbInterfaces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IrbInterfaces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xca
		}
	}
	if len(m.Interfaces) > 0 {
		for iNdEx := len(m.Interfaces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Interfaces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.LabelAllocationMode != nil {
		i -= len(*m.LabelAllocationMode)
		copy(dAtA[i:], *m.LabelAllocationMode)
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(len(*m.LabelAllocationMode)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb2
	}
	if m.NumEthernetSegments != nil {
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(*m.NumEthernetSegments))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf8
	}
	if m.NumRemoteIrbMacs != nil {
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(*m.NumRemoteIrbMacs))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf0
	}
	if m.NumRemoteMacIpV6 != nil {
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(*m.NumRemoteMacIpV6))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe8
	}
	if m.NumRemoteMacIpV4 != nil {
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(*m.NumRemoteMacIpV4))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe0
	}
	if m.NumRemoteMacs != nil {
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(*m.NumRemoteMacs))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd8
	}
	if m.NumIrbInterfacesUp != nil {
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(*m.NumIrbInterfacesUp))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.NumIrbInterfaces != nil {
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(*m.NumIrbInterfaces))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.NumInterfacesUp != nil {
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(*m.NumInterfacesUp))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.NumInterfaces != nil {
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(*m.NumInterfaces))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.NumPeers != nil {
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(*m.NumPeers))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != nil {
		i -= len(*m.Status)
		copy(dAtA[i:], *m.Status)
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(len(*m.Status)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x82
	}
	if m.Mode != nil {
		i -= len(*m.Mode)
		copy(dAtA[i:], *m.Mode)
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(len(*m.Mode)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xfa
	}
	if m.Esi != nil {
		i -= len(*m.Esi)
		copy(dAtA[i:], *m.Esi)
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(len(*m.Esi)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf2
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.L3Context != nil {
		i -= len(*m.L3Context)
		copy(dAtA[i:], *m.L3Context)
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(len(*m.L3Context)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x82
	}
	if m.Status != nil {
		i -= len(*m.Status)
		copy(dAtA[i:], *m.Status)
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(len(*m.Status)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xfa
	}
	if m.VirtualGatewayEsi != nil {
		i -= len(*m.VirtualGatewayEsi)
		copy(dAtA[i:], *m.VirtualGatewayEsi)
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(len(*m.VirtualGatewayEsi)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf2
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NumSelectiveMulticastRoutes != nil {
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(*m.NumSelectiveMulticastRoutes))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf0
	}
	if m.NumMacIpRoutes != nil {
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(*m.NumMacIpRoutes))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xe8
	}
	if m.NumMacRoutes != nil {
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(*m.NumMacRoutes))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xe0
	}
	if m.NumEthernetSegmentRoutes != nil {
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(*m.NumEthernetSegmentRoutes))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xd8
	}
	if m.NumMulticastRoutes != nil {
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(*m.NumMulticastRoutes))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xd0
	}
	if m.NumAutoDiscoveryRoutes != nil {
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(*m.NumAutoDiscoveryRoutes))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xc8
	}
	if m.PeerAddress != nil {
		i -= len(*m.PeerAddress)
		copy(dAtA[i:], *m.PeerAddress)
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(len(*m.PeerAddress)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SgdbEsi) > 0 {
		for iNdEx := len(m.SgdbEsi) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SgdbEsi[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	if m.TotalRemoteFanout != nil {
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(*m.TotalRemoteFanout))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xe0
	}
	if m.TotalLocalFanout != nil {
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(*m.TotalLocalFanout))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xd8
	}
	if m.TotalEsiFanout != nil {
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(*m.TotalEsiFanout))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xd0
	}
	if m.Source != nil {
		i -= len(*m.Source)
		copy(dAtA[i:], *m.Source)
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(len(*m.Source)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xca
	}
	if m.Group != nil {
		i -= len(*m.Group)
		copy(dAtA[i:], *m.Group)
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(len(*m.Group)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xc2
	}
	if m.EthernetTagId != nil {
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(*m.EthernetTagId))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb8
	}
	return len(dAtA) - i, nil
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LeaveSyncLastUpdated != nil {
		i -= len(*m.LeaveSyncLastUpdated)
		copy(dAtA[i:], *m.LeaveSyncLastUpdated)
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(len(*m.LeaveSyncLastUpdated)))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xe2
	}
	if m.LeaveSyncStatus != nil {
		i -= len(*m.LeaveSyncStatus)
		copy(dAtA[i:], *m.LeaveSyncStatus)
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(len(*m.LeaveSyncStatus)))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xda
	}
	if m.JoinSyncLastUpdated != nil {
		i -= len(*m.JoinSyncLastUpdated)
		copy(dAtA[i:], *m.JoinSyncLastUpdated)
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(len(*m.JoinSyncLastUpdated)))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xd2
	}
	if m.JoinSyncStatus != nil {
		i -= len(*m.JoinSyncStatus)
		copy(dAtA[i:], *m.JoinSyncStatus)
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(len(*m.JoinSyncStatus)))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xca
	}
	if m.Esi != nil {
		i -= len(*m.Esi)
		copy(dAtA[i:], *m.Esi)
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(len(*m.Esi)))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xc2
	}
	if m.LocalIntfName != nil {
		i -= len(*m.LocalIntfName)
		copy(dAtA[i:], *m.LocalIntfName)
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(len(*m.LocalIntfName)))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RemotePe) > 0 {
		for iNdEx := len(m.RemotePe) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RemotePe[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	if m.DesignatedForwarder != nil {
		i -= len(*m.DesignatedForwarder)
		copy(dAtA[i:], *m.DesignatedForwarder)
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(len(*m.DesignatedForwarder)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xe2
	}
	if m.DfElectionAlgorithm != nil {
		i -= len(*m.DfElectionAlgorithm)
		copy(dAtA[i:], *m.DfElectionAlgorithm)
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(len(*m.DfElectionAlgorithm)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xda
	}
	if m.LocalIntfStatus != nil {
		i -= len(*m.LocalIntfStatus)
		copy(dAtA[i:], *m.LocalIntfStatus)
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(len(*m.LocalIntfStatus)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xd2
	}
	if m.LocalIntfName != nil {
		i -= len(*m.LocalIntfName)
		copy(dAtA[i:], *m.LocalIntfName)
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(len(*m.LocalIntfName)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xca
	}
	if m.Status != nil {
		i -= len(*m.Status)
		copy(dAtA[i:], *m.Status)
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(len(*m.Status)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xc2
	}
	if m.Esi != nil {
		i -= len(*m.Esi)
		copy(dAtA[i:], *m.Esi)
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(len(*m.Esi)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mode != nil {
		i -= len(*m.Mode)
		copy(dAtA[i:], *m.Mode)
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(len(*m.Mode)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xc2
	}
	if m.IpAddress != nil {
		i -= len(*m.IpAddress)
		copy(dAtA[i:], *m.IpAddress)
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(len(*m.IpAddress)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.L2Domain) > 0 {
		for iNdEx := len(m.L2Domain) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.L2Domain[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
			i--
			dAtA[i] = 0xda
		}
	}
	if m.Role != nil {
		i -= len(*m.Role)
		copy(dAtA[i:], *m.Role)
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(len(*m.Role)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Nexthops) > 0 {
		for iNdEx := len(m.Nexthops) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nexthops[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
			i--
			dAtA[i] = 0xda
		}
	}
	if m.VniId != nil {
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(*m.VniId))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsDesignatedNode != nil {
		i--
		if *m.IsDesignatedNode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xd8
	}
	if m.ReplicatorIp != nil {
		i -= len(*m.ReplicatorIp)
		copy(dAtA[i:], *m.ReplicatorIp)
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(len(*m.ReplicatorIp)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xd2
	}
	if m.Interface != nil {
		i -= len(*m.Interface)
		copy(dAtA[i:], *m.Interface)
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(len(*m.Interface)))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xca
	}
	if m.NexthopIndex != nil {
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(*m.NexthopIndex))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xc0
	}
	if m.VniId != nil {
		i = encodeVarintRpdNiEvpnRender(dAtA, i, uint64(*m.VniId))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRpdNiEvpnRender(dAtA []byte, offset int, v uint64) int {
	offset -= sovRpdNiEvpnRender(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NetworkInstancesEvpn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NetworkInstance) > 0 {
		for _, e := range m.NetworkInstance {
			l = e.Size()
			n += 2 + l + sovRpdNiEvpnRender(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkInstancesEvpnNetworkInstanceList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 2 + l + sovRpdNiEvpnRender(uint64(l))
	}
	if m.Protocols != nil {
		l = m.Protocols.Size()
		n += 2 + l + sovRpdNiEvpnRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Protocol != nil {
		l = m.Protocol.Size()
		n += 2 + l + sovRpdNiEvpnRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Evpn != nil {
		l = m.Evpn.Size()
		n += 2 + l + sovRpdNiEvpnRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumPeers != nil {
		n += 2 + sovRpdNiEvpnRender(uint64(*m.NumPeers))
	}
	if m.NumInterfaces != nil {
		n += 2 + sovRpdNiEvpnRender(uint64(*m.NumInterfaces))
	}
	if m.NumInterfacesUp != nil {
		n += 2 + sovRpdNiEvpnRender(uint64(*m.NumInterfacesUp))
	}
	if m.NumIrbInterfaces != nil {
		n += 2 + sovRpdNiEvpnRender(uint64(*m.NumIrbInterfaces))
	}
	if m.NumIrbInterfacesUp != nil {
		n += 2 + sovRpdNiEvpnRender(uint64(*m.NumIrbInterfacesUp))
	}
	if m.NumRemoteMacs != nil {
		n += 2 + sovRpdNiEvpnRender(uint64(*m.NumRemoteMacs))
	}
	if m.NumRemoteMacIpV4 != nil {
		n += 2 + sovRpdNiEvpnRender(uint64(*m.NumRemoteMacIpV4))
	}
	if m.NumRemoteMacIpV6 != nil {
		n += 2 + sovRpdNiEvpnRender(uint64(*m.NumRemoteMacIpV6))
	}
	if m.NumRemoteIrbMacs != nil {
		n += 2 + sovRpdNiEvpnRender(uint64(*m.NumRemoteIrbMacs))
	}
	if m.NumEthernetSegments != nil {
		n += 2 + sovRpdNiEvpnRender(uint64(*m.NumEthernetSegments))
	}
	if m.LabelAllocationMode != nil {
		l = len(*m.LabelAllocationMode)
		n += 2 + l + sovRpdNiEvpnRender(uint64(l))
	}
	if len(m.Interfaces) > 0 {
		for _, e := range m.Interfaces {
			l = e.Size()
			n += 2 + l + sovRpdNiEvpnRender(uint64(l))
		}
	}
	if len(m.IrbInterfaces) > 0 {
		for _, e := range m.IrbInterfaces {
			l = e.Size()
			n += 2 + l + sovRpdNiEvpnRender(uint64(l))
		}
	}
	if len(m.Peer) > 0 {
		for _, e := range m.Peer {
			l = e.Size()
			n += 2 + l + sovRpdNiEvpnRender(uint64(l))
		}
	}
	if len(m.EthernetSegment) > 0 {
		for _, e := range m.EthernetSegment {
			l = e.Size()
			n += 2 + l + sovRpdNiEvpnRender(uint64(l))
		}
	}
	if len(m.SgDb) > 0 {
		for _, e := range m.SgDb {
			l = e.Size()
			n += 2 + l + sovRpdNiEvpnRender(uint64(l))
		}
	}
	if m.AssistedReplication != nil {
		l = m.AssistedReplication.Size()
		n += 2 + l + sovRpdNiEvpnRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 2 + l + sovRpdNiEvpnRender(uint64(l))
	}
	if m.Esi != nil {
		l = len(*m.Esi)
		n += 2 + l + sovRpdNiEvpnRender(uint64(l))
	}
	if m.Mode != nil {
		l = len(*m.Mode)
		n += 2 + l + sovRpdNiEvpnRender(uint64(l))
	}
	if m.Status != nil {
		l = len(*m.Status)
		n += 2 + l + sovRpdNiEvpnRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 2 + l + sovRpdNiEvpnRender(uint64(l))
	}
	if m.VirtualGatewayEsi != nil {
		l = len(*m.VirtualGatewayEsi)
		n += 2 + l + sovRpdNiEvpnRender(uint64(l))
	}
	if m.Status != nil {
		l = len(*m.Status)
		n += 2 + l + sovRpdNiEvpnRender(uint64(l))
	}
	if m.L3Context != nil {
		l = len(*m.L3Context)
		n += 2 + l + sovRpdNiEvpnRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PeerAddress != nil {
		l = len(*m.PeerAddress)
		n += 2 + l + sovRpdNiEvpnRender(uint64(l))
	}
	if m.NumAutoDiscoveryRoutes != nil {
		n += 2 + sovRpdNiEvpnRender(uint64(*m.NumAutoDiscoveryRoutes))
	}
	if m.NumMulticastRoutes != nil {
		n += 2 + sovRpdNiEvpnRender(uint64(*m.NumMulticastRoutes))
	}
	if m.NumEthernetSegmentRoutes != nil {
		n += 2 + sovRpdNiEvpnRender(uint64(*m.NumEthernetSegmentRoutes))
	}
	if m.NumMacRoutes != nil {
		n += 2 + sovRpdNiEvpnRender(uint64(*m.NumMacRoutes))
	}
	if m.NumMacIpRoutes != nil {
		n += 2 + sovRpdNiEvpnRender(uint64(*m.NumMacIpRoutes))
	}
	if m.NumSelectiveMulticastRoutes != nil {
		n += 2 + sovRpdNiEvpnRender(uint64(*m.NumSelectiveMulticastRoutes))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EthernetTagId != nil {
		n += 2 + sovRpdNiEvpnRender(uint64(*m.EthernetTagId))
	}
	if m.Group != nil {
		l = len(*m.Group)
		n += 2 + l + sovRpdNiEvpnRender(uint64(l))
	}
	if m.Source != nil {
		l = len(*m.Source)
		n += 2 + l + sovRpdNiEvpnRender(uint64(l))
	}
	if m.TotalEsiFanout != nil {
		n += 2 + sovRpdNiEvpnRender(uint64(*m.TotalEsiFanout))
	}
	if m.TotalLocalFanout != nil {
		n += 2 + sovRpdNiEvpnRender(uint64(*m.TotalLocalFanout))
	}
	if m.TotalRemoteFanout != nil {
		n += 2 + sovRpdNiEvpnRender(uint64(*m.TotalRemoteFanout))
	}
	if len(m.SgdbEsi) > 0 {
		for _, e := range m.SgdbEsi {
			l = e.Size()
			n += 2 + l + sovRpdNiEvpnRender(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LocalIntfName != nil {
		l = len(*m.LocalIntfName)
		n += 2 + l + sovRpdNiEvpnRender(uint64(l))
	}
	if m.Esi != nil {
		l = len(*m.Esi)
		n += 2 + l + sovRpdNiEvpnRender(uint64(l))
	}
	if m.JoinSyncStatus != nil {
		l = len(*m.JoinSyncStatus)
		n += 2 + l + sovRpdNiEvpnRender(uint64(l))
	}
	if m.JoinSyncLastUpdated != nil {
		l = len(*m.JoinSyncLastUpdated)
		n += 2 + l + sovRpdNiEvpnRender(uint64(l))
	}
	if m.LeaveSyncStatus != nil {
		l = len(*m.LeaveSyncStatus)
		n += 2 + l + sovRpdNiEvpnRender(uint64(l))
	}
	if m.LeaveSyncLastUpdated != nil {
		l = len(*m.LeaveSyncLastUpdated)
		n += 2 + l + sovRpdNiEvpnRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Esi != nil {
		l = len(*m.Esi)
		n += 2 + l + sovRpdNiEvpnRender(uint64(l))
	}
	if m.Status != nil {
		l = len(*m.Status)
		n += 2 + l + sovRpdNiEvpnRender(uint64(l))
	}
	if m.LocalIntfName != nil {
		l = len(*m.LocalIntfName)
		n += 2 + l + sovRpdNiEvpnRender(uint64(l))
	}
	if m.LocalIntfStatus != nil {
		l = len(*m.LocalIntfStatus)
		n += 2 + l + sovRpdNiEvpnRender(uint64(l))
	}
	if m.DfElectionAlgorithm != nil {
		l = len(*m.DfElectionAlgorithm)
		n += 2 + l + sovRpdNiEvpnRender(uint64(l))
	}
	if m.DesignatedForwarder != nil {
		l = len(*m.DesignatedForwarder)
		n += 2 + l + sovRpdNiEvpnRender(uint64(l))
	}
	if len(m.RemotePe) > 0 {
		for _, e := range m.RemotePe {
			l = e.Size()
			n += 2 + l + sovRpdNiEvpnRender(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpAddress != nil {
		l = len(*m.IpAddress)
		n += 2 + l + sovRpdNiEvpnRender(uint64(l))
	}
	if m.Mode != nil {
		l = len(*m.Mode)
		n += 2 + l + sovRpdNiEvpnRender(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Role != nil {
		l = len(*m.Role)
		n += 2 + l + sovRpdNiEvpnRender(uint64(l))
	}
	if len(m.L2Domain) > 0 {
		for _, e := range m.L2Domain {
			l = e.Size()
			n += 2 + l + sovRpdNiEvpnRender(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VniId != nil {
		n += 2 + sovRpdNiEvpnRender(uint64(*m.VniId))
	}
	if len(m.Nexthops) > 0 {
		for _, e := range m.Nexthops {
			l = e.Size()
			n += 2 + l + sovRpdNiEvpnRender(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VniId != nil {
		n += 2 + sovRpdNiEvpnRender(uint64(*m.VniId))
	}
	if m.NexthopIndex != nil {
		n += 2 + sovRpdNiEvpnRender(uint64(*m.NexthopIndex))
	}
	if m.Interface != nil {
		l = len(*m.Interface)
		n += 2 + l + sovRpdNiEvpnRender(uint64(l))
	}
	if m.ReplicatorIp != nil {
		l = len(*m.ReplicatorIp)
		n += 2 + l + sovRpdNiEvpnRender(uint64(l))
	}
	if m.IsDesignatedNode != nil {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRpdNiEvpnRender(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRpdNiEvpnRender(x uint64) (n int) {
	return sovRpdNiEvpnRender(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NetworkInstancesEvpn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpdNiEvpnRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: network_instances_evpn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: network_instances_evpn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkInstance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkInstance = append(m.NetworkInstance, &NetworkInstancesEvpnNetworkInstanceList{})
			if err := m.NetworkInstance[len(m.NetworkInstance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpdNiEvpnRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInstancesEvpnNetworkInstanceList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpdNiEvpnRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: network_instance_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: network_instance_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocols", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Protocols == nil {
				m.Protocols = &NetworkInstancesEvpnNetworkInstanceListProtocolsType{}
			}
			if err := m.Protocols.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpdNiEvpnRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpdNiEvpnRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: protocols_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: protocols_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Protocol == nil {
				m.Protocol = &NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolType{}
			}
			if err := m.Protocol.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpdNiEvpnRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpdNiEvpnRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: protocol_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: protocol_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evpn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Evpn == nil {
				m.Evpn = &NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType{}
			}
			if err := m.Evpn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpdNiEvpnRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpdNiEvpnRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: evpn_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: evpn_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumPeers", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumPeers = &v
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumInterfaces", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumInterfaces = &v
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumInterfacesUp", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumInterfacesUp = &v
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumIrbInterfaces", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumIrbInterfaces = &v
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumIrbInterfacesUp", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumIrbInterfacesUp = &v
		case 59:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRemoteMacs", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumRemoteMacs = &v
		case 60:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRemoteMacIpV4", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumRemoteMacIpV4 = &v
		case 61:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRemoteMacIpV6", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumRemoteMacIpV6 = &v
		case 62:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRemoteIrbMacs", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumRemoteIrbMacs = &v
		case 63:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumEthernetSegments", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumEthernetSegments = &v
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelAllocationMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LabelAllocationMode = &s
			iNdEx = postIndex
		case 152:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interfaces = append(m.Interfaces, &NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList{})
			if err := m.Interfaces[len(m.Interfaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 153:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IrbInterfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IrbInterfaces = append(m.IrbInterfaces, &NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList{})
			if err := m.IrbInterfaces[len(m.IrbInterfaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 154:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = append(m.Peer, &NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList{})
			if err := m.Peer[len(m.Peer)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 155:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthernetSegment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthernetSegment = append(m.EthernetSegment, &NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList{})
			if err := m.EthernetSegment[len(m.EthernetSegment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 156:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SgDb", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SgDb = append(m.SgDb, &NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList{})
			if err := m.SgDb[len(m.SgDb)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 157:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssistedReplication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AssistedReplication == nil {
				m.AssistedReplication = &NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType{}
			}
			if err := m.AssistedReplication.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpdNiEvpnRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeInterfacesList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpdNiEvpnRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: interfaces_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: interfaces_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 62:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Esi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Esi = &s
			iNdEx = postIndex
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Mode = &s
			iNdEx = postIndex
		case 64:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Status = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpdNiEvpnRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeIrbInterfacesList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpdNiEvpnRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: irb_interfaces_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: irb_interfaces_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 62:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualGatewayEsi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VirtualGatewayEsi = &s
			iNdEx = postIndex
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Status = &s
			iNdEx = postIndex
		case 64:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L3Context", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.L3Context = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpdNiEvpnRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypePeerList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpdNiEvpnRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: peer_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: peer_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 71:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PeerAddress = &s
			iNdEx = postIndex
		case 73:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumAutoDiscoveryRoutes", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumAutoDiscoveryRoutes = &v
		case 74:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumMulticastRoutes", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumMulticastRoutes = &v
		case 75:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumEthernetSegmentRoutes", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumEthernetSegmentRoutes = &v
		case 76:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumMacRoutes", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumMacRoutes = &v
		case 77:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumMacIpRoutes", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumMacIpRoutes = &v
		case 78:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumSelectiveMulticastRoutes", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumSelectiveMulticastRoutes = &v
		default:
			iNdEx = preIndex
			skippy, err := skipRpdNiEvpnRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpdNiEvpnRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: sg_db_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: sg_db_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 71:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthernetTagId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EthernetTagId = &v
		case 72:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Group = &s
			iNdEx = postIndex
		case 73:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Source = &s
			iNdEx = postIndex
		case 74:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalEsiFanout", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalEsiFanout = &v
		case 75:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLocalFanout", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalLocalFanout = &v
		case 76:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRemoteFanout", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalRemoteFanout = &v
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SgdbEsi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SgdbEsi = append(m.SgdbEsi, &NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList{})
			if err := m.SgdbEsi[len(m.SgdbEsi)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpdNiEvpnRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeSgDbListSgdbEsiList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpdNiEvpnRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: sgdb_esi_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: sgdb_esi_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalIntfName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LocalIntfName = &s
			iNdEx = postIndex
		case 152:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Esi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Esi = &s
			iNdEx = postIndex
		case 153:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinSyncStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.JoinSyncStatus = &s
			iNdEx = postIndex
		case 154:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinSyncLastUpdated", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.JoinSyncLastUpdated = &s
			iNdEx = postIndex
		case 155:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaveSyncStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LeaveSyncStatus = &s
			iNdEx = postIndex
		case 156:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaveSyncLastUpdated", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LeaveSyncLastUpdated = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpdNiEvpnRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpdNiEvpnRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ethernet_segment_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ethernet_segment_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 71:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Esi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Esi = &s
			iNdEx = postIndex
		case 72:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Status = &s
			iNdEx = postIndex
		case 73:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalIntfName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LocalIntfName = &s
			iNdEx = postIndex
		case 74:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalIntfStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LocalIntfStatus = &s
			iNdEx = postIndex
		case 75:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DfElectionAlgorithm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DfElectionAlgorithm = &s
			iNdEx = postIndex
		case 76:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesignatedForwarder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DesignatedForwarder = &s
			iNdEx = postIndex
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemotePe", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemotePe = append(m.RemotePe, &NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList{})
			if err := m.RemotePe[len(m.RemotePe)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpdNiEvpnRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeEthernetSegmentListRemotePeList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpdNiEvpnRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: remote_pe_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: remote_pe_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 71:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.IpAddress = &s
			iNdEx = postIndex
		case 72:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Mode = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpdNiEvpnRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpdNiEvpnRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: assisted_replication_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: assisted_replication_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Role = &s
			iNdEx = postIndex
		case 171:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2Domain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.L2Domain = append(m.L2Domain, &NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList{})
			if err := m.L2Domain[len(m.L2Domain)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpdNiEvpnRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpdNiEvpnRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: l2_domain_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: l2_domain_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VniId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VniId = &v
		case 171:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nexthops", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nexthops = append(m.Nexthops, &NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList{})
			if err := m.Nexthops[len(m.Nexthops)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpdNiEvpnRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInstancesEvpnNetworkInstanceListProtocolsTypeProtocolTypeEvpnTypeAssistedReplicationTypeL2DomainListNexthopsList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpdNiEvpnRender
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: nexthops_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: nexthops_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 71:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VniId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VniId = &v
		case 72:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NexthopIndex", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NexthopIndex = &v
		case 73:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Interface = &s
			iNdEx = postIndex
		case 74:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicatorIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ReplicatorIp = &s
			iNdEx = postIndex
		case 75:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDesignatedNode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsDesignatedNode = &b
		default:
			iNdEx = preIndex
			skippy, err := skipRpdNiEvpnRender(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRpdNiEvpnRender
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRpdNiEvpnRender(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRpdNiEvpnRender
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpdNiEvpnRender
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRpdNiEvpnRender
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRpdNiEvpnRender
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRpdNiEvpnRender
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRpdNiEvpnRender        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRpdNiEvpnRender          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRpdNiEvpnRender = fmt.Errorf("proto: unexpected end of group")
)
