syntax = "proto2";
option go_package = "git.juniper.net/iceberg/healthbot-ingest-jti-native/pkg/jti/adapters/_junos/schema";
import "telemetry_top.proto";

extend JuniperNetworksSensors {
   optional network_instances_rsvp jnpr_network_instances_rsvp_ext = 68;
}

message network_instances_rsvp {
   message network_instance_list {
      optional string name = 51 [(telemetry_options).is_key = true];
      optional mpls_type mpls = 151;
      message mpls_type {
         optional signaling_protocols_type signaling_protocols = 151;
         message signaling_protocols_type {
            optional rsvp_te_type rsvp_te = 151;
            message rsvp_te_type {
               optional sessions_type sessions = 151;
               message sessions_type {
                  message session_list {
                     optional uint64 local_index = 51 [(telemetry_options).is_key = true];
                     optional string name = 52;
                     optional uint32 lsp_id = 53;
                     optional string subcode = 54;
                     optional record_route_objects_type record_route_objects = 151;
                     message record_route_objects_type {
                        message record_route_object_list {
                           optional uint32 index = 51 [(telemetry_options).is_key = true];
                           optional state_type state = 151;
                           message state_type {
                              optional uint32 index = 51;
                              optional string address = 52;
                              optional string reported_label = 53;
                              optional uint32 reported_flags = 54;
                           }
                        }
                        repeated record_route_object_list record_route_object = 151;
                     }
                     optional state_type state = 153;
                     message state_type {
                        optional uint64 local_index = 51;
                        optional string source_address = 52;
                        optional string destination_address = 53;
                        optional uint32 tunnel_id = 54;
                        optional uint32 lsp_id = 55;
                        optional string session_name = 56;
                        optional string status = 57;
                        optional string type = 59;
                        optional string protection_requested = 58;
                        optional string label_in = 60;
                        optional string label_out = 61;
                        optional sender_tspec_type sender_tspec = 151;
                        message sender_tspec_type {
                           optional string rate = 51;
                           optional string size = 52;
                           optional string peak_data_rate = 53;
                        }
                        optional string notify_status = 62;
                     }
                     optional explicit_route_objects_type explicit_route_objects = 152;
                     message explicit_route_objects_type {
                        message explicit_route_object_list {
                           optional uint32 index = 52 [(telemetry_options).is_key = true];
                           optional state_type state = 151;
                           message state_type {
                              optional uint32 index = 51;
                              optional string address = 52;
                              optional string hop_type = 53;
                           }
                        }
                        repeated explicit_route_object_list explicit_route_object = 151;
                     }
                  }
                  repeated session_list session = 151;
               }
               optional neighbors_type neighbors = 152;
               message neighbors_type {
                  message neighbor_list {
                     optional string address = 51 [(telemetry_options).is_key = true];
                     optional state_type state = 151;
                     message state_type {
                        optional string address = 51;
                        optional string detected_interface = 52;
                        optional string neighbor_status = 53;
                        optional bool refresh_reduction = 54;
                     }
                  }
                  repeated neighbor_list neighbor = 151;
               }
               optional global_type global = 153;
               message global_type {
                  optional graceful_restart_type graceful_restart = 151;
                  message graceful_restart_type {
                     optional state_type state = 151;
                     message state_type {
                        optional bool enable = 51;
                        optional uint32 restart_time = 52;
                        optional uint32 recovery_time = 53;
                     }
                  }
                  optional soft_preemption_type soft_preemption = 152;
                  message soft_preemption_type {
                     optional state_type state = 151;
                     message state_type {
                        optional bool enable = 51;
                        optional uint32 soft_preemption_timeout = 52;
                     }
                  }
                  optional hellos_type hellos = 153;
                  message hellos_type {
                     optional state_type state = 151;
                     message state_type {
                        optional uint32 hello_interval = 51;
                        optional bool refresh_reduction = 52;
                     }
                  }
                  optional state_type state = 154;
                  message state_type {
                     optional counters_type counters = 152;
                     message counters_type {
                        optional uint64 path_timeouts = 51;
                        optional uint64 reservation_timeouts = 52;
                        optional uint64 rate_limited_messages = 53;
                        optional uint64 in_path_messages = 54;
                        optional uint64 in_path_error_messages = 55;
                        optional uint64 in_path_tear_messages = 56;
                        optional uint64 in_reservation_messages = 57;
                        optional uint64 in_reservation_error_messages = 58;
                        optional uint64 in_reservation_tear_messages = 59;
                        optional uint64 in_hello_messages = 60;
                        optional uint64 in_srefresh_messages = 61;
                        optional uint64 in_ack_messages = 62;
                        optional uint64 out_path_messages = 63;
                        optional uint64 out_path_error_messages = 64;
                        optional uint64 out_path_tear_messages = 65;
                        optional uint64 out_reservation_messages = 66;
                        optional uint64 out_reservation_error_messages = 67;
                        optional uint64 out_reservation_tear_messages = 68;
                        optional uint64 out_hello_messages = 69;
                        optional uint64 out_srefresh_messages = 70;
                        optional uint64 out_ack_messages = 71;
                     }
                     optional error_counters_type error_counters = 151;
                     message error_counters_type {
                        optional uint64 bad_packet_length = 51;
                        optional uint64 bad_packet_version = 52;
                        optional uint64 authentication_fail = 53;
                        optional uint64 bad_checksum = 54;
                        optional uint64 bad_packet_format = 55;
                        optional uint64 recv_pkt_disabled_intf = 56;
                        optional uint64 state_timeout = 57;
                        optional uint64 message_out_of_order = 58;
                        optional uint64 unknown_ack = 59;
                        optional uint64 unknown_nack = 60;
                        optional uint64 received_nack = 61;
                        optional uint64 send_failure = 62;
                     }
                  }
               }
               optional interface_attributes_type interface_attributes = 154;
               message interface_attributes_type {
                  message interface_list {
                     optional string interface_id = 51 [(telemetry_options).is_key = true];
                     optional state_type state = 151;
                     message state_type {
                        optional string interface_id = 51;
                        optional counters_type counters = 151;
                        message counters_type {
                           optional uint64 in_path_messages = 51;
                           optional uint64 in_path_error_messages = 52;
                           optional uint64 in_path_tear_messages = 53;
                           optional uint64 in_reservation_messages = 54;
                           optional uint64 in_reservation_error_messages = 55;
                           optional uint64 in_reservation_tear_messages = 56;
                           optional uint64 in_hello_messages = 57;
                           optional uint64 in_srefresh_messages = 58;
                           optional uint64 in_ack_messages = 59;
                           optional uint64 out_path_messages = 60;
                           optional uint64 out_path_error_messages = 61;
                           optional uint64 out_path_tear_messages = 62;
                           optional uint64 out_reservation_messages = 63;
                           optional uint64 out_reservation_error_messages = 64;
                           optional uint64 out_reservation_tear_messages = 65;
                           optional uint64 out_hello_messages = 66;
                           optional uint64 out_srefresh_messages = 67;
                           optional uint64 out_ack_messages = 68;
                        }
                        optional error_counters_type error_counters = 152;
                        message error_counters_type {
                           optional uint64 bad_packet_length = 51;
                           optional uint64 bad_packet_version = 52;
                           optional uint64 authentication_fail = 53;
                           optional uint64 bad_checksum = 54;
                           optional uint64 bad_packet_format = 55;
                           optional uint64 recv_pkt_disabled_intf = 56;
                           optional uint64 state_timeout = 57;
                           optional uint64 message_out_of_order = 58;
                           optional uint64 unknown_ack = 59;
                           optional uint64 unknown_nack = 60;
                           optional uint64 received_nack = 61;
                           optional uint64 send_failure = 62;
                        }
                     }
                     optional interface_ref_type interface_ref = 152;
                     message interface_ref_type {
                        optional state_type state = 151;
                        message state_type {
                           optional string interface = 51;
                           optional uint32 subinterface = 52;
                        }
                     }
                     optional bandwidth_reservations_type bandwidth_reservations = 153;
                     message bandwidth_reservations_type {
                        message bandwidth_reservation_list {
                           optional string priority = 51 [(telemetry_options).is_key = true];
                           optional state_type state = 151;
                           message state_type {
                              optional string priority = 51;
                              optional uint64 available_bandwidth = 52;
                              optional uint64 reserved_bandwidth = 53;
                              optional uint64 active_reservations_count = 54;
                              optional uint64 highwater_mark = 55;
                              optional uint64 static_bandwidth = 61;
                           }
                        }
                        repeated bandwidth_reservation_list bandwidth_reservation = 151;
                     }
                     optional hellos_type hellos = 154;
                     message hellos_type {
                        optional state_type state = 151;
                        message state_type {
                           optional uint32 hello_interval = 51;
                           optional bool refresh_reduction = 52;
                        }
                     }
                     optional authentication_type authentication = 155;
                     message authentication_type {
                        optional state_type state = 151;
                        message state_type {
                           optional bool enable = 51;
                        }
                     }
                     optional subscription_type subscription = 156;
                     message subscription_type {
                        optional state_type state = 151;
                        message state_type {
                           optional uint32 subscription = 51;
                        }
                     }
                     optional protection_type protection = 157;
                     message protection_type {
                        optional state_type state = 151;
                        message state_type {
                           optional string link_protection_style_requested = 51;
                           optional uint32 bypass_optimize_interval = 52;
                        }
                     }
                     optional string admin_status = 52;
                  }
                  repeated interface_list interface = 151;
               }
            }
         }
      }
   }
   repeated network_instance_list network_instance = 151;
}
