// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: session_telemetry.proto

package schema

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ServicesSession struct {
	SvcsSessionInfo      []*SessionInfo `protobuf:"bytes,1,rep,name=svcs_session_info,json=svcsSessionInfo" json:"svcs_session_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ServicesSession) Reset()         { *m = ServicesSession{} }
func (m *ServicesSession) String() string { return proto.CompactTextString(m) }
func (*ServicesSession) ProtoMessage()    {}
func (*ServicesSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b5b6170d3878570, []int{0}
}
func (m *ServicesSession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServicesSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServicesSession.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServicesSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicesSession.Merge(m, src)
}
func (m *ServicesSession) XXX_Size() int {
	return m.Size()
}
func (m *ServicesSession) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicesSession.DiscardUnknown(m)
}

var xxx_messageInfo_ServicesSession proto.InternalMessageInfo

func (m *ServicesSession) GetSvcsSessionInfo() []*SessionInfo {
	if m != nil {
		return m.SvcsSessionInfo
	}
	return nil
}

type SessionInfo struct {
	SnFlowInfo           []*FlowInfo `protobuf:"bytes,1,rep,name=sn_flow_info,json=snFlowInfo" json:"sn_flow_info,omitempty"`
	SnSvcSetName         *string     `protobuf:"bytes,2,opt,name=sn_svc_set_name,json=snSvcSetName" json:"sn_svc_set_name,omitempty"`
	SnSvcSetId           *uint64     `protobuf:"varint,3,opt,name=sn_svc_set_id,json=snSvcSetId" json:"sn_svc_set_id,omitempty"`
	SnId                 *uint64     `protobuf:"varint,4,opt,name=sn_id,json=snId" json:"sn_id,omitempty"`
	SnFlags              *uint64     `protobuf:"varint,5,opt,name=sn_flags,json=snFlags" json:"sn_flags,omitempty"`
	SnAlgId              *uint64     `protobuf:"varint,6,opt,name=sn_alg_id,json=snAlgId" json:"sn_alg_id,omitempty"`
	SnRoutingPathType    *uint64     `protobuf:"varint,7,opt,name=sn_routing_path_type,json=snRoutingPathType" json:"sn_routing_path_type,omitempty"`
	SnSessionTimeout     *uint64     `protobuf:"varint,8,opt,name=sn_session_timeout,json=snSessionTimeout" json:"sn_session_timeout,omitempty"`
	SnState              *uint64     `protobuf:"varint,9,opt,name=sn_state,json=snState" json:"sn_state,omitempty"`
	SnSwSessionId        *uint64     `protobuf:"varint,10,opt,name=sn_sw_session_id,json=snSwSessionId" json:"sn_sw_session_id,omitempty"`
	SnSvcId              *uint64     `protobuf:"varint,11,opt,name=sn_svc_id,json=snSvcId" json:"sn_svc_id,omitempty"`
	SnOffload            *bool       `protobuf:"varint,12,opt,name=sn_offload,json=snOffload" json:"sn_offload,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SessionInfo) Reset()         { *m = SessionInfo{} }
func (m *SessionInfo) String() string { return proto.CompactTextString(m) }
func (*SessionInfo) ProtoMessage()    {}
func (*SessionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b5b6170d3878570, []int{1}
}
func (m *SessionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionInfo.Merge(m, src)
}
func (m *SessionInfo) XXX_Size() int {
	return m.Size()
}
func (m *SessionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SessionInfo proto.InternalMessageInfo

func (m *SessionInfo) GetSnFlowInfo() []*FlowInfo {
	if m != nil {
		return m.SnFlowInfo
	}
	return nil
}

func (m *SessionInfo) GetSnSvcSetName() string {
	if m != nil && m.SnSvcSetName != nil {
		return *m.SnSvcSetName
	}
	return ""
}

func (m *SessionInfo) GetSnSvcSetId() uint64 {
	if m != nil && m.SnSvcSetId != nil {
		return *m.SnSvcSetId
	}
	return 0
}

func (m *SessionInfo) GetSnId() uint64 {
	if m != nil && m.SnId != nil {
		return *m.SnId
	}
	return 0
}

func (m *SessionInfo) GetSnFlags() uint64 {
	if m != nil && m.SnFlags != nil {
		return *m.SnFlags
	}
	return 0
}

func (m *SessionInfo) GetSnAlgId() uint64 {
	if m != nil && m.SnAlgId != nil {
		return *m.SnAlgId
	}
	return 0
}

func (m *SessionInfo) GetSnRoutingPathType() uint64 {
	if m != nil && m.SnRoutingPathType != nil {
		return *m.SnRoutingPathType
	}
	return 0
}

func (m *SessionInfo) GetSnSessionTimeout() uint64 {
	if m != nil && m.SnSessionTimeout != nil {
		return *m.SnSessionTimeout
	}
	return 0
}

func (m *SessionInfo) GetSnState() uint64 {
	if m != nil && m.SnState != nil {
		return *m.SnState
	}
	return 0
}

func (m *SessionInfo) GetSnSwSessionId() uint64 {
	if m != nil && m.SnSwSessionId != nil {
		return *m.SnSwSessionId
	}
	return 0
}

func (m *SessionInfo) GetSnSvcId() uint64 {
	if m != nil && m.SnSvcId != nil {
		return *m.SnSvcId
	}
	return 0
}

func (m *SessionInfo) GetSnOffload() bool {
	if m != nil && m.SnOffload != nil {
		return *m.SnOffload
	}
	return false
}

//--------------------------
type FlowInfo struct {
	SrcAddr              *string  `protobuf:"bytes,1,opt,name=src_addr,json=srcAddr" json:"src_addr,omitempty"`
	DstAddr              *string  `protobuf:"bytes,2,opt,name=dst_addr,json=dstAddr" json:"dst_addr,omitempty"`
	FlowDirection        *uint32  `protobuf:"varint,3,opt,name=flow_direction,json=flowDirection" json:"flow_direction,omitempty"`
	SrcPort              *uint32  `protobuf:"varint,4,opt,name=src_port,json=srcPort" json:"src_port,omitempty"`
	DstPort              *uint32  `protobuf:"varint,5,opt,name=dst_port,json=dstPort" json:"dst_port,omitempty"`
	SrcIsV6              *bool    `protobuf:"varint,6,opt,name=src_is_v6,json=srcIsV6" json:"src_is_v6,omitempty"`
	DstIsV6              *bool    `protobuf:"varint,7,opt,name=dst_is_v6,json=dstIsV6" json:"dst_is_v6,omitempty"`
	FlowType             *uint32  `protobuf:"varint,8,opt,name=flow_type,json=flowType" json:"flow_type,omitempty"`
	FlowFlags            *uint32  `protobuf:"varint,9,opt,name=flow_flags,json=flowFlags" json:"flow_flags,omitempty"`
	IpProto              *uint32  `protobuf:"varint,10,opt,name=ip_proto,json=ipProto" json:"ip_proto,omitempty"`
	IdleTimeout          *uint64  `protobuf:"varint,11,opt,name=idle_timeout,json=idleTimeout" json:"idle_timeout,omitempty"`
	FlowPacketsIn        *uint64  `protobuf:"varint,12,opt,name=flow_packets_in,json=flowPacketsIn" json:"flow_packets_in,omitempty"`
	FlowPacketsOut       *uint64  `protobuf:"varint,13,opt,name=flow_packets_out,json=flowPacketsOut" json:"flow_packets_out,omitempty"`
	FlowBytesIn          *uint64  `protobuf:"varint,14,opt,name=flow_bytes_in,json=flowBytesIn" json:"flow_bytes_in,omitempty"`
	FlowBytesOut         *uint64  `protobuf:"varint,15,opt,name=flow_bytes_out,json=flowBytesOut" json:"flow_bytes_out,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlowInfo) Reset()         { *m = FlowInfo{} }
func (m *FlowInfo) String() string { return proto.CompactTextString(m) }
func (*FlowInfo) ProtoMessage()    {}
func (*FlowInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b5b6170d3878570, []int{2}
}
func (m *FlowInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlowInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlowInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlowInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowInfo.Merge(m, src)
}
func (m *FlowInfo) XXX_Size() int {
	return m.Size()
}
func (m *FlowInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FlowInfo proto.InternalMessageInfo

func (m *FlowInfo) GetSrcAddr() string {
	if m != nil && m.SrcAddr != nil {
		return *m.SrcAddr
	}
	return ""
}

func (m *FlowInfo) GetDstAddr() string {
	if m != nil && m.DstAddr != nil {
		return *m.DstAddr
	}
	return ""
}

func (m *FlowInfo) GetFlowDirection() uint32 {
	if m != nil && m.FlowDirection != nil {
		return *m.FlowDirection
	}
	return 0
}

func (m *FlowInfo) GetSrcPort() uint32 {
	if m != nil && m.SrcPort != nil {
		return *m.SrcPort
	}
	return 0
}

func (m *FlowInfo) GetDstPort() uint32 {
	if m != nil && m.DstPort != nil {
		return *m.DstPort
	}
	return 0
}

func (m *FlowInfo) GetSrcIsV6() bool {
	if m != nil && m.SrcIsV6 != nil {
		return *m.SrcIsV6
	}
	return false
}

func (m *FlowInfo) GetDstIsV6() bool {
	if m != nil && m.DstIsV6 != nil {
		return *m.DstIsV6
	}
	return false
}

func (m *FlowInfo) GetFlowType() uint32 {
	if m != nil && m.FlowType != nil {
		return *m.FlowType
	}
	return 0
}

func (m *FlowInfo) GetFlowFlags() uint32 {
	if m != nil && m.FlowFlags != nil {
		return *m.FlowFlags
	}
	return 0
}

func (m *FlowInfo) GetIpProto() uint32 {
	if m != nil && m.IpProto != nil {
		return *m.IpProto
	}
	return 0
}

func (m *FlowInfo) GetIdleTimeout() uint64 {
	if m != nil && m.IdleTimeout != nil {
		return *m.IdleTimeout
	}
	return 0
}

func (m *FlowInfo) GetFlowPacketsIn() uint64 {
	if m != nil && m.FlowPacketsIn != nil {
		return *m.FlowPacketsIn
	}
	return 0
}

func (m *FlowInfo) GetFlowPacketsOut() uint64 {
	if m != nil && m.FlowPacketsOut != nil {
		return *m.FlowPacketsOut
	}
	return 0
}

func (m *FlowInfo) GetFlowBytesIn() uint64 {
	if m != nil && m.FlowBytesIn != nil {
		return *m.FlowBytesIn
	}
	return 0
}

func (m *FlowInfo) GetFlowBytesOut() uint64 {
	if m != nil && m.FlowBytesOut != nil {
		return *m.FlowBytesOut
	}
	return 0
}

var E_JnprScvsSessionExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*ServicesSession)(nil),
	Field:         79,
	Name:          "jnprScvsSessionExt",
	Tag:           "bytes,79,opt,name=jnprScvsSessionExt",
	Filename:      "session_telemetry.proto",
}

func init() {
	proto.RegisterType((*ServicesSession)(nil), "ServicesSession")
	proto.RegisterType((*SessionInfo)(nil), "SessionInfo")
	proto.RegisterType((*FlowInfo)(nil), "FlowInfo")
	proto.RegisterExtension(E_JnprScvsSessionExt)
}

func init() { proto.RegisterFile("session_telemetry.proto", fileDescriptor_6b5b6170d3878570) }

var fileDescriptor_6b5b6170d3878570 = []byte{
	// 738 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x54, 0x4d, 0x6f, 0x1b, 0x37,
	0x10, 0xc5, 0xc6, 0x76, 0xb5, 0xa2, 0x24, 0xcb, 0x61, 0x0a, 0x64, 0x93, 0x22, 0x86, 0x62, 0xf4,
	0x43, 0x40, 0x63, 0x09, 0xc8, 0x21, 0x28, 0x7a, 0x6a, 0x8c, 0xb6, 0x80, 0x5a, 0x20, 0x36, 0xa4,
	0xa0, 0x40, 0x7b, 0x61, 0xe9, 0x25, 0xb5, 0xa2, 0xbc, 0x22, 0x17, 0x9c, 0xd1, 0xaa, 0xba, 0xf6,
	0x3f, 0xf5, 0x3f, 0xf4, 0xd8, 0x9f, 0x50, 0xf8, 0x5f, 0xf4, 0x56, 0x70, 0xa8, 0x55, 0xe5, 0x22,
	0x37, 0xf1, 0xbd, 0x37, 0x6f, 0x66, 0xe7, 0x91, 0x62, 0x4f, 0x41, 0x03, 0x18, 0x67, 0x05, 0xea,
	0x52, 0xaf, 0x34, 0xfa, 0xed, 0xa8, 0xf2, 0x0e, 0xdd, 0xf3, 0x27, 0x7b, 0x40, 0xa0, 0xab, 0x22,
	0x78, 0xf1, 0x23, 0xeb, 0xcf, 0xb4, 0xaf, 0x4d, 0xae, 0x61, 0x16, 0xeb, 0xf8, 0x57, 0xec, 0x31,
	0xd4, 0x39, 0x88, 0xc6, 0xc7, 0xd8, 0xb9, 0xcb, 0x92, 0xc1, 0xd1, 0xb0, 0xf3, 0xba, 0x3b, 0xda,
	0x89, 0x26, 0x76, 0xee, 0xa6, 0xfd, 0x20, 0x3b, 0x00, 0x2e, 0xfe, 0x38, 0x62, 0x9d, 0x83, 0x33,
	0xff, 0x92, 0x75, 0xc1, 0x8a, 0x79, 0xe9, 0x36, 0x87, 0x26, 0xed, 0xd1, 0xf7, 0xa5, 0xdb, 0x90,
	0x03, 0x03, 0xdb, 0xfc, 0xe6, 0xaf, 0x58, 0x1f, 0xac, 0x80, 0x3a, 0x17, 0xa0, 0x51, 0x58, 0xb9,
	0xd2, 0xd9, 0xa3, 0x41, 0x32, 0x6c, 0x5f, 0x9d, 0xfc, 0xfe, 0xcd, 0xa3, 0x34, 0x99, 0x76, 0xc1,
	0xce, 0xea, 0x7c, 0xa6, 0xf1, 0x9d, 0x5c, 0x69, 0xfe, 0x92, 0xf5, 0x0e, 0xd4, 0x46, 0x65, 0x47,
	0x83, 0x64, 0x78, 0x1c, 0x0c, 0xa3, 0x68, 0xa2, 0xf8, 0x13, 0x76, 0x02, 0x36, 0x50, 0xc7, 0x44,
	0x1d, 0x83, 0x9d, 0x28, 0xfe, 0x8c, 0xa5, 0x34, 0x92, 0x2c, 0x20, 0x3b, 0x21, 0xbc, 0x15, 0x66,
	0x90, 0x05, 0xf0, 0xe7, 0xac, 0x0d, 0x56, 0xc8, 0xb2, 0x08, 0x35, 0x1f, 0x35, 0xdc, 0xdb, 0xb2,
	0x98, 0x28, 0x3e, 0x66, 0x1f, 0x83, 0x15, 0xde, 0xad, 0xd1, 0xd8, 0x42, 0x54, 0x12, 0x17, 0x02,
	0xb7, 0x95, 0xce, 0x5a, 0x24, 0x7b, 0x0c, 0x76, 0x1a, 0xa9, 0x1b, 0x89, 0x8b, 0xf7, 0xdb, 0x4a,
	0xf3, 0x57, 0x8c, 0x87, 0xf9, 0x9a, 0x28, 0xcc, 0x4a, 0xbb, 0x35, 0x66, 0x29, 0xc9, 0xcf, 0xc0,
	0xee, 0xb6, 0xf4, 0x3e, 0xe2, 0xbb, 0xa9, 0x00, 0x25, 0xea, 0xac, 0xdd, 0x74, 0x9e, 0x85, 0x23,
	0xff, 0x82, 0x9d, 0x05, 0x6a, 0xf3, 0x5f, 0x1c, 0x2a, 0x63, 0x24, 0xe9, 0x81, 0x9d, 0x6d, 0x9a,
	0x75, 0xab, 0xdd, 0xf8, 0x61, 0x23, 0x46, 0x65, 0x9d, 0xbd, 0x49, 0x9d, 0x4f, 0x14, 0x7f, 0xc1,
	0x18, 0x58, 0xe1, 0xe6, 0xf3, 0xd2, 0x49, 0x95, 0x75, 0x07, 0xc9, 0x30, 0x9d, 0xb6, 0xc1, 0x5e,
	0x47, 0xe0, 0xe2, 0x9f, 0x23, 0x96, 0xee, 0x73, 0x18, 0xb0, 0x14, 0x7c, 0x2e, 0xa4, 0x52, 0x3e,
	0x4b, 0x0e, 0x03, 0x68, 0x81, 0xcf, 0xdf, 0x2a, 0xe5, 0x83, 0x42, 0x01, 0x46, 0xc5, 0x83, 0x88,
	0x5a, 0x0a, 0x90, 0x14, 0x9f, 0xb1, 0x53, 0x4a, 0x5d, 0x19, 0xaf, 0x73, 0x34, 0xce, 0x52, 0x3c,
	0xbd, 0x69, 0x2f, 0xa0, 0xdf, 0x36, 0x20, 0x7d, 0xb6, 0xcf, 0x45, 0xe5, 0x3c, 0x52, 0x48, 0x3d,
	0xea, 0x71, 0xe3, 0x3c, 0x6d, 0x24, 0xf4, 0x20, 0xea, 0x24, 0x52, 0x0a, 0x90, 0xa8, 0xf0, 0xa1,
	0x3e, 0x17, 0x06, 0x44, 0xfd, 0x86, 0x72, 0x4a, 0xa9, 0x6c, 0x02, 0x3f, 0xbd, 0x09, 0x5c, 0x28,
	0x8b, 0x5c, 0x2b, 0x72, 0x0a, 0x90, 0xb8, 0x4f, 0x58, 0x9b, 0x86, 0xa2, 0xe0, 0x52, 0xf2, 0x4c,
	0x03, 0x40, 0x79, 0xbd, 0x60, 0x8c, 0xc8, 0x78, 0x33, 0xda, 0xc4, 0x92, 0x3c, 0xde, 0x8d, 0x67,
	0x2c, 0x35, 0x95, 0xa0, 0x27, 0x43, 0xdb, 0xef, 0x4d, 0x5b, 0xa6, 0xba, 0x09, 0x47, 0xfe, 0x92,
	0x75, 0x8d, 0x2a, 0xf5, 0x3e, 0xe3, 0xb8, 0xfa, 0x4e, 0xc0, 0x9a, 0x78, 0x3f, 0x67, 0x7d, 0x32,
	0xaf, 0x64, 0x7e, 0xa7, 0x11, 0x84, 0xb1, 0x94, 0xc1, 0x71, 0xdc, 0xc7, 0x4d, 0x44, 0x27, 0x96,
	0x0f, 0xd9, 0xd9, 0x03, 0x5d, 0xb0, 0xeb, 0x91, 0xf0, 0xf4, 0x40, 0x78, 0xbd, 0x46, 0x7e, 0xc1,
	0xa8, 0x54, 0xdc, 0x6e, 0x51, 0x93, 0xdf, 0x69, 0xec, 0x1a, 0xc0, 0xab, 0x80, 0x4d, 0x2c, 0xff,
	0x74, 0x17, 0x42, 0xd4, 0x04, 0xaf, 0x3e, 0x89, 0xba, 0x7b, 0xd1, 0xf5, 0x1a, 0xbf, 0xfe, 0x99,
	0xf1, 0xa5, 0xad, 0xfc, 0x2c, 0xaf, 0x9b, 0xa7, 0xfc, 0xdd, 0x6f, 0xc8, 0x9f, 0x8e, 0x7e, 0x58,
	0x5b, 0x53, 0x69, 0xff, 0x4e, 0xe3, 0xc6, 0xf9, 0x3b, 0x98, 0x69, 0x0b, 0xce, 0x43, 0x76, 0x3d,
	0x48, 0x86, 0x9d, 0xd7, 0x67, 0xa3, 0xff, 0xfd, 0x69, 0x4c, 0x3f, 0x60, 0x72, 0xf5, 0xeb, 0x9f,
	0xf7, 0xe7, 0xc9, 0x5f, 0xf7, 0xe7, 0xc9, 0xdf, 0xf7, 0xe7, 0xc9, 0x2f, 0xd3, 0xc2, 0xe0, 0x68,
	0x19, 0x5d, 0x47, 0x56, 0xe3, 0xd8, 0xe4, 0xfa, 0x56, 0xfb, 0x62, 0xbc, 0xd0, 0xb2, 0xc4, 0xc5,
	0xad, 0xc3, 0x4b, 0x63, 0x0b, 0x0d, 0x78, 0xb9, 0x44, 0x73, 0x69, 0x25, 0x9a, 0x5a, 0x8f, 0xab,
	0xbb, 0x62, 0xbc, 0x44, 0x33, 0x96, 0x4a, 0x56, 0xa8, 0x3d, 0x8c, 0xc5, 0x72, 0x6d, 0x1d, 0x8c,
	0x21, 0x5f, 0xe8, 0x95, 0xfc, 0x37, 0x00, 0x00, 0xff, 0xff, 0xd1, 0xb4, 0x84, 0x59, 0xec, 0x04,
	0x00, 0x00,
}

func (m *ServicesSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServicesSession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesSession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SvcsSessionInfo) > 0 {
		for iNdEx := len(m.SvcsSessionInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SvcsSessionInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSessionTelemetry(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SessionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SnOffload != nil {
		i--
		if *m.SnOffload {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.SnSvcId != nil {
		i = encodeVarintSessionTelemetry(dAtA, i, uint64(*m.SnSvcId))
		i--
		dAtA[i] = 0x58
	}
	if m.SnSwSessionId != nil {
		i = encodeVarintSessionTelemetry(dAtA, i, uint64(*m.SnSwSessionId))
		i--
		dAtA[i] = 0x50
	}
	if m.SnState != nil {
		i = encodeVarintSessionTelemetry(dAtA, i, uint64(*m.SnState))
		i--
		dAtA[i] = 0x48
	}
	if m.SnSessionTimeout != nil {
		i = encodeVarintSessionTelemetry(dAtA, i, uint64(*m.SnSessionTimeout))
		i--
		dAtA[i] = 0x40
	}
	if m.SnRoutingPathType != nil {
		i = encodeVarintSessionTelemetry(dAtA, i, uint64(*m.SnRoutingPathType))
		i--
		dAtA[i] = 0x38
	}
	if m.SnAlgId != nil {
		i = encodeVarintSessionTelemetry(dAtA, i, uint64(*m.SnAlgId))
		i--
		dAtA[i] = 0x30
	}
	if m.SnFlags != nil {
		i = encodeVarintSessionTelemetry(dAtA, i, uint64(*m.SnFlags))
		i--
		dAtA[i] = 0x28
	}
	if m.SnId != nil {
		i = encodeVarintSessionTelemetry(dAtA, i, uint64(*m.SnId))
		i--
		dAtA[i] = 0x20
	}
	if m.SnSvcSetId != nil {
		i = encodeVarintSessionTelemetry(dAtA, i, uint64(*m.SnSvcSetId))
		i--
		dAtA[i] = 0x18
	}
	if m.SnSvcSetName != nil {
		i -= len(*m.SnSvcSetName)
		copy(dAtA[i:], *m.SnSvcSetName)
		i = encodeVarintSessionTelemetry(dAtA, i, uint64(len(*m.SnSvcSetName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SnFlowInfo) > 0 {
		for iNdEx := len(m.SnFlowInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SnFlowInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSessionTelemetry(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FlowInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FlowBytesOut != nil {
		i = encodeVarintSessionTelemetry(dAtA, i, uint64(*m.FlowBytesOut))
		i--
		dAtA[i] = 0x78
	}
	if m.FlowBytesIn != nil {
		i = encodeVarintSessionTelemetry(dAtA, i, uint64(*m.FlowBytesIn))
		i--
		dAtA[i] = 0x70
	}
	if m.FlowPacketsOut != nil {
		i = encodeVarintSessionTelemetry(dAtA, i, uint64(*m.FlowPacketsOut))
		i--
		dAtA[i] = 0x68
	}
	if m.FlowPacketsIn != nil {
		i = encodeVarintSessionTelemetry(dAtA, i, uint64(*m.FlowPacketsIn))
		i--
		dAtA[i] = 0x60
	}
	if m.IdleTimeout != nil {
		i = encodeVarintSessionTelemetry(dAtA, i, uint64(*m.IdleTimeout))
		i--
		dAtA[i] = 0x58
	}
	if m.IpProto != nil {
		i = encodeVarintSessionTelemetry(dAtA, i, uint64(*m.IpProto))
		i--
		dAtA[i] = 0x50
	}
	if m.FlowFlags != nil {
		i = encodeVarintSessionTelemetry(dAtA, i, uint64(*m.FlowFlags))
		i--
		dAtA[i] = 0x48
	}
	if m.FlowType != nil {
		i = encodeVarintSessionTelemetry(dAtA, i, uint64(*m.FlowType))
		i--
		dAtA[i] = 0x40
	}
	if m.DstIsV6 != nil {
		i--
		if *m.DstIsV6 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.SrcIsV6 != nil {
		i--
		if *m.SrcIsV6 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.DstPort != nil {
		i = encodeVarintSessionTelemetry(dAtA, i, uint64(*m.DstPort))
		i--
		dAtA[i] = 0x28
	}
	if m.SrcPort != nil {
		i = encodeVarintSessionTelemetry(dAtA, i, uint64(*m.SrcPort))
		i--
		dAtA[i] = 0x20
	}
	if m.FlowDirection != nil {
		i = encodeVarintSessionTelemetry(dAtA, i, uint64(*m.FlowDirection))
		i--
		dAtA[i] = 0x18
	}
	if m.DstAddr != nil {
		i -= len(*m.DstAddr)
		copy(dAtA[i:], *m.DstAddr)
		i = encodeVarintSessionTelemetry(dAtA, i, uint64(len(*m.DstAddr)))
		i--
		dAtA[i] = 0x12
	}
	if m.SrcAddr != nil {
		i -= len(*m.SrcAddr)
		copy(dAtA[i:], *m.SrcAddr)
		i = encodeVarintSessionTelemetry(dAtA, i, uint64(len(*m.SrcAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSessionTelemetry(dAtA []byte, offset int, v uint64) int {
	offset -= sovSessionTelemetry(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ServicesSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SvcsSessionInfo) > 0 {
		for _, e := range m.SvcsSessionInfo {
			l = e.Size()
			n += 1 + l + sovSessionTelemetry(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SessionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SnFlowInfo) > 0 {
		for _, e := range m.SnFlowInfo {
			l = e.Size()
			n += 1 + l + sovSessionTelemetry(uint64(l))
		}
	}
	if m.SnSvcSetName != nil {
		l = len(*m.SnSvcSetName)
		n += 1 + l + sovSessionTelemetry(uint64(l))
	}
	if m.SnSvcSetId != nil {
		n += 1 + sovSessionTelemetry(uint64(*m.SnSvcSetId))
	}
	if m.SnId != nil {
		n += 1 + sovSessionTelemetry(uint64(*m.SnId))
	}
	if m.SnFlags != nil {
		n += 1 + sovSessionTelemetry(uint64(*m.SnFlags))
	}
	if m.SnAlgId != nil {
		n += 1 + sovSessionTelemetry(uint64(*m.SnAlgId))
	}
	if m.SnRoutingPathType != nil {
		n += 1 + sovSessionTelemetry(uint64(*m.SnRoutingPathType))
	}
	if m.SnSessionTimeout != nil {
		n += 1 + sovSessionTelemetry(uint64(*m.SnSessionTimeout))
	}
	if m.SnState != nil {
		n += 1 + sovSessionTelemetry(uint64(*m.SnState))
	}
	if m.SnSwSessionId != nil {
		n += 1 + sovSessionTelemetry(uint64(*m.SnSwSessionId))
	}
	if m.SnSvcId != nil {
		n += 1 + sovSessionTelemetry(uint64(*m.SnSvcId))
	}
	if m.SnOffload != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FlowInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SrcAddr != nil {
		l = len(*m.SrcAddr)
		n += 1 + l + sovSessionTelemetry(uint64(l))
	}
	if m.DstAddr != nil {
		l = len(*m.DstAddr)
		n += 1 + l + sovSessionTelemetry(uint64(l))
	}
	if m.FlowDirection != nil {
		n += 1 + sovSessionTelemetry(uint64(*m.FlowDirection))
	}
	if m.SrcPort != nil {
		n += 1 + sovSessionTelemetry(uint64(*m.SrcPort))
	}
	if m.DstPort != nil {
		n += 1 + sovSessionTelemetry(uint64(*m.DstPort))
	}
	if m.SrcIsV6 != nil {
		n += 2
	}
	if m.DstIsV6 != nil {
		n += 2
	}
	if m.FlowType != nil {
		n += 1 + sovSessionTelemetry(uint64(*m.FlowType))
	}
	if m.FlowFlags != nil {
		n += 1 + sovSessionTelemetry(uint64(*m.FlowFlags))
	}
	if m.IpProto != nil {
		n += 1 + sovSessionTelemetry(uint64(*m.IpProto))
	}
	if m.IdleTimeout != nil {
		n += 1 + sovSessionTelemetry(uint64(*m.IdleTimeout))
	}
	if m.FlowPacketsIn != nil {
		n += 1 + sovSessionTelemetry(uint64(*m.FlowPacketsIn))
	}
	if m.FlowPacketsOut != nil {
		n += 1 + sovSessionTelemetry(uint64(*m.FlowPacketsOut))
	}
	if m.FlowBytesIn != nil {
		n += 1 + sovSessionTelemetry(uint64(*m.FlowBytesIn))
	}
	if m.FlowBytesOut != nil {
		n += 1 + sovSessionTelemetry(uint64(*m.FlowBytesOut))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSessionTelemetry(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSessionTelemetry(x uint64) (n int) {
	return sovSessionTelemetry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ServicesSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServicesSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServicesSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvcsSessionInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SvcsSessionInfo = append(m.SvcsSessionInfo, &SessionInfo{})
			if err := m.SvcsSessionInfo[len(m.SvcsSessionInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSessionTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSessionTelemetry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSessionTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnFlowInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SnFlowInfo = append(m.SnFlowInfo, &FlowInfo{})
			if err := m.SnFlowInfo[len(m.SnFlowInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnSvcSetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSessionTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SnSvcSetName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnSvcSetId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SnSvcSetId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SnId = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnFlags", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SnFlags = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnAlgId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SnAlgId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnRoutingPathType", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SnRoutingPathType = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnSessionTimeout", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SnSessionTimeout = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnState", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SnState = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnSwSessionId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SnSwSessionId = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnSvcId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SnSvcId = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnOffload", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.SnOffload = &b
		default:
			iNdEx = preIndex
			skippy, err := skipSessionTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSessionTelemetry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSessionTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSessionTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SrcAddr = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSessionTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DstAddr = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowDirection", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FlowDirection = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SrcPort = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DstPort = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcIsV6", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.SrcIsV6 = &b
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstIsV6", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.DstIsV6 = &b
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowType", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FlowType = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowFlags", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FlowFlags = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpProto", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IpProto = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleTimeout", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IdleTimeout = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowPacketsIn", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FlowPacketsIn = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowPacketsOut", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FlowPacketsOut = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowBytesIn", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FlowBytesIn = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowBytesOut", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FlowBytesOut = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSessionTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSessionTelemetry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSessionTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSessionTelemetry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSessionTelemetry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSessionTelemetry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSessionTelemetry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSessionTelemetry
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSessionTelemetry
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSessionTelemetry
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSessionTelemetry        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSessionTelemetry          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSessionTelemetry = fmt.Errorf("proto: unexpected end of group")
)
