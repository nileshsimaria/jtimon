// Copyright (c) 2016, 2017 Juniper Networks, Inc.
// All rights reserved.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.


//
// Version 1.1
//

//
// Shibu Piriyath 2017-09-11
//
// This file defines the messages in Protocol Buffers used by
// the service pic sessions sensor. The top-level message is ServicesSession.
//

syntax = "proto2";
option go_package = "git.juniper.net/iceberg/healthbot-ingest-jti-native/pkg/jti/adapters/_junos/schema";
import "telemetry_top.proto";

//
// This occupies branch 79  from JuniperNetworksSensors

extend JuniperNetworksSensors {
    optional ServicesSession jnprScvsSessionExt = 79;
}

//
// Top-level message
//
//

message ServicesSession {
    repeated SessionInfo    svcs_session_info    = 1;
}

message SessionInfo {
    repeated FlowInfo sn_flow_info               = 1;
    optional string   sn_svc_set_name            = 2[(telemetry_options).is_key = true];
    optional uint64   sn_svc_set_id              = 3;
    optional uint64   sn_id                      = 4;
    optional uint64   sn_flags                   = 5;
    optional uint64   sn_alg_id                  = 6;
    optional uint64   sn_routing_path_type       = 7;
    optional uint64   sn_session_timeout         = 8;
    optional uint64   sn_state                   = 9;
    optional uint64   sn_sw_session_id           = 10;
    optional uint64   sn_svc_id                  = 11;
    optional bool     sn_offload                 = 12;
}

//--------------------------
message FlowInfo {
    optional string  src_addr                    = 1[(telemetry_options).is_key = true];
    optional string  dst_addr                    = 2[(telemetry_options).is_key = true];
    optional uint32  flow_direction              = 3;
    optional uint32  src_port                    = 4;
    optional uint32  dst_port                    = 5;
    optional bool    src_is_v6                   = 6;
    optional bool    dst_is_v6                   = 7;
    optional uint32  flow_type                   = 8;
    optional uint32  flow_flags                  = 9;
    optional uint32  ip_proto                    = 10;
    optional uint64  idle_timeout                = 11;
    optional uint64  flow_packets_in             = 12;
    optional uint64  flow_packets_out            = 13;
    optional uint64  flow_bytes_in               = 14;
    optional uint64  flow_bytes_out              = 15;
}
