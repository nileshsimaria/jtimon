// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: spu_cpu_util.proto

package schema

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type JunosPfeSpuCpu struct {
	Security             *JunosPfeSpuCpuSecurityType `protobuf:"bytes,151,opt,name=security" json:"security,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *JunosPfeSpuCpu) Reset()         { *m = JunosPfeSpuCpu{} }
func (m *JunosPfeSpuCpu) String() string { return proto.CompactTextString(m) }
func (*JunosPfeSpuCpu) ProtoMessage()    {}
func (*JunosPfeSpuCpu) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0270bcf540ee61c, []int{0}
}
func (m *JunosPfeSpuCpu) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosPfeSpuCpu) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosPfeSpuCpu.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosPfeSpuCpu) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosPfeSpuCpu.Merge(m, src)
}
func (m *JunosPfeSpuCpu) XXX_Size() int {
	return m.Size()
}
func (m *JunosPfeSpuCpu) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosPfeSpuCpu.DiscardUnknown(m)
}

var xxx_messageInfo_JunosPfeSpuCpu proto.InternalMessageInfo

func (m *JunosPfeSpuCpu) GetSecurity() *JunosPfeSpuCpuSecurityType {
	if m != nil {
		return m.Security
	}
	return nil
}

type JunosPfeSpuCpuSecurityType struct {
	Spu                  *JunosPfeSpuCpuSecurityTypeSpuType `protobuf:"bytes,151,opt,name=spu" json:"spu,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *JunosPfeSpuCpuSecurityType) Reset()         { *m = JunosPfeSpuCpuSecurityType{} }
func (m *JunosPfeSpuCpuSecurityType) String() string { return proto.CompactTextString(m) }
func (*JunosPfeSpuCpuSecurityType) ProtoMessage()    {}
func (*JunosPfeSpuCpuSecurityType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0270bcf540ee61c, []int{0, 0}
}
func (m *JunosPfeSpuCpuSecurityType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosPfeSpuCpuSecurityType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosPfeSpuCpuSecurityType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosPfeSpuCpuSecurityType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosPfeSpuCpuSecurityType.Merge(m, src)
}
func (m *JunosPfeSpuCpuSecurityType) XXX_Size() int {
	return m.Size()
}
func (m *JunosPfeSpuCpuSecurityType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosPfeSpuCpuSecurityType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosPfeSpuCpuSecurityType proto.InternalMessageInfo

func (m *JunosPfeSpuCpuSecurityType) GetSpu() *JunosPfeSpuCpuSecurityTypeSpuType {
	if m != nil {
		return m.Spu
	}
	return nil
}

type JunosPfeSpuCpuSecurityTypeSpuType struct {
	SpuName              *string                                     `protobuf:"bytes,51,opt,name=spu_name,json=spuName" json:"spu_name,omitempty"`
	Cpu                  []*JunosPfeSpuCpuSecurityTypeSpuTypeCpuList `protobuf:"bytes,151,rep,name=cpu" json:"cpu,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *JunosPfeSpuCpuSecurityTypeSpuType) Reset()         { *m = JunosPfeSpuCpuSecurityTypeSpuType{} }
func (m *JunosPfeSpuCpuSecurityTypeSpuType) String() string { return proto.CompactTextString(m) }
func (*JunosPfeSpuCpuSecurityTypeSpuType) ProtoMessage()    {}
func (*JunosPfeSpuCpuSecurityTypeSpuType) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0270bcf540ee61c, []int{0, 0, 0}
}
func (m *JunosPfeSpuCpuSecurityTypeSpuType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosPfeSpuCpuSecurityTypeSpuType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosPfeSpuCpuSecurityTypeSpuType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosPfeSpuCpuSecurityTypeSpuType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosPfeSpuCpuSecurityTypeSpuType.Merge(m, src)
}
func (m *JunosPfeSpuCpuSecurityTypeSpuType) XXX_Size() int {
	return m.Size()
}
func (m *JunosPfeSpuCpuSecurityTypeSpuType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosPfeSpuCpuSecurityTypeSpuType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosPfeSpuCpuSecurityTypeSpuType proto.InternalMessageInfo

func (m *JunosPfeSpuCpuSecurityTypeSpuType) GetSpuName() string {
	if m != nil && m.SpuName != nil {
		return *m.SpuName
	}
	return ""
}

func (m *JunosPfeSpuCpuSecurityTypeSpuType) GetCpu() []*JunosPfeSpuCpuSecurityTypeSpuTypeCpuList {
	if m != nil {
		return m.Cpu
	}
	return nil
}

type JunosPfeSpuCpuSecurityTypeSpuTypeCpuList struct {
	CpuName              *string  `protobuf:"bytes,52,opt,name=cpu_name,json=cpuName" json:"cpu_name,omitempty"`
	Utilization          *uint32  `protobuf:"varint,53,opt,name=utilization" json:"utilization,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JunosPfeSpuCpuSecurityTypeSpuTypeCpuList) Reset() {
	*m = JunosPfeSpuCpuSecurityTypeSpuTypeCpuList{}
}
func (m *JunosPfeSpuCpuSecurityTypeSpuTypeCpuList) String() string { return proto.CompactTextString(m) }
func (*JunosPfeSpuCpuSecurityTypeSpuTypeCpuList) ProtoMessage()    {}
func (*JunosPfeSpuCpuSecurityTypeSpuTypeCpuList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0270bcf540ee61c, []int{0, 0, 0, 0}
}
func (m *JunosPfeSpuCpuSecurityTypeSpuTypeCpuList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosPfeSpuCpuSecurityTypeSpuTypeCpuList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosPfeSpuCpuSecurityTypeSpuTypeCpuList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosPfeSpuCpuSecurityTypeSpuTypeCpuList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosPfeSpuCpuSecurityTypeSpuTypeCpuList.Merge(m, src)
}
func (m *JunosPfeSpuCpuSecurityTypeSpuTypeCpuList) XXX_Size() int {
	return m.Size()
}
func (m *JunosPfeSpuCpuSecurityTypeSpuTypeCpuList) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosPfeSpuCpuSecurityTypeSpuTypeCpuList.DiscardUnknown(m)
}

var xxx_messageInfo_JunosPfeSpuCpuSecurityTypeSpuTypeCpuList proto.InternalMessageInfo

func (m *JunosPfeSpuCpuSecurityTypeSpuTypeCpuList) GetCpuName() string {
	if m != nil && m.CpuName != nil {
		return *m.CpuName
	}
	return ""
}

func (m *JunosPfeSpuCpuSecurityTypeSpuTypeCpuList) GetUtilization() uint32 {
	if m != nil && m.Utilization != nil {
		return *m.Utilization
	}
	return 0
}

var E_JnprJunosPfeSpuCpuExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*JunosPfeSpuCpu)(nil),
	Field:         130,
	Name:          "jnpr_junos_pfe_spu_cpu_ext",
	Tag:           "bytes,130,opt,name=jnpr_junos_pfe_spu_cpu_ext",
	Filename:      "spu_cpu_util.proto",
}

func init() {
	proto.RegisterType((*JunosPfeSpuCpu)(nil), "junos_pfe_spu_cpu")
	proto.RegisterType((*JunosPfeSpuCpuSecurityType)(nil), "junos_pfe_spu_cpu.security_type")
	proto.RegisterType((*JunosPfeSpuCpuSecurityTypeSpuType)(nil), "junos_pfe_spu_cpu.security_type.spu_type")
	proto.RegisterType((*JunosPfeSpuCpuSecurityTypeSpuTypeCpuList)(nil), "junos_pfe_spu_cpu.security_type.spu_type.cpu_list")
	proto.RegisterExtension(E_JnprJunosPfeSpuCpuExt)
}

func init() { proto.RegisterFile("spu_cpu_util.proto", fileDescriptor_d0270bcf540ee61c) }

var fileDescriptor_d0270bcf540ee61c = []byte{
	// 379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xb1, 0xae, 0xd3, 0x30,
	0x14, 0x86, 0xe5, 0x56, 0xe8, 0x06, 0x57, 0x77, 0xc0, 0x08, 0x11, 0x32, 0x54, 0x11, 0x53, 0x18,
	0x9a, 0x48, 0x05, 0x16, 0x04, 0x12, 0xba, 0xe8, 0x2e, 0x77, 0xa8, 0x50, 0xee, 0xc6, 0x62, 0x7c,
	0xc3, 0x69, 0xea, 0x34, 0xb1, 0x2d, 0xfb, 0x18, 0x5a, 0xc6, 0xce, 0xec, 0xbc, 0x0c, 0x0f, 0xc0,
	0xc8, 0x23, 0x40, 0x9f, 0x04, 0xb9, 0x69, 0x10, 0xa8, 0x03, 0x77, 0x3b, 0xfa, 0x7c, 0xfe, 0xff,
	0x3f, 0xfe, 0x29, 0x73, 0xc6, 0xf3, 0xca, 0x78, 0xee, 0x51, 0xb6, 0xb9, 0xb1, 0x1a, 0x75, 0x72,
	0x1f, 0xa1, 0x85, 0x0e, 0xd0, 0x6e, 0x39, 0x6a, 0xd3, 0xc3, 0xc7, 0xbf, 0x46, 0xf4, 0x5e, 0xe3,
	0x95, 0x76, 0xdc, 0x2c, 0x81, 0x1f, 0x55, 0xec, 0x15, 0x8d, 0x1c, 0x54, 0xde, 0x4a, 0xdc, 0xc6,
	0x5f, 0x49, 0x4a, 0xb2, 0xc9, 0x3c, 0xcd, 0x4f, 0xd6, 0xf2, 0x61, 0x87, 0xe3, 0xd6, 0x40, 0xf9,
	0x47, 0x92, 0x7c, 0x19, 0xd1, 0xf3, 0x7f, 0xde, 0xd8, 0x4b, 0x3a, 0x76, 0xc6, 0x0f, 0x5e, 0x4f,
	0xfe, 0xe7, 0x95, 0x07, 0x7a, 0x30, 0x0d, 0xb2, 0xe4, 0x1b, 0xa1, 0xd1, 0x40, 0xd8, 0xa3, 0x7e,
	0x56, 0xa2, 0x83, 0xf8, 0x69, 0x4a, 0xb2, 0xbb, 0xe5, 0x99, 0x33, 0x7e, 0x21, 0x3a, 0x60, 0x97,
	0x74, 0x5c, 0xf5, 0x29, 0xe3, 0x6c, 0x32, 0x9f, 0xdf, 0x3a, 0x25, 0x0f, 0x4d, 0xb5, 0xd2, 0x61,
	0x19, 0xf4, 0xc9, 0x82, 0x46, 0x03, 0x60, 0x69, 0x3f, 0x1f, 0xd2, 0x9e, 0x85, 0xb4, 0x8b, 0x3b,
	0xbb, 0xd7, 0xa3, 0x88, 0x94, 0x67, 0xd5, 0x31, 0x34, 0xa5, 0x93, 0x50, 0xb2, 0xfc, 0x2c, 0x50,
	0x6a, 0x15, 0x3f, 0x4f, 0x49, 0x76, 0x5e, 0xfe, 0x8d, 0x5e, 0xd4, 0x34, 0x69, 0x94, 0xb1, 0xfc,
	0xe4, 0x1c, 0x0e, 0x1b, 0x64, 0x0f, 0xf3, 0x2b, 0xaf, 0xa4, 0x01, 0xbb, 0x00, 0xfc, 0xa4, 0xed,
	0xda, 0x5d, 0x83, 0x72, 0xda, 0xba, 0x78, 0xd7, 0x97, 0xc5, 0x4e, 0xbf, 0x51, 0x3e, 0x08, 0x7e,
	0x57, 0x01, 0xbf, 0x5d, 0xc2, 0xb5, 0xf1, 0x6f, 0x8c, 0xbf, 0xdc, 0xe0, 0xc5, 0xfb, 0xef, 0xfb,
	0x29, 0xf9, 0xb1, 0x9f, 0x92, 0x9f, 0xfb, 0x29, 0x79, 0x57, 0xd6, 0x12, 0x83, 0x36, 0x78, 0xe7,
	0x0a, 0xb0, 0x90, 0x15, 0xdc, 0x80, 0xad, 0x8b, 0x15, 0x88, 0x16, 0x57, 0x37, 0x1a, 0x67, 0x52,
	0xd5, 0xe0, 0x70, 0xd6, 0xa0, 0x9c, 0x29, 0x81, 0xf2, 0x23, 0x14, 0x66, 0x5d, 0x17, 0x0d, 0xca,
	0x42, 0x7c, 0x10, 0x06, 0xc1, 0xba, 0xa2, 0xbf, 0xba, 0x70, 0xd5, 0x0a, 0x3a, 0xf1, 0x3b, 0x00,
	0x00, 0xff, 0xff, 0x25, 0x6f, 0xbe, 0x4a, 0x58, 0x02, 0x00, 0x00,
}

func (m *JunosPfeSpuCpu) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosPfeSpuCpu) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosPfeSpuCpu) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Security != nil {
		{
			size, err := m.Security.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpuCpuUtil(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *JunosPfeSpuCpuSecurityType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosPfeSpuCpuSecurityType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosPfeSpuCpuSecurityType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Spu != nil {
		{
			size, err := m.Spu.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpuCpuUtil(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *JunosPfeSpuCpuSecurityTypeSpuType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosPfeSpuCpuSecurityTypeSpuType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosPfeSpuCpuSecurityTypeSpuType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Cpu) > 0 {
		for iNdEx := len(m.Cpu) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cpu[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSpuCpuUtil(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	if m.SpuName != nil {
		i -= len(*m.SpuName)
		copy(dAtA[i:], *m.SpuName)
		i = encodeVarintSpuCpuUtil(dAtA, i, uint64(len(*m.SpuName)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *JunosPfeSpuCpuSecurityTypeSpuTypeCpuList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosPfeSpuCpuSecurityTypeSpuTypeCpuList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosPfeSpuCpuSecurityTypeSpuTypeCpuList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Utilization != nil {
		i = encodeVarintSpuCpuUtil(dAtA, i, uint64(*m.Utilization))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.CpuName != nil {
		i -= len(*m.CpuName)
		copy(dAtA[i:], *m.CpuName)
		i = encodeVarintSpuCpuUtil(dAtA, i, uint64(len(*m.CpuName)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}

func encodeVarintSpuCpuUtil(dAtA []byte, offset int, v uint64) int {
	offset -= sovSpuCpuUtil(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *JunosPfeSpuCpu) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Security != nil {
		l = m.Security.Size()
		n += 2 + l + sovSpuCpuUtil(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosPfeSpuCpuSecurityType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Spu != nil {
		l = m.Spu.Size()
		n += 2 + l + sovSpuCpuUtil(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosPfeSpuCpuSecurityTypeSpuType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpuName != nil {
		l = len(*m.SpuName)
		n += 2 + l + sovSpuCpuUtil(uint64(l))
	}
	if len(m.Cpu) > 0 {
		for _, e := range m.Cpu {
			l = e.Size()
			n += 2 + l + sovSpuCpuUtil(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosPfeSpuCpuSecurityTypeSpuTypeCpuList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CpuName != nil {
		l = len(*m.CpuName)
		n += 2 + l + sovSpuCpuUtil(uint64(l))
	}
	if m.Utilization != nil {
		n += 2 + sovSpuCpuUtil(uint64(*m.Utilization))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSpuCpuUtil(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSpuCpuUtil(x uint64) (n int) {
	return sovSpuCpuUtil(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *JunosPfeSpuCpu) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpuCpuUtil
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: junos_pfe_spu_cpu: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: junos_pfe_spu_cpu: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Security", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuCpuUtil
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpuCpuUtil
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpuCpuUtil
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Security == nil {
				m.Security = &JunosPfeSpuCpuSecurityType{}
			}
			if err := m.Security.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpuCpuUtil(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpuCpuUtil
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpuCpuUtil
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosPfeSpuCpuSecurityType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpuCpuUtil
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: security_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: security_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuCpuUtil
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpuCpuUtil
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpuCpuUtil
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spu == nil {
				m.Spu = &JunosPfeSpuCpuSecurityTypeSpuType{}
			}
			if err := m.Spu.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpuCpuUtil(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpuCpuUtil
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpuCpuUtil
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosPfeSpuCpuSecurityTypeSpuType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpuCpuUtil
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: spu_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: spu_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpuName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuCpuUtil
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpuCpuUtil
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpuCpuUtil
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SpuName = &s
			iNdEx = postIndex
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuCpuUtil
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpuCpuUtil
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpuCpuUtil
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cpu = append(m.Cpu, &JunosPfeSpuCpuSecurityTypeSpuTypeCpuList{})
			if err := m.Cpu[len(m.Cpu)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpuCpuUtil(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpuCpuUtil
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpuCpuUtil
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosPfeSpuCpuSecurityTypeSpuTypeCpuList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpuCpuUtil
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cpu_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cpu_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuCpuUtil
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpuCpuUtil
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpuCpuUtil
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CpuName = &s
			iNdEx = postIndex
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Utilization", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuCpuUtil
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Utilization = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSpuCpuUtil(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpuCpuUtil
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpuCpuUtil
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSpuCpuUtil(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSpuCpuUtil
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpuCpuUtil
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpuCpuUtil
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSpuCpuUtil
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSpuCpuUtil
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSpuCpuUtil
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSpuCpuUtil        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSpuCpuUtil          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSpuCpuUtil = fmt.Errorf("proto: unexpected end of group")
)
