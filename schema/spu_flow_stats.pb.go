// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: spu_flow_stats.proto

package schema

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type JunosPfeSpuFlow struct {
	Security             *JunosPfeSpuFlowSecurityType `protobuf:"bytes,151,opt,name=security" json:"security,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *JunosPfeSpuFlow) Reset()         { *m = JunosPfeSpuFlow{} }
func (m *JunosPfeSpuFlow) String() string { return proto.CompactTextString(m) }
func (*JunosPfeSpuFlow) ProtoMessage()    {}
func (*JunosPfeSpuFlow) Descriptor() ([]byte, []int) {
	return fileDescriptor_03cee703f3715224, []int{0}
}
func (m *JunosPfeSpuFlow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosPfeSpuFlow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosPfeSpuFlow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosPfeSpuFlow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosPfeSpuFlow.Merge(m, src)
}
func (m *JunosPfeSpuFlow) XXX_Size() int {
	return m.Size()
}
func (m *JunosPfeSpuFlow) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosPfeSpuFlow.DiscardUnknown(m)
}

var xxx_messageInfo_JunosPfeSpuFlow proto.InternalMessageInfo

func (m *JunosPfeSpuFlow) GetSecurity() *JunosPfeSpuFlowSecurityType {
	if m != nil {
		return m.Security
	}
	return nil
}

type JunosPfeSpuFlowSecurityType struct {
	Spu                  *JunosPfeSpuFlowSecurityTypeSpuType `protobuf:"bytes,151,opt,name=spu" json:"spu,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *JunosPfeSpuFlowSecurityType) Reset()         { *m = JunosPfeSpuFlowSecurityType{} }
func (m *JunosPfeSpuFlowSecurityType) String() string { return proto.CompactTextString(m) }
func (*JunosPfeSpuFlowSecurityType) ProtoMessage()    {}
func (*JunosPfeSpuFlowSecurityType) Descriptor() ([]byte, []int) {
	return fileDescriptor_03cee703f3715224, []int{0, 0}
}
func (m *JunosPfeSpuFlowSecurityType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosPfeSpuFlowSecurityType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosPfeSpuFlowSecurityType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosPfeSpuFlowSecurityType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosPfeSpuFlowSecurityType.Merge(m, src)
}
func (m *JunosPfeSpuFlowSecurityType) XXX_Size() int {
	return m.Size()
}
func (m *JunosPfeSpuFlowSecurityType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosPfeSpuFlowSecurityType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosPfeSpuFlowSecurityType proto.InternalMessageInfo

func (m *JunosPfeSpuFlowSecurityType) GetSpu() *JunosPfeSpuFlowSecurityTypeSpuType {
	if m != nil {
		return m.Spu
	}
	return nil
}

type JunosPfeSpuFlowSecurityTypeSpuType struct {
	SpuName              *string                                     `protobuf:"bytes,51,opt,name=spu_name,json=spuName" json:"spu_name,omitempty"`
	Flow                 *JunosPfeSpuFlowSecurityTypeSpuTypeFlowType `protobuf:"bytes,151,opt,name=flow" json:"flow,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *JunosPfeSpuFlowSecurityTypeSpuType) Reset()         { *m = JunosPfeSpuFlowSecurityTypeSpuType{} }
func (m *JunosPfeSpuFlowSecurityTypeSpuType) String() string { return proto.CompactTextString(m) }
func (*JunosPfeSpuFlowSecurityTypeSpuType) ProtoMessage()    {}
func (*JunosPfeSpuFlowSecurityTypeSpuType) Descriptor() ([]byte, []int) {
	return fileDescriptor_03cee703f3715224, []int{0, 0, 0}
}
func (m *JunosPfeSpuFlowSecurityTypeSpuType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosPfeSpuFlowSecurityTypeSpuType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosPfeSpuFlowSecurityTypeSpuType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuType.Merge(m, src)
}
func (m *JunosPfeSpuFlowSecurityTypeSpuType) XXX_Size() int {
	return m.Size()
}
func (m *JunosPfeSpuFlowSecurityTypeSpuType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuType proto.InternalMessageInfo

func (m *JunosPfeSpuFlowSecurityTypeSpuType) GetSpuName() string {
	if m != nil && m.SpuName != nil {
		return *m.SpuName
	}
	return ""
}

func (m *JunosPfeSpuFlowSecurityTypeSpuType) GetFlow() *JunosPfeSpuFlowSecurityTypeSpuTypeFlowType {
	if m != nil {
		return m.Flow
	}
	return nil
}

type JunosPfeSpuFlowSecurityTypeSpuTypeFlowType struct {
	StatsScope           *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType `protobuf:"bytes,151,opt,name=stats_scope,json=statsScope" json:"stats_scope,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                  `json:"-"`
	XXX_unrecognized     []byte                                                    `json:"-"`
	XXX_sizecache        int32                                                     `json:"-"`
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowType) Reset() {
	*m = JunosPfeSpuFlowSecurityTypeSpuTypeFlowType{}
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowType) String() string {
	return proto.CompactTextString(m)
}
func (*JunosPfeSpuFlowSecurityTypeSpuTypeFlowType) ProtoMessage() {}
func (*JunosPfeSpuFlowSecurityTypeSpuTypeFlowType) Descriptor() ([]byte, []int) {
	return fileDescriptor_03cee703f3715224, []int{0, 0, 0, 0}
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuTypeFlowType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuTypeFlowType.Merge(m, src)
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowType) XXX_Size() int {
	return m.Size()
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuTypeFlowType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuTypeFlowType proto.InternalMessageInfo

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowType) GetStatsScope() *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType {
	if m != nil {
		return m.StatsScope
	}
	return nil
}

type JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType struct {
	System               *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType    `protobuf:"bytes,151,opt,name=system" json:"system,omitempty"`
	LsysScope            *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeType `protobuf:"bytes,152,opt,name=lsys_scope,json=lsysScope" json:"lsys_scope,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                               `json:"-"`
	XXX_unrecognized     []byte                                                                 `json:"-"`
	XXX_sizecache        int32                                                                  `json:"-"`
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType) Reset() {
	*m = JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType{}
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType) String() string {
	return proto.CompactTextString(m)
}
func (*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType) ProtoMessage() {}
func (*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType) Descriptor() ([]byte, []int) {
	return fileDescriptor_03cee703f3715224, []int{0, 0, 0, 0, 0}
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType.Merge(m, src)
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType) XXX_Size() int {
	return m.Size()
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType proto.InternalMessageInfo

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType) GetSystem() *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType {
	if m != nil {
		return m.System
	}
	return nil
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType) GetLsysScope() *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeType {
	if m != nil {
		return m.LsysScope
	}
	return nil
}

type JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType struct {
	Session              *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType `protobuf:"bytes,151,opt,name=session" json:"session,omitempty"`
	Packet               *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType  `protobuf:"bytes,152,opt,name=packet" json:"packet,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                       `json:"-"`
	XXX_unrecognized     []byte                                                                         `json:"-"`
	XXX_sizecache        int32                                                                          `json:"-"`
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType) Reset() {
	*m = JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType{}
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType) String() string {
	return proto.CompactTextString(m)
}
func (*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType) ProtoMessage() {}
func (*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType) Descriptor() ([]byte, []int) {
	return fileDescriptor_03cee703f3715224, []int{0, 0, 0, 0, 0, 0}
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType.Merge(m, src)
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType) XXX_Size() int {
	return m.Size()
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType proto.InternalMessageInfo

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType) GetSession() *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType) GetPacket() *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType {
	if m != nil {
		return m.Packet
	}
	return nil
}

type JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType struct {
	NoV4                 *uint32  `protobuf:"varint,51,opt,name=no_v4,json=noV4" json:"no_v4,omitempty"`
	NoV6                 *uint32  `protobuf:"varint,52,opt,name=no_v6,json=noV6" json:"no_v6,omitempty"`
	NoUnicast            *uint32  `protobuf:"varint,53,opt,name=no_unicast,json=noUnicast" json:"no_unicast,omitempty"`
	NoMulticast          *uint32  `protobuf:"varint,54,opt,name=no_multicast,json=noMulticast" json:"no_multicast,omitempty"`
	NoSof                *uint32  `protobuf:"varint,55,opt,name=no_sof,json=noSof" json:"no_sof,omitempty"`
	NoNat                *uint32  `protobuf:"varint,56,opt,name=no_nat,json=noNat" json:"no_nat,omitempty"`
	NoSsl                *uint32  `protobuf:"varint,57,opt,name=no_ssl,json=noSsl" json:"no_ssl,omitempty"`
	NoTunnel             *uint32  `protobuf:"varint,58,opt,name=no_tunnel,json=noTunnel" json:"no_tunnel,omitempty"`
	NoFailed             *uint32  `protobuf:"varint,59,opt,name=no_failed,json=noFailed" json:"no_failed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType) Reset() {
	*m = JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType{}
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType) String() string {
	return proto.CompactTextString(m)
}
func (*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType) ProtoMessage() {
}
func (*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType) Descriptor() ([]byte, []int) {
	return fileDescriptor_03cee703f3715224, []int{0, 0, 0, 0, 0, 0, 0}
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType.Merge(m, src)
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType) XXX_Size() int {
	return m.Size()
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType proto.InternalMessageInfo

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType) GetNoV4() uint32 {
	if m != nil && m.NoV4 != nil {
		return *m.NoV4
	}
	return 0
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType) GetNoV6() uint32 {
	if m != nil && m.NoV6 != nil {
		return *m.NoV6
	}
	return 0
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType) GetNoUnicast() uint32 {
	if m != nil && m.NoUnicast != nil {
		return *m.NoUnicast
	}
	return 0
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType) GetNoMulticast() uint32 {
	if m != nil && m.NoMulticast != nil {
		return *m.NoMulticast
	}
	return 0
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType) GetNoSof() uint32 {
	if m != nil && m.NoSof != nil {
		return *m.NoSof
	}
	return 0
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType) GetNoNat() uint32 {
	if m != nil && m.NoNat != nil {
		return *m.NoNat
	}
	return 0
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType) GetNoSsl() uint32 {
	if m != nil && m.NoSsl != nil {
		return *m.NoSsl
	}
	return 0
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType) GetNoTunnel() uint32 {
	if m != nil && m.NoTunnel != nil {
		return *m.NoTunnel
	}
	return 0
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType) GetNoFailed() uint32 {
	if m != nil && m.NoFailed != nil {
		return *m.NoFailed
	}
	return 0
}

type JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType struct {
	PktReceived          *uint64  `protobuf:"varint,51,opt,name=pkt_received,json=pktReceived" json:"pkt_received,omitempty"`
	PktTransmitted       *uint64  `protobuf:"varint,52,opt,name=pkt_transmitted,json=pktTransmitted" json:"pkt_transmitted,omitempty"`
	PktDropped           *uint64  `protobuf:"varint,53,opt,name=pkt_dropped,json=pktDropped" json:"pkt_dropped,omitempty"`
	FragmentsReceived    *uint64  `protobuf:"varint,54,opt,name=fragments_received,json=fragmentsReceived" json:"fragments_received,omitempty"`
	PreFragments         *uint64  `protobuf:"varint,55,opt,name=pre_fragments,json=preFragments" json:"pre_fragments,omitempty"`
	PostFragments        *uint64  `protobuf:"varint,56,opt,name=post_fragments,json=postFragments" json:"post_fragments,omitempty"`
	PmiReceived          *uint64  `protobuf:"varint,57,opt,name=pmi_received,json=pmiReceived" json:"pmi_received,omitempty"`
	PmiTransmitted       *uint64  `protobuf:"varint,58,opt,name=pmi_transmitted,json=pmiTransmitted" json:"pmi_transmitted,omitempty"`
	PmiDropped           *uint64  `protobuf:"varint,59,opt,name=pmi_dropped,json=pmiDropped" json:"pmi_dropped,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType) Reset() {
	*m = JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType{}
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType) String() string {
	return proto.CompactTextString(m)
}
func (*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType) ProtoMessage() {}
func (*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType) Descriptor() ([]byte, []int) {
	return fileDescriptor_03cee703f3715224, []int{0, 0, 0, 0, 0, 0, 1}
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType.Merge(m, src)
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType) XXX_Size() int {
	return m.Size()
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType proto.InternalMessageInfo

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType) GetPktReceived() uint64 {
	if m != nil && m.PktReceived != nil {
		return *m.PktReceived
	}
	return 0
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType) GetPktTransmitted() uint64 {
	if m != nil && m.PktTransmitted != nil {
		return *m.PktTransmitted
	}
	return 0
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType) GetPktDropped() uint64 {
	if m != nil && m.PktDropped != nil {
		return *m.PktDropped
	}
	return 0
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType) GetFragmentsReceived() uint64 {
	if m != nil && m.FragmentsReceived != nil {
		return *m.FragmentsReceived
	}
	return 0
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType) GetPreFragments() uint64 {
	if m != nil && m.PreFragments != nil {
		return *m.PreFragments
	}
	return 0
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType) GetPostFragments() uint64 {
	if m != nil && m.PostFragments != nil {
		return *m.PostFragments
	}
	return 0
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType) GetPmiReceived() uint64 {
	if m != nil && m.PmiReceived != nil {
		return *m.PmiReceived
	}
	return 0
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType) GetPmiTransmitted() uint64 {
	if m != nil && m.PmiTransmitted != nil {
		return *m.PmiTransmitted
	}
	return 0
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType) GetPmiDropped() uint64 {
	if m != nil && m.PmiDropped != nil {
		return *m.PmiDropped
	}
	return 0
}

type JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeType struct {
	Lsys                 []*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList `protobuf:"bytes,152,rep,name=lsys" json:"lsys,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                         `json:"-"`
	XXX_unrecognized     []byte                                                                           `json:"-"`
	XXX_sizecache        int32                                                                            `json:"-"`
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeType) Reset() {
	*m = JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeType{}
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeType) String() string {
	return proto.CompactTextString(m)
}
func (*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeType) ProtoMessage() {}
func (*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeType) Descriptor() ([]byte, []int) {
	return fileDescriptor_03cee703f3715224, []int{0, 0, 0, 0, 0, 1}
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeType.Merge(m, src)
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeType) XXX_Size() int {
	return m.Size()
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeType proto.InternalMessageInfo

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeType) GetLsys() []*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList {
	if m != nil {
		return m.Lsys
	}
	return nil
}

type JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList struct {
	LsysName             *string                                                                                   `protobuf:"bytes,151,opt,name=lsys_name,json=lsysName" json:"lsys_name,omitempty"`
	Session              *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType `protobuf:"bytes,152,opt,name=session" json:"session,omitempty"`
	Packet               *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType  `protobuf:"bytes,153,opt,name=packet" json:"packet,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                                  `json:"-"`
	XXX_unrecognized     []byte                                                                                    `json:"-"`
	XXX_sizecache        int32                                                                                     `json:"-"`
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList) Reset() {
	*m = JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList{}
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList) String() string {
	return proto.CompactTextString(m)
}
func (*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList) ProtoMessage() {
}
func (*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList) Descriptor() ([]byte, []int) {
	return fileDescriptor_03cee703f3715224, []int{0, 0, 0, 0, 0, 1, 0}
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList.Merge(m, src)
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList) XXX_Size() int {
	return m.Size()
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList.DiscardUnknown(m)
}

var xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList proto.InternalMessageInfo

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList) GetLsysName() string {
	if m != nil && m.LsysName != nil {
		return *m.LsysName
	}
	return ""
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList) GetSession() *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList) GetPacket() *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType {
	if m != nil {
		return m.Packet
	}
	return nil
}

type JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType struct {
	NoV4                 *uint32  `protobuf:"varint,51,opt,name=no_v4,json=noV4" json:"no_v4,omitempty"`
	NoV6                 *uint32  `protobuf:"varint,52,opt,name=no_v6,json=noV6" json:"no_v6,omitempty"`
	NoUnicast            *uint32  `protobuf:"varint,53,opt,name=no_unicast,json=noUnicast" json:"no_unicast,omitempty"`
	NoMulticast          *uint32  `protobuf:"varint,54,opt,name=no_multicast,json=noMulticast" json:"no_multicast,omitempty"`
	NoSof                *uint32  `protobuf:"varint,55,opt,name=no_sof,json=noSof" json:"no_sof,omitempty"`
	NoNat                *uint32  `protobuf:"varint,56,opt,name=no_nat,json=noNat" json:"no_nat,omitempty"`
	NoSsl                *uint32  `protobuf:"varint,57,opt,name=no_ssl,json=noSsl" json:"no_ssl,omitempty"`
	NoTunnel             *uint32  `protobuf:"varint,58,opt,name=no_tunnel,json=noTunnel" json:"no_tunnel,omitempty"`
	NoFailed             *uint32  `protobuf:"varint,59,opt,name=no_failed,json=noFailed" json:"no_failed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType) Reset() {
	*m = JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType{}
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType) String() string {
	return proto.CompactTextString(m)
}
func (*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType) ProtoMessage() {
}
func (*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType) Descriptor() ([]byte, []int) {
	return fileDescriptor_03cee703f3715224, []int{0, 0, 0, 0, 0, 1, 0, 0}
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType.Merge(m, src)
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType) XXX_Size() int {
	return m.Size()
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType proto.InternalMessageInfo

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType) GetNoV4() uint32 {
	if m != nil && m.NoV4 != nil {
		return *m.NoV4
	}
	return 0
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType) GetNoV6() uint32 {
	if m != nil && m.NoV6 != nil {
		return *m.NoV6
	}
	return 0
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType) GetNoUnicast() uint32 {
	if m != nil && m.NoUnicast != nil {
		return *m.NoUnicast
	}
	return 0
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType) GetNoMulticast() uint32 {
	if m != nil && m.NoMulticast != nil {
		return *m.NoMulticast
	}
	return 0
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType) GetNoSof() uint32 {
	if m != nil && m.NoSof != nil {
		return *m.NoSof
	}
	return 0
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType) GetNoNat() uint32 {
	if m != nil && m.NoNat != nil {
		return *m.NoNat
	}
	return 0
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType) GetNoSsl() uint32 {
	if m != nil && m.NoSsl != nil {
		return *m.NoSsl
	}
	return 0
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType) GetNoTunnel() uint32 {
	if m != nil && m.NoTunnel != nil {
		return *m.NoTunnel
	}
	return 0
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType) GetNoFailed() uint32 {
	if m != nil && m.NoFailed != nil {
		return *m.NoFailed
	}
	return 0
}

type JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType struct {
	PktReceived          *uint64  `protobuf:"varint,51,opt,name=pkt_received,json=pktReceived" json:"pkt_received,omitempty"`
	PktTransmitted       *uint64  `protobuf:"varint,52,opt,name=pkt_transmitted,json=pktTransmitted" json:"pkt_transmitted,omitempty"`
	PktDropped           *uint64  `protobuf:"varint,53,opt,name=pkt_dropped,json=pktDropped" json:"pkt_dropped,omitempty"`
	FragmentsReceived    *uint64  `protobuf:"varint,54,opt,name=fragments_received,json=fragmentsReceived" json:"fragments_received,omitempty"`
	PreFragments         *uint64  `protobuf:"varint,55,opt,name=pre_fragments,json=preFragments" json:"pre_fragments,omitempty"`
	PostFragments        *uint64  `protobuf:"varint,56,opt,name=post_fragments,json=postFragments" json:"post_fragments,omitempty"`
	PmiReceived          *uint64  `protobuf:"varint,57,opt,name=pmi_received,json=pmiReceived" json:"pmi_received,omitempty"`
	PmiTransmitted       *uint64  `protobuf:"varint,58,opt,name=pmi_transmitted,json=pmiTransmitted" json:"pmi_transmitted,omitempty"`
	PmiDropped           *uint64  `protobuf:"varint,59,opt,name=pmi_dropped,json=pmiDropped" json:"pmi_dropped,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType) Reset() {
	*m = JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType{}
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType) String() string {
	return proto.CompactTextString(m)
}
func (*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType) ProtoMessage() {
}
func (*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType) Descriptor() ([]byte, []int) {
	return fileDescriptor_03cee703f3715224, []int{0, 0, 0, 0, 0, 1, 0, 1}
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType.Merge(m, src)
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType) XXX_Size() int {
	return m.Size()
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType.DiscardUnknown(m)
}

var xxx_messageInfo_JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType proto.InternalMessageInfo

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType) GetPktReceived() uint64 {
	if m != nil && m.PktReceived != nil {
		return *m.PktReceived
	}
	return 0
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType) GetPktTransmitted() uint64 {
	if m != nil && m.PktTransmitted != nil {
		return *m.PktTransmitted
	}
	return 0
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType) GetPktDropped() uint64 {
	if m != nil && m.PktDropped != nil {
		return *m.PktDropped
	}
	return 0
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType) GetFragmentsReceived() uint64 {
	if m != nil && m.FragmentsReceived != nil {
		return *m.FragmentsReceived
	}
	return 0
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType) GetPreFragments() uint64 {
	if m != nil && m.PreFragments != nil {
		return *m.PreFragments
	}
	return 0
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType) GetPostFragments() uint64 {
	if m != nil && m.PostFragments != nil {
		return *m.PostFragments
	}
	return 0
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType) GetPmiReceived() uint64 {
	if m != nil && m.PmiReceived != nil {
		return *m.PmiReceived
	}
	return 0
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType) GetPmiTransmitted() uint64 {
	if m != nil && m.PmiTransmitted != nil {
		return *m.PmiTransmitted
	}
	return 0
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType) GetPmiDropped() uint64 {
	if m != nil && m.PmiDropped != nil {
		return *m.PmiDropped
	}
	return 0
}

var E_JnprJunosPfeSpuFlowExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*JunosPfeSpuFlow)(nil),
	Field:         131,
	Name:          "jnpr_junos_pfe_spu_flow_ext",
	Tag:           "bytes,131,opt,name=jnpr_junos_pfe_spu_flow_ext",
	Filename:      "spu_flow_stats.proto",
}

func init() {
	proto.RegisterType((*JunosPfeSpuFlow)(nil), "junos_pfe_spu_flow")
	proto.RegisterType((*JunosPfeSpuFlowSecurityType)(nil), "junos_pfe_spu_flow.security_type")
	proto.RegisterType((*JunosPfeSpuFlowSecurityTypeSpuType)(nil), "junos_pfe_spu_flow.security_type.spu_type")
	proto.RegisterType((*JunosPfeSpuFlowSecurityTypeSpuTypeFlowType)(nil), "junos_pfe_spu_flow.security_type.spu_type.flow_type")
	proto.RegisterType((*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType)(nil), "junos_pfe_spu_flow.security_type.spu_type.flow_type.stats_scope_type")
	proto.RegisterType((*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType)(nil), "junos_pfe_spu_flow.security_type.spu_type.flow_type.stats_scope_type.system_type")
	proto.RegisterType((*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType)(nil), "junos_pfe_spu_flow.security_type.spu_type.flow_type.stats_scope_type.system_type.session_type")
	proto.RegisterType((*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType)(nil), "junos_pfe_spu_flow.security_type.spu_type.flow_type.stats_scope_type.system_type.packet_type")
	proto.RegisterType((*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeType)(nil), "junos_pfe_spu_flow.security_type.spu_type.flow_type.stats_scope_type.lsys_scope_type")
	proto.RegisterType((*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList)(nil), "junos_pfe_spu_flow.security_type.spu_type.flow_type.stats_scope_type.lsys_scope_type.lsys_list")
	proto.RegisterType((*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType)(nil), "junos_pfe_spu_flow.security_type.spu_type.flow_type.stats_scope_type.lsys_scope_type.lsys_list.session_type")
	proto.RegisterType((*JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType)(nil), "junos_pfe_spu_flow.security_type.spu_type.flow_type.stats_scope_type.lsys_scope_type.lsys_list.packet_type")
	proto.RegisterExtension(E_JnprJunosPfeSpuFlowExt)
}

func init() { proto.RegisterFile("spu_flow_stats.proto", fileDescriptor_03cee703f3715224) }

var fileDescriptor_03cee703f3715224 = []byte{
	// 851 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x54, 0x4f, 0x6f, 0x1c, 0xc5,
	0x13, 0xd5, 0x24, 0x6b, 0x7b, 0xb7, 0xd6, 0x4e, 0x7e, 0x6e, 0xe7, 0x07, 0xc3, 0x44, 0x98, 0x84,
	0x08, 0x61, 0x21, 0x79, 0x56, 0x0a, 0xc6, 0x24, 0x8e, 0x40, 0x28, 0x22, 0x96, 0x88, 0x84, 0x05,
	0xe3, 0x84, 0x03, 0x12, 0x34, 0x93, 0xdd, 0xda, 0x75, 0xef, 0xce, 0x74, 0xb7, 0xa6, 0x6b, 0xec,
	0xec, 0x15, 0x90, 0xe0, 0x1b, 0xf0, 0xe7, 0xc8, 0x99, 0x6f, 0xc1, 0x85, 0x23, 0x1f, 0x01, 0xfc,
	0x11, 0xb8, 0x71, 0x02, 0x75, 0xf7, 0xcc, 0xec, 0xda, 0x01, 0x81, 0x90, 0xcd, 0x29, 0xb7, 0xe9,
	0x57, 0xaf, 0xdf, 0xab, 0x57, 0x9a, 0x2e, 0xb8, 0x62, 0x74, 0xc9, 0x87, 0x99, 0x3a, 0xe2, 0x86,
	0x52, 0x32, 0xb1, 0x2e, 0x14, 0xa9, 0x68, 0x8d, 0x30, 0xc3, 0x1c, 0xa9, 0x98, 0x72, 0x52, 0xda,
	0x83, 0x2f, 0x7e, 0x7b, 0x05, 0xd8, 0xb8, 0x94, 0xca, 0x70, 0x3d, 0x44, 0x5e, 0xdf, 0x63, 0x6f,
	0x42, 0xdb, 0x60, 0xbf, 0x2c, 0x04, 0x4d, 0xc3, 0xaf, 0x82, 0x6b, 0xc1, 0x46, 0xf7, 0xe6, 0xf5,
	0xf8, 0x49, 0x5e, 0x5c, 0x93, 0x38, 0x4d, 0x35, 0x26, 0xcd, 0x9d, 0xe8, 0x87, 0x35, 0x58, 0x39,
	0x51, 0x63, 0x6f, 0xc0, 0x45, 0xa3, 0xcb, 0x5a, 0xec, 0x95, 0xbf, 0x15, 0x8b, 0x2d, 0xec, 0x54,
	0xed, 0xbd, 0xe8, 0x57, 0x06, 0xed, 0x1a, 0x61, 0xcf, 0xf9, 0x6f, 0x99, 0xe6, 0x18, 0xbe, 0x7a,
	0x2d, 0xd8, 0xe8, 0x24, 0x4b, 0x46, 0x97, 0x7b, 0x69, 0x8e, 0xec, 0x1d, 0x68, 0x59, 0xad, 0xda,
	0x67, 0xeb, 0x9f, 0xfb, 0xc4, 0x6e, 0x60, 0xce, 0xd1, 0x49, 0x44, 0xbf, 0xaf, 0x42, 0xa7, 0xc1,
	0xd8, 0x08, 0xba, 0x6e, 0x98, 0xdc, 0xf4, 0x95, 0xc6, 0x5a, 0xff, 0xde, 0xbf, 0xd1, 0x8f, 0xe7,
	0x84, 0xbc, 0x21, 0x38, 0x64, 0xdf, 0x02, 0xd1, 0x97, 0xab, 0xf0, 0xbf, 0xd3, 0x04, 0x36, 0x86,
	0x45, 0x33, 0x35, 0x84, 0x79, 0x6d, 0xfc, 0xfe, 0x99, 0x18, 0xc7, 0x5e, 0xd4, 0x37, 0x51, 0x39,
	0xb0, 0x12, 0x20, 0x33, 0xd3, 0x3a, 0xe8, 0xd7, 0xde, 0xef, 0xe1, 0xd9, 0xf8, 0xcd, 0x84, 0xbd,
	0x67, 0xc7, 0x02, 0x3e, 0xf7, 0x2f, 0x8b, 0xd0, 0x9d, 0x6b, 0x87, 0x4d, 0x61, 0xc9, 0xa0, 0x31,
	0x42, 0xc9, 0x3a, 0xf3, 0xc7, 0x67, 0x9e, 0x39, 0xae, 0x1c, 0x7c, 0x33, 0xb5, 0x1f, 0x3b, 0x84,
	0x45, 0x9d, 0xf6, 0x27, 0x48, 0x75, 0xfa, 0x8f, 0xce, 0xde, 0xd9, 0x1b, 0x54, 0x93, 0xf7, 0x87,
	0xe8, 0xb7, 0x00, 0x96, 0xe7, 0x3b, 0x62, 0x6b, 0xb0, 0x20, 0x15, 0x3f, 0xdc, 0x72, 0x7f, 0xf9,
	0x4a, 0xd2, 0x92, 0xea, 0x83, 0xad, 0x1a, 0xdc, 0x0e, 0xb7, 0x1a, 0x70, 0x9b, 0x3d, 0x0f, 0x20,
	0x15, 0x2f, 0xa5, 0xe8, 0xa7, 0x86, 0xc2, 0xd7, 0x5c, 0xa5, 0x23, 0xd5, 0x43, 0x0f, 0xb0, 0xeb,
	0xb0, 0x2c, 0x15, 0xcf, 0xcb, 0x8c, 0x3c, 0x61, 0xdb, 0x11, 0xba, 0x52, 0xbd, 0x5b, 0x43, 0xec,
	0xff, 0xb0, 0x28, 0x15, 0x37, 0x6a, 0x18, 0xbe, 0xee, 0x8a, 0x0b, 0x52, 0xed, 0xab, 0x61, 0x05,
	0xcb, 0x94, 0xc2, 0x5b, 0x35, 0xbc, 0x97, 0x36, 0x6c, 0x93, 0x85, 0xb7, 0x1b, 0xb6, 0xc9, 0xd8,
	0x55, 0xe8, 0x48, 0xc5, 0xa9, 0x94, 0x12, 0xb3, 0x70, 0xc7, 0x55, 0xda, 0x52, 0x3d, 0x70, 0xe7,
	0xaa, 0x38, 0x4c, 0x45, 0x86, 0x83, 0xf0, 0x4e, 0x5d, 0xdc, 0x75, 0xe7, 0xe8, 0xf8, 0x02, 0x74,
	0xe7, 0x66, 0x62, 0x3b, 0xd6, 0x13, 0xe2, 0x05, 0xf6, 0x51, 0x1c, 0xe2, 0xc0, 0x4d, 0xa0, 0x95,
	0x74, 0xf5, 0x84, 0x92, 0x0a, 0x62, 0x2f, 0xc3, 0x65, 0x4b, 0xa1, 0x22, 0x95, 0x26, 0x17, 0x44,
	0x38, 0x70, 0x23, 0x69, 0x25, 0x97, 0xf4, 0x84, 0x1e, 0xcc, 0x50, 0xf6, 0x02, 0xd8, 0x7b, 0x7c,
	0x50, 0x28, 0xad, 0x71, 0xe0, 0xa6, 0xd3, 0x4a, 0x40, 0x4f, 0xe8, 0x6d, 0x8f, 0xb0, 0x4d, 0x60,
	0xc3, 0x22, 0x1d, 0xe5, 0x28, 0xc9, 0xcc, 0x2c, 0xb7, 0x1d, 0x6f, 0xb5, 0xa9, 0x34, 0xc6, 0x37,
	0x60, 0x45, 0x17, 0xc8, 0x9b, 0x82, 0x9b, 0x58, 0x2b, 0x59, 0xd6, 0x05, 0xee, 0xd6, 0x18, 0x7b,
	0x09, 0x2e, 0x69, 0x65, 0x68, 0x8e, 0x75, 0xcb, 0xb1, 0x56, 0x2c, 0x3a, 0xa3, 0xd9, 0x9c, 0xb9,
	0x98, 0x99, 0xde, 0xae, 0x72, 0xe6, 0xe2, 0x44, 0xce, 0x5c, 0x9c, 0xc8, 0xb9, 0x53, 0xe5, 0xcc,
	0xc5, 0xe9, 0x9c, 0xb9, 0x68, 0x72, 0xde, 0xa9, 0x72, 0xe6, 0xa2, 0xca, 0x19, 0x7d, 0xdf, 0x86,
	0xcb, 0xa7, 0x9e, 0x20, 0x23, 0x68, 0x59, 0xc8, 0xfe, 0xea, 0x17, 0x37, 0xba, 0x37, 0xf9, 0xb9,
	0x3c, 0x74, 0x7f, 0xce, 0x84, 0xa1, 0xc4, 0xb9, 0x45, 0xdf, 0x2d, 0x41, 0xa7, 0xc1, 0xd8, 0x8d,
	0xea, 0xe0, 0x36, 0xba, 0x7b, 0xed, 0x9d, 0xbb, 0x0b, 0x9f, 0xbe, 0x75, 0xa1, 0x1d, 0x24, 0x6d,
	0x5b, 0x70, 0xab, 0xfd, 0x8b, 0x60, 0xb6, 0x11, 0xaa, 0x77, 0x99, 0x9d, 0x73, 0xb3, 0x7f, 0xb1,
	0x1f, 0x3e, 0x0f, 0x9a, 0x05, 0xf1, 0x8d, 0x6f, 0x64, 0x72, 0xde, 0x8d, 0x3c, 0x5d, 0x17, 0x4f,
	0xd7, 0xc5, 0x7f, 0xbd, 0x2e, 0x76, 0xc6, 0x70, 0x75, 0x2c, 0x75, 0xc1, 0x9f, 0xfc, 0xb7, 0x39,
	0x3e, 0x26, 0xf6, 0x6c, 0x7c, 0xbf, 0x94, 0x42, 0x63, 0xb1, 0x87, 0x74, 0xa4, 0x8a, 0x89, 0xd9,
	0x47, 0x69, 0x54, 0x61, 0xc2, 0xcf, 0xfc, 0xa3, 0x58, 0xfb, 0x93, 0x47, 0x91, 0x3c, 0x63, 0x15,
	0xef, 0x5b, 0xfc, 0xbd, 0x21, 0xee, 0xeb, 0x72, 0x37, 0x53, 0x47, 0xf7, 0x1e, 0xd3, 0xdd, 0x4f,
	0x7e, 0x3c, 0x5e, 0x0f, 0x7e, 0x3a, 0x5e, 0x0f, 0x7e, 0x3e, 0x5e, 0x0f, 0x3e, 0x4c, 0x46, 0x82,
	0xec, 0x6d, 0xab, 0x1e, 0x4b, 0xa4, 0x9e, 0xe8, 0xe3, 0x23, 0x2c, 0x46, 0xbd, 0x03, 0x4c, 0x33,
	0x3a, 0x78, 0xa4, 0x68, 0x53, 0xc8, 0x11, 0x1a, 0xda, 0x1c, 0x93, 0xd8, 0x94, 0x29, 0x89, 0x43,
	0xec, 0xe9, 0xc9, 0xa8, 0x37, 0x26, 0xd1, 0x4b, 0x07, 0xa9, 0x26, 0x2c, 0x4c, 0xcf, 0x37, 0xde,
	0x33, 0xfd, 0x03, 0xcc, 0xd3, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xf4, 0x73, 0xef, 0x71, 0x16,
	0x0b, 0x00, 0x00,
}

func (m *JunosPfeSpuFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosPfeSpuFlow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosPfeSpuFlow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Security != nil {
		{
			size, err := m.Security.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpuFlowStats(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *JunosPfeSpuFlowSecurityType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosPfeSpuFlowSecurityType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosPfeSpuFlowSecurityType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Spu != nil {
		{
			size, err := m.Spu.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpuFlowStats(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *JunosPfeSpuFlowSecurityTypeSpuType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosPfeSpuFlowSecurityTypeSpuType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosPfeSpuFlowSecurityTypeSpuType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Flow != nil {
		{
			size, err := m.Flow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpuFlowStats(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	if m.SpuName != nil {
		i -= len(*m.SpuName)
		copy(dAtA[i:], *m.SpuName)
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(len(*m.SpuName)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StatsScope != nil {
		{
			size, err := m.StatsScope.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpuFlowStats(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LsysScope != nil {
		{
			size, err := m.LsysScope.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpuFlowStats(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xc2
	}
	if m.System != nil {
		{
			size, err := m.System.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpuFlowStats(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Packet != nil {
		{
			size, err := m.Packet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpuFlowStats(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xc2
	}
	if m.Session != nil {
		{
			size, err := m.Session.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpuFlowStats(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NoFailed != nil {
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(*m.NoFailed))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd8
	}
	if m.NoTunnel != nil {
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(*m.NoTunnel))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd0
	}
	if m.NoSsl != nil {
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(*m.NoSsl))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc8
	}
	if m.NoNat != nil {
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(*m.NoNat))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc0
	}
	if m.NoSof != nil {
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(*m.NoSof))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.NoMulticast != nil {
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(*m.NoMulticast))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.NoUnicast != nil {
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(*m.NoUnicast))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.NoV6 != nil {
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(*m.NoV6))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.NoV4 != nil {
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(*m.NoV4))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PmiDropped != nil {
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(*m.PmiDropped))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd8
	}
	if m.PmiTransmitted != nil {
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(*m.PmiTransmitted))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd0
	}
	if m.PmiReceived != nil {
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(*m.PmiReceived))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc8
	}
	if m.PostFragments != nil {
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(*m.PostFragments))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc0
	}
	if m.PreFragments != nil {
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(*m.PreFragments))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.FragmentsReceived != nil {
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(*m.FragmentsReceived))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.PktDropped != nil {
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(*m.PktDropped))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.PktTransmitted != nil {
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(*m.PktTransmitted))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.PktReceived != nil {
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(*m.PktReceived))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Lsys) > 0 {
		for iNdEx := len(m.Lsys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Lsys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSpuFlowStats(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xc2
		}
	}
	return len(dAtA) - i, nil
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Packet != nil {
		{
			size, err := m.Packet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpuFlowStats(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xca
	}
	if m.Session != nil {
		{
			size, err := m.Session.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpuFlowStats(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xc2
	}
	if m.LsysName != nil {
		i -= len(*m.LsysName)
		copy(dAtA[i:], *m.LsysName)
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(len(*m.LsysName)))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NoFailed != nil {
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(*m.NoFailed))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd8
	}
	if m.NoTunnel != nil {
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(*m.NoTunnel))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd0
	}
	if m.NoSsl != nil {
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(*m.NoSsl))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc8
	}
	if m.NoNat != nil {
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(*m.NoNat))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc0
	}
	if m.NoSof != nil {
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(*m.NoSof))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.NoMulticast != nil {
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(*m.NoMulticast))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.NoUnicast != nil {
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(*m.NoUnicast))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.NoV6 != nil {
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(*m.NoV6))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.NoV4 != nil {
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(*m.NoV4))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PmiDropped != nil {
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(*m.PmiDropped))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd8
	}
	if m.PmiTransmitted != nil {
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(*m.PmiTransmitted))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd0
	}
	if m.PmiReceived != nil {
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(*m.PmiReceived))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc8
	}
	if m.PostFragments != nil {
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(*m.PostFragments))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc0
	}
	if m.PreFragments != nil {
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(*m.PreFragments))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.FragmentsReceived != nil {
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(*m.FragmentsReceived))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.PktDropped != nil {
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(*m.PktDropped))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.PktTransmitted != nil {
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(*m.PktTransmitted))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.PktReceived != nil {
		i = encodeVarintSpuFlowStats(dAtA, i, uint64(*m.PktReceived))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func encodeVarintSpuFlowStats(dAtA []byte, offset int, v uint64) int {
	offset -= sovSpuFlowStats(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *JunosPfeSpuFlow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Security != nil {
		l = m.Security.Size()
		n += 2 + l + sovSpuFlowStats(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosPfeSpuFlowSecurityType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Spu != nil {
		l = m.Spu.Size()
		n += 2 + l + sovSpuFlowStats(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosPfeSpuFlowSecurityTypeSpuType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpuName != nil {
		l = len(*m.SpuName)
		n += 2 + l + sovSpuFlowStats(uint64(l))
	}
	if m.Flow != nil {
		l = m.Flow.Size()
		n += 2 + l + sovSpuFlowStats(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StatsScope != nil {
		l = m.StatsScope.Size()
		n += 2 + l + sovSpuFlowStats(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.System != nil {
		l = m.System.Size()
		n += 2 + l + sovSpuFlowStats(uint64(l))
	}
	if m.LsysScope != nil {
		l = m.LsysScope.Size()
		n += 2 + l + sovSpuFlowStats(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Session != nil {
		l = m.Session.Size()
		n += 2 + l + sovSpuFlowStats(uint64(l))
	}
	if m.Packet != nil {
		l = m.Packet.Size()
		n += 2 + l + sovSpuFlowStats(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoV4 != nil {
		n += 2 + sovSpuFlowStats(uint64(*m.NoV4))
	}
	if m.NoV6 != nil {
		n += 2 + sovSpuFlowStats(uint64(*m.NoV6))
	}
	if m.NoUnicast != nil {
		n += 2 + sovSpuFlowStats(uint64(*m.NoUnicast))
	}
	if m.NoMulticast != nil {
		n += 2 + sovSpuFlowStats(uint64(*m.NoMulticast))
	}
	if m.NoSof != nil {
		n += 2 + sovSpuFlowStats(uint64(*m.NoSof))
	}
	if m.NoNat != nil {
		n += 2 + sovSpuFlowStats(uint64(*m.NoNat))
	}
	if m.NoSsl != nil {
		n += 2 + sovSpuFlowStats(uint64(*m.NoSsl))
	}
	if m.NoTunnel != nil {
		n += 2 + sovSpuFlowStats(uint64(*m.NoTunnel))
	}
	if m.NoFailed != nil {
		n += 2 + sovSpuFlowStats(uint64(*m.NoFailed))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PktReceived != nil {
		n += 2 + sovSpuFlowStats(uint64(*m.PktReceived))
	}
	if m.PktTransmitted != nil {
		n += 2 + sovSpuFlowStats(uint64(*m.PktTransmitted))
	}
	if m.PktDropped != nil {
		n += 2 + sovSpuFlowStats(uint64(*m.PktDropped))
	}
	if m.FragmentsReceived != nil {
		n += 2 + sovSpuFlowStats(uint64(*m.FragmentsReceived))
	}
	if m.PreFragments != nil {
		n += 2 + sovSpuFlowStats(uint64(*m.PreFragments))
	}
	if m.PostFragments != nil {
		n += 2 + sovSpuFlowStats(uint64(*m.PostFragments))
	}
	if m.PmiReceived != nil {
		n += 2 + sovSpuFlowStats(uint64(*m.PmiReceived))
	}
	if m.PmiTransmitted != nil {
		n += 2 + sovSpuFlowStats(uint64(*m.PmiTransmitted))
	}
	if m.PmiDropped != nil {
		n += 2 + sovSpuFlowStats(uint64(*m.PmiDropped))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Lsys) > 0 {
		for _, e := range m.Lsys {
			l = e.Size()
			n += 2 + l + sovSpuFlowStats(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LsysName != nil {
		l = len(*m.LsysName)
		n += 2 + l + sovSpuFlowStats(uint64(l))
	}
	if m.Session != nil {
		l = m.Session.Size()
		n += 2 + l + sovSpuFlowStats(uint64(l))
	}
	if m.Packet != nil {
		l = m.Packet.Size()
		n += 2 + l + sovSpuFlowStats(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoV4 != nil {
		n += 2 + sovSpuFlowStats(uint64(*m.NoV4))
	}
	if m.NoV6 != nil {
		n += 2 + sovSpuFlowStats(uint64(*m.NoV6))
	}
	if m.NoUnicast != nil {
		n += 2 + sovSpuFlowStats(uint64(*m.NoUnicast))
	}
	if m.NoMulticast != nil {
		n += 2 + sovSpuFlowStats(uint64(*m.NoMulticast))
	}
	if m.NoSof != nil {
		n += 2 + sovSpuFlowStats(uint64(*m.NoSof))
	}
	if m.NoNat != nil {
		n += 2 + sovSpuFlowStats(uint64(*m.NoNat))
	}
	if m.NoSsl != nil {
		n += 2 + sovSpuFlowStats(uint64(*m.NoSsl))
	}
	if m.NoTunnel != nil {
		n += 2 + sovSpuFlowStats(uint64(*m.NoTunnel))
	}
	if m.NoFailed != nil {
		n += 2 + sovSpuFlowStats(uint64(*m.NoFailed))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PktReceived != nil {
		n += 2 + sovSpuFlowStats(uint64(*m.PktReceived))
	}
	if m.PktTransmitted != nil {
		n += 2 + sovSpuFlowStats(uint64(*m.PktTransmitted))
	}
	if m.PktDropped != nil {
		n += 2 + sovSpuFlowStats(uint64(*m.PktDropped))
	}
	if m.FragmentsReceived != nil {
		n += 2 + sovSpuFlowStats(uint64(*m.FragmentsReceived))
	}
	if m.PreFragments != nil {
		n += 2 + sovSpuFlowStats(uint64(*m.PreFragments))
	}
	if m.PostFragments != nil {
		n += 2 + sovSpuFlowStats(uint64(*m.PostFragments))
	}
	if m.PmiReceived != nil {
		n += 2 + sovSpuFlowStats(uint64(*m.PmiReceived))
	}
	if m.PmiTransmitted != nil {
		n += 2 + sovSpuFlowStats(uint64(*m.PmiTransmitted))
	}
	if m.PmiDropped != nil {
		n += 2 + sovSpuFlowStats(uint64(*m.PmiDropped))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSpuFlowStats(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSpuFlowStats(x uint64) (n int) {
	return sovSpuFlowStats(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *JunosPfeSpuFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpuFlowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: junos_pfe_spu_flow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: junos_pfe_spu_flow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Security", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Security == nil {
				m.Security = &JunosPfeSpuFlowSecurityType{}
			}
			if err := m.Security.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpuFlowStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosPfeSpuFlowSecurityType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpuFlowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: security_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: security_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spu == nil {
				m.Spu = &JunosPfeSpuFlowSecurityTypeSpuType{}
			}
			if err := m.Spu.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpuFlowStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosPfeSpuFlowSecurityTypeSpuType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpuFlowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: spu_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: spu_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpuName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SpuName = &s
			iNdEx = postIndex
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Flow == nil {
				m.Flow = &JunosPfeSpuFlowSecurityTypeSpuTypeFlowType{}
			}
			if err := m.Flow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpuFlowStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpuFlowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: flow_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: flow_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatsScope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StatsScope == nil {
				m.StatsScope = &JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType{}
			}
			if err := m.StatsScope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpuFlowStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpuFlowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: stats_scope_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: stats_scope_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field System", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.System == nil {
				m.System = &JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType{}
			}
			if err := m.System.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 152:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LsysScope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LsysScope == nil {
				m.LsysScope = &JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeType{}
			}
			if err := m.LsysScope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpuFlowStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpuFlowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: system_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: system_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Session == nil {
				m.Session = &JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType{}
			}
			if err := m.Session.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 152:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Packet == nil {
				m.Packet = &JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType{}
			}
			if err := m.Packet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpuFlowStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypeSessionType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpuFlowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: session_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: session_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoV4", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoV4 = &v
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoV6", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoV6 = &v
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoUnicast", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoUnicast = &v
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoMulticast", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoMulticast = &v
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoSof", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoSof = &v
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoNat", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoNat = &v
		case 57:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoSsl", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoSsl = &v
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoTunnel", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoTunnel = &v
		case 59:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoFailed", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoFailed = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSpuFlowStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeSystemTypePacketType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpuFlowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: packet_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: packet_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PktReceived", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PktReceived = &v
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PktTransmitted", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PktTransmitted = &v
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PktDropped", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PktDropped = &v
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FragmentsReceived", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FragmentsReceived = &v
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreFragments", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PreFragments = &v
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostFragments", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PostFragments = &v
		case 57:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PmiReceived", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PmiReceived = &v
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PmiTransmitted", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PmiTransmitted = &v
		case 59:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PmiDropped", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PmiDropped = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSpuFlowStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpuFlowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: lsys_scope_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: lsys_scope_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 152:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lsys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lsys = append(m.Lsys, &JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList{})
			if err := m.Lsys[len(m.Lsys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpuFlowStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpuFlowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: lsys_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: lsys_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LsysName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LsysName = &s
			iNdEx = postIndex
		case 152:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Session == nil {
				m.Session = &JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType{}
			}
			if err := m.Session.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 153:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Packet == nil {
				m.Packet = &JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType{}
			}
			if err := m.Packet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpuFlowStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListSessionType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpuFlowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: session_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: session_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoV4", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoV4 = &v
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoV6", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoV6 = &v
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoUnicast", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoUnicast = &v
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoMulticast", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoMulticast = &v
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoSof", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoSof = &v
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoNat", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoNat = &v
		case 57:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoSsl", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoSsl = &v
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoTunnel", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoTunnel = &v
		case 59:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoFailed", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoFailed = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSpuFlowStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunosPfeSpuFlowSecurityTypeSpuTypeFlowTypeStatsScopeTypeLsysScopeTypeLsysListPacketType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpuFlowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: packet_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: packet_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PktReceived", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PktReceived = &v
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PktTransmitted", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PktTransmitted = &v
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PktDropped", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PktDropped = &v
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FragmentsReceived", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FragmentsReceived = &v
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreFragments", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PreFragments = &v
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostFragments", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PostFragments = &v
		case 57:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PmiReceived", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PmiReceived = &v
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PmiTransmitted", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PmiTransmitted = &v
		case 59:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PmiDropped", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PmiDropped = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSpuFlowStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpuFlowStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSpuFlowStats(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSpuFlowStats
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpuFlowStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSpuFlowStats
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSpuFlowStats
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSpuFlowStats
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSpuFlowStats        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSpuFlowStats          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSpuFlowStats = fmt.Errorf("proto: unexpected end of group")
)
