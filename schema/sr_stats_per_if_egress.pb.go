// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sr_stats_per_if_egress.proto

package schema

import (
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
// Top-level message
//
type SrStatsPerIfEgress struct {
	// List of SR stats per IF egress records
	PerIfRecords         []*SegmentRoutingInterfaceRecord `protobuf:"bytes,1,rep,name=per_if_records,json=perIfRecords" json:"per_if_records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *SrStatsPerIfEgress) Reset()         { *m = SrStatsPerIfEgress{} }
func (m *SrStatsPerIfEgress) String() string { return proto.CompactTextString(m) }
func (*SrStatsPerIfEgress) ProtoMessage()    {}
func (*SrStatsPerIfEgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_d06dd05b32f9304e, []int{0}
}
func (m *SrStatsPerIfEgress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SrStatsPerIfEgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SrStatsPerIfEgress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SrStatsPerIfEgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SrStatsPerIfEgress.Merge(m, src)
}
func (m *SrStatsPerIfEgress) XXX_Size() int {
	return m.Size()
}
func (m *SrStatsPerIfEgress) XXX_DiscardUnknown() {
	xxx_messageInfo_SrStatsPerIfEgress.DiscardUnknown(m)
}

var xxx_messageInfo_SrStatsPerIfEgress proto.InternalMessageInfo

func (m *SrStatsPerIfEgress) GetPerIfRecords() []*SegmentRoutingInterfaceRecord {
	if m != nil {
		return m.PerIfRecords
	}
	return nil
}

//
// SR statistics record
//
type SegmentRoutingInterfaceRecord struct {
	// Interface name, e.g., xe-0/0/0
	IfName *string `protobuf:"bytes,1,req,name=if_name,json=ifName" json:"if_name,omitempty"`
	// Name of parent for AE interface, if applicable
	ParentAeName *string `protobuf:"bytes,2,opt,name=parent_ae_name,json=parentAeName" json:"parent_ae_name,omitempty"`
	// Name of the counter. This is useful when an interface has multiple counters.
	// for some scenarios, it is possible that a new counter is
	// created in the hardware.
	CounterName *string `protobuf:"bytes,3,opt,name=counter_name,json=counterName" json:"counter_name,omitempty"`
	// Traffic statistics
	IngressStats         *SegmentRoutingIfStats `protobuf:"bytes,4,opt,name=ingress_stats,json=ingressStats" json:"ingress_stats,omitempty"`
	EgressStats          *SegmentRoutingIfStats `protobuf:"bytes,5,opt,name=egress_stats,json=egressStats" json:"egress_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *SegmentRoutingInterfaceRecord) Reset()         { *m = SegmentRoutingInterfaceRecord{} }
func (m *SegmentRoutingInterfaceRecord) String() string { return proto.CompactTextString(m) }
func (*SegmentRoutingInterfaceRecord) ProtoMessage()    {}
func (*SegmentRoutingInterfaceRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_d06dd05b32f9304e, []int{1}
}
func (m *SegmentRoutingInterfaceRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SegmentRoutingInterfaceRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SegmentRoutingInterfaceRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SegmentRoutingInterfaceRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentRoutingInterfaceRecord.Merge(m, src)
}
func (m *SegmentRoutingInterfaceRecord) XXX_Size() int {
	return m.Size()
}
func (m *SegmentRoutingInterfaceRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentRoutingInterfaceRecord.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentRoutingInterfaceRecord proto.InternalMessageInfo

func (m *SegmentRoutingInterfaceRecord) GetIfName() string {
	if m != nil && m.IfName != nil {
		return *m.IfName
	}
	return ""
}

func (m *SegmentRoutingInterfaceRecord) GetParentAeName() string {
	if m != nil && m.ParentAeName != nil {
		return *m.ParentAeName
	}
	return ""
}

func (m *SegmentRoutingInterfaceRecord) GetCounterName() string {
	if m != nil && m.CounterName != nil {
		return *m.CounterName
	}
	return ""
}

func (m *SegmentRoutingInterfaceRecord) GetIngressStats() *SegmentRoutingIfStats {
	if m != nil {
		return m.IngressStats
	}
	return nil
}

func (m *SegmentRoutingInterfaceRecord) GetEgressStats() *SegmentRoutingIfStats {
	if m != nil {
		return m.EgressStats
	}
	return nil
}

type SegmentRoutingIfStats struct {
	// Packet and Byte statistics
	Packets *uint64 `protobuf:"varint,1,opt,name=packets" json:"packets,omitempty"`
	Bytes   *uint64 `protobuf:"varint,2,opt,name=bytes" json:"bytes,omitempty"`
	// Rates of the above counters.
	PacketRate           *uint64  `protobuf:"varint,3,opt,name=packet_rate,json=packetRate" json:"packet_rate,omitempty"`
	ByteRate             *uint64  `protobuf:"varint,4,opt,name=byte_rate,json=byteRate" json:"byte_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SegmentRoutingIfStats) Reset()         { *m = SegmentRoutingIfStats{} }
func (m *SegmentRoutingIfStats) String() string { return proto.CompactTextString(m) }
func (*SegmentRoutingIfStats) ProtoMessage()    {}
func (*SegmentRoutingIfStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_d06dd05b32f9304e, []int{2}
}
func (m *SegmentRoutingIfStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SegmentRoutingIfStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SegmentRoutingIfStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SegmentRoutingIfStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentRoutingIfStats.Merge(m, src)
}
func (m *SegmentRoutingIfStats) XXX_Size() int {
	return m.Size()
}
func (m *SegmentRoutingIfStats) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentRoutingIfStats.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentRoutingIfStats proto.InternalMessageInfo

func (m *SegmentRoutingIfStats) GetPackets() uint64 {
	if m != nil && m.Packets != nil {
		return *m.Packets
	}
	return 0
}

func (m *SegmentRoutingIfStats) GetBytes() uint64 {
	if m != nil && m.Bytes != nil {
		return *m.Bytes
	}
	return 0
}

func (m *SegmentRoutingIfStats) GetPacketRate() uint64 {
	if m != nil && m.PacketRate != nil {
		return *m.PacketRate
	}
	return 0
}

func (m *SegmentRoutingIfStats) GetByteRate() uint64 {
	if m != nil && m.ByteRate != nil {
		return *m.ByteRate
	}
	return 0
}

var E_JnprSrStatsPerIfEgressExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*SrStatsPerIfEgress)(nil),
	Field:         17,
	Name:          "jnpr_sr_stats_per_if_egress_ext",
	Tag:           "bytes,17,opt,name=jnpr_sr_stats_per_if_egress_ext",
	Filename:      "sr_stats_per_if_egress.proto",
}

func init() {
	proto.RegisterType((*SrStatsPerIfEgress)(nil), "SrStatsPerIfEgress")
	proto.RegisterType((*SegmentRoutingInterfaceRecord)(nil), "SegmentRoutingInterfaceRecord")
	proto.RegisterType((*SegmentRoutingIfStats)(nil), "SegmentRoutingIfStats")
	proto.RegisterExtension(E_JnprSrStatsPerIfEgressExt)
}

func init() { proto.RegisterFile("sr_stats_per_if_egress.proto", fileDescriptor_d06dd05b32f9304e) }

var fileDescriptor_d06dd05b32f9304e = []byte{
	// 462 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xcd, 0x6e, 0x13, 0x31,
	0x14, 0x85, 0xe5, 0x34, 0xa1, 0xad, 0x13, 0x2a, 0xe1, 0x0a, 0x08, 0x7f, 0xe9, 0x28, 0x0b, 0x34,
	0x12, 0xca, 0x8c, 0xd4, 0x1d, 0xb0, 0x81, 0x8a, 0x2e, 0xca, 0xa2, 0x42, 0xce, 0xae, 0x1b, 0xe3,
	0x4c, 0xef, 0x4c, 0x3c, 0xe9, 0xd8, 0x96, 0x7d, 0x03, 0xed, 0x96, 0x07, 0xe0, 0x1d, 0x78, 0x1b,
	0x96, 0x3c, 0x02, 0xca, 0x93, 0xa0, 0xb1, 0x03, 0x8d, 0x68, 0xd5, 0xa5, 0xcf, 0xfd, 0xce, 0x99,
	0xb9, 0x47, 0x97, 0x3e, 0xf7, 0x4e, 0x78, 0x94, 0xe8, 0x85, 0x05, 0x27, 0x54, 0x29, 0xa0, 0x72,
	0xe0, 0x7d, 0x66, 0x9d, 0x41, 0xf3, 0x74, 0x1f, 0xe1, 0x02, 0x1a, 0x40, 0x77, 0x25, 0xd0, 0xd8,
	0x28, 0x8e, 0xcf, 0x28, 0x9b, 0xba, 0x69, 0xeb, 0xf9, 0x04, 0xee, 0xa4, 0x3c, 0x0e, 0x06, 0xf6,
	0x81, 0xee, 0xad, 0x13, 0x1c, 0x14, 0xc6, 0x9d, 0xfb, 0x21, 0x49, 0xb6, 0xd2, 0xfe, 0xe1, 0x28,
	0x9b, 0x42, 0xd5, 0x80, 0x46, 0x6e, 0x96, 0xa8, 0x74, 0x75, 0xa2, 0x11, 0x5c, 0x29, 0x0b, 0xe0,
	0x01, 0xe3, 0x03, 0xdb, 0x86, 0xc4, 0x87, 0x1f, 0x7f, 0xef, 0xd0, 0x17, 0x77, 0xf2, 0x6c, 0x44,
	0xb7, 0x55, 0x29, 0xb4, 0x6c, 0x60, 0x48, 0x92, 0x4e, 0xba, 0x7b, 0xd4, 0xfb, 0xf6, 0xae, 0xb3,
	0x43, 0xf8, 0x3d, 0x55, 0x9e, 0xca, 0x06, 0xd8, 0x2b, 0xba, 0x67, 0xa5, 0x03, 0x8d, 0x42, 0x42,
	0xc4, 0x3a, 0x09, 0xb9, 0xc6, 0x06, 0x71, 0xf8, 0x1e, 0x02, 0x9c, 0xd2, 0x41, 0x61, 0x96, 0xed,
	0x17, 0x22, 0xba, 0xb5, 0x89, 0xf6, 0xd7, 0xa3, 0x40, 0xbe, 0xa5, 0xf7, 0x95, 0x0e, 0x9b, 0xc6,
	0xba, 0x86, 0xdd, 0x84, 0xa4, 0xfd, 0xc3, 0x47, 0xff, 0x6f, 0x57, 0x86, 0x62, 0xf8, 0x60, 0x0d,
	0x87, 0x17, 0x7b, 0x4d, 0x07, 0xb0, 0xe9, 0xed, 0xdd, 0xe9, 0xed, 0xc3, 0xb5, 0x75, 0xfc, 0x83,
	0xd0, 0x87, 0xb7, 0x62, 0xec, 0x80, 0x6e, 0x5b, 0x59, 0x2c, 0x00, 0xdb, 0xa6, 0x49, 0xda, 0x0d,
	0xbf, 0x3d, 0x24, 0xfc, 0xaf, 0xca, 0x9e, 0xd1, 0xde, 0xec, 0x0a, 0xc1, 0x87, 0x02, 0xfe, 0x8d,
	0xa3, 0xc6, 0x5e, 0xd2, 0x7e, 0xe4, 0x84, 0x93, 0x18, 0x17, 0x8f, 0x48, 0x42, 0x38, 0x8d, 0x13,
	0x2e, 0x11, 0xd8, 0x98, 0xee, 0xb6, 0x86, 0x48, 0x75, 0x37, 0xa9, 0x9d, 0x56, 0x6f, 0x99, 0x37,
	0x96, 0x1e, 0xd4, 0xda, 0x3a, 0x71, 0xfb, 0x29, 0x09, 0xb8, 0x44, 0xf6, 0x38, 0xfb, 0xb8, 0xd4,
	0xca, 0x82, 0x3b, 0x05, 0xfc, 0x6a, 0xdc, 0xc2, 0x4f, 0x41, 0x7b, 0xe3, 0xfc, 0xf0, 0x41, 0xa8,
	0x62, 0x3f, 0xbb, 0x79, 0x51, 0xfc, 0x49, 0x1b, 0x7a, 0x53, 0x3f, 0xbe, 0xc4, 0xa3, 0xcf, 0x3f,
	0x57, 0x23, 0xf2, 0x6b, 0x35, 0x22, 0xbf, 0x57, 0x23, 0x72, 0xc6, 0x2b, 0x85, 0x59, 0x1d, 0xf3,
	0x33, 0x0d, 0x98, 0xab, 0x02, 0x66, 0xe0, 0xaa, 0x7c, 0x0e, 0xf2, 0x02, 0xe7, 0x33, 0x83, 0x13,
	0xa5, 0x2b, 0xf0, 0x38, 0xa9, 0x51, 0x4d, 0xb4, 0x44, 0xf5, 0x05, 0x72, 0xbb, 0xa8, 0xf2, 0x1a,
	0x55, 0x2e, 0xcf, 0xa5, 0x45, 0x70, 0x3e, 0x17, 0xf5, 0x52, 0x1b, 0x9f, 0xfb, 0x62, 0x0e, 0x8d,
	0xfc, 0x13, 0x00, 0x00, 0xff, 0xff, 0x26, 0x58, 0xe2, 0x20, 0x18, 0x03, 0x00, 0x00,
}

func (m *SrStatsPerIfEgress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SrStatsPerIfEgress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SrStatsPerIfEgress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PerIfRecords) > 0 {
		for iNdEx := len(m.PerIfRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PerIfRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSrStatsPerIfEgress(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SegmentRoutingInterfaceRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentRoutingInterfaceRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SegmentRoutingInterfaceRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EgressStats != nil {
		{
			size, err := m.EgressStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSrStatsPerIfEgress(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.IngressStats != nil {
		{
			size, err := m.IngressStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSrStatsPerIfEgress(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CounterName != nil {
		i -= len(*m.CounterName)
		copy(dAtA[i:], *m.CounterName)
		i = encodeVarintSrStatsPerIfEgress(dAtA, i, uint64(len(*m.CounterName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ParentAeName != nil {
		i -= len(*m.ParentAeName)
		copy(dAtA[i:], *m.ParentAeName)
		i = encodeVarintSrStatsPerIfEgress(dAtA, i, uint64(len(*m.ParentAeName)))
		i--
		dAtA[i] = 0x12
	}
	if m.IfName == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("if_name")
	} else {
		i -= len(*m.IfName)
		copy(dAtA[i:], *m.IfName)
		i = encodeVarintSrStatsPerIfEgress(dAtA, i, uint64(len(*m.IfName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SegmentRoutingIfStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentRoutingIfStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SegmentRoutingIfStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ByteRate != nil {
		i = encodeVarintSrStatsPerIfEgress(dAtA, i, uint64(*m.ByteRate))
		i--
		dAtA[i] = 0x20
	}
	if m.PacketRate != nil {
		i = encodeVarintSrStatsPerIfEgress(dAtA, i, uint64(*m.PacketRate))
		i--
		dAtA[i] = 0x18
	}
	if m.Bytes != nil {
		i = encodeVarintSrStatsPerIfEgress(dAtA, i, uint64(*m.Bytes))
		i--
		dAtA[i] = 0x10
	}
	if m.Packets != nil {
		i = encodeVarintSrStatsPerIfEgress(dAtA, i, uint64(*m.Packets))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSrStatsPerIfEgress(dAtA []byte, offset int, v uint64) int {
	offset -= sovSrStatsPerIfEgress(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SrStatsPerIfEgress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PerIfRecords) > 0 {
		for _, e := range m.PerIfRecords {
			l = e.Size()
			n += 1 + l + sovSrStatsPerIfEgress(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SegmentRoutingInterfaceRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IfName != nil {
		l = len(*m.IfName)
		n += 1 + l + sovSrStatsPerIfEgress(uint64(l))
	}
	if m.ParentAeName != nil {
		l = len(*m.ParentAeName)
		n += 1 + l + sovSrStatsPerIfEgress(uint64(l))
	}
	if m.CounterName != nil {
		l = len(*m.CounterName)
		n += 1 + l + sovSrStatsPerIfEgress(uint64(l))
	}
	if m.IngressStats != nil {
		l = m.IngressStats.Size()
		n += 1 + l + sovSrStatsPerIfEgress(uint64(l))
	}
	if m.EgressStats != nil {
		l = m.EgressStats.Size()
		n += 1 + l + sovSrStatsPerIfEgress(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SegmentRoutingIfStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Packets != nil {
		n += 1 + sovSrStatsPerIfEgress(uint64(*m.Packets))
	}
	if m.Bytes != nil {
		n += 1 + sovSrStatsPerIfEgress(uint64(*m.Bytes))
	}
	if m.PacketRate != nil {
		n += 1 + sovSrStatsPerIfEgress(uint64(*m.PacketRate))
	}
	if m.ByteRate != nil {
		n += 1 + sovSrStatsPerIfEgress(uint64(*m.ByteRate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSrStatsPerIfEgress(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSrStatsPerIfEgress(x uint64) (n int) {
	return sovSrStatsPerIfEgress(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SrStatsPerIfEgress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSrStatsPerIfEgress
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SrStatsPerIfEgress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SrStatsPerIfEgress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerIfRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrStatsPerIfEgress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSrStatsPerIfEgress
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSrStatsPerIfEgress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PerIfRecords = append(m.PerIfRecords, &SegmentRoutingInterfaceRecord{})
			if err := m.PerIfRecords[len(m.PerIfRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSrStatsPerIfEgress(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSrStatsPerIfEgress
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSrStatsPerIfEgress
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentRoutingInterfaceRecord) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSrStatsPerIfEgress
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentRoutingInterfaceRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentRoutingInterfaceRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrStatsPerIfEgress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSrStatsPerIfEgress
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSrStatsPerIfEgress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.IfName = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentAeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrStatsPerIfEgress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSrStatsPerIfEgress
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSrStatsPerIfEgress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ParentAeName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrStatsPerIfEgress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSrStatsPerIfEgress
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSrStatsPerIfEgress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CounterName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrStatsPerIfEgress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSrStatsPerIfEgress
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSrStatsPerIfEgress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IngressStats == nil {
				m.IngressStats = &SegmentRoutingIfStats{}
			}
			if err := m.IngressStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgressStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrStatsPerIfEgress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSrStatsPerIfEgress
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSrStatsPerIfEgress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EgressStats == nil {
				m.EgressStats = &SegmentRoutingIfStats{}
			}
			if err := m.EgressStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSrStatsPerIfEgress(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSrStatsPerIfEgress
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSrStatsPerIfEgress
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("if_name")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentRoutingIfStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSrStatsPerIfEgress
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentRoutingIfStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentRoutingIfStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrStatsPerIfEgress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Packets = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrStatsPerIfEgress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bytes = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrStatsPerIfEgress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PacketRate = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByteRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrStatsPerIfEgress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ByteRate = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSrStatsPerIfEgress(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSrStatsPerIfEgress
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSrStatsPerIfEgress
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSrStatsPerIfEgress(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSrStatsPerIfEgress
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSrStatsPerIfEgress
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSrStatsPerIfEgress
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSrStatsPerIfEgress
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSrStatsPerIfEgress
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSrStatsPerIfEgress
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSrStatsPerIfEgress        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSrStatsPerIfEgress          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSrStatsPerIfEgress = fmt.Errorf("proto: unexpected end of group")
)
