// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sr_stats_per_sid_egress.proto

package schema

import (
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
// Top-level message
//
type SrStatsPerSidEgress struct {
	// List of SR stats per SID records
	SidStats             []*SegmentRoutingEgressRecord `protobuf:"bytes,1,rep,name=sid_stats,json=sidStats" json:"sid_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *SrStatsPerSidEgress) Reset()         { *m = SrStatsPerSidEgress{} }
func (m *SrStatsPerSidEgress) String() string { return proto.CompactTextString(m) }
func (*SrStatsPerSidEgress) ProtoMessage()    {}
func (*SrStatsPerSidEgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_0421fb5d08fd5d36, []int{0}
}
func (m *SrStatsPerSidEgress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SrStatsPerSidEgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SrStatsPerSidEgress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SrStatsPerSidEgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SrStatsPerSidEgress.Merge(m, src)
}
func (m *SrStatsPerSidEgress) XXX_Size() int {
	return m.Size()
}
func (m *SrStatsPerSidEgress) XXX_DiscardUnknown() {
	xxx_messageInfo_SrStatsPerSidEgress.DiscardUnknown(m)
}

var xxx_messageInfo_SrStatsPerSidEgress proto.InternalMessageInfo

func (m *SrStatsPerSidEgress) GetSidStats() []*SegmentRoutingEgressRecord {
	if m != nil {
		return m.SidStats
	}
	return nil
}

//
// SR statistics record
//
type SegmentRoutingEgressRecord struct {
	// Name of the SID
	SidIdentifier *string `protobuf:"bytes,1,req,name=sid_identifier,json=sidIdentifier" json:"sid_identifier,omitempty"`
	// Instance Identifier for cases when RPD creates multiple instances
	InstanceIdentifier *uint32 `protobuf:"varint,2,opt,name=instance_identifier,json=instanceIdentifier" json:"instance_identifier,omitempty"`
	// Name of the counter. This is useful when an SR label has multiple counters.
	// For some scenarios like routing restart, it is possible that a new counter is
	// created in the hardware.
	CounterName *string `protobuf:"bytes,3,req,name=counter_name,json=counterName" json:"counter_name,omitempty"`
	// Ingress Traffic statistics
	IngressStats *SegmentRoutingEgressStats `protobuf:"bytes,4,opt,name=ingress_stats,json=ingressStats" json:"ingress_stats,omitempty"`
	// Egress statistics
	EgressStats          *SegmentRoutingEgressStats `protobuf:"bytes,5,opt,name=egress_stats,json=egressStats" json:"egress_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *SegmentRoutingEgressRecord) Reset()         { *m = SegmentRoutingEgressRecord{} }
func (m *SegmentRoutingEgressRecord) String() string { return proto.CompactTextString(m) }
func (*SegmentRoutingEgressRecord) ProtoMessage()    {}
func (*SegmentRoutingEgressRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_0421fb5d08fd5d36, []int{1}
}
func (m *SegmentRoutingEgressRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SegmentRoutingEgressRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SegmentRoutingEgressRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SegmentRoutingEgressRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentRoutingEgressRecord.Merge(m, src)
}
func (m *SegmentRoutingEgressRecord) XXX_Size() int {
	return m.Size()
}
func (m *SegmentRoutingEgressRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentRoutingEgressRecord.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentRoutingEgressRecord proto.InternalMessageInfo

func (m *SegmentRoutingEgressRecord) GetSidIdentifier() string {
	if m != nil && m.SidIdentifier != nil {
		return *m.SidIdentifier
	}
	return ""
}

func (m *SegmentRoutingEgressRecord) GetInstanceIdentifier() uint32 {
	if m != nil && m.InstanceIdentifier != nil {
		return *m.InstanceIdentifier
	}
	return 0
}

func (m *SegmentRoutingEgressRecord) GetCounterName() string {
	if m != nil && m.CounterName != nil {
		return *m.CounterName
	}
	return ""
}

func (m *SegmentRoutingEgressRecord) GetIngressStats() *SegmentRoutingEgressStats {
	if m != nil {
		return m.IngressStats
	}
	return nil
}

func (m *SegmentRoutingEgressRecord) GetEgressStats() *SegmentRoutingEgressStats {
	if m != nil {
		return m.EgressStats
	}
	return nil
}

type SegmentRoutingEgressStats struct {
	// Packet and Byte statistics
	Packets *uint64 `protobuf:"varint,1,opt,name=packets" json:"packets,omitempty"`
	Bytes   *uint64 `protobuf:"varint,2,opt,name=bytes" json:"bytes,omitempty"`
	// Rates of the above counters.
	PacketRate           *uint64  `protobuf:"varint,3,opt,name=packet_rate,json=packetRate" json:"packet_rate,omitempty"`
	ByteRate             *uint64  `protobuf:"varint,4,opt,name=byte_rate,json=byteRate" json:"byte_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SegmentRoutingEgressStats) Reset()         { *m = SegmentRoutingEgressStats{} }
func (m *SegmentRoutingEgressStats) String() string { return proto.CompactTextString(m) }
func (*SegmentRoutingEgressStats) ProtoMessage()    {}
func (*SegmentRoutingEgressStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_0421fb5d08fd5d36, []int{2}
}
func (m *SegmentRoutingEgressStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SegmentRoutingEgressStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SegmentRoutingEgressStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SegmentRoutingEgressStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentRoutingEgressStats.Merge(m, src)
}
func (m *SegmentRoutingEgressStats) XXX_Size() int {
	return m.Size()
}
func (m *SegmentRoutingEgressStats) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentRoutingEgressStats.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentRoutingEgressStats proto.InternalMessageInfo

func (m *SegmentRoutingEgressStats) GetPackets() uint64 {
	if m != nil && m.Packets != nil {
		return *m.Packets
	}
	return 0
}

func (m *SegmentRoutingEgressStats) GetBytes() uint64 {
	if m != nil && m.Bytes != nil {
		return *m.Bytes
	}
	return 0
}

func (m *SegmentRoutingEgressStats) GetPacketRate() uint64 {
	if m != nil && m.PacketRate != nil {
		return *m.PacketRate
	}
	return 0
}

func (m *SegmentRoutingEgressStats) GetByteRate() uint64 {
	if m != nil && m.ByteRate != nil {
		return *m.ByteRate
	}
	return 0
}

var E_JnprSrStatsPerSidEgressExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*SrStatsPerSidEgress)(nil),
	Field:         26,
	Name:          "jnpr_sr_stats_per_sid_egress_ext",
	Tag:           "bytes,26,opt,name=jnpr_sr_stats_per_sid_egress_ext",
	Filename:      "sr_stats_per_sid_egress.proto",
}

func init() {
	proto.RegisterType((*SrStatsPerSidEgress)(nil), "SrStatsPerSidEgress")
	proto.RegisterType((*SegmentRoutingEgressRecord)(nil), "SegmentRoutingEgressRecord")
	proto.RegisterType((*SegmentRoutingEgressStats)(nil), "SegmentRoutingEgressStats")
	proto.RegisterExtension(E_JnprSrStatsPerSidEgressExt)
}

func init() { proto.RegisterFile("sr_stats_per_sid_egress.proto", fileDescriptor_0421fb5d08fd5d36) }

var fileDescriptor_0421fb5d08fd5d36 = []byte{
	// 466 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xc1, 0x8e, 0xd3, 0x3c,
	0x10, 0xc7, 0xe5, 0x6e, 0xab, 0xaf, 0x75, 0xdb, 0xef, 0xe0, 0x22, 0x51, 0xba, 0xa2, 0x44, 0x3d,
	0xa0, 0x1c, 0x68, 0x22, 0xed, 0x01, 0x21, 0x24, 0x04, 0x5a, 0x69, 0x0f, 0x70, 0x58, 0x90, 0x73,
	0xe3, 0x62, 0xdc, 0x64, 0x48, 0x9d, 0x6e, 0xec, 0xc8, 0x9e, 0xc2, 0xee, 0x95, 0x77, 0xe1, 0xc6,
	0x83, 0x70, 0xe4, 0x11, 0x50, 0x9f, 0x04, 0xc5, 0x69, 0x97, 0x1c, 0x5a, 0x71, 0xf4, 0xfc, 0x7f,
	0xbf, 0x71, 0x66, 0x62, 0xfa, 0xd8, 0x59, 0xe1, 0x50, 0xa2, 0x13, 0x15, 0x58, 0xe1, 0x54, 0x26,
	0x20, 0xb7, 0xe0, 0x5c, 0x54, 0x59, 0x83, 0x66, 0x36, 0x41, 0xb8, 0x81, 0x12, 0xd0, 0xde, 0x09,
	0x34, 0x55, 0x53, 0x5c, 0xbc, 0xa7, 0x93, 0xc4, 0x26, 0xb5, 0xf4, 0x01, 0x6c, 0xa2, 0xb2, 0x2b,
	0x6f, 0xb0, 0x17, 0x74, 0x50, 0xfb, 0xbe, 0xdb, 0x94, 0x04, 0x67, 0xe1, 0xf0, 0xe2, 0x3c, 0x4a,
	0x20, 0x2f, 0x41, 0x23, 0x37, 0x5b, 0x54, 0x3a, 0x6f, 0x48, 0x0e, 0xa9, 0xb1, 0x19, 0xef, 0x3b,
	0x95, 0xf9, 0x2e, 0x8b, 0x1f, 0x1d, 0x3a, 0x3b, 0x0d, 0xb2, 0x67, 0xf4, 0xff, 0xba, 0xb1, 0xca,
	0x40, 0xa3, 0xfa, 0xac, 0xc0, 0x4e, 0x49, 0xd0, 0x09, 0x07, 0x97, 0xbd, 0x6f, 0x6f, 0x3a, 0x7d,
	0xc2, 0xc7, 0x4e, 0x65, 0x6f, 0xef, 0x33, 0xf6, 0x9c, 0x4e, 0x94, 0x76, 0x28, 0x75, 0x0a, 0x6d,
	0xa5, 0x13, 0x90, 0x70, 0x7c, 0x50, 0xd8, 0x81, 0x68, 0x79, 0x21, 0x1d, 0xa5, 0x66, 0xab, 0x11,
	0xac, 0xd0, 0xb2, 0x84, 0xe9, 0x59, 0xfb, 0x8e, 0xe1, 0x3e, 0xba, 0x96, 0x25, 0xb0, 0xd7, 0x74,
	0xac, 0xb4, 0xff, 0xc0, 0xfd, 0xb0, 0xdd, 0x80, 0x84, 0xc3, 0x8b, 0xd9, 0xd1, 0x61, 0xfd, 0x84,
	0x7c, 0xb4, 0x17, 0xfc, 0x89, 0xbd, 0xa2, 0x23, 0x68, 0xfb, 0xbd, 0x7f, 0xfa, 0x43, 0xf8, 0x7b,
	0x58, 0x7c, 0x27, 0xf4, 0xd1, 0x49, 0x94, 0x3d, 0xa1, 0xff, 0x55, 0x32, 0xdd, 0x80, 0xff, 0x09,
	0x24, 0xec, 0xfa, 0x11, 0xa6, 0x84, 0x1f, 0xaa, 0xec, 0x9c, 0xf6, 0x56, 0x77, 0x08, 0xce, 0xaf,
	0xe4, 0x3e, 0x6e, 0x6a, 0xec, 0x29, 0x1d, 0x36, 0x9c, 0xb0, 0x12, 0xeb, 0x25, 0x1c, 0x90, 0x80,
	0x70, 0xda, 0x24, 0x5c, 0x22, 0xb0, 0x05, 0x1d, 0xd4, 0x42, 0x43, 0x75, 0xdb, 0x54, 0xbf, 0xae,
	0xd7, 0xcc, 0x4b, 0x47, 0x83, 0x42, 0x57, 0x56, 0x9c, 0x78, 0x62, 0x02, 0x6e, 0x91, 0x3d, 0x8c,
	0xde, 0x6d, 0xb5, 0xaa, 0xc0, 0x5e, 0x03, 0x7e, 0x35, 0x76, 0xe3, 0x12, 0xd0, 0xce, 0x58, 0x37,
	0x9d, 0xf9, 0x9d, 0x3c, 0x88, 0x8e, 0xbc, 0x34, 0x3e, 0xab, 0xdb, 0x1e, 0x09, 0xae, 0x6e, 0xf1,
	0xf2, 0xd3, 0xcf, 0xdd, 0x9c, 0xfc, 0xda, 0xcd, 0xc9, 0xef, 0xdd, 0x9c, 0x7c, 0xe4, 0xb9, 0xc2,
	0xa8, 0x68, 0x6e, 0x88, 0x34, 0x60, 0xac, 0x52, 0x58, 0x81, 0xcd, 0xe3, 0x35, 0xc8, 0x1b, 0x5c,
	0xaf, 0x0c, 0x2e, 0x95, 0xce, 0xc1, 0xe1, 0xb2, 0x40, 0xb5, 0xd4, 0x12, 0xd5, 0x17, 0x88, 0xab,
	0x4d, 0x1e, 0x17, 0xa8, 0x62, 0x99, 0xc9, 0x0a, 0xc1, 0xba, 0x58, 0x14, 0x5b, 0x6d, 0x5c, 0xec,
	0xd2, 0x35, 0x94, 0xf2, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x33, 0xab, 0x17, 0x2e, 0x33, 0x03,
	0x00, 0x00,
}

func (m *SrStatsPerSidEgress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SrStatsPerSidEgress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SrStatsPerSidEgress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SidStats) > 0 {
		for iNdEx := len(m.SidStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SidStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSrStatsPerSidEgress(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SegmentRoutingEgressRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentRoutingEgressRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SegmentRoutingEgressRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EgressStats != nil {
		{
			size, err := m.EgressStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSrStatsPerSidEgress(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.IngressStats != nil {
		{
			size, err := m.IngressStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSrStatsPerSidEgress(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CounterName == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("counter_name")
	} else {
		i -= len(*m.CounterName)
		copy(dAtA[i:], *m.CounterName)
		i = encodeVarintSrStatsPerSidEgress(dAtA, i, uint64(len(*m.CounterName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.InstanceIdentifier != nil {
		i = encodeVarintSrStatsPerSidEgress(dAtA, i, uint64(*m.InstanceIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if m.SidIdentifier == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("sid_identifier")
	} else {
		i -= len(*m.SidIdentifier)
		copy(dAtA[i:], *m.SidIdentifier)
		i = encodeVarintSrStatsPerSidEgress(dAtA, i, uint64(len(*m.SidIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SegmentRoutingEgressStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentRoutingEgressStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SegmentRoutingEgressStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ByteRate != nil {
		i = encodeVarintSrStatsPerSidEgress(dAtA, i, uint64(*m.ByteRate))
		i--
		dAtA[i] = 0x20
	}
	if m.PacketRate != nil {
		i = encodeVarintSrStatsPerSidEgress(dAtA, i, uint64(*m.PacketRate))
		i--
		dAtA[i] = 0x18
	}
	if m.Bytes != nil {
		i = encodeVarintSrStatsPerSidEgress(dAtA, i, uint64(*m.Bytes))
		i--
		dAtA[i] = 0x10
	}
	if m.Packets != nil {
		i = encodeVarintSrStatsPerSidEgress(dAtA, i, uint64(*m.Packets))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSrStatsPerSidEgress(dAtA []byte, offset int, v uint64) int {
	offset -= sovSrStatsPerSidEgress(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SrStatsPerSidEgress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SidStats) > 0 {
		for _, e := range m.SidStats {
			l = e.Size()
			n += 1 + l + sovSrStatsPerSidEgress(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SegmentRoutingEgressRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SidIdentifier != nil {
		l = len(*m.SidIdentifier)
		n += 1 + l + sovSrStatsPerSidEgress(uint64(l))
	}
	if m.InstanceIdentifier != nil {
		n += 1 + sovSrStatsPerSidEgress(uint64(*m.InstanceIdentifier))
	}
	if m.CounterName != nil {
		l = len(*m.CounterName)
		n += 1 + l + sovSrStatsPerSidEgress(uint64(l))
	}
	if m.IngressStats != nil {
		l = m.IngressStats.Size()
		n += 1 + l + sovSrStatsPerSidEgress(uint64(l))
	}
	if m.EgressStats != nil {
		l = m.EgressStats.Size()
		n += 1 + l + sovSrStatsPerSidEgress(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SegmentRoutingEgressStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Packets != nil {
		n += 1 + sovSrStatsPerSidEgress(uint64(*m.Packets))
	}
	if m.Bytes != nil {
		n += 1 + sovSrStatsPerSidEgress(uint64(*m.Bytes))
	}
	if m.PacketRate != nil {
		n += 1 + sovSrStatsPerSidEgress(uint64(*m.PacketRate))
	}
	if m.ByteRate != nil {
		n += 1 + sovSrStatsPerSidEgress(uint64(*m.ByteRate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSrStatsPerSidEgress(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSrStatsPerSidEgress(x uint64) (n int) {
	return sovSrStatsPerSidEgress(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SrStatsPerSidEgress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSrStatsPerSidEgress
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SrStatsPerSidEgress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SrStatsPerSidEgress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SidStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrStatsPerSidEgress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSrStatsPerSidEgress
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSrStatsPerSidEgress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SidStats = append(m.SidStats, &SegmentRoutingEgressRecord{})
			if err := m.SidStats[len(m.SidStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSrStatsPerSidEgress(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSrStatsPerSidEgress
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSrStatsPerSidEgress
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentRoutingEgressRecord) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSrStatsPerSidEgress
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentRoutingEgressRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentRoutingEgressRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SidIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrStatsPerSidEgress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSrStatsPerSidEgress
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSrStatsPerSidEgress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SidIdentifier = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceIdentifier", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrStatsPerSidEgress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InstanceIdentifier = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrStatsPerSidEgress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSrStatsPerSidEgress
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSrStatsPerSidEgress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CounterName = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrStatsPerSidEgress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSrStatsPerSidEgress
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSrStatsPerSidEgress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IngressStats == nil {
				m.IngressStats = &SegmentRoutingEgressStats{}
			}
			if err := m.IngressStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgressStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrStatsPerSidEgress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSrStatsPerSidEgress
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSrStatsPerSidEgress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EgressStats == nil {
				m.EgressStats = &SegmentRoutingEgressStats{}
			}
			if err := m.EgressStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSrStatsPerSidEgress(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSrStatsPerSidEgress
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSrStatsPerSidEgress
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("sid_identifier")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("counter_name")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentRoutingEgressStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSrStatsPerSidEgress
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentRoutingEgressStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentRoutingEgressStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrStatsPerSidEgress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Packets = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrStatsPerSidEgress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bytes = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrStatsPerSidEgress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PacketRate = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByteRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrStatsPerSidEgress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ByteRate = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSrStatsPerSidEgress(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSrStatsPerSidEgress
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSrStatsPerSidEgress
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSrStatsPerSidEgress(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSrStatsPerSidEgress
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSrStatsPerSidEgress
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSrStatsPerSidEgress
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSrStatsPerSidEgress
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSrStatsPerSidEgress
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSrStatsPerSidEgress
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSrStatsPerSidEgress        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSrStatsPerSidEgress          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSrStatsPerSidEgress = fmt.Errorf("proto: unexpected end of group")
)
