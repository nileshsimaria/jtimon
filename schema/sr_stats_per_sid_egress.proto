
syntax = "proto2";
option go_package = "git.juniper.net/iceberg/healthbot-ingest-jti-native/pkg/jti/adapters/_junos/schema";
import "telemetry_top.proto";

//
// This occupies branch 26 from JuniperNetworksSensors
//
extend JuniperNetworksSensors {
    optional SrStatsPerSidEgress jnpr_sr_stats_per_sid_egress_ext = 26;
 }
 
 //
 // Top-level message
 //
 message SrStatsPerSidEgress {
     // List of SR stats per SID records
     repeated SegmentRoutingEgressRecord sid_stats = 1;
 }
 
 //
 // SR statistics record
 //
 message SegmentRoutingEgressRecord {
     // Name of the SID
     required string      sid_identifier        = 1  [(telemetry_options).is_key = true];
 
     // Instance Identifier for cases when RPD creates multiple instances
     optional uint32 instance_identifier        = 2  [(telemetry_options).is_key = true];
 
     // Name of the counter. This is useful when an SR label has multiple counters.
     // For some scenarios like routing restart, it is possible that a new counter is
     // created in the hardware.
     required string      counter_name         = 3  [(telemetry_options).is_key = true];
 
     // Ingress Traffic statistics
     optional SegmentRoutingEgressStats ingress_stats = 4;
 
     // Egress statistics
     optional SegmentRoutingEgressStats egress_stats  = 5;
 }
 
 message SegmentRoutingEgressStats {
     // Packet and Byte statistics
     optional uint64      packets = 1         [(telemetry_options).is_counter = true];
     optional uint64      bytes = 2           [(telemetry_options).is_counter = true];
 
     // Rates of the above counters.
     optional uint64      packet_rate = 3    [(telemetry_options).is_gauge = true];
     optional uint64      byte_rate = 4     [(telemetry_options).is_gauge = true];
 }
 
 
 

