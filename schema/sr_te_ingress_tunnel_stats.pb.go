// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sr_te_ingress_tunnel_stats.proto

package schema

import (
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
// Top-level message
//
type SrTeIngressTunnelStats struct {
	// List of SR TE stats per BSID, IP and Color records
	TeIngressTunnelStats []*SegmentRoutingTeIngressTunnelRecord `protobuf:"bytes,1,rep,name=te_ingress_tunnel_stats,json=teIngressTunnelStats" json:"te_ingress_tunnel_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *SrTeIngressTunnelStats) Reset()         { *m = SrTeIngressTunnelStats{} }
func (m *SrTeIngressTunnelStats) String() string { return proto.CompactTextString(m) }
func (*SrTeIngressTunnelStats) ProtoMessage()    {}
func (*SrTeIngressTunnelStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba37114a3c98fc80, []int{0}
}
func (m *SrTeIngressTunnelStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SrTeIngressTunnelStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SrTeIngressTunnelStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SrTeIngressTunnelStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SrTeIngressTunnelStats.Merge(m, src)
}
func (m *SrTeIngressTunnelStats) XXX_Size() int {
	return m.Size()
}
func (m *SrTeIngressTunnelStats) XXX_DiscardUnknown() {
	xxx_messageInfo_SrTeIngressTunnelStats.DiscardUnknown(m)
}

var xxx_messageInfo_SrTeIngressTunnelStats proto.InternalMessageInfo

func (m *SrTeIngressTunnelStats) GetTeIngressTunnelStats() []*SegmentRoutingTeIngressTunnelRecord {
	if m != nil {
		return m.TeIngressTunnelStats
	}
	return nil
}

//
// SR TE Ingress Tunnel statistics record
//
type SegmentRoutingTeIngressTunnelRecord struct {
	// Name of the tunnel
	TunnelName *string `protobuf:"bytes,1,req,name=tunnel_name,json=tunnelName" json:"tunnel_name,omitempty"`
	// Instance Identifier for cases when RPD creates multiple instances
	InstanceIdentifier *uint32 `protobuf:"varint,2,opt,name=instance_identifier,json=instanceIdentifier" json:"instance_identifier,omitempty"`
	// Name of the counter. This is useful when an SR label has multiple counters.
	// For some scenarios like routing restart, it is possible that a new counter is
	// created in the hardware.
	CounterName *string `protobuf:"bytes,3,opt,name=counter_name,json=counterName" json:"counter_name,omitempty"`
	// Statistics
	Stats                *SegmentRoutingTeIngressTunnelStats `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *SegmentRoutingTeIngressTunnelRecord) Reset()         { *m = SegmentRoutingTeIngressTunnelRecord{} }
func (m *SegmentRoutingTeIngressTunnelRecord) String() string { return proto.CompactTextString(m) }
func (*SegmentRoutingTeIngressTunnelRecord) ProtoMessage()    {}
func (*SegmentRoutingTeIngressTunnelRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba37114a3c98fc80, []int{1}
}
func (m *SegmentRoutingTeIngressTunnelRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SegmentRoutingTeIngressTunnelRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SegmentRoutingTeIngressTunnelRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SegmentRoutingTeIngressTunnelRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentRoutingTeIngressTunnelRecord.Merge(m, src)
}
func (m *SegmentRoutingTeIngressTunnelRecord) XXX_Size() int {
	return m.Size()
}
func (m *SegmentRoutingTeIngressTunnelRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentRoutingTeIngressTunnelRecord.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentRoutingTeIngressTunnelRecord proto.InternalMessageInfo

func (m *SegmentRoutingTeIngressTunnelRecord) GetTunnelName() string {
	if m != nil && m.TunnelName != nil {
		return *m.TunnelName
	}
	return ""
}

func (m *SegmentRoutingTeIngressTunnelRecord) GetInstanceIdentifier() uint32 {
	if m != nil && m.InstanceIdentifier != nil {
		return *m.InstanceIdentifier
	}
	return 0
}

func (m *SegmentRoutingTeIngressTunnelRecord) GetCounterName() string {
	if m != nil && m.CounterName != nil {
		return *m.CounterName
	}
	return ""
}

func (m *SegmentRoutingTeIngressTunnelRecord) GetStats() *SegmentRoutingTeIngressTunnelStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type SegmentRoutingTeIngressTunnelStats struct {
	// Packet and Byte statistics
	Packets *uint64 `protobuf:"varint,1,opt,name=packets" json:"packets,omitempty"`
	Bytes   *uint64 `protobuf:"varint,2,opt,name=bytes" json:"bytes,omitempty"`
	// Rates of the above counters
	PacketRate           *uint64  `protobuf:"varint,3,opt,name=packet_rate,json=packetRate" json:"packet_rate,omitempty"`
	ByteRate             *uint64  `protobuf:"varint,4,opt,name=byte_rate,json=byteRate" json:"byte_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SegmentRoutingTeIngressTunnelStats) Reset()         { *m = SegmentRoutingTeIngressTunnelStats{} }
func (m *SegmentRoutingTeIngressTunnelStats) String() string { return proto.CompactTextString(m) }
func (*SegmentRoutingTeIngressTunnelStats) ProtoMessage()    {}
func (*SegmentRoutingTeIngressTunnelStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba37114a3c98fc80, []int{2}
}
func (m *SegmentRoutingTeIngressTunnelStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SegmentRoutingTeIngressTunnelStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SegmentRoutingTeIngressTunnelStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SegmentRoutingTeIngressTunnelStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentRoutingTeIngressTunnelStats.Merge(m, src)
}
func (m *SegmentRoutingTeIngressTunnelStats) XXX_Size() int {
	return m.Size()
}
func (m *SegmentRoutingTeIngressTunnelStats) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentRoutingTeIngressTunnelStats.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentRoutingTeIngressTunnelStats proto.InternalMessageInfo

func (m *SegmentRoutingTeIngressTunnelStats) GetPackets() uint64 {
	if m != nil && m.Packets != nil {
		return *m.Packets
	}
	return 0
}

func (m *SegmentRoutingTeIngressTunnelStats) GetBytes() uint64 {
	if m != nil && m.Bytes != nil {
		return *m.Bytes
	}
	return 0
}

func (m *SegmentRoutingTeIngressTunnelStats) GetPacketRate() uint64 {
	if m != nil && m.PacketRate != nil {
		return *m.PacketRate
	}
	return 0
}

func (m *SegmentRoutingTeIngressTunnelStats) GetByteRate() uint64 {
	if m != nil && m.ByteRate != nil {
		return *m.ByteRate
	}
	return 0
}

var E_JnprSrTeIngressTunnelStatsExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*SrTeIngressTunnelStats)(nil),
	Field:         29,
	Name:          "jnpr_sr_te_ingress_tunnel_stats_ext",
	Tag:           "bytes,29,opt,name=jnpr_sr_te_ingress_tunnel_stats_ext",
	Filename:      "sr_te_ingress_tunnel_stats.proto",
}

func init() {
	proto.RegisterType((*SrTeIngressTunnelStats)(nil), "SrTeIngressTunnelStats")
	proto.RegisterType((*SegmentRoutingTeIngressTunnelRecord)(nil), "SegmentRoutingTeIngressTunnelRecord")
	proto.RegisterType((*SegmentRoutingTeIngressTunnelStats)(nil), "SegmentRoutingTeIngressTunnelStats")
	proto.RegisterExtension(E_JnprSrTeIngressTunnelStatsExt)
}

func init() { proto.RegisterFile("sr_te_ingress_tunnel_stats.proto", fileDescriptor_ba37114a3c98fc80) }

var fileDescriptor_ba37114a3c98fc80 = []byte{
	// 446 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xb5, 0x69, 0x22, 0xda, 0x0d, 0x5c, 0x5c, 0x44, 0x2c, 0x50, 0x83, 0xe5, 0x20, 0xe4,
	0x4b, 0x6c, 0xa9, 0x07, 0x24, 0x38, 0xa1, 0x4a, 0x1c, 0xca, 0xa1, 0x87, 0x4d, 0x4f, 0x70, 0x58,
	0x36, 0xce, 0xe0, 0xac, 0x13, 0xcf, 0x5a, 0xbb, 0x63, 0x68, 0x25, 0x4e, 0x3c, 0x10, 0xcf, 0xc1,
	0x91, 0x47, 0x40, 0x39, 0xf2, 0x14, 0xc8, 0xde, 0xa6, 0x20, 0x94, 0x00, 0xd7, 0xf9, 0xbf, 0x7f,
	0xfe, 0xfd, 0x47, 0xcb, 0x23, 0x67, 0x25, 0x81, 0xd4, 0x58, 0x58, 0x70, 0x4e, 0x52, 0x83, 0x08,
	0x6b, 0xe9, 0x48, 0x91, 0x4b, 0x6b, 0x6b, 0xc8, 0x3c, 0x3c, 0x26, 0x58, 0x43, 0x05, 0x64, 0xaf,
	0x25, 0x99, 0xda, 0x0f, 0xe3, 0x86, 0x3f, 0x98, 0xd9, 0x4b, 0x38, 0xf7, 0xb6, 0xcb, 0xce, 0x35,
	0x6b, 0x4d, 0xc1, 0x5b, 0x3e, 0xda, 0xb3, 0x2f, 0x64, 0xd1, 0x41, 0x32, 0x3c, 0x7d, 0x92, 0xce,
	0xa0, 0xa8, 0x00, 0x49, 0x98, 0x86, 0x34, 0x16, 0x7f, 0x6c, 0x11, 0x90, 0x1b, 0xbb, 0x10, 0xf7,
	0x69, 0xc7, 0xf2, 0xf8, 0x07, 0xe3, 0x93, 0xff, 0x70, 0x07, 0x4f, 0xf9, 0xf0, 0x26, 0x19, 0x55,
	0x05, 0x21, 0x8b, 0x7a, 0xc9, 0xd1, 0xd9, 0xe0, 0xf3, 0xcb, 0xde, 0x21, 0x13, 0xdc, 0x2b, 0x17,
	0xaa, 0x82, 0xe0, 0x19, 0x3f, 0xd6, 0xe8, 0x48, 0x61, 0x0e, 0x52, 0x2f, 0x00, 0x49, 0xbf, 0xd7,
	0x60, 0xc3, 0x5e, 0xc4, 0x92, 0x7b, 0x5b, 0x3e, 0xd8, 0x12, 0xe7, 0xb7, 0x40, 0x90, 0xf0, 0xbb,
	0xb9, 0x69, 0x90, 0xc0, 0xfa, 0x80, 0x83, 0x88, 0xfd, 0x0a, 0x18, 0xde, 0x48, 0x5d, 0xc2, 0x73,
	0x3e, 0xf0, 0xe5, 0xfb, 0x11, 0x4b, 0x86, 0xa7, 0x93, 0xbf, 0x97, 0xef, 0x5a, 0x0a, 0xef, 0x88,
	0xbf, 0x30, 0x1e, 0xff, 0x9b, 0x0e, 0x1e, 0xf3, 0x3b, 0xb5, 0xca, 0x57, 0xd0, 0x1d, 0x98, 0x25,
	0xfd, 0xee, 0x19, 0x21, 0x13, 0xdb, 0x69, 0xf0, 0x88, 0x0f, 0xe6, 0xd7, 0x04, 0xae, 0xab, 0x75,
	0x2b, 0xfb, 0x59, 0x7b, 0x29, 0xcf, 0x49, 0xab, 0xc8, 0x17, 0xf1, 0x48, 0xc4, 0x04, 0xf7, 0x8a,
	0x50, 0x04, 0x41, 0xcc, 0x8f, 0x5a, 0x83, 0xa7, 0xfa, 0xbf, 0x53, 0x87, 0xed, 0xbc, 0x65, 0x5e,
	0x7c, 0xe2, 0x93, 0x12, 0x6b, 0x2b, 0xf7, 0x7f, 0x29, 0x09, 0x57, 0x14, 0x8c, 0xd2, 0xd7, 0x0d,
	0xea, 0x1a, 0xec, 0x05, 0xd0, 0x47, 0x63, 0x57, 0x6e, 0x06, 0xe8, 0x8c, 0x75, 0xe1, 0x49, 0x77,
	0xa2, 0x51, 0xba, 0xfb, 0x67, 0x89, 0x93, 0x76, 0xf9, 0x6e, 0xed, 0xd5, 0x15, 0x9d, 0xbd, 0xfb,
	0xba, 0x19, 0xb3, 0x6f, 0x9b, 0x31, 0xfb, 0xbe, 0x19, 0xb3, 0x37, 0xa2, 0xd0, 0x94, 0x96, 0x3e,
	0x27, 0x45, 0xa0, 0x4c, 0xe7, 0x30, 0x07, 0x5b, 0x64, 0x4b, 0x50, 0x6b, 0x5a, 0xce, 0x0d, 0x4d,
	0x35, 0x16, 0xe0, 0x68, 0x5a, 0x92, 0x9e, 0xa2, 0x22, 0xfd, 0x01, 0xb2, 0x7a, 0x55, 0x64, 0x25,
	0xe9, 0x4c, 0x2d, 0x54, 0x4d, 0x60, 0x5d, 0x26, 0xcb, 0x06, 0x8d, 0xcb, 0x5c, 0xbe, 0x84, 0x4a,
	0xfd, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x21, 0x8b, 0xd4, 0x12, 0x2c, 0x03, 0x00, 0x00,
}

func (m *SrTeIngressTunnelStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SrTeIngressTunnelStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SrTeIngressTunnelStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TeIngressTunnelStats) > 0 {
		for iNdEx := len(m.TeIngressTunnelStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TeIngressTunnelStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSrTeIngressTunnelStats(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SegmentRoutingTeIngressTunnelRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentRoutingTeIngressTunnelRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SegmentRoutingTeIngressTunnelRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Stats != nil {
		{
			size, err := m.Stats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSrTeIngressTunnelStats(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CounterName != nil {
		i -= len(*m.CounterName)
		copy(dAtA[i:], *m.CounterName)
		i = encodeVarintSrTeIngressTunnelStats(dAtA, i, uint64(len(*m.CounterName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.InstanceIdentifier != nil {
		i = encodeVarintSrTeIngressTunnelStats(dAtA, i, uint64(*m.InstanceIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if m.TunnelName == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("tunnel_name")
	} else {
		i -= len(*m.TunnelName)
		copy(dAtA[i:], *m.TunnelName)
		i = encodeVarintSrTeIngressTunnelStats(dAtA, i, uint64(len(*m.TunnelName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SegmentRoutingTeIngressTunnelStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentRoutingTeIngressTunnelStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SegmentRoutingTeIngressTunnelStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ByteRate != nil {
		i = encodeVarintSrTeIngressTunnelStats(dAtA, i, uint64(*m.ByteRate))
		i--
		dAtA[i] = 0x20
	}
	if m.PacketRate != nil {
		i = encodeVarintSrTeIngressTunnelStats(dAtA, i, uint64(*m.PacketRate))
		i--
		dAtA[i] = 0x18
	}
	if m.Bytes != nil {
		i = encodeVarintSrTeIngressTunnelStats(dAtA, i, uint64(*m.Bytes))
		i--
		dAtA[i] = 0x10
	}
	if m.Packets != nil {
		i = encodeVarintSrTeIngressTunnelStats(dAtA, i, uint64(*m.Packets))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSrTeIngressTunnelStats(dAtA []byte, offset int, v uint64) int {
	offset -= sovSrTeIngressTunnelStats(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SrTeIngressTunnelStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TeIngressTunnelStats) > 0 {
		for _, e := range m.TeIngressTunnelStats {
			l = e.Size()
			n += 1 + l + sovSrTeIngressTunnelStats(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SegmentRoutingTeIngressTunnelRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TunnelName != nil {
		l = len(*m.TunnelName)
		n += 1 + l + sovSrTeIngressTunnelStats(uint64(l))
	}
	if m.InstanceIdentifier != nil {
		n += 1 + sovSrTeIngressTunnelStats(uint64(*m.InstanceIdentifier))
	}
	if m.CounterName != nil {
		l = len(*m.CounterName)
		n += 1 + l + sovSrTeIngressTunnelStats(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovSrTeIngressTunnelStats(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SegmentRoutingTeIngressTunnelStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Packets != nil {
		n += 1 + sovSrTeIngressTunnelStats(uint64(*m.Packets))
	}
	if m.Bytes != nil {
		n += 1 + sovSrTeIngressTunnelStats(uint64(*m.Bytes))
	}
	if m.PacketRate != nil {
		n += 1 + sovSrTeIngressTunnelStats(uint64(*m.PacketRate))
	}
	if m.ByteRate != nil {
		n += 1 + sovSrTeIngressTunnelStats(uint64(*m.ByteRate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSrTeIngressTunnelStats(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSrTeIngressTunnelStats(x uint64) (n int) {
	return sovSrTeIngressTunnelStats(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SrTeIngressTunnelStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSrTeIngressTunnelStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SrTeIngressTunnelStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SrTeIngressTunnelStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeIngressTunnelStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrTeIngressTunnelStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSrTeIngressTunnelStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSrTeIngressTunnelStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeIngressTunnelStats = append(m.TeIngressTunnelStats, &SegmentRoutingTeIngressTunnelRecord{})
			if err := m.TeIngressTunnelStats[len(m.TeIngressTunnelStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSrTeIngressTunnelStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSrTeIngressTunnelStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSrTeIngressTunnelStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentRoutingTeIngressTunnelRecord) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSrTeIngressTunnelStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentRoutingTeIngressTunnelRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentRoutingTeIngressTunnelRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrTeIngressTunnelStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSrTeIngressTunnelStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSrTeIngressTunnelStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TunnelName = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceIdentifier", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrTeIngressTunnelStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InstanceIdentifier = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrTeIngressTunnelStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSrTeIngressTunnelStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSrTeIngressTunnelStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CounterName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrTeIngressTunnelStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSrTeIngressTunnelStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSrTeIngressTunnelStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &SegmentRoutingTeIngressTunnelStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSrTeIngressTunnelStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSrTeIngressTunnelStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSrTeIngressTunnelStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("tunnel_name")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentRoutingTeIngressTunnelStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSrTeIngressTunnelStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentRoutingTeIngressTunnelStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentRoutingTeIngressTunnelStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrTeIngressTunnelStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Packets = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrTeIngressTunnelStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bytes = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrTeIngressTunnelStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PacketRate = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByteRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrTeIngressTunnelStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ByteRate = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSrTeIngressTunnelStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSrTeIngressTunnelStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSrTeIngressTunnelStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSrTeIngressTunnelStats(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSrTeIngressTunnelStats
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSrTeIngressTunnelStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSrTeIngressTunnelStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSrTeIngressTunnelStats
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSrTeIngressTunnelStats
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSrTeIngressTunnelStats
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSrTeIngressTunnelStats        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSrTeIngressTunnelStats          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSrTeIngressTunnelStats = fmt.Errorf("proto: unexpected end of group")
)
