syntax = "proto2";
option go_package = "git.juniper.net/iceberg/healthbot-ingest-jti-native/pkg/jti/adapters/_junos/schema";
import "telemetry_top.proto";

//
// This occupies branch 29 from JuniperNetworksSensors
//
extend JuniperNetworksSensors {
    optional SrTeIngressTunnelStats jnpr_sr_te_ingress_tunnel_stats_ext = 29;
}

//
// Top-level message
//
message SrTeIngressTunnelStats {
    // List of SR TE stats per BSID, IP and Color records
    repeated SegmentRoutingTeIngressTunnelRecord te_ingress_tunnel_stats = 1;
}

//
// SR TE Ingress Tunnel statistics record
//
message SegmentRoutingTeIngressTunnelRecord {
    // Name of the tunnel
    required string      tunnel_name            = 1  [(telemetry_options).is_key = true];

    // Instance Identifier for cases when RPD creates multiple instances
    optional uint32 instance_identifier         = 2  [(telemetry_options).is_key = true];

    // Name of the counter. This is useful when an SR label has multiple counters.
    // For some scenarios like routing restart, it is possible that a new counter is
    // created in the hardware.
    optional string      counter_name           = 3  [(telemetry_options).is_key = true];

    // Statistics
    optional SegmentRoutingTeIngressTunnelStats stats    = 4;
}

message SegmentRoutingTeIngressTunnelStats {
    // Packet and Byte statistics
    optional uint64      packets      = 1   [(telemetry_options).is_counter = true];
    optional uint64      bytes        = 2   [(telemetry_options).is_counter = true];

    // Rates of the above counters
    optional uint64      packet_rate  = 3   [(telemetry_options).is_gauge = true];
    optional uint64      byte_rate    = 4   [(telemetry_options).is_gauge = true];
}
