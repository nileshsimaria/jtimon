// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sr_te_ip_stats.proto

package schema

import (
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
// Top-level message
//
type SrTeIpStats struct {
	// List of SR TE stats per IP and Color records
	TeIpStats            []*SegmentRoutingTeIpRecord `protobuf:"bytes,1,rep,name=te_ip_stats,json=teIpStats" json:"te_ip_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *SrTeIpStats) Reset()         { *m = SrTeIpStats{} }
func (m *SrTeIpStats) String() string { return proto.CompactTextString(m) }
func (*SrTeIpStats) ProtoMessage()    {}
func (*SrTeIpStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_891ddfdc1085283c, []int{0}
}
func (m *SrTeIpStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SrTeIpStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SrTeIpStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SrTeIpStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SrTeIpStats.Merge(m, src)
}
func (m *SrTeIpStats) XXX_Size() int {
	return m.Size()
}
func (m *SrTeIpStats) XXX_DiscardUnknown() {
	xxx_messageInfo_SrTeIpStats.DiscardUnknown(m)
}

var xxx_messageInfo_SrTeIpStats proto.InternalMessageInfo

func (m *SrTeIpStats) GetTeIpStats() []*SegmentRoutingTeIpRecord {
	if m != nil {
		return m.TeIpStats
	}
	return nil
}

//
// SR TE BSID statistics record
//
type SegmentRoutingTeIpRecord struct {
	// Ip prefix of endpoint
	ToIpPrefix *string `protobuf:"bytes,2,req,name=to_ip_prefix,json=toIpPrefix" json:"to_ip_prefix,omitempty"`
	// Policy color value
	ColorIdentifier *uint32 `protobuf:"varint,3,opt,name=color_identifier,json=colorIdentifier" json:"color_identifier,omitempty"`
	// Instance Identifier for cases when RPD creates multiple instances
	InstanceIdentifier *uint32 `protobuf:"varint,4,opt,name=instance_identifier,json=instanceIdentifier" json:"instance_identifier,omitempty"`
	// Name of the counter. This is useful when an SR label has multiple counters.
	// For some scenarios like routing restart, it is possible that a new counter is
	// created in the hardware.
	CounterName *string `protobuf:"bytes,5,opt,name=counter_name,json=counterName" json:"counter_name,omitempty"`
	// Statistics
	Stats                *SegmentRoutingTeIpStats `protobuf:"bytes,6,opt,name=stats" json:"stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *SegmentRoutingTeIpRecord) Reset()         { *m = SegmentRoutingTeIpRecord{} }
func (m *SegmentRoutingTeIpRecord) String() string { return proto.CompactTextString(m) }
func (*SegmentRoutingTeIpRecord) ProtoMessage()    {}
func (*SegmentRoutingTeIpRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_891ddfdc1085283c, []int{1}
}
func (m *SegmentRoutingTeIpRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SegmentRoutingTeIpRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SegmentRoutingTeIpRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SegmentRoutingTeIpRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentRoutingTeIpRecord.Merge(m, src)
}
func (m *SegmentRoutingTeIpRecord) XXX_Size() int {
	return m.Size()
}
func (m *SegmentRoutingTeIpRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentRoutingTeIpRecord.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentRoutingTeIpRecord proto.InternalMessageInfo

func (m *SegmentRoutingTeIpRecord) GetToIpPrefix() string {
	if m != nil && m.ToIpPrefix != nil {
		return *m.ToIpPrefix
	}
	return ""
}

func (m *SegmentRoutingTeIpRecord) GetColorIdentifier() uint32 {
	if m != nil && m.ColorIdentifier != nil {
		return *m.ColorIdentifier
	}
	return 0
}

func (m *SegmentRoutingTeIpRecord) GetInstanceIdentifier() uint32 {
	if m != nil && m.InstanceIdentifier != nil {
		return *m.InstanceIdentifier
	}
	return 0
}

func (m *SegmentRoutingTeIpRecord) GetCounterName() string {
	if m != nil && m.CounterName != nil {
		return *m.CounterName
	}
	return ""
}

func (m *SegmentRoutingTeIpRecord) GetStats() *SegmentRoutingTeIpStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type SegmentRoutingTeIpStats struct {
	// Packet and Byte statistics
	Packets *uint64 `protobuf:"varint,1,opt,name=packets" json:"packets,omitempty"`
	Bytes   *uint64 `protobuf:"varint,2,opt,name=bytes" json:"bytes,omitempty"`
	// Rates of the above counters
	PacketRate           *uint64  `protobuf:"varint,3,opt,name=packet_rate,json=packetRate" json:"packet_rate,omitempty"`
	ByteRate             *uint64  `protobuf:"varint,4,opt,name=byte_rate,json=byteRate" json:"byte_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SegmentRoutingTeIpStats) Reset()         { *m = SegmentRoutingTeIpStats{} }
func (m *SegmentRoutingTeIpStats) String() string { return proto.CompactTextString(m) }
func (*SegmentRoutingTeIpStats) ProtoMessage()    {}
func (*SegmentRoutingTeIpStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_891ddfdc1085283c, []int{2}
}
func (m *SegmentRoutingTeIpStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SegmentRoutingTeIpStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SegmentRoutingTeIpStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SegmentRoutingTeIpStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentRoutingTeIpStats.Merge(m, src)
}
func (m *SegmentRoutingTeIpStats) XXX_Size() int {
	return m.Size()
}
func (m *SegmentRoutingTeIpStats) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentRoutingTeIpStats.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentRoutingTeIpStats proto.InternalMessageInfo

func (m *SegmentRoutingTeIpStats) GetPackets() uint64 {
	if m != nil && m.Packets != nil {
		return *m.Packets
	}
	return 0
}

func (m *SegmentRoutingTeIpStats) GetBytes() uint64 {
	if m != nil && m.Bytes != nil {
		return *m.Bytes
	}
	return 0
}

func (m *SegmentRoutingTeIpStats) GetPacketRate() uint64 {
	if m != nil && m.PacketRate != nil {
		return *m.PacketRate
	}
	return 0
}

func (m *SegmentRoutingTeIpStats) GetByteRate() uint64 {
	if m != nil && m.ByteRate != nil {
		return *m.ByteRate
	}
	return 0
}

var E_JnprSrTeIpStatsExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*SrTeIpStats)(nil),
	Field:         25,
	Name:          "jnpr_sr_te_ip_stats_ext",
	Tag:           "bytes,25,opt,name=jnpr_sr_te_ip_stats_ext",
	Filename:      "sr_te_ip_stats.proto",
}

func init() {
	proto.RegisterType((*SrTeIpStats)(nil), "SrTeIpStats")
	proto.RegisterType((*SegmentRoutingTeIpRecord)(nil), "SegmentRoutingTeIpRecord")
	proto.RegisterType((*SegmentRoutingTeIpStats)(nil), "SegmentRoutingTeIpStats")
	proto.RegisterExtension(E_JnprSrTeIpStatsExt)
}

func init() { proto.RegisterFile("sr_te_ip_stats.proto", fileDescriptor_891ddfdc1085283c) }

var fileDescriptor_891ddfdc1085283c = []byte{
	// 453 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xc1, 0x8e, 0xd3, 0x30,
	0x18, 0x84, 0xe5, 0x6c, 0x0b, 0x5b, 0xa7, 0x08, 0xe4, 0x45, 0x6a, 0x16, 0xa4, 0x12, 0xf5, 0x00,
	0xb9, 0x34, 0x41, 0x7b, 0x40, 0x82, 0x13, 0x5a, 0x09, 0x89, 0x72, 0x58, 0x21, 0x97, 0xd3, 0x5e,
	0x8c, 0x9b, 0xfe, 0x9b, 0x3a, 0x6d, 0x6c, 0xcb, 0xfe, 0x0b, 0xdd, 0x2b, 0x17, 0x1e, 0x84, 0x97,
	0xe1, 0xc8, 0x23, 0xa0, 0x3e, 0x09, 0x4a, 0x42, 0x21, 0x48, 0xf4, 0x3a, 0xf3, 0xcd, 0xd8, 0x1a,
	0xfd, 0xf4, 0xa1, 0x77, 0x02, 0x41, 0x28, 0x2b, 0x3c, 0x4a, 0xf4, 0xa9, 0x75, 0x06, 0xcd, 0xa3,
	0x33, 0x84, 0x0d, 0x54, 0x80, 0xee, 0x56, 0xa0, 0xb1, 0xad, 0x38, 0x79, 0x4b, 0xc3, 0xb9, 0xfb,
	0x00, 0x33, 0x3b, 0xaf, 0x49, 0xf6, 0x92, 0x86, 0x9d, 0x60, 0x44, 0xe2, 0x93, 0x24, 0xbc, 0x38,
	0x4f, 0xe7, 0x50, 0x54, 0xa0, 0x91, 0x9b, 0x2d, 0x2a, 0x5d, 0xd4, 0x38, 0x87, 0xdc, 0xb8, 0x25,
	0x1f, 0xe0, 0x21, 0x3a, 0xf9, 0x1a, 0xd0, 0xe8, 0x18, 0xc7, 0x9e, 0xd1, 0x21, 0x9a, 0xba, 0xd7,
	0x3a, 0xb8, 0x51, 0xbb, 0x28, 0x88, 0x83, 0x64, 0x70, 0xd9, 0xff, 0xf2, 0x3a, 0x38, 0x25, 0x9c,
	0xa2, 0x99, 0xd9, 0xf7, 0x8d, 0xc1, 0x9e, 0xd3, 0x07, 0xb9, 0xd9, 0x18, 0x27, 0xd4, 0x12, 0x34,
	0xaa, 0x1b, 0x05, 0x2e, 0x3a, 0x89, 0x49, 0x72, 0xef, 0x00, 0xdf, 0x6f, 0xec, 0xd9, 0x1f, 0x97,
	0xbd, 0xa0, 0x67, 0x4a, 0x7b, 0x94, 0x3a, 0x87, 0x6e, 0xa8, 0xd7, 0x0d, 0xb1, 0x03, 0xd1, 0xc9,
	0x25, 0x74, 0x98, 0x9b, 0xad, 0x46, 0x70, 0x42, 0xcb, 0x0a, 0xa2, 0x7e, 0x4c, 0xfe, 0x7e, 0x29,
	0xfc, 0x6d, 0x5d, 0xc9, 0x0a, 0x58, 0x4a, 0xfb, 0xed, 0x1c, 0x77, 0x62, 0x92, 0x84, 0x17, 0xd1,
	0x7f, 0xe6, 0x68, 0x26, 0xe0, 0x2d, 0x36, 0xf9, 0x46, 0xe8, 0xe8, 0x08, 0xc2, 0x9e, 0xd0, 0xbb,
	0x56, 0xe6, 0x6b, 0x68, 0xc6, 0x25, 0x49, 0xaf, 0x79, 0x30, 0x22, 0xfc, 0xa0, 0xb2, 0xc7, 0xb4,
	0xbf, 0xb8, 0x45, 0xf0, 0x51, 0xd0, 0xb5, 0x5b, 0x8d, 0x3d, 0xa5, 0x61, 0xcb, 0x09, 0x27, 0x11,
	0x9a, 0x61, 0x5a, 0x24, 0x26, 0x9c, 0xb6, 0x0e, 0x97, 0x08, 0x6c, 0x42, 0x07, 0x75, 0xa0, 0xa5,
	0x7a, 0x5d, 0xea, 0xb4, 0xd6, 0x6b, 0xe6, 0xd5, 0x35, 0x1d, 0x95, 0xda, 0x3a, 0xf1, 0xef, 0xad,
	0x08, 0xd8, 0x21, 0x1b, 0xa5, 0xef, 0xb6, 0x5a, 0x59, 0x70, 0x57, 0x80, 0x9f, 0x8d, 0x5b, 0xfb,
	0x39, 0x68, 0x6f, 0x9c, 0x8f, 0xce, 0x9b, 0x01, 0x86, 0x69, 0xe7, 0x64, 0x38, 0xab, 0x5b, 0x3a,
	0xc2, 0x9b, 0x1d, 0x5e, 0x7e, 0xfc, 0xbe, 0x1f, 0x93, 0x1f, 0xfb, 0x31, 0xf9, 0xb9, 0x1f, 0x93,
	0x6b, 0x5e, 0x28, 0x4c, 0xcb, 0xb6, 0x31, 0xd5, 0x80, 0x99, 0xca, 0x61, 0x01, 0xae, 0xc8, 0x56,
	0x20, 0x37, 0xb8, 0x5a, 0x18, 0x9c, 0x2a, 0x5d, 0x80, 0xc7, 0x69, 0x89, 0x6a, 0xaa, 0x25, 0xaa,
	0x4f, 0x90, 0xd9, 0x75, 0x91, 0x95, 0xa8, 0x32, 0xb9, 0x94, 0x16, 0xc1, 0xf9, 0x4c, 0x94, 0x5b,
	0x6d, 0x7c, 0xe6, 0xf3, 0x15, 0x54, 0xf2, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc8, 0x05, 0x68,
	0x5c, 0xe3, 0x02, 0x00, 0x00,
}

func (m *SrTeIpStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SrTeIpStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SrTeIpStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TeIpStats) > 0 {
		for iNdEx := len(m.TeIpStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TeIpStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSrTeIpStats(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SegmentRoutingTeIpRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentRoutingTeIpRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SegmentRoutingTeIpRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Stats != nil {
		{
			size, err := m.Stats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSrTeIpStats(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.CounterName != nil {
		i -= len(*m.CounterName)
		copy(dAtA[i:], *m.CounterName)
		i = encodeVarintSrTeIpStats(dAtA, i, uint64(len(*m.CounterName)))
		i--
		dAtA[i] = 0x2a
	}
	if m.InstanceIdentifier != nil {
		i = encodeVarintSrTeIpStats(dAtA, i, uint64(*m.InstanceIdentifier))
		i--
		dAtA[i] = 0x20
	}
	if m.ColorIdentifier != nil {
		i = encodeVarintSrTeIpStats(dAtA, i, uint64(*m.ColorIdentifier))
		i--
		dAtA[i] = 0x18
	}
	if m.ToIpPrefix == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("to_ip_prefix")
	} else {
		i -= len(*m.ToIpPrefix)
		copy(dAtA[i:], *m.ToIpPrefix)
		i = encodeVarintSrTeIpStats(dAtA, i, uint64(len(*m.ToIpPrefix)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *SegmentRoutingTeIpStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentRoutingTeIpStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SegmentRoutingTeIpStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ByteRate != nil {
		i = encodeVarintSrTeIpStats(dAtA, i, uint64(*m.ByteRate))
		i--
		dAtA[i] = 0x20
	}
	if m.PacketRate != nil {
		i = encodeVarintSrTeIpStats(dAtA, i, uint64(*m.PacketRate))
		i--
		dAtA[i] = 0x18
	}
	if m.Bytes != nil {
		i = encodeVarintSrTeIpStats(dAtA, i, uint64(*m.Bytes))
		i--
		dAtA[i] = 0x10
	}
	if m.Packets != nil {
		i = encodeVarintSrTeIpStats(dAtA, i, uint64(*m.Packets))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSrTeIpStats(dAtA []byte, offset int, v uint64) int {
	offset -= sovSrTeIpStats(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SrTeIpStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TeIpStats) > 0 {
		for _, e := range m.TeIpStats {
			l = e.Size()
			n += 1 + l + sovSrTeIpStats(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SegmentRoutingTeIpRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ToIpPrefix != nil {
		l = len(*m.ToIpPrefix)
		n += 1 + l + sovSrTeIpStats(uint64(l))
	}
	if m.ColorIdentifier != nil {
		n += 1 + sovSrTeIpStats(uint64(*m.ColorIdentifier))
	}
	if m.InstanceIdentifier != nil {
		n += 1 + sovSrTeIpStats(uint64(*m.InstanceIdentifier))
	}
	if m.CounterName != nil {
		l = len(*m.CounterName)
		n += 1 + l + sovSrTeIpStats(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovSrTeIpStats(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SegmentRoutingTeIpStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Packets != nil {
		n += 1 + sovSrTeIpStats(uint64(*m.Packets))
	}
	if m.Bytes != nil {
		n += 1 + sovSrTeIpStats(uint64(*m.Bytes))
	}
	if m.PacketRate != nil {
		n += 1 + sovSrTeIpStats(uint64(*m.PacketRate))
	}
	if m.ByteRate != nil {
		n += 1 + sovSrTeIpStats(uint64(*m.ByteRate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSrTeIpStats(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSrTeIpStats(x uint64) (n int) {
	return sovSrTeIpStats(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SrTeIpStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSrTeIpStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SrTeIpStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SrTeIpStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeIpStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrTeIpStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSrTeIpStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSrTeIpStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeIpStats = append(m.TeIpStats, &SegmentRoutingTeIpRecord{})
			if err := m.TeIpStats[len(m.TeIpStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSrTeIpStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSrTeIpStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSrTeIpStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentRoutingTeIpRecord) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSrTeIpStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentRoutingTeIpRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentRoutingTeIpRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToIpPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrTeIpStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSrTeIpStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSrTeIpStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ToIpPrefix = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColorIdentifier", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrTeIpStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ColorIdentifier = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceIdentifier", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrTeIpStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InstanceIdentifier = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrTeIpStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSrTeIpStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSrTeIpStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CounterName = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrTeIpStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSrTeIpStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSrTeIpStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &SegmentRoutingTeIpStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSrTeIpStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSrTeIpStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSrTeIpStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("to_ip_prefix")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentRoutingTeIpStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSrTeIpStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentRoutingTeIpStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentRoutingTeIpStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrTeIpStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Packets = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrTeIpStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bytes = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrTeIpStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PacketRate = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByteRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrTeIpStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ByteRate = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSrTeIpStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSrTeIpStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSrTeIpStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSrTeIpStats(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSrTeIpStats
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSrTeIpStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSrTeIpStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSrTeIpStats
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSrTeIpStats
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSrTeIpStats
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSrTeIpStats        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSrTeIpStats          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSrTeIpStats = fmt.Errorf("proto: unexpected end of group")
)
