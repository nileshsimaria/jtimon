// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sr_te_transit_tunnel_stats.proto

package schema

import (
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
// Top-level message
//
type SrTeTransitTunnelStats struct {
	// List of SR TE stats per BSID, IP and Color records
	TeTransitTunnelStats []*SegmentRoutingTeTransitTunnelRecord `protobuf:"bytes,1,rep,name=te_transit_tunnel_stats,json=teTransitTunnelStats" json:"te_transit_tunnel_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *SrTeTransitTunnelStats) Reset()         { *m = SrTeTransitTunnelStats{} }
func (m *SrTeTransitTunnelStats) String() string { return proto.CompactTextString(m) }
func (*SrTeTransitTunnelStats) ProtoMessage()    {}
func (*SrTeTransitTunnelStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_27e42ab698c19b99, []int{0}
}
func (m *SrTeTransitTunnelStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SrTeTransitTunnelStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SrTeTransitTunnelStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SrTeTransitTunnelStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SrTeTransitTunnelStats.Merge(m, src)
}
func (m *SrTeTransitTunnelStats) XXX_Size() int {
	return m.Size()
}
func (m *SrTeTransitTunnelStats) XXX_DiscardUnknown() {
	xxx_messageInfo_SrTeTransitTunnelStats.DiscardUnknown(m)
}

var xxx_messageInfo_SrTeTransitTunnelStats proto.InternalMessageInfo

func (m *SrTeTransitTunnelStats) GetTeTransitTunnelStats() []*SegmentRoutingTeTransitTunnelRecord {
	if m != nil {
		return m.TeTransitTunnelStats
	}
	return nil
}

//
// SR TE Transit Tunnel statistics record
//
type SegmentRoutingTeTransitTunnelRecord struct {
	// Name of the tunnel
	TunnelName *string `protobuf:"bytes,1,req,name=tunnel_name,json=tunnelName" json:"tunnel_name,omitempty"`
	// Instance Identifier for cases when RPD creates multiple instances
	InstanceIdentifier *uint32 `protobuf:"varint,2,opt,name=instance_identifier,json=instanceIdentifier" json:"instance_identifier,omitempty"`
	// Name of the counter. This is useful when an SR label has multiple counters.
	// For some scenarios like routing restart, it is possible that a new counter is
	// created in the hardware.
	CounterName *string `protobuf:"bytes,3,opt,name=counter_name,json=counterName" json:"counter_name,omitempty"`
	// Statistics
	Stats                *SegmentRoutingTeTransitTunnelStats `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *SegmentRoutingTeTransitTunnelRecord) Reset()         { *m = SegmentRoutingTeTransitTunnelRecord{} }
func (m *SegmentRoutingTeTransitTunnelRecord) String() string { return proto.CompactTextString(m) }
func (*SegmentRoutingTeTransitTunnelRecord) ProtoMessage()    {}
func (*SegmentRoutingTeTransitTunnelRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_27e42ab698c19b99, []int{1}
}
func (m *SegmentRoutingTeTransitTunnelRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SegmentRoutingTeTransitTunnelRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SegmentRoutingTeTransitTunnelRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SegmentRoutingTeTransitTunnelRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentRoutingTeTransitTunnelRecord.Merge(m, src)
}
func (m *SegmentRoutingTeTransitTunnelRecord) XXX_Size() int {
	return m.Size()
}
func (m *SegmentRoutingTeTransitTunnelRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentRoutingTeTransitTunnelRecord.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentRoutingTeTransitTunnelRecord proto.InternalMessageInfo

func (m *SegmentRoutingTeTransitTunnelRecord) GetTunnelName() string {
	if m != nil && m.TunnelName != nil {
		return *m.TunnelName
	}
	return ""
}

func (m *SegmentRoutingTeTransitTunnelRecord) GetInstanceIdentifier() uint32 {
	if m != nil && m.InstanceIdentifier != nil {
		return *m.InstanceIdentifier
	}
	return 0
}

func (m *SegmentRoutingTeTransitTunnelRecord) GetCounterName() string {
	if m != nil && m.CounterName != nil {
		return *m.CounterName
	}
	return ""
}

func (m *SegmentRoutingTeTransitTunnelRecord) GetStats() *SegmentRoutingTeTransitTunnelStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type SegmentRoutingTeTransitTunnelStats struct {
	// Packet and Byte statistics
	Packets *uint64 `protobuf:"varint,1,opt,name=packets" json:"packets,omitempty"`
	Bytes   *uint64 `protobuf:"varint,2,opt,name=bytes" json:"bytes,omitempty"`
	// Rates of the above counters
	PacketRate           *uint64  `protobuf:"varint,3,opt,name=packet_rate,json=packetRate" json:"packet_rate,omitempty"`
	ByteRate             *uint64  `protobuf:"varint,4,opt,name=byte_rate,json=byteRate" json:"byte_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SegmentRoutingTeTransitTunnelStats) Reset()         { *m = SegmentRoutingTeTransitTunnelStats{} }
func (m *SegmentRoutingTeTransitTunnelStats) String() string { return proto.CompactTextString(m) }
func (*SegmentRoutingTeTransitTunnelStats) ProtoMessage()    {}
func (*SegmentRoutingTeTransitTunnelStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_27e42ab698c19b99, []int{2}
}
func (m *SegmentRoutingTeTransitTunnelStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SegmentRoutingTeTransitTunnelStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SegmentRoutingTeTransitTunnelStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SegmentRoutingTeTransitTunnelStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentRoutingTeTransitTunnelStats.Merge(m, src)
}
func (m *SegmentRoutingTeTransitTunnelStats) XXX_Size() int {
	return m.Size()
}
func (m *SegmentRoutingTeTransitTunnelStats) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentRoutingTeTransitTunnelStats.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentRoutingTeTransitTunnelStats proto.InternalMessageInfo

func (m *SegmentRoutingTeTransitTunnelStats) GetPackets() uint64 {
	if m != nil && m.Packets != nil {
		return *m.Packets
	}
	return 0
}

func (m *SegmentRoutingTeTransitTunnelStats) GetBytes() uint64 {
	if m != nil && m.Bytes != nil {
		return *m.Bytes
	}
	return 0
}

func (m *SegmentRoutingTeTransitTunnelStats) GetPacketRate() uint64 {
	if m != nil && m.PacketRate != nil {
		return *m.PacketRate
	}
	return 0
}

func (m *SegmentRoutingTeTransitTunnelStats) GetByteRate() uint64 {
	if m != nil && m.ByteRate != nil {
		return *m.ByteRate
	}
	return 0
}

var E_JnprSrTeTransitTunnelStatsExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*SrTeTransitTunnelStats)(nil),
	Field:         28,
	Name:          "jnpr_sr_te_transit_tunnel_stats_ext",
	Tag:           "bytes,28,opt,name=jnpr_sr_te_transit_tunnel_stats_ext",
	Filename:      "sr_te_transit_tunnel_stats.proto",
}

func init() {
	proto.RegisterType((*SrTeTransitTunnelStats)(nil), "SrTeTransitTunnelStats")
	proto.RegisterType((*SegmentRoutingTeTransitTunnelRecord)(nil), "SegmentRoutingTeTransitTunnelRecord")
	proto.RegisterType((*SegmentRoutingTeTransitTunnelStats)(nil), "SegmentRoutingTeTransitTunnelStats")
	proto.RegisterExtension(E_JnprSrTeTransitTunnelStatsExt)
}

func init() { proto.RegisterFile("sr_te_transit_tunnel_stats.proto", fileDescriptor_27e42ab698c19b99) }

var fileDescriptor_27e42ab698c19b99 = []byte{
	// 446 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xbf, 0x8e, 0xd3, 0x40,
	0x10, 0xc6, 0xb5, 0xb9, 0x44, 0xdc, 0x6d, 0xa0, 0xf1, 0x21, 0x62, 0xf1, 0x27, 0x58, 0x0e, 0x42,
	0x6e, 0x62, 0x4b, 0x57, 0x20, 0x41, 0x85, 0x4e, 0xa2, 0x80, 0xe2, 0x8a, 0x4d, 0x2a, 0x28, 0x96,
	0x8d, 0x33, 0x38, 0xeb, 0xc4, 0xb3, 0xd6, 0xee, 0x18, 0xee, 0x24, 0x2a, 0x1e, 0x88, 0xe7, 0xa0,
	0xe4, 0x11, 0x50, 0x4a, 0x9e, 0x02, 0xd9, 0x7b, 0x39, 0x10, 0xca, 0xc1, 0xb5, 0xf3, 0xfd, 0xbe,
	0xf9, 0xf6, 0x1b, 0x2d, 0x8f, 0x9c, 0x95, 0x04, 0x92, 0xac, 0x42, 0xa7, 0x49, 0x52, 0x83, 0x08,
	0x1b, 0xe9, 0x48, 0x91, 0x4b, 0x6b, 0x6b, 0xc8, 0xdc, 0x3f, 0x26, 0xd8, 0x40, 0x05, 0x64, 0x2f,
	0x24, 0x99, 0xda, 0x0f, 0xe3, 0x86, 0xdf, 0x9b, 0xd9, 0x39, 0xcc, 0xbd, 0x6d, 0xde, 0xb9, 0x66,
	0xad, 0x29, 0x78, 0xc7, 0x47, 0xd7, 0xec, 0x0b, 0x59, 0x74, 0x90, 0x0c, 0x4f, 0x9e, 0xa4, 0x33,
	0x28, 0x2a, 0x40, 0x12, 0xa6, 0x21, 0x8d, 0xc5, 0x5f, 0x5b, 0x04, 0xe4, 0xc6, 0x2e, 0xc5, 0x5d,
	0xda, 0xb3, 0x3c, 0xfe, 0xc9, 0xf8, 0xe4, 0x06, 0xee, 0xe0, 0x29, 0x1f, 0x5e, 0x26, 0xa3, 0xaa,
	0x20, 0x64, 0x51, 0x2f, 0x39, 0x3a, 0x1d, 0x7c, 0x79, 0xd9, 0x3b, 0x64, 0x82, 0x7b, 0xe5, 0x4c,
	0x55, 0x10, 0x3c, 0xe3, 0xc7, 0x1a, 0x1d, 0x29, 0xcc, 0x41, 0xea, 0x25, 0x20, 0xe9, 0x0f, 0x1a,
	0x6c, 0xd8, 0x8b, 0x58, 0x72, 0x67, 0xc7, 0x07, 0x3b, 0xe2, 0xf5, 0x15, 0x10, 0x24, 0xfc, 0x76,
	0x6e, 0x1a, 0x24, 0xb0, 0x3e, 0xe0, 0x20, 0x62, 0xbf, 0x03, 0x86, 0x97, 0x52, 0x97, 0xf0, 0x9c,
	0x0f, 0x7c, 0xf9, 0x7e, 0xc4, 0x92, 0xe1, 0xc9, 0xe4, 0xdf, 0xe5, 0xbb, 0x96, 0xc2, 0x3b, 0xe2,
	0xaf, 0x8c, 0xc7, 0xff, 0xa7, 0x83, 0xc7, 0xfc, 0x56, 0xad, 0xf2, 0x35, 0x74, 0x07, 0x66, 0x49,
	0xbf, 0x7b, 0x46, 0xc8, 0xc4, 0x6e, 0x1a, 0x3c, 0xe0, 0x83, 0xc5, 0x05, 0x81, 0xeb, 0x6a, 0x5d,
	0xc9, 0x7e, 0xd6, 0x5e, 0xca, 0x73, 0xd2, 0x2a, 0xf2, 0x45, 0x3c, 0x12, 0x31, 0xc1, 0xbd, 0x22,
	0x14, 0x41, 0x10, 0xf3, 0xa3, 0xd6, 0xe0, 0xa9, 0xfe, 0x9f, 0xd4, 0x61, 0x3b, 0x6f, 0x99, 0x17,
	0x9f, 0xf9, 0xa4, 0xc4, 0xda, 0xca, 0xeb, 0xbf, 0x94, 0x84, 0x73, 0x0a, 0x46, 0xe9, 0x9b, 0x06,
	0x75, 0x0d, 0xf6, 0x0c, 0xe8, 0x93, 0xb1, 0x6b, 0x37, 0x03, 0x74, 0xc6, 0xba, 0xf0, 0x61, 0x77,
	0xa2, 0x51, 0xba, 0xff, 0x67, 0x89, 0x47, 0xed, 0xf2, 0xfd, 0xda, 0xab, 0x73, 0x3a, 0x7d, 0xff,
	0x6d, 0x3b, 0x66, 0xdf, 0xb7, 0x63, 0xf6, 0x63, 0x3b, 0x66, 0x6f, 0x45, 0xa1, 0x29, 0x2d, 0x7d,
	0x4e, 0x8a, 0x40, 0x99, 0xce, 0x61, 0x01, 0xb6, 0xc8, 0x56, 0xa0, 0x36, 0xb4, 0x5a, 0x18, 0x9a,
	0x6a, 0x2c, 0xc0, 0xd1, 0xb4, 0x24, 0x3d, 0x45, 0x45, 0xfa, 0x23, 0x64, 0xf5, 0xba, 0xc8, 0x4a,
	0xd2, 0x99, 0x5a, 0xaa, 0x9a, 0xc0, 0xba, 0x4c, 0x96, 0x0d, 0x1a, 0x97, 0xb9, 0x7c, 0x05, 0x95,
	0xfa, 0x15, 0x00, 0x00, 0xff, 0xff, 0xf6, 0x83, 0xc0, 0x95, 0x2c, 0x03, 0x00, 0x00,
}

func (m *SrTeTransitTunnelStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SrTeTransitTunnelStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SrTeTransitTunnelStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TeTransitTunnelStats) > 0 {
		for iNdEx := len(m.TeTransitTunnelStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TeTransitTunnelStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSrTeTransitTunnelStats(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SegmentRoutingTeTransitTunnelRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentRoutingTeTransitTunnelRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SegmentRoutingTeTransitTunnelRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Stats != nil {
		{
			size, err := m.Stats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSrTeTransitTunnelStats(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CounterName != nil {
		i -= len(*m.CounterName)
		copy(dAtA[i:], *m.CounterName)
		i = encodeVarintSrTeTransitTunnelStats(dAtA, i, uint64(len(*m.CounterName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.InstanceIdentifier != nil {
		i = encodeVarintSrTeTransitTunnelStats(dAtA, i, uint64(*m.InstanceIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if m.TunnelName == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("tunnel_name")
	} else {
		i -= len(*m.TunnelName)
		copy(dAtA[i:], *m.TunnelName)
		i = encodeVarintSrTeTransitTunnelStats(dAtA, i, uint64(len(*m.TunnelName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SegmentRoutingTeTransitTunnelStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentRoutingTeTransitTunnelStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SegmentRoutingTeTransitTunnelStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ByteRate != nil {
		i = encodeVarintSrTeTransitTunnelStats(dAtA, i, uint64(*m.ByteRate))
		i--
		dAtA[i] = 0x20
	}
	if m.PacketRate != nil {
		i = encodeVarintSrTeTransitTunnelStats(dAtA, i, uint64(*m.PacketRate))
		i--
		dAtA[i] = 0x18
	}
	if m.Bytes != nil {
		i = encodeVarintSrTeTransitTunnelStats(dAtA, i, uint64(*m.Bytes))
		i--
		dAtA[i] = 0x10
	}
	if m.Packets != nil {
		i = encodeVarintSrTeTransitTunnelStats(dAtA, i, uint64(*m.Packets))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSrTeTransitTunnelStats(dAtA []byte, offset int, v uint64) int {
	offset -= sovSrTeTransitTunnelStats(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SrTeTransitTunnelStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TeTransitTunnelStats) > 0 {
		for _, e := range m.TeTransitTunnelStats {
			l = e.Size()
			n += 1 + l + sovSrTeTransitTunnelStats(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SegmentRoutingTeTransitTunnelRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TunnelName != nil {
		l = len(*m.TunnelName)
		n += 1 + l + sovSrTeTransitTunnelStats(uint64(l))
	}
	if m.InstanceIdentifier != nil {
		n += 1 + sovSrTeTransitTunnelStats(uint64(*m.InstanceIdentifier))
	}
	if m.CounterName != nil {
		l = len(*m.CounterName)
		n += 1 + l + sovSrTeTransitTunnelStats(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovSrTeTransitTunnelStats(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SegmentRoutingTeTransitTunnelStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Packets != nil {
		n += 1 + sovSrTeTransitTunnelStats(uint64(*m.Packets))
	}
	if m.Bytes != nil {
		n += 1 + sovSrTeTransitTunnelStats(uint64(*m.Bytes))
	}
	if m.PacketRate != nil {
		n += 1 + sovSrTeTransitTunnelStats(uint64(*m.PacketRate))
	}
	if m.ByteRate != nil {
		n += 1 + sovSrTeTransitTunnelStats(uint64(*m.ByteRate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSrTeTransitTunnelStats(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSrTeTransitTunnelStats(x uint64) (n int) {
	return sovSrTeTransitTunnelStats(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SrTeTransitTunnelStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSrTeTransitTunnelStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SrTeTransitTunnelStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SrTeTransitTunnelStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeTransitTunnelStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrTeTransitTunnelStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSrTeTransitTunnelStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSrTeTransitTunnelStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeTransitTunnelStats = append(m.TeTransitTunnelStats, &SegmentRoutingTeTransitTunnelRecord{})
			if err := m.TeTransitTunnelStats[len(m.TeTransitTunnelStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSrTeTransitTunnelStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSrTeTransitTunnelStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSrTeTransitTunnelStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentRoutingTeTransitTunnelRecord) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSrTeTransitTunnelStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentRoutingTeTransitTunnelRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentRoutingTeTransitTunnelRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrTeTransitTunnelStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSrTeTransitTunnelStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSrTeTransitTunnelStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TunnelName = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceIdentifier", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrTeTransitTunnelStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InstanceIdentifier = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrTeTransitTunnelStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSrTeTransitTunnelStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSrTeTransitTunnelStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CounterName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrTeTransitTunnelStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSrTeTransitTunnelStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSrTeTransitTunnelStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &SegmentRoutingTeTransitTunnelStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSrTeTransitTunnelStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSrTeTransitTunnelStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSrTeTransitTunnelStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("tunnel_name")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentRoutingTeTransitTunnelStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSrTeTransitTunnelStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentRoutingTeTransitTunnelStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentRoutingTeTransitTunnelStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packets", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrTeTransitTunnelStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Packets = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrTeTransitTunnelStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bytes = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrTeTransitTunnelStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PacketRate = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByteRate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrTeTransitTunnelStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ByteRate = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSrTeTransitTunnelStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSrTeTransitTunnelStats
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSrTeTransitTunnelStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSrTeTransitTunnelStats(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSrTeTransitTunnelStats
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSrTeTransitTunnelStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSrTeTransitTunnelStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSrTeTransitTunnelStats
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSrTeTransitTunnelStats
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSrTeTransitTunnelStats
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSrTeTransitTunnelStats        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSrTeTransitTunnelStats          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSrTeTransitTunnelStats = fmt.Errorf("proto: unexpected end of group")
)
