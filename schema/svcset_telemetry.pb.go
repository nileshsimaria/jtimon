// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: svcset_telemetry.proto

package schema

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ServicesInfra struct {
	SvcsPluginsInfo      []*PluginsInfo  `protobuf:"bytes,1,rep,name=svcs_plugins_info,json=svcsPluginsInfo" json:"svcs_plugins_info,omitempty"`
	SvcsetCpuInfo        []*CpuUsageInfo `protobuf:"bytes,2,rep,name=svcset_cpu_info,json=svcsetCpuInfo" json:"svcset_cpu_info,omitempty"`
	SvcsetMemInfo        []*MemUsageInfo `protobuf:"bytes,3,rep,name=svcset_mem_info,json=svcsetMemInfo" json:"svcset_mem_info,omitempty"`
	SvcsetSvcInfo        []*ServicesInfo `protobuf:"bytes,4,rep,name=svcset_svc_info,json=svcsetSvcInfo" json:"svcset_svc_info,omitempty"`
	SvcsetPktdropInfo    []*PktDropInfo  `protobuf:"bytes,5,rep,name=svcset_pktdrop_info,json=svcsetPktdropInfo" json:"svcset_pktdrop_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ServicesInfra) Reset()         { *m = ServicesInfra{} }
func (m *ServicesInfra) String() string { return proto.CompactTextString(m) }
func (*ServicesInfra) ProtoMessage()    {}
func (*ServicesInfra) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1f011be0986ccfc, []int{0}
}
func (m *ServicesInfra) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServicesInfra) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServicesInfra.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServicesInfra) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicesInfra.Merge(m, src)
}
func (m *ServicesInfra) XXX_Size() int {
	return m.Size()
}
func (m *ServicesInfra) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicesInfra.DiscardUnknown(m)
}

var xxx_messageInfo_ServicesInfra proto.InternalMessageInfo

func (m *ServicesInfra) GetSvcsPluginsInfo() []*PluginsInfo {
	if m != nil {
		return m.SvcsPluginsInfo
	}
	return nil
}

func (m *ServicesInfra) GetSvcsetCpuInfo() []*CpuUsageInfo {
	if m != nil {
		return m.SvcsetCpuInfo
	}
	return nil
}

func (m *ServicesInfra) GetSvcsetMemInfo() []*MemUsageInfo {
	if m != nil {
		return m.SvcsetMemInfo
	}
	return nil
}

func (m *ServicesInfra) GetSvcsetSvcInfo() []*ServicesInfo {
	if m != nil {
		return m.SvcsetSvcInfo
	}
	return nil
}

func (m *ServicesInfra) GetSvcsetPktdropInfo() []*PktDropInfo {
	if m != nil {
		return m.SvcsetPktdropInfo
	}
	return nil
}

///=========================
type PluginsInfo struct {
	SpNumPlugins         *uint64  `protobuf:"varint,1,opt,name=sp_num_plugins,json=spNumPlugins" json:"sp_num_plugins,omitempty"`
	SpName               *string  `protobuf:"bytes,2,opt,name=sp_name,json=spName" json:"sp_name,omitempty"`
	SpPid                *uint64  `protobuf:"varint,3,opt,name=sp_pid,json=spPid" json:"sp_pid,omitempty"`
	SpDataEvh            *uint64  `protobuf:"varint,4,opt,name=sp_data_evh,json=spDataEvh" json:"sp_data_evh,omitempty"`
	SpControlEvh         *uint64  `protobuf:"varint,5,opt,name=sp_control_evh,json=spControlEvh" json:"sp_control_evh,omitempty"`
	SpClass              *uint64  `protobuf:"varint,6,opt,name=sp_class,json=spClass" json:"sp_class,omitempty"`
	SpProviderId         *uint64  `protobuf:"varint,7,opt,name=sp_provider_id,json=spProviderId" json:"sp_provider_id,omitempty"`
	SpAppId              *uint64  `protobuf:"varint,8,opt,name=sp_app_id,json=spAppId" json:"sp_app_id,omitempty"`
	SpPluginFlags        *uint64  `protobuf:"varint,9,opt,name=sp_plugin_flags,json=spPluginFlags" json:"sp_plugin_flags,omitempty"`
	SpTcpSupportFlags    *uint64  `protobuf:"varint,10,opt,name=sp_tcp_support_flags,json=spTcpSupportFlags" json:"sp_tcp_support_flags,omitempty"`
	SpEvClassBase        *uint64  `protobuf:"varint,11,opt,name=sp_ev_class_base,json=spEvClassBase" json:"sp_ev_class_base,omitempty"`
	SpPluginMask         *uint64  `protobuf:"varint,12,opt,name=sp_plugin_mask,json=spPluginMask" json:"sp_plugin_mask,omitempty"`
	SpEvClassName        []string `protobuf:"bytes,13,rep,name=sp_ev_class_name,json=spEvClassName" json:"sp_ev_class_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PluginsInfo) Reset()         { *m = PluginsInfo{} }
func (m *PluginsInfo) String() string { return proto.CompactTextString(m) }
func (*PluginsInfo) ProtoMessage()    {}
func (*PluginsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1f011be0986ccfc, []int{1}
}
func (m *PluginsInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PluginsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PluginsInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PluginsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PluginsInfo.Merge(m, src)
}
func (m *PluginsInfo) XXX_Size() int {
	return m.Size()
}
func (m *PluginsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PluginsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PluginsInfo proto.InternalMessageInfo

func (m *PluginsInfo) GetSpNumPlugins() uint64 {
	if m != nil && m.SpNumPlugins != nil {
		return *m.SpNumPlugins
	}
	return 0
}

func (m *PluginsInfo) GetSpName() string {
	if m != nil && m.SpName != nil {
		return *m.SpName
	}
	return ""
}

func (m *PluginsInfo) GetSpPid() uint64 {
	if m != nil && m.SpPid != nil {
		return *m.SpPid
	}
	return 0
}

func (m *PluginsInfo) GetSpDataEvh() uint64 {
	if m != nil && m.SpDataEvh != nil {
		return *m.SpDataEvh
	}
	return 0
}

func (m *PluginsInfo) GetSpControlEvh() uint64 {
	if m != nil && m.SpControlEvh != nil {
		return *m.SpControlEvh
	}
	return 0
}

func (m *PluginsInfo) GetSpClass() uint64 {
	if m != nil && m.SpClass != nil {
		return *m.SpClass
	}
	return 0
}

func (m *PluginsInfo) GetSpProviderId() uint64 {
	if m != nil && m.SpProviderId != nil {
		return *m.SpProviderId
	}
	return 0
}

func (m *PluginsInfo) GetSpAppId() uint64 {
	if m != nil && m.SpAppId != nil {
		return *m.SpAppId
	}
	return 0
}

func (m *PluginsInfo) GetSpPluginFlags() uint64 {
	if m != nil && m.SpPluginFlags != nil {
		return *m.SpPluginFlags
	}
	return 0
}

func (m *PluginsInfo) GetSpTcpSupportFlags() uint64 {
	if m != nil && m.SpTcpSupportFlags != nil {
		return *m.SpTcpSupportFlags
	}
	return 0
}

func (m *PluginsInfo) GetSpEvClassBase() uint64 {
	if m != nil && m.SpEvClassBase != nil {
		return *m.SpEvClassBase
	}
	return 0
}

func (m *PluginsInfo) GetSpPluginMask() uint64 {
	if m != nil && m.SpPluginMask != nil {
		return *m.SpPluginMask
	}
	return 0
}

func (m *PluginsInfo) GetSpEvClassName() []string {
	if m != nil {
		return m.SpEvClassName
	}
	return nil
}

//--------------------------
type CpuUsageInfo struct {
	SvcsetId             *uint64  `protobuf:"varint,1,opt,name=svcset_id,json=svcsetId" json:"svcset_id,omitempty"`
	SvcsetIdPresent      *uint64  `protobuf:"varint,2,opt,name=svcset_id_present,json=svcsetIdPresent" json:"svcset_id_present,omitempty"`
	ExternalSvcSetId     *uint64  `protobuf:"varint,3,opt,name=external_svc_set_id,json=externalSvcSetId" json:"external_svc_set_id,omitempty"`
	SvcType              *uint64  `protobuf:"varint,4,opt,name=svc_type,json=svcType" json:"svc_type,omitempty"`
	SvcSetType           *uint64  `protobuf:"varint,5,opt,name=svc_set_type,json=svcSetType" json:"svc_set_type,omitempty"`
	SvcSetName           *string  `protobuf:"bytes,6,opt,name=svc_set_name,json=svcSetName" json:"svc_set_name,omitempty"`
	CpuUtilization       *uint64  `protobuf:"varint,7,opt,name=cpu_utilization,json=cpuUtilization" json:"cpu_utilization,omitempty"`
	CpuZone              *uint64  `protobuf:"varint,8,opt,name=cpu_zone,json=cpuZone" json:"cpu_zone,omitempty"`
	CpuLoad              *float32 `protobuf:"fixed32,9,opt,name=cpu_load,json=cpuLoad" json:"cpu_load,omitempty"`
	CpuUser              *string  `protobuf:"bytes,10,opt,name=cpu_user,json=cpuUser" json:"cpu_user,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CpuUsageInfo) Reset()         { *m = CpuUsageInfo{} }
func (m *CpuUsageInfo) String() string { return proto.CompactTextString(m) }
func (*CpuUsageInfo) ProtoMessage()    {}
func (*CpuUsageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1f011be0986ccfc, []int{2}
}
func (m *CpuUsageInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CpuUsageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CpuUsageInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CpuUsageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CpuUsageInfo.Merge(m, src)
}
func (m *CpuUsageInfo) XXX_Size() int {
	return m.Size()
}
func (m *CpuUsageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CpuUsageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CpuUsageInfo proto.InternalMessageInfo

func (m *CpuUsageInfo) GetSvcsetId() uint64 {
	if m != nil && m.SvcsetId != nil {
		return *m.SvcsetId
	}
	return 0
}

func (m *CpuUsageInfo) GetSvcsetIdPresent() uint64 {
	if m != nil && m.SvcsetIdPresent != nil {
		return *m.SvcsetIdPresent
	}
	return 0
}

func (m *CpuUsageInfo) GetExternalSvcSetId() uint64 {
	if m != nil && m.ExternalSvcSetId != nil {
		return *m.ExternalSvcSetId
	}
	return 0
}

func (m *CpuUsageInfo) GetSvcType() uint64 {
	if m != nil && m.SvcType != nil {
		return *m.SvcType
	}
	return 0
}

func (m *CpuUsageInfo) GetSvcSetType() uint64 {
	if m != nil && m.SvcSetType != nil {
		return *m.SvcSetType
	}
	return 0
}

func (m *CpuUsageInfo) GetSvcSetName() string {
	if m != nil && m.SvcSetName != nil {
		return *m.SvcSetName
	}
	return ""
}

func (m *CpuUsageInfo) GetCpuUtilization() uint64 {
	if m != nil && m.CpuUtilization != nil {
		return *m.CpuUtilization
	}
	return 0
}

func (m *CpuUsageInfo) GetCpuZone() uint64 {
	if m != nil && m.CpuZone != nil {
		return *m.CpuZone
	}
	return 0
}

func (m *CpuUsageInfo) GetCpuLoad() float32 {
	if m != nil && m.CpuLoad != nil {
		return *m.CpuLoad
	}
	return 0
}

func (m *CpuUsageInfo) GetCpuUser() string {
	if m != nil && m.CpuUser != nil {
		return *m.CpuUser
	}
	return ""
}

//--------------------------
type MemUsageInfo struct {
	SvcsetId               *uint64  `protobuf:"varint,1,opt,name=svcset_id,json=svcsetId" json:"svcset_id,omitempty"`
	SvcsetIdPresent        *uint64  `protobuf:"varint,2,opt,name=svcset_id_present,json=svcsetIdPresent" json:"svcset_id_present,omitempty"`
	ExternalSvcSetId       *uint64  `protobuf:"varint,3,opt,name=external_svc_set_id,json=externalSvcSetId" json:"external_svc_set_id,omitempty"`
	SvcType                *uint64  `protobuf:"varint,4,opt,name=svc_type,json=svcType" json:"svc_type,omitempty"`
	SvcSetType             *uint64  `protobuf:"varint,5,opt,name=svc_set_type,json=svcSetType" json:"svc_set_type,omitempty"`
	SvcSetName             *string  `protobuf:"bytes,6,opt,name=svc_set_name,json=svcSetName" json:"svc_set_name,omitempty"`
	MemPercentUsed         *float32 `protobuf:"fixed32,7,opt,name=mem_percent_used,json=memPercentUsed" json:"mem_percent_used,omitempty"`
	MemBytesUsed           *uint64  `protobuf:"varint,8,opt,name=mem_bytes_used,json=memBytesUsed" json:"mem_bytes_used,omitempty"`
	MemZone                *uint64  `protobuf:"varint,9,opt,name=mem_zone,json=memZone" json:"mem_zone,omitempty"`
	PolicyBytesUsed        *uint64  `protobuf:"varint,10,opt,name=policy_bytes_used,json=policyBytesUsed" json:"policy_bytes_used,omitempty"`
	PolicyBytesUsedPercent *uint64  `protobuf:"varint,11,opt,name=policy_bytes_used_percent,json=policyBytesUsedPercent" json:"policy_bytes_used_percent,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *MemUsageInfo) Reset()         { *m = MemUsageInfo{} }
func (m *MemUsageInfo) String() string { return proto.CompactTextString(m) }
func (*MemUsageInfo) ProtoMessage()    {}
func (*MemUsageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1f011be0986ccfc, []int{3}
}
func (m *MemUsageInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemUsageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemUsageInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemUsageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemUsageInfo.Merge(m, src)
}
func (m *MemUsageInfo) XXX_Size() int {
	return m.Size()
}
func (m *MemUsageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MemUsageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MemUsageInfo proto.InternalMessageInfo

func (m *MemUsageInfo) GetSvcsetId() uint64 {
	if m != nil && m.SvcsetId != nil {
		return *m.SvcsetId
	}
	return 0
}

func (m *MemUsageInfo) GetSvcsetIdPresent() uint64 {
	if m != nil && m.SvcsetIdPresent != nil {
		return *m.SvcsetIdPresent
	}
	return 0
}

func (m *MemUsageInfo) GetExternalSvcSetId() uint64 {
	if m != nil && m.ExternalSvcSetId != nil {
		return *m.ExternalSvcSetId
	}
	return 0
}

func (m *MemUsageInfo) GetSvcType() uint64 {
	if m != nil && m.SvcType != nil {
		return *m.SvcType
	}
	return 0
}

func (m *MemUsageInfo) GetSvcSetType() uint64 {
	if m != nil && m.SvcSetType != nil {
		return *m.SvcSetType
	}
	return 0
}

func (m *MemUsageInfo) GetSvcSetName() string {
	if m != nil && m.SvcSetName != nil {
		return *m.SvcSetName
	}
	return ""
}

func (m *MemUsageInfo) GetMemPercentUsed() float32 {
	if m != nil && m.MemPercentUsed != nil {
		return *m.MemPercentUsed
	}
	return 0
}

func (m *MemUsageInfo) GetMemBytesUsed() uint64 {
	if m != nil && m.MemBytesUsed != nil {
		return *m.MemBytesUsed
	}
	return 0
}

func (m *MemUsageInfo) GetMemZone() uint64 {
	if m != nil && m.MemZone != nil {
		return *m.MemZone
	}
	return 0
}

func (m *MemUsageInfo) GetPolicyBytesUsed() uint64 {
	if m != nil && m.PolicyBytesUsed != nil {
		return *m.PolicyBytesUsed
	}
	return 0
}

func (m *MemUsageInfo) GetPolicyBytesUsedPercent() uint64 {
	if m != nil && m.PolicyBytesUsedPercent != nil {
		return *m.PolicyBytesUsedPercent
	}
	return 0
}

//--------------------------
type ServicesInfo struct {
	SvcsetId             *uint64  `protobuf:"varint,1,opt,name=svcset_id,json=svcsetId" json:"svcset_id,omitempty"`
	SvcsetIdPresent      *uint64  `protobuf:"varint,2,opt,name=svcset_id_present,json=svcsetIdPresent" json:"svcset_id_present,omitempty"`
	ExternalSvcSetId     *uint64  `protobuf:"varint,3,opt,name=external_svc_set_id,json=externalSvcSetId" json:"external_svc_set_id,omitempty"`
	SvcType              *uint64  `protobuf:"varint,4,opt,name=svc_type,json=svcType" json:"svc_type,omitempty"`
	SvcSetType           *uint64  `protobuf:"varint,5,opt,name=svc_set_type,json=svcSetType" json:"svc_set_type,omitempty"`
	SvcSetName           *string  `protobuf:"bytes,6,opt,name=svc_set_name,json=svcSetName" json:"svc_set_name,omitempty"`
	InternalSvcSetId     *uint64  `protobuf:"varint,7,opt,name=internal_svc_set_id,json=internalSvcSetId" json:"internal_svc_set_id,omitempty"`
	ActiveSvcSetCount    *uint64  `protobuf:"varint,8,opt,name=active_svc_set_count,json=activeSvcSetCount" json:"active_svc_set_count,omitempty"`
	TotalSvcSetCount     *uint64  `protobuf:"varint,9,opt,name=total_svc_set_count,json=totalSvcSetCount" json:"total_svc_set_count,omitempty"`
	MemBytesUsed         *uint64  `protobuf:"varint,10,opt,name=mem_bytes_used,json=memBytesUsed" json:"mem_bytes_used,omitempty"`
	MemBytesUsedPercent  *uint64  `protobuf:"varint,11,opt,name=mem_bytes_used_percent,json=memBytesUsedPercent" json:"mem_bytes_used_percent,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServicesInfo) Reset()         { *m = ServicesInfo{} }
func (m *ServicesInfo) String() string { return proto.CompactTextString(m) }
func (*ServicesInfo) ProtoMessage()    {}
func (*ServicesInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1f011be0986ccfc, []int{4}
}
func (m *ServicesInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServicesInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServicesInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServicesInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicesInfo.Merge(m, src)
}
func (m *ServicesInfo) XXX_Size() int {
	return m.Size()
}
func (m *ServicesInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicesInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ServicesInfo proto.InternalMessageInfo

func (m *ServicesInfo) GetSvcsetId() uint64 {
	if m != nil && m.SvcsetId != nil {
		return *m.SvcsetId
	}
	return 0
}

func (m *ServicesInfo) GetSvcsetIdPresent() uint64 {
	if m != nil && m.SvcsetIdPresent != nil {
		return *m.SvcsetIdPresent
	}
	return 0
}

func (m *ServicesInfo) GetExternalSvcSetId() uint64 {
	if m != nil && m.ExternalSvcSetId != nil {
		return *m.ExternalSvcSetId
	}
	return 0
}

func (m *ServicesInfo) GetSvcType() uint64 {
	if m != nil && m.SvcType != nil {
		return *m.SvcType
	}
	return 0
}

func (m *ServicesInfo) GetSvcSetType() uint64 {
	if m != nil && m.SvcSetType != nil {
		return *m.SvcSetType
	}
	return 0
}

func (m *ServicesInfo) GetSvcSetName() string {
	if m != nil && m.SvcSetName != nil {
		return *m.SvcSetName
	}
	return ""
}

func (m *ServicesInfo) GetInternalSvcSetId() uint64 {
	if m != nil && m.InternalSvcSetId != nil {
		return *m.InternalSvcSetId
	}
	return 0
}

func (m *ServicesInfo) GetActiveSvcSetCount() uint64 {
	if m != nil && m.ActiveSvcSetCount != nil {
		return *m.ActiveSvcSetCount
	}
	return 0
}

func (m *ServicesInfo) GetTotalSvcSetCount() uint64 {
	if m != nil && m.TotalSvcSetCount != nil {
		return *m.TotalSvcSetCount
	}
	return 0
}

func (m *ServicesInfo) GetMemBytesUsed() uint64 {
	if m != nil && m.MemBytesUsed != nil {
		return *m.MemBytesUsed
	}
	return 0
}

func (m *ServicesInfo) GetMemBytesUsedPercent() uint64 {
	if m != nil && m.MemBytesUsedPercent != nil {
		return *m.MemBytesUsedPercent
	}
	return 0
}

//--------------------------
type PktDropInfo struct {
	SvcsetId               *uint64  `protobuf:"varint,1,opt,name=svcset_id,json=svcsetId" json:"svcset_id,omitempty"`
	SvcsetIdPresent        *uint64  `protobuf:"varint,2,opt,name=svcset_id_present,json=svcsetIdPresent" json:"svcset_id_present,omitempty"`
	ExternalSvcSetId       *uint64  `protobuf:"varint,3,opt,name=external_svc_set_id,json=externalSvcSetId" json:"external_svc_set_id,omitempty"`
	SvcType                *uint64  `protobuf:"varint,4,opt,name=svc_type,json=svcType" json:"svc_type,omitempty"`
	SvcSetType             *uint64  `protobuf:"varint,5,opt,name=svc_set_type,json=svcSetType" json:"svc_set_type,omitempty"`
	SvcSetName             *string  `protobuf:"bytes,6,opt,name=svc_set_name,json=svcSetName" json:"svc_set_name,omitempty"`
	MemlimitDrops          *uint64  `protobuf:"varint,7,opt,name=memlimit_drops,json=memlimitDrops" json:"memlimit_drops,omitempty"`
	CpulimitDrops          *uint64  `protobuf:"varint,8,opt,name=cpulimit_drops,json=cpulimitDrops" json:"cpulimit_drops,omitempty"`
	FlowlimitDrops         *uint64  `protobuf:"varint,9,opt,name=flowlimit_drops,json=flowlimitDrops" json:"flowlimit_drops,omitempty"`
	PtclcopyDrops          *uint64  `protobuf:"varint,10,opt,name=ptclcopy_drops,json=ptclcopyDrops" json:"ptclcopy_drops,omitempty"`
	IngressDropFlows       *uint64  `protobuf:"varint,11,opt,name=ingress_drop_flows,json=ingressDropFlows" json:"ingress_drop_flows,omitempty"`
	EgressDropFlows        *uint64  `protobuf:"varint,12,opt,name=egress_drop_flows,json=egressDropFlows" json:"egress_drop_flows,omitempty"`
	DropExceedIngressLimit *uint64  `protobuf:"varint,13,opt,name=drop_exceed_ingress_limit,json=dropExceedIngressLimit" json:"drop_exceed_ingress_limit,omitempty"`
	DropExceedEgressLimit  *uint64  `protobuf:"varint,14,opt,name=drop_exceed_egress_limit,json=dropExceedEgressLimit" json:"drop_exceed_egress_limit,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *PktDropInfo) Reset()         { *m = PktDropInfo{} }
func (m *PktDropInfo) String() string { return proto.CompactTextString(m) }
func (*PktDropInfo) ProtoMessage()    {}
func (*PktDropInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1f011be0986ccfc, []int{5}
}
func (m *PktDropInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PktDropInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PktDropInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PktDropInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PktDropInfo.Merge(m, src)
}
func (m *PktDropInfo) XXX_Size() int {
	return m.Size()
}
func (m *PktDropInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PktDropInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PktDropInfo proto.InternalMessageInfo

func (m *PktDropInfo) GetSvcsetId() uint64 {
	if m != nil && m.SvcsetId != nil {
		return *m.SvcsetId
	}
	return 0
}

func (m *PktDropInfo) GetSvcsetIdPresent() uint64 {
	if m != nil && m.SvcsetIdPresent != nil {
		return *m.SvcsetIdPresent
	}
	return 0
}

func (m *PktDropInfo) GetExternalSvcSetId() uint64 {
	if m != nil && m.ExternalSvcSetId != nil {
		return *m.ExternalSvcSetId
	}
	return 0
}

func (m *PktDropInfo) GetSvcType() uint64 {
	if m != nil && m.SvcType != nil {
		return *m.SvcType
	}
	return 0
}

func (m *PktDropInfo) GetSvcSetType() uint64 {
	if m != nil && m.SvcSetType != nil {
		return *m.SvcSetType
	}
	return 0
}

func (m *PktDropInfo) GetSvcSetName() string {
	if m != nil && m.SvcSetName != nil {
		return *m.SvcSetName
	}
	return ""
}

func (m *PktDropInfo) GetMemlimitDrops() uint64 {
	if m != nil && m.MemlimitDrops != nil {
		return *m.MemlimitDrops
	}
	return 0
}

func (m *PktDropInfo) GetCpulimitDrops() uint64 {
	if m != nil && m.CpulimitDrops != nil {
		return *m.CpulimitDrops
	}
	return 0
}

func (m *PktDropInfo) GetFlowlimitDrops() uint64 {
	if m != nil && m.FlowlimitDrops != nil {
		return *m.FlowlimitDrops
	}
	return 0
}

func (m *PktDropInfo) GetPtclcopyDrops() uint64 {
	if m != nil && m.PtclcopyDrops != nil {
		return *m.PtclcopyDrops
	}
	return 0
}

func (m *PktDropInfo) GetIngressDropFlows() uint64 {
	if m != nil && m.IngressDropFlows != nil {
		return *m.IngressDropFlows
	}
	return 0
}

func (m *PktDropInfo) GetEgressDropFlows() uint64 {
	if m != nil && m.EgressDropFlows != nil {
		return *m.EgressDropFlows
	}
	return 0
}

func (m *PktDropInfo) GetDropExceedIngressLimit() uint64 {
	if m != nil && m.DropExceedIngressLimit != nil {
		return *m.DropExceedIngressLimit
	}
	return 0
}

func (m *PktDropInfo) GetDropExceedEgressLimit() uint64 {
	if m != nil && m.DropExceedEgressLimit != nil {
		return *m.DropExceedEgressLimit
	}
	return 0
}

var E_JnprScvsInfraExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*ServicesInfra)(nil),
	Field:         78,
	Name:          "jnprScvsInfraExt",
	Tag:           "bytes,78,opt,name=jnprScvsInfraExt",
	Filename:      "svcset_telemetry.proto",
}

func init() {
	proto.RegisterType((*ServicesInfra)(nil), "ServicesInfra")
	proto.RegisterType((*PluginsInfo)(nil), "PluginsInfo")
	proto.RegisterType((*CpuUsageInfo)(nil), "CpuUsageInfo")
	proto.RegisterType((*MemUsageInfo)(nil), "MemUsageInfo")
	proto.RegisterType((*ServicesInfo)(nil), "ServicesInfo")
	proto.RegisterType((*PktDropInfo)(nil), "PktDropInfo")
	proto.RegisterExtension(E_JnprScvsInfraExt)
}

func init() { proto.RegisterFile("svcset_telemetry.proto", fileDescriptor_d1f011be0986ccfc) }

var fileDescriptor_d1f011be0986ccfc = []byte{
	// 1070 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x96, 0xcd, 0x6e, 0xdb, 0xc6,
	0x17, 0xc5, 0x21, 0xc9, 0xb1, 0xad, 0xd1, 0x37, 0x9d, 0x0f, 0x3a, 0x7f, 0xc0, 0x10, 0x8c, 0x7f,
	0x1b, 0x21, 0xa8, 0x25, 0x20, 0x45, 0xd1, 0xa6, 0xe8, 0xa6, 0x76, 0x1c, 0x40, 0x45, 0x6c, 0x08,
	0x52, 0xbc, 0xc9, 0x86, 0x1d, 0x0f, 0xaf, 0x65, 0x5a, 0x24, 0xe7, 0x82, 0x77, 0xc8, 0x58, 0x79,
	0xa6, 0xee, 0xfb, 0x0a, 0xdd, 0x35, 0xbb, 0x2e, 0x5b, 0xf8, 0x49, 0x8a, 0x99, 0x21, 0x65, 0x46,
	0xea, 0x13, 0x78, 0xa9, 0x7b, 0x7f, 0xe7, 0x70, 0x66, 0xce, 0x5c, 0x91, 0xec, 0x29, 0x65, 0x82,
	0x40, 0x79, 0x0a, 0x42, 0x88, 0x40, 0x25, 0xcb, 0x21, 0x26, 0x52, 0xc9, 0xe7, 0x7b, 0xab, 0x82,
	0xa7, 0x24, 0xda, 0xe2, 0xe1, 0x6f, 0x55, 0xd6, 0x9a, 0x41, 0x92, 0x05, 0x02, 0x68, 0x1c, 0x5f,
	0x25, 0xdc, 0xf9, 0x81, 0xf5, 0xb4, 0x81, 0x87, 0x61, 0x3a, 0x0f, 0x62, 0xf2, 0x82, 0xf8, 0x4a,
	0xba, 0x95, 0x7e, 0x6d, 0xd0, 0x78, 0xd5, 0x1c, 0x4e, 0x6c, 0x71, 0x1c, 0x5f, 0xc9, 0x69, 0x47,
	0x63, 0xa5, 0x82, 0xf3, 0x1d, 0xeb, 0xe4, 0x8f, 0x16, 0x98, 0x5a, 0x5d, 0xd5, 0xe8, 0x5a, 0xc3,
	0x13, 0x4c, 0x2f, 0x88, 0xcf, 0xc1, 0x08, 0x5b, 0x96, 0x3a, 0xc1, 0x74, 0x4d, 0x16, 0x41, 0x64,
	0x65, 0xb5, 0x5c, 0x76, 0x06, 0xd1, 0x86, 0xec, 0x0c, 0xa2, 0x35, 0x19, 0x65, 0xc2, 0xca, 0xb6,
	0x72, 0x59, 0x69, 0x43, 0x2b, 0xd9, 0x2c, 0x13, 0x46, 0xf6, 0x13, 0xdb, 0xcb, 0x65, 0xb8, 0x50,
	0x7e, 0x22, 0xd1, 0x4a, 0x1f, 0x15, 0x1b, 0x5c, 0xa8, 0x37, 0x89, 0x44, 0xa3, 0xec, 0x59, 0x70,
	0x62, 0x39, 0x5d, 0x3a, 0xfc, 0xab, 0xc6, 0x1a, 0xe5, 0x2d, 0xff, 0x9f, 0xb5, 0x09, 0xbd, 0x38,
	0x8d, 0x8a, 0xe3, 0x72, 0x2b, 0xfd, 0xca, 0x60, 0x6b, 0xda, 0x24, 0x3c, 0x4f, 0xa3, 0x9c, 0x74,
	0x9e, 0xb1, 0x1d, 0x4d, 0xf1, 0x08, 0xdc, 0x6a, 0xbf, 0x32, 0xa8, 0x4f, 0xb7, 0x09, 0xcf, 0x79,
	0x04, 0xce, 0x13, 0xb6, 0x4d, 0xe8, 0x61, 0xe0, 0xbb, 0x35, 0x23, 0x7b, 0x44, 0x38, 0x09, 0x7c,
	0xe7, 0x80, 0x35, 0x08, 0x3d, 0x9f, 0x2b, 0xee, 0x41, 0x76, 0xed, 0x6e, 0x99, 0x5e, 0x9d, 0xf0,
	0x0d, 0x57, 0xfc, 0x34, 0xbb, 0xce, 0x9f, 0x2a, 0x64, 0xac, 0x12, 0x19, 0x1a, 0xe4, 0x51, 0xf1,
	0xd4, 0x13, 0x5b, 0xd4, 0xd4, 0x3e, 0xdb, 0xd5, 0x54, 0xc8, 0x89, 0xdc, 0x6d, 0xd3, 0xdf, 0x21,
	0x3c, 0xd1, 0x3f, 0x73, 0x03, 0x4c, 0x64, 0x16, 0xf8, 0x90, 0x78, 0x81, 0xef, 0xee, 0x14, 0x06,
	0x93, 0xbc, 0x38, 0xf6, 0x9d, 0xe7, 0xac, 0x4e, 0xe8, 0x71, 0x44, 0x0d, 0xec, 0x16, 0x0e, 0x3f,
	0x23, 0x8e, 0x7d, 0xe7, 0x6b, 0xd6, 0xd1, 0x0e, 0x66, 0x83, 0xde, 0x55, 0xc8, 0xe7, 0xe4, 0xd6,
	0x0d, 0xd1, 0x22, 0xb4, 0xdb, 0x7e, 0xab, 0x8b, 0xce, 0x88, 0x3d, 0x26, 0xf4, 0x94, 0x40, 0x8f,
	0x52, 0x44, 0x99, 0xa8, 0x1c, 0x66, 0x06, 0xee, 0x11, 0xbe, 0x17, 0x38, 0xb3, 0x1d, 0x2b, 0x78,
	0xc1, 0xba, 0x84, 0x1e, 0x64, 0x76, 0xe1, 0xde, 0x25, 0x27, 0x70, 0x1b, 0x85, 0xf3, 0x69, 0x66,
	0xd6, 0x7f, 0xcc, 0x09, 0x8a, 0x3d, 0xd8, 0x15, 0x44, 0x9c, 0x16, 0x6e, 0x73, 0xb5, 0x07, 0x53,
	0x3c, 0xe3, 0xb4, 0x58, 0xb7, 0x33, 0x19, 0xb4, 0xfa, 0xb5, 0x41, 0xbd, 0x64, 0xa7, 0xa3, 0x38,
	0xfc, 0xbb, 0xca, 0x9a, 0xe5, 0x5b, 0xea, 0xfc, 0x8f, 0xd5, 0xf3, 0x8b, 0x12, 0xf8, 0x79, 0xaa,
	0xbb, 0xb6, 0x30, 0xf6, 0x9d, 0x97, 0xac, 0xb7, 0x6a, 0x7a, 0x98, 0x00, 0x41, 0xac, 0x4c, 0xb6,
	0x5b, 0xd3, 0x4e, 0x01, 0x4d, 0x6c, 0xd9, 0x39, 0x62, 0x7b, 0x70, 0xab, 0x20, 0x89, 0x79, 0x68,
	0xae, 0x6a, 0x6e, 0x69, 0x13, 0xef, 0x16, 0xad, 0x59, 0x26, 0x66, 0xc6, 0x5a, 0xc7, 0x96, 0x09,
	0x4f, 0x2d, 0x11, 0xf2, 0xe4, 0x77, 0x28, 0x13, 0xef, 0x97, 0x08, 0x4e, 0x9f, 0x35, 0x0b, 0x03,
	0xd3, 0xb6, 0xa9, 0x33, 0x32, 0xd2, 0x75, 0xc2, 0x6c, 0x75, 0xdb, 0x5c, 0xb7, 0x9c, 0x30, 0x57,
	0xee, 0x05, 0xeb, 0xe8, 0xe9, 0x4c, 0x55, 0x10, 0x06, 0x9f, 0xb8, 0x0a, 0x64, 0x9c, 0x67, 0xdf,
	0x16, 0x98, 0x5e, 0xdc, 0x57, 0xf5, 0x3a, 0x34, 0xf8, 0x49, 0xc6, 0x50, 0x84, 0x2f, 0x30, 0xfd,
	0x20, 0x63, 0x28, 0x5a, 0xa1, 0xe4, 0xbe, 0x49, 0xbd, 0x6a, 0x5a, 0xef, 0x24, 0xf7, 0x8b, 0x56,
	0x4a, 0x90, 0x98, 0x8c, 0xeb, 0xa6, 0x75, 0x41, 0x90, 0x1c, 0xfe, 0x5e, 0x63, 0xcd, 0xf2, 0x40,
	0x3f, 0xd4, 0x13, 0x1e, 0xb0, 0xae, 0xfe, 0x23, 0x43, 0x48, 0x04, 0xc4, 0x4a, 0x1f, 0x85, 0x1d,
	0xaf, 0xea, 0xb4, 0x1d, 0x41, 0x34, 0xb1, 0xe5, 0x0b, 0x02, 0x5f, 0x5f, 0x61, 0x4d, 0x5e, 0x2e,
	0x15, 0x90, 0xe5, 0xec, 0x41, 0x37, 0x23, 0x88, 0x8e, 0x75, 0xd1, 0x50, 0xfb, 0x6c, 0x57, 0x53,
	0x26, 0x08, 0x3b, 0x63, 0x3b, 0x11, 0x44, 0x26, 0x88, 0x97, 0xac, 0x87, 0x32, 0x0c, 0xc4, 0xb2,
	0xec, 0x61, 0x47, 0xab, 0x63, 0x1b, 0xf7, 0x36, 0xaf, 0xd9, 0xfe, 0x06, 0x5b, 0x2c, 0x32, 0x9f,
	0xb0, 0xa7, 0x6b, 0x9a, 0x7c, 0xad, 0x87, 0x7f, 0xd6, 0x58, 0xb3, 0xfc, 0x9f, 0xfa, 0x50, 0x93,
	0x3b, 0x62, 0x7b, 0x41, 0xbc, 0xb9, 0x1a, 0x3b, 0x1f, 0xdd, 0xa2, 0xb5, 0x5a, 0xcd, 0x88, 0x3d,
	0xe6, 0x42, 0x05, 0x19, 0xac, 0x60, 0x21, 0xd3, 0x58, 0xe5, 0x21, 0xf6, 0x6c, 0xcf, 0xd2, 0x27,
	0xba, 0xa1, 0xfd, 0x95, 0x54, 0x25, 0x73, 0xcb, 0xdb, 0x50, 0xbb, 0xa6, 0x55, 0xc6, 0x37, 0xaf,
	0x07, 0xfb, 0x8f, 0xeb, 0xf1, 0x2d, 0x7b, 0xfa, 0x25, 0xb5, 0x16, 0xea, 0x5e, 0x99, 0x2e, 0x12,
	0xfd, 0xbc, 0xc5, 0x1a, 0xa5, 0x57, 0xdd, 0x43, 0x0d, 0xf4, 0x2b, 0x73, 0x82, 0x61, 0x10, 0x05,
	0xca, 0xd3, 0xef, 0x70, 0xca, 0xb3, 0x6c, 0x15, 0x55, 0x7d, 0x00, 0xa4, 0x31, 0x81, 0x69, 0x19,
	0xb3, 0x11, 0xb6, 0x8a, 0xaa, 0xc5, 0x5e, 0xb0, 0xce, 0x55, 0x28, 0x3f, 0x96, 0x39, 0x1b, 0x5d,
	0x7b, 0x55, 0x5e, 0xf9, 0xa1, 0x12, 0xa1, 0x90, 0xb8, 0xcc, 0x39, 0x1b, 0x5c, 0xab, 0xa8, 0x5a,
	0xec, 0x1b, 0xe6, 0x04, 0xf1, 0x3c, 0x01, 0x22, 0x43, 0x79, 0xda, 0x85, 0xf2, 0xd4, 0xba, 0x79,
	0x47, 0x93, 0x6f, 0x75, 0x5d, 0xa7, 0x00, 0x1b, 0xb0, 0x7d, 0xe5, 0x75, 0x60, 0x8d, 0x7d, 0xcd,
	0xf6, 0x0d, 0x04, 0xb7, 0x02, 0xc0, 0xf7, 0x8a, 0xa7, 0x98, 0x25, 0xba, 0x2d, 0x3b, 0xeb, 0x1a,
	0x38, 0x35, 0xfd, 0xb1, 0x6d, 0xbf, 0xd3, 0x5d, 0xe7, 0x7b, 0xe6, 0x96, 0xa5, 0x50, 0x56, 0xb6,
	0x8d, 0xf2, 0xc9, 0xbd, 0xf2, 0xf4, 0x5e, 0xf8, 0xe3, 0x8c, 0x75, 0x6f, 0x62, 0x4c, 0x66, 0x22,
	0xb3, 0x1f, 0x92, 0xa7, 0xb7, 0xca, 0x79, 0x36, 0xfc, 0x25, 0x8d, 0x03, 0x84, 0xe4, 0x1c, 0xd4,
	0x47, 0x99, 0x2c, 0x68, 0x06, 0x31, 0xc9, 0x84, 0xdc, 0xf3, 0x7e, 0x65, 0xd0, 0x78, 0xd5, 0x1e,
	0x7e, 0xf1, 0xe9, 0x39, 0xdd, 0x30, 0x38, 0xfe, 0xf5, 0x8f, 0xbb, 0x83, 0xca, 0xe7, 0xbb, 0x83,
	0xca, 0x3f, 0x77, 0x07, 0x95, 0x0f, 0xd3, 0x79, 0xa0, 0x86, 0x37, 0xd6, 0x71, 0x18, 0x83, 0x1a,
	0x05, 0x02, 0x2e, 0x21, 0x99, 0x8f, 0xae, 0x81, 0x87, 0xea, 0xfa, 0x52, 0xaa, 0xa3, 0x20, 0x9e,
	0x03, 0xa9, 0xa3, 0x1b, 0x15, 0x1c, 0xc5, 0x5c, 0xcf, 0xdf, 0x08, 0x17, 0xf3, 0xd1, 0x8d, 0x0a,
	0x46, 0xdc, 0xe7, 0xa8, 0x20, 0xa1, 0x91, 0x77, 0x93, 0xc6, 0x92, 0x46, 0x24, 0xae, 0x21, 0xe2,
	0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x31, 0x1d, 0xbf, 0x31, 0x2e, 0x0b, 0x00, 0x00,
}

func (m *ServicesInfra) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServicesInfra) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesInfra) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SvcsetPktdropInfo) > 0 {
		for iNdEx := len(m.SvcsetPktdropInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SvcsetPktdropInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.SvcsetSvcInfo) > 0 {
		for iNdEx := len(m.SvcsetSvcInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SvcsetSvcInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.SvcsetMemInfo) > 0 {
		for iNdEx := len(m.SvcsetMemInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SvcsetMemInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SvcsetCpuInfo) > 0 {
		for iNdEx := len(m.SvcsetCpuInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SvcsetCpuInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SvcsPluginsInfo) > 0 {
		for iNdEx := len(m.SvcsPluginsInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SvcsPluginsInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PluginsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PluginsInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PluginsInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SpEvClassName) > 0 {
		for iNdEx := len(m.SpEvClassName) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SpEvClassName[iNdEx])
			copy(dAtA[i:], m.SpEvClassName[iNdEx])
			i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(len(m.SpEvClassName[iNdEx])))
			i--
			dAtA[i] = 0x6a
		}
	}
	if m.SpPluginMask != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.SpPluginMask))
		i--
		dAtA[i] = 0x60
	}
	if m.SpEvClassBase != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.SpEvClassBase))
		i--
		dAtA[i] = 0x58
	}
	if m.SpTcpSupportFlags != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.SpTcpSupportFlags))
		i--
		dAtA[i] = 0x50
	}
	if m.SpPluginFlags != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.SpPluginFlags))
		i--
		dAtA[i] = 0x48
	}
	if m.SpAppId != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.SpAppId))
		i--
		dAtA[i] = 0x40
	}
	if m.SpProviderId != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.SpProviderId))
		i--
		dAtA[i] = 0x38
	}
	if m.SpClass != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.SpClass))
		i--
		dAtA[i] = 0x30
	}
	if m.SpControlEvh != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.SpControlEvh))
		i--
		dAtA[i] = 0x28
	}
	if m.SpDataEvh != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.SpDataEvh))
		i--
		dAtA[i] = 0x20
	}
	if m.SpPid != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.SpPid))
		i--
		dAtA[i] = 0x18
	}
	if m.SpName != nil {
		i -= len(*m.SpName)
		copy(dAtA[i:], *m.SpName)
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(len(*m.SpName)))
		i--
		dAtA[i] = 0x12
	}
	if m.SpNumPlugins != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.SpNumPlugins))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CpuUsageInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CpuUsageInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CpuUsageInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CpuUser != nil {
		i -= len(*m.CpuUser)
		copy(dAtA[i:], *m.CpuUser)
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(len(*m.CpuUser)))
		i--
		dAtA[i] = 0x52
	}
	if m.CpuLoad != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.CpuLoad))))
		i--
		dAtA[i] = 0x4d
	}
	if m.CpuZone != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.CpuZone))
		i--
		dAtA[i] = 0x40
	}
	if m.CpuUtilization != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.CpuUtilization))
		i--
		dAtA[i] = 0x38
	}
	if m.SvcSetName != nil {
		i -= len(*m.SvcSetName)
		copy(dAtA[i:], *m.SvcSetName)
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(len(*m.SvcSetName)))
		i--
		dAtA[i] = 0x32
	}
	if m.SvcSetType != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.SvcSetType))
		i--
		dAtA[i] = 0x28
	}
	if m.SvcType != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.SvcType))
		i--
		dAtA[i] = 0x20
	}
	if m.ExternalSvcSetId != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.ExternalSvcSetId))
		i--
		dAtA[i] = 0x18
	}
	if m.SvcsetIdPresent != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.SvcsetIdPresent))
		i--
		dAtA[i] = 0x10
	}
	if m.SvcsetId != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.SvcsetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MemUsageInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemUsageInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MemUsageInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PolicyBytesUsedPercent != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.PolicyBytesUsedPercent))
		i--
		dAtA[i] = 0x58
	}
	if m.PolicyBytesUsed != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.PolicyBytesUsed))
		i--
		dAtA[i] = 0x50
	}
	if m.MemZone != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.MemZone))
		i--
		dAtA[i] = 0x48
	}
	if m.MemBytesUsed != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.MemBytesUsed))
		i--
		dAtA[i] = 0x40
	}
	if m.MemPercentUsed != nil {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.MemPercentUsed))))
		i--
		dAtA[i] = 0x3d
	}
	if m.SvcSetName != nil {
		i -= len(*m.SvcSetName)
		copy(dAtA[i:], *m.SvcSetName)
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(len(*m.SvcSetName)))
		i--
		dAtA[i] = 0x32
	}
	if m.SvcSetType != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.SvcSetType))
		i--
		dAtA[i] = 0x28
	}
	if m.SvcType != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.SvcType))
		i--
		dAtA[i] = 0x20
	}
	if m.ExternalSvcSetId != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.ExternalSvcSetId))
		i--
		dAtA[i] = 0x18
	}
	if m.SvcsetIdPresent != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.SvcsetIdPresent))
		i--
		dAtA[i] = 0x10
	}
	if m.SvcsetId != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.SvcsetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ServicesInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServicesInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicesInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MemBytesUsedPercent != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.MemBytesUsedPercent))
		i--
		dAtA[i] = 0x58
	}
	if m.MemBytesUsed != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.MemBytesUsed))
		i--
		dAtA[i] = 0x50
	}
	if m.TotalSvcSetCount != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.TotalSvcSetCount))
		i--
		dAtA[i] = 0x48
	}
	if m.ActiveSvcSetCount != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.ActiveSvcSetCount))
		i--
		dAtA[i] = 0x40
	}
	if m.InternalSvcSetId != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.InternalSvcSetId))
		i--
		dAtA[i] = 0x38
	}
	if m.SvcSetName != nil {
		i -= len(*m.SvcSetName)
		copy(dAtA[i:], *m.SvcSetName)
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(len(*m.SvcSetName)))
		i--
		dAtA[i] = 0x32
	}
	if m.SvcSetType != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.SvcSetType))
		i--
		dAtA[i] = 0x28
	}
	if m.SvcType != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.SvcType))
		i--
		dAtA[i] = 0x20
	}
	if m.ExternalSvcSetId != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.ExternalSvcSetId))
		i--
		dAtA[i] = 0x18
	}
	if m.SvcsetIdPresent != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.SvcsetIdPresent))
		i--
		dAtA[i] = 0x10
	}
	if m.SvcsetId != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.SvcsetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PktDropInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PktDropInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PktDropInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DropExceedEgressLimit != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.DropExceedEgressLimit))
		i--
		dAtA[i] = 0x70
	}
	if m.DropExceedIngressLimit != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.DropExceedIngressLimit))
		i--
		dAtA[i] = 0x68
	}
	if m.EgressDropFlows != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.EgressDropFlows))
		i--
		dAtA[i] = 0x60
	}
	if m.IngressDropFlows != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.IngressDropFlows))
		i--
		dAtA[i] = 0x58
	}
	if m.PtclcopyDrops != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.PtclcopyDrops))
		i--
		dAtA[i] = 0x50
	}
	if m.FlowlimitDrops != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.FlowlimitDrops))
		i--
		dAtA[i] = 0x48
	}
	if m.CpulimitDrops != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.CpulimitDrops))
		i--
		dAtA[i] = 0x40
	}
	if m.MemlimitDrops != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.MemlimitDrops))
		i--
		dAtA[i] = 0x38
	}
	if m.SvcSetName != nil {
		i -= len(*m.SvcSetName)
		copy(dAtA[i:], *m.SvcSetName)
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(len(*m.SvcSetName)))
		i--
		dAtA[i] = 0x32
	}
	if m.SvcSetType != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.SvcSetType))
		i--
		dAtA[i] = 0x28
	}
	if m.SvcType != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.SvcType))
		i--
		dAtA[i] = 0x20
	}
	if m.ExternalSvcSetId != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.ExternalSvcSetId))
		i--
		dAtA[i] = 0x18
	}
	if m.SvcsetIdPresent != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.SvcsetIdPresent))
		i--
		dAtA[i] = 0x10
	}
	if m.SvcsetId != nil {
		i = encodeVarintSvcsetTelemetry(dAtA, i, uint64(*m.SvcsetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSvcsetTelemetry(dAtA []byte, offset int, v uint64) int {
	offset -= sovSvcsetTelemetry(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ServicesInfra) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SvcsPluginsInfo) > 0 {
		for _, e := range m.SvcsPluginsInfo {
			l = e.Size()
			n += 1 + l + sovSvcsetTelemetry(uint64(l))
		}
	}
	if len(m.SvcsetCpuInfo) > 0 {
		for _, e := range m.SvcsetCpuInfo {
			l = e.Size()
			n += 1 + l + sovSvcsetTelemetry(uint64(l))
		}
	}
	if len(m.SvcsetMemInfo) > 0 {
		for _, e := range m.SvcsetMemInfo {
			l = e.Size()
			n += 1 + l + sovSvcsetTelemetry(uint64(l))
		}
	}
	if len(m.SvcsetSvcInfo) > 0 {
		for _, e := range m.SvcsetSvcInfo {
			l = e.Size()
			n += 1 + l + sovSvcsetTelemetry(uint64(l))
		}
	}
	if len(m.SvcsetPktdropInfo) > 0 {
		for _, e := range m.SvcsetPktdropInfo {
			l = e.Size()
			n += 1 + l + sovSvcsetTelemetry(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PluginsInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpNumPlugins != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.SpNumPlugins))
	}
	if m.SpName != nil {
		l = len(*m.SpName)
		n += 1 + l + sovSvcsetTelemetry(uint64(l))
	}
	if m.SpPid != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.SpPid))
	}
	if m.SpDataEvh != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.SpDataEvh))
	}
	if m.SpControlEvh != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.SpControlEvh))
	}
	if m.SpClass != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.SpClass))
	}
	if m.SpProviderId != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.SpProviderId))
	}
	if m.SpAppId != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.SpAppId))
	}
	if m.SpPluginFlags != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.SpPluginFlags))
	}
	if m.SpTcpSupportFlags != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.SpTcpSupportFlags))
	}
	if m.SpEvClassBase != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.SpEvClassBase))
	}
	if m.SpPluginMask != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.SpPluginMask))
	}
	if len(m.SpEvClassName) > 0 {
		for _, s := range m.SpEvClassName {
			l = len(s)
			n += 1 + l + sovSvcsetTelemetry(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CpuUsageInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SvcsetId != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.SvcsetId))
	}
	if m.SvcsetIdPresent != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.SvcsetIdPresent))
	}
	if m.ExternalSvcSetId != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.ExternalSvcSetId))
	}
	if m.SvcType != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.SvcType))
	}
	if m.SvcSetType != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.SvcSetType))
	}
	if m.SvcSetName != nil {
		l = len(*m.SvcSetName)
		n += 1 + l + sovSvcsetTelemetry(uint64(l))
	}
	if m.CpuUtilization != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.CpuUtilization))
	}
	if m.CpuZone != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.CpuZone))
	}
	if m.CpuLoad != nil {
		n += 5
	}
	if m.CpuUser != nil {
		l = len(*m.CpuUser)
		n += 1 + l + sovSvcsetTelemetry(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MemUsageInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SvcsetId != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.SvcsetId))
	}
	if m.SvcsetIdPresent != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.SvcsetIdPresent))
	}
	if m.ExternalSvcSetId != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.ExternalSvcSetId))
	}
	if m.SvcType != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.SvcType))
	}
	if m.SvcSetType != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.SvcSetType))
	}
	if m.SvcSetName != nil {
		l = len(*m.SvcSetName)
		n += 1 + l + sovSvcsetTelemetry(uint64(l))
	}
	if m.MemPercentUsed != nil {
		n += 5
	}
	if m.MemBytesUsed != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.MemBytesUsed))
	}
	if m.MemZone != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.MemZone))
	}
	if m.PolicyBytesUsed != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.PolicyBytesUsed))
	}
	if m.PolicyBytesUsedPercent != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.PolicyBytesUsedPercent))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServicesInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SvcsetId != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.SvcsetId))
	}
	if m.SvcsetIdPresent != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.SvcsetIdPresent))
	}
	if m.ExternalSvcSetId != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.ExternalSvcSetId))
	}
	if m.SvcType != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.SvcType))
	}
	if m.SvcSetType != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.SvcSetType))
	}
	if m.SvcSetName != nil {
		l = len(*m.SvcSetName)
		n += 1 + l + sovSvcsetTelemetry(uint64(l))
	}
	if m.InternalSvcSetId != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.InternalSvcSetId))
	}
	if m.ActiveSvcSetCount != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.ActiveSvcSetCount))
	}
	if m.TotalSvcSetCount != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.TotalSvcSetCount))
	}
	if m.MemBytesUsed != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.MemBytesUsed))
	}
	if m.MemBytesUsedPercent != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.MemBytesUsedPercent))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PktDropInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SvcsetId != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.SvcsetId))
	}
	if m.SvcsetIdPresent != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.SvcsetIdPresent))
	}
	if m.ExternalSvcSetId != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.ExternalSvcSetId))
	}
	if m.SvcType != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.SvcType))
	}
	if m.SvcSetType != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.SvcSetType))
	}
	if m.SvcSetName != nil {
		l = len(*m.SvcSetName)
		n += 1 + l + sovSvcsetTelemetry(uint64(l))
	}
	if m.MemlimitDrops != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.MemlimitDrops))
	}
	if m.CpulimitDrops != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.CpulimitDrops))
	}
	if m.FlowlimitDrops != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.FlowlimitDrops))
	}
	if m.PtclcopyDrops != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.PtclcopyDrops))
	}
	if m.IngressDropFlows != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.IngressDropFlows))
	}
	if m.EgressDropFlows != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.EgressDropFlows))
	}
	if m.DropExceedIngressLimit != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.DropExceedIngressLimit))
	}
	if m.DropExceedEgressLimit != nil {
		n += 1 + sovSvcsetTelemetry(uint64(*m.DropExceedEgressLimit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSvcsetTelemetry(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSvcsetTelemetry(x uint64) (n int) {
	return sovSvcsetTelemetry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ServicesInfra) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcsetTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServicesInfra: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServicesInfra: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvcsPluginsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcsetTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSvcsetTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SvcsPluginsInfo = append(m.SvcsPluginsInfo, &PluginsInfo{})
			if err := m.SvcsPluginsInfo[len(m.SvcsPluginsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvcsetCpuInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcsetTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSvcsetTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SvcsetCpuInfo = append(m.SvcsetCpuInfo, &CpuUsageInfo{})
			if err := m.SvcsetCpuInfo[len(m.SvcsetCpuInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvcsetMemInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcsetTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSvcsetTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SvcsetMemInfo = append(m.SvcsetMemInfo, &MemUsageInfo{})
			if err := m.SvcsetMemInfo[len(m.SvcsetMemInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvcsetSvcInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcsetTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSvcsetTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SvcsetSvcInfo = append(m.SvcsetSvcInfo, &ServicesInfo{})
			if err := m.SvcsetSvcInfo[len(m.SvcsetSvcInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvcsetPktdropInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcsetTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSvcsetTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SvcsetPktdropInfo = append(m.SvcsetPktdropInfo, &PktDropInfo{})
			if err := m.SvcsetPktdropInfo[len(m.SvcsetPktdropInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcsetTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcsetTelemetry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSvcsetTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PluginsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcsetTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PluginsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PluginsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpNumPlugins", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SpNumPlugins = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcsetTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSvcsetTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SpName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpPid", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SpPid = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpDataEvh", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SpDataEvh = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpControlEvh", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SpControlEvh = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpClass", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SpClass = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpProviderId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SpProviderId = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpAppId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SpAppId = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpPluginFlags", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SpPluginFlags = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpTcpSupportFlags", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SpTcpSupportFlags = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpEvClassBase", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SpEvClassBase = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpPluginMask", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SpPluginMask = &v
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpEvClassName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcsetTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSvcsetTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpEvClassName = append(m.SpEvClassName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcsetTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcsetTelemetry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSvcsetTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CpuUsageInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcsetTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CpuUsageInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CpuUsageInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvcsetId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SvcsetId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvcsetIdPresent", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SvcsetIdPresent = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalSvcSetId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExternalSvcSetId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvcType", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SvcType = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvcSetType", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SvcSetType = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvcSetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcsetTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSvcsetTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SvcSetName = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuUtilization", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CpuUtilization = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuZone", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CpuZone = &v
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuLoad", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.CpuLoad = &v2
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuUser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcsetTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSvcsetTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CpuUser = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcsetTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcsetTelemetry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSvcsetTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemUsageInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcsetTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemUsageInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemUsageInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvcsetId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SvcsetId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvcsetIdPresent", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SvcsetIdPresent = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalSvcSetId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExternalSvcSetId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvcType", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SvcType = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvcSetType", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SvcSetType = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvcSetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcsetTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSvcsetTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SvcSetName = &s
			iNdEx = postIndex
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemPercentUsed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.MemPercentUsed = &v2
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemBytesUsed", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MemBytesUsed = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemZone", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MemZone = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyBytesUsed", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PolicyBytesUsed = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyBytesUsedPercent", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PolicyBytesUsedPercent = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSvcsetTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcsetTelemetry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSvcsetTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServicesInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcsetTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServicesInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServicesInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvcsetId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SvcsetId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvcsetIdPresent", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SvcsetIdPresent = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalSvcSetId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExternalSvcSetId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvcType", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SvcType = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvcSetType", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SvcSetType = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvcSetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcsetTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSvcsetTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SvcSetName = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalSvcSetId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InternalSvcSetId = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveSvcSetCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActiveSvcSetCount = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSvcSetCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalSvcSetCount = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemBytesUsed", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MemBytesUsed = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemBytesUsedPercent", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MemBytesUsedPercent = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSvcsetTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcsetTelemetry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSvcsetTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PktDropInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcsetTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PktDropInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PktDropInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvcsetId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SvcsetId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvcsetIdPresent", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SvcsetIdPresent = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalSvcSetId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExternalSvcSetId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvcType", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SvcType = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvcSetType", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SvcSetType = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvcSetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcsetTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSvcsetTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SvcSetName = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemlimitDrops", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MemlimitDrops = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpulimitDrops", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CpulimitDrops = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowlimitDrops", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FlowlimitDrops = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PtclcopyDrops", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PtclcopyDrops = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressDropFlows", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IngressDropFlows = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgressDropFlows", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EgressDropFlows = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropExceedIngressLimit", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropExceedIngressLimit = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropExceedEgressLimit", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropExceedEgressLimit = &v
		default:
			iNdEx = preIndex
			skippy, err := skipSvcsetTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcsetTelemetry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSvcsetTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSvcsetTelemetry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSvcsetTelemetry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvcsetTelemetry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSvcsetTelemetry
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSvcsetTelemetry
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSvcsetTelemetry
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSvcsetTelemetry        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSvcsetTelemetry          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSvcsetTelemetry = fmt.Errorf("proto: unexpected end of group")
)
