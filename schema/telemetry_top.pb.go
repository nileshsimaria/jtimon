// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: telemetry_top.proto

package schema

import (
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TelemetryFieldOptions struct {
	IsKey                *bool    `protobuf:"varint,1,opt,name=is_key,json=isKey" json:"is_key,omitempty"`
	IsTimestamp          *bool    `protobuf:"varint,2,opt,name=is_timestamp,json=isTimestamp" json:"is_timestamp,omitempty"`
	IsCounter            *bool    `protobuf:"varint,3,opt,name=is_counter,json=isCounter" json:"is_counter,omitempty"`
	IsGauge              *bool    `protobuf:"varint,4,opt,name=is_gauge,json=isGauge" json:"is_gauge,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TelemetryFieldOptions) Reset()         { *m = TelemetryFieldOptions{} }
func (m *TelemetryFieldOptions) String() string { return proto.CompactTextString(m) }
func (*TelemetryFieldOptions) ProtoMessage()    {}
func (*TelemetryFieldOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_610679feed69e1a4, []int{0}
}
func (m *TelemetryFieldOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TelemetryFieldOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TelemetryFieldOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TelemetryFieldOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetryFieldOptions.Merge(m, src)
}
func (m *TelemetryFieldOptions) XXX_Size() int {
	return m.Size()
}
func (m *TelemetryFieldOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetryFieldOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetryFieldOptions proto.InternalMessageInfo

func (m *TelemetryFieldOptions) GetIsKey() bool {
	if m != nil && m.IsKey != nil {
		return *m.IsKey
	}
	return false
}

func (m *TelemetryFieldOptions) GetIsTimestamp() bool {
	if m != nil && m.IsTimestamp != nil {
		return *m.IsTimestamp
	}
	return false
}

func (m *TelemetryFieldOptions) GetIsCounter() bool {
	if m != nil && m.IsCounter != nil {
		return *m.IsCounter
	}
	return false
}

func (m *TelemetryFieldOptions) GetIsGauge() bool {
	if m != nil && m.IsGauge != nil {
		return *m.IsGauge
	}
	return false
}

type TelemetryStream struct {
	// router hostname
	// (or, just in the case of legacy (microkernel) PFEs, the IP address)
	SystemId *string `protobuf:"bytes,1,req,name=system_id,json=systemId" json:"system_id,omitempty"`
	// line card / RE (slot number). For RE, it will be 65535
	ComponentId *uint32 `protobuf:"varint,2,opt,name=component_id,json=componentId" json:"component_id,omitempty"`
	// PFE (if applicable)
	SubComponentId *uint32 `protobuf:"varint,3,opt,name=sub_component_id,json=subComponentId" json:"sub_component_id,omitempty"`
	// Overload sensor name with "senor name, internal path, external path
	// and component" seperated by ":". For RE sensors, component will be
	// daemon-name and for PFE sensors it will be "PFE".
	SensorName *string `protobuf:"bytes,4,opt,name=sensor_name,json=sensorName" json:"sensor_name,omitempty"`
	// sequence number, monotonically increasing for each
	// system_id, component_id, sub_component_id + sensor_name.
	SequenceNumber *uint32 `protobuf:"varint,5,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	// timestamp (milliseconds since 00:00:00 UTC 1/1/1970)
	Timestamp *uint64 `protobuf:"varint,6,opt,name=timestamp" json:"timestamp,omitempty"`
	// major version
	VersionMajor *uint32 `protobuf:"varint,7,opt,name=version_major,json=versionMajor" json:"version_major,omitempty"`
	// minor version
	VersionMinor *uint32 `protobuf:"varint,8,opt,name=version_minor,json=versionMinor" json:"version_minor,omitempty"`
	// end-of-message marker, set to true when the end of wrap is reached
	Eom                  *bool              `protobuf:"varint,9,opt,name=eom" json:"eom,omitempty"`
	Ietf                 *IETFSensors       `protobuf:"bytes,100,opt,name=ietf" json:"ietf,omitempty"`
	Enterprise           *EnterpriseSensors `protobuf:"bytes,101,opt,name=enterprise" json:"enterprise,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TelemetryStream) Reset()         { *m = TelemetryStream{} }
func (m *TelemetryStream) String() string { return proto.CompactTextString(m) }
func (*TelemetryStream) ProtoMessage()    {}
func (*TelemetryStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_610679feed69e1a4, []int{1}
}
func (m *TelemetryStream) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TelemetryStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TelemetryStream.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TelemetryStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetryStream.Merge(m, src)
}
func (m *TelemetryStream) XXX_Size() int {
	return m.Size()
}
func (m *TelemetryStream) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetryStream.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetryStream proto.InternalMessageInfo

func (m *TelemetryStream) GetSystemId() string {
	if m != nil && m.SystemId != nil {
		return *m.SystemId
	}
	return ""
}

func (m *TelemetryStream) GetComponentId() uint32 {
	if m != nil && m.ComponentId != nil {
		return *m.ComponentId
	}
	return 0
}

func (m *TelemetryStream) GetSubComponentId() uint32 {
	if m != nil && m.SubComponentId != nil {
		return *m.SubComponentId
	}
	return 0
}

func (m *TelemetryStream) GetSensorName() string {
	if m != nil && m.SensorName != nil {
		return *m.SensorName
	}
	return ""
}

func (m *TelemetryStream) GetSequenceNumber() uint32 {
	if m != nil && m.SequenceNumber != nil {
		return *m.SequenceNumber
	}
	return 0
}

func (m *TelemetryStream) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *TelemetryStream) GetVersionMajor() uint32 {
	if m != nil && m.VersionMajor != nil {
		return *m.VersionMajor
	}
	return 0
}

func (m *TelemetryStream) GetVersionMinor() uint32 {
	if m != nil && m.VersionMinor != nil {
		return *m.VersionMinor
	}
	return 0
}

func (m *TelemetryStream) GetEom() bool {
	if m != nil && m.Eom != nil {
		return *m.Eom
	}
	return false
}

func (m *TelemetryStream) GetIetf() *IETFSensors {
	if m != nil {
		return m.Ietf
	}
	return nil
}

func (m *TelemetryStream) GetEnterprise() *EnterpriseSensors {
	if m != nil {
		return m.Enterprise
	}
	return nil
}

type IETFSensors struct {
	XXX_NoUnkeyedLiteral         struct{} `json:"-"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
	XXX_sizecache                int32  `json:"-"`
}

func (m *IETFSensors) Reset()         { *m = IETFSensors{} }
func (m *IETFSensors) String() string { return proto.CompactTextString(m) }
func (*IETFSensors) ProtoMessage()    {}
func (*IETFSensors) Descriptor() ([]byte, []int) {
	return fileDescriptor_610679feed69e1a4, []int{2}
}

var extRange_IETFSensors = []proto.ExtensionRange{
	{Start: 1, End: 536870911},
}

func (*IETFSensors) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_IETFSensors
}

func (m *IETFSensors) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IETFSensors) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IETFSensors.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IETFSensors) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IETFSensors.Merge(m, src)
}
func (m *IETFSensors) XXX_Size() int {
	return m.Size()
}
func (m *IETFSensors) XXX_DiscardUnknown() {
	xxx_messageInfo_IETFSensors.DiscardUnknown(m)
}

var xxx_messageInfo_IETFSensors proto.InternalMessageInfo

type EnterpriseSensors struct {
	XXX_NoUnkeyedLiteral         struct{} `json:"-"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
	XXX_sizecache                int32  `json:"-"`
}

func (m *EnterpriseSensors) Reset()         { *m = EnterpriseSensors{} }
func (m *EnterpriseSensors) String() string { return proto.CompactTextString(m) }
func (*EnterpriseSensors) ProtoMessage()    {}
func (*EnterpriseSensors) Descriptor() ([]byte, []int) {
	return fileDescriptor_610679feed69e1a4, []int{3}
}

var extRange_EnterpriseSensors = []proto.ExtensionRange{
	{Start: 1, End: 536870911},
}

func (*EnterpriseSensors) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_EnterpriseSensors
}

func (m *EnterpriseSensors) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnterpriseSensors) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnterpriseSensors.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnterpriseSensors) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnterpriseSensors.Merge(m, src)
}
func (m *EnterpriseSensors) XXX_Size() int {
	return m.Size()
}
func (m *EnterpriseSensors) XXX_DiscardUnknown() {
	xxx_messageInfo_EnterpriseSensors.DiscardUnknown(m)
}

var xxx_messageInfo_EnterpriseSensors proto.InternalMessageInfo

type JuniperNetworksSensors struct {
	XXX_NoUnkeyedLiteral         struct{} `json:"-"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
	XXX_sizecache                int32  `json:"-"`
}

func (m *JuniperNetworksSensors) Reset()         { *m = JuniperNetworksSensors{} }
func (m *JuniperNetworksSensors) String() string { return proto.CompactTextString(m) }
func (*JuniperNetworksSensors) ProtoMessage()    {}
func (*JuniperNetworksSensors) Descriptor() ([]byte, []int) {
	return fileDescriptor_610679feed69e1a4, []int{4}
}

var extRange_JuniperNetworksSensors = []proto.ExtensionRange{
	{Start: 1, End: 536870911},
}

func (*JuniperNetworksSensors) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_JuniperNetworksSensors
}

func (m *JuniperNetworksSensors) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JuniperNetworksSensors) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JuniperNetworksSensors.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JuniperNetworksSensors) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JuniperNetworksSensors.Merge(m, src)
}
func (m *JuniperNetworksSensors) XXX_Size() int {
	return m.Size()
}
func (m *JuniperNetworksSensors) XXX_DiscardUnknown() {
	xxx_messageInfo_JuniperNetworksSensors.DiscardUnknown(m)
}

var xxx_messageInfo_JuniperNetworksSensors proto.InternalMessageInfo

var E_TelemetryOptions = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*TelemetryFieldOptions)(nil),
	Field:         1024,
	Name:          "telemetry_options",
	Tag:           "bytes,1024,opt,name=telemetry_options",
	Filename:      "telemetry_top.proto",
}

var E_JuniperNetworks = &proto.ExtensionDesc{
	ExtendedType:  (*EnterpriseSensors)(nil),
	ExtensionType: (*JuniperNetworksSensors)(nil),
	Field:         2636,
	Name:          "juniperNetworks",
	Tag:           "bytes,2636,opt,name=juniperNetworks",
	Filename:      "telemetry_top.proto",
}

func init() {
	proto.RegisterType((*TelemetryFieldOptions)(nil), "TelemetryFieldOptions")
	proto.RegisterType((*TelemetryStream)(nil), "TelemetryStream")
	proto.RegisterType((*IETFSensors)(nil), "IETFSensors")
	proto.RegisterType((*EnterpriseSensors)(nil), "EnterpriseSensors")
	proto.RegisterType((*JuniperNetworksSensors)(nil), "JuniperNetworksSensors")
	proto.RegisterExtension(E_TelemetryOptions)
	proto.RegisterExtension(E_JuniperNetworks)
}

func init() { proto.RegisterFile("telemetry_top.proto", fileDescriptor_610679feed69e1a4) }

var fileDescriptor_610679feed69e1a4 = []byte{
	// 585 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcd, 0x4e, 0xdb, 0x40,
	0x14, 0x85, 0xe5, 0x84, 0x1f, 0xe7, 0x26, 0x40, 0x98, 0x16, 0x98, 0x56, 0x02, 0xa5, 0x41, 0x6a,
	0xa3, 0x4a, 0xd8, 0x12, 0x4b, 0x56, 0x15, 0x08, 0x2a, 0x5a, 0x95, 0x4a, 0x06, 0x75, 0xd1, 0x8d,
	0xeb, 0xd8, 0x17, 0x33, 0x21, 0x9e, 0x71, 0xe7, 0x8e, 0xa9, 0xb2, 0x8b, 0xba, 0xed, 0x0b, 0xf5,
	0x11, 0xba, 0xe8, 0xa2, 0x8f, 0x50, 0xf1, 0x24, 0x95, 0x27, 0x3f, 0x24, 0x25, 0x3b, 0xcf, 0xb9,
	0xdf, 0x3d, 0x3a, 0x33, 0x3e, 0xf0, 0xc4, 0x60, 0x1f, 0x33, 0x34, 0x7a, 0x10, 0x1a, 0x95, 0x7b,
	0xb9, 0x56, 0x46, 0x3d, 0x6f, 0xa5, 0x4a, 0xa5, 0x7d, 0xf4, 0xed, 0xa9, 0x5b, 0x5c, 0xfb, 0x09,
	0x52, 0xac, 0x45, 0x6e, 0x94, 0x1e, 0x11, 0xed, 0x1f, 0x0e, 0x6c, 0x5d, 0x4d, 0x36, 0xcf, 0x04,
	0xf6, 0x93, 0x8f, 0xb9, 0x11, 0x4a, 0x12, 0xdb, 0x82, 0x15, 0x41, 0xe1, 0x2d, 0x0e, 0xb8, 0xd3,
	0x72, 0x3a, 0x6e, 0xb0, 0x2c, 0xe8, 0x3d, 0x0e, 0xd8, 0x0b, 0x68, 0x08, 0x0a, 0x8d, 0xc8, 0x90,
	0x4c, 0x94, 0xe5, 0xbc, 0x62, 0x87, 0x75, 0x41, 0x57, 0x13, 0x89, 0xed, 0x02, 0x08, 0x0a, 0x63,
	0x55, 0x48, 0x83, 0x9a, 0x57, 0x2d, 0x50, 0x13, 0x74, 0x32, 0x12, 0xd8, 0x33, 0x70, 0x05, 0x85,
	0x69, 0x54, 0xa4, 0xc8, 0x97, 0xec, 0x70, 0x55, 0xd0, 0xdb, 0xf2, 0xd8, 0xfe, 0x59, 0x85, 0x8d,
	0x69, 0x9a, 0x4b, 0xa3, 0x31, 0xca, 0x58, 0x1b, 0x6a, 0x34, 0x20, 0x83, 0x59, 0x28, 0x12, 0xee,
	0xb4, 0x2a, 0x9d, 0xda, 0xf1, 0xf2, 0xf7, 0x37, 0x15, 0xd7, 0x09, 0xdc, 0x91, 0x7e, 0x9e, 0xb0,
	0x0e, 0x34, 0x62, 0x95, 0xe5, 0x4a, 0xa2, 0x34, 0x25, 0x56, 0x86, 0x5a, 0x9b, 0x60, 0xf5, 0xe9,
	0xe8, 0x3c, 0x61, 0x3e, 0x34, 0xa9, 0xe8, 0x86, 0x73, 0x74, 0x75, 0x96, 0x5e, 0xa7, 0xa2, 0x7b,
	0x32, 0xb3, 0xf0, 0x12, 0xea, 0x84, 0x92, 0x94, 0x0e, 0x65, 0x94, 0x8d, 0x02, 0x4f, 0x03, 0xc0,
	0x68, 0x72, 0x11, 0x65, 0xc8, 0x5e, 0xc1, 0x06, 0xe1, 0xd7, 0x02, 0x65, 0x8c, 0xa1, 0x2c, 0xb2,
	0x2e, 0x6a, 0xbe, 0x5c, 0xfa, 0x06, 0xeb, 0x13, 0xf9, 0xc2, 0xaa, 0x6c, 0x1f, 0x6a, 0x0f, 0xaf,
	0xb7, 0xd2, 0x72, 0x3a, 0x4b, 0xd6, 0xae, 0xe9, 0x04, 0x0f, 0x3a, 0xdb, 0x87, 0xb5, 0x3b, 0xd4,
	0x24, 0x94, 0x0c, 0xb3, 0xa8, 0xa7, 0x34, 0x5f, 0xb5, 0x5e, 0x8d, 0xb1, 0xf8, 0xa1, 0xd4, 0xe6,
	0x20, 0x21, 0x95, 0xe6, 0xee, 0x3c, 0x54, 0x6a, 0xac, 0x09, 0x55, 0x54, 0x19, 0xaf, 0xd9, 0x87,
	0x2e, 0x3f, 0x59, 0x0b, 0x96, 0x04, 0x9a, 0x6b, 0x9e, 0xb4, 0x9c, 0x4e, 0xfd, 0xb0, 0xe1, 0x9d,
	0x9f, 0x5e, 0x9d, 0x5d, 0xda, 0x8b, 0x50, 0x60, 0x27, 0xec, 0x10, 0x00, 0xcb, 0x5f, 0x95, 0x6b,
	0x41, 0xc8, 0xd1, 0x72, 0xcc, 0x3b, 0x9d, 0x4a, 0x13, 0x7a, 0x86, 0x6a, 0xef, 0x40, 0x7d, 0xc6,
	0xe8, 0xb5, 0xeb, 0x3a, 0xcd, 0xe1, 0x70, 0x38, 0xac, 0xb4, 0x77, 0x61, 0xf3, 0xd1, 0xe6, 0xcc,
	0xb8, 0x0d, 0xdb, 0xef, 0x0a, 0x29, 0x72, 0xd4, 0x17, 0x68, 0xbe, 0x29, 0x7d, 0x4b, 0x8f, 0x98,
	0xa3, 0x18, 0x36, 0x1f, 0xda, 0xad, 0xc6, 0xfd, 0xdc, 0xf5, 0x46, 0xe5, 0xf6, 0x26, 0xe5, 0xf6,
	0x66, 0xeb, 0xcb, 0x87, 0xae, 0x8d, 0xbd, 0xed, 0x2d, 0x6c, 0x77, 0xd0, 0x9c, 0x1a, 0x8e, 0x95,
	0xa3, 0x4f, 0xb0, 0xd1, 0x9b, 0x0f, 0xc2, 0x16, 0xdc, 0x99, 0xff, 0x7e, 0x6a, 0x7d, 0x77, 0xbc,
	0xc5, 0xa9, 0x83, 0xff, 0x4d, 0x8e, 0xbf, 0xfc, 0xba, 0xdf, 0x73, 0xfe, 0xdc, 0xef, 0x39, 0x7f,
	0xef, 0xf7, 0x9c, 0xcf, 0x41, 0x2a, 0x8c, 0x37, 0x46, 0x3c, 0x89, 0xc6, 0x17, 0x31, 0x76, 0x51,
	0xa7, 0xfe, 0x0d, 0x46, 0x7d, 0x73, 0xd3, 0x55, 0xe6, 0x40, 0xc8, 0x14, 0xc9, 0x1c, 0xf4, 0x8c,
	0x38, 0x90, 0x91, 0x11, 0x77, 0xe8, 0xe7, 0xb7, 0xa9, 0xdf, 0x33, 0xc2, 0x8f, 0x92, 0x28, 0x37,
	0xa8, 0xc9, 0x0f, 0x7b, 0x85, 0x54, 0xe4, 0x53, 0x7c, 0x83, 0x59, 0xf4, 0x2f, 0x00, 0x00, 0xff,
	0xff, 0xa4, 0x4d, 0x82, 0x85, 0xfb, 0x03, 0x00, 0x00,
}

func (m *TelemetryFieldOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TelemetryFieldOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TelemetryFieldOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsGauge != nil {
		i--
		if *m.IsGauge {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.IsCounter != nil {
		i--
		if *m.IsCounter {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.IsTimestamp != nil {
		i--
		if *m.IsTimestamp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.IsKey != nil {
		i--
		if *m.IsKey {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TelemetryStream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TelemetryStream) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TelemetryStream) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Enterprise != nil {
		{
			size, err := m.Enterprise.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTelemetryTop(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if m.Ietf != nil {
		{
			size, err := m.Ietf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTelemetryTop(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if m.Eom != nil {
		i--
		if *m.Eom {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.VersionMinor != nil {
		i = encodeVarintTelemetryTop(dAtA, i, uint64(*m.VersionMinor))
		i--
		dAtA[i] = 0x40
	}
	if m.VersionMajor != nil {
		i = encodeVarintTelemetryTop(dAtA, i, uint64(*m.VersionMajor))
		i--
		dAtA[i] = 0x38
	}
	if m.Timestamp != nil {
		i = encodeVarintTelemetryTop(dAtA, i, uint64(*m.Timestamp))
		i--
		dAtA[i] = 0x30
	}
	if m.SequenceNumber != nil {
		i = encodeVarintTelemetryTop(dAtA, i, uint64(*m.SequenceNumber))
		i--
		dAtA[i] = 0x28
	}
	if m.SensorName != nil {
		i -= len(*m.SensorName)
		copy(dAtA[i:], *m.SensorName)
		i = encodeVarintTelemetryTop(dAtA, i, uint64(len(*m.SensorName)))
		i--
		dAtA[i] = 0x22
	}
	if m.SubComponentId != nil {
		i = encodeVarintTelemetryTop(dAtA, i, uint64(*m.SubComponentId))
		i--
		dAtA[i] = 0x18
	}
	if m.ComponentId != nil {
		i = encodeVarintTelemetryTop(dAtA, i, uint64(*m.ComponentId))
		i--
		dAtA[i] = 0x10
	}
	if m.SystemId == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("system_id")
	} else {
		i -= len(*m.SystemId)
		copy(dAtA[i:], *m.SystemId)
		i = encodeVarintTelemetryTop(dAtA, i, uint64(len(*m.SystemId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IETFSensors) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IETFSensors) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IETFSensors) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if n, err := github_com_gogo_protobuf_proto.EncodeInternalExtensionBackwards(m, dAtA[:i]); err != nil {
		return 0, err
	} else {
		i -= n
	}
	return len(dAtA) - i, nil
}

func (m *EnterpriseSensors) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterpriseSensors) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnterpriseSensors) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if n, err := github_com_gogo_protobuf_proto.EncodeInternalExtensionBackwards(m, dAtA[:i]); err != nil {
		return 0, err
	} else {
		i -= n
	}
	return len(dAtA) - i, nil
}

func (m *JuniperNetworksSensors) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JuniperNetworksSensors) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JuniperNetworksSensors) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if n, err := github_com_gogo_protobuf_proto.EncodeInternalExtensionBackwards(m, dAtA[:i]); err != nil {
		return 0, err
	} else {
		i -= n
	}
	return len(dAtA) - i, nil
}

func encodeVarintTelemetryTop(dAtA []byte, offset int, v uint64) int {
	offset -= sovTelemetryTop(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TelemetryFieldOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsKey != nil {
		n += 2
	}
	if m.IsTimestamp != nil {
		n += 2
	}
	if m.IsCounter != nil {
		n += 2
	}
	if m.IsGauge != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TelemetryStream) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SystemId != nil {
		l = len(*m.SystemId)
		n += 1 + l + sovTelemetryTop(uint64(l))
	}
	if m.ComponentId != nil {
		n += 1 + sovTelemetryTop(uint64(*m.ComponentId))
	}
	if m.SubComponentId != nil {
		n += 1 + sovTelemetryTop(uint64(*m.SubComponentId))
	}
	if m.SensorName != nil {
		l = len(*m.SensorName)
		n += 1 + l + sovTelemetryTop(uint64(l))
	}
	if m.SequenceNumber != nil {
		n += 1 + sovTelemetryTop(uint64(*m.SequenceNumber))
	}
	if m.Timestamp != nil {
		n += 1 + sovTelemetryTop(uint64(*m.Timestamp))
	}
	if m.VersionMajor != nil {
		n += 1 + sovTelemetryTop(uint64(*m.VersionMajor))
	}
	if m.VersionMinor != nil {
		n += 1 + sovTelemetryTop(uint64(*m.VersionMinor))
	}
	if m.Eom != nil {
		n += 2
	}
	if m.Ietf != nil {
		l = m.Ietf.Size()
		n += 2 + l + sovTelemetryTop(uint64(l))
	}
	if m.Enterprise != nil {
		l = m.Enterprise.Size()
		n += 2 + l + sovTelemetryTop(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IETFSensors) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += github_com_gogo_protobuf_proto.SizeOfInternalExtension(m)
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EnterpriseSensors) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += github_com_gogo_protobuf_proto.SizeOfInternalExtension(m)
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JuniperNetworksSensors) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += github_com_gogo_protobuf_proto.SizeOfInternalExtension(m)
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTelemetryTop(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTelemetryTop(x uint64) (n int) {
	return sovTelemetryTop(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TelemetryFieldOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetryTop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TelemetryFieldOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TelemetryFieldOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsKey", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryTop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsKey = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTimestamp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryTop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsTimestamp = &b
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCounter", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryTop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsCounter = &b
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGauge", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryTop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsGauge = &b
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetryTop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetryTop
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTelemetryTop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TelemetryStream) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetryTop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TelemetryStream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TelemetryStream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryTop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryTop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTelemetryTop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SystemId = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryTop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ComponentId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubComponentId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryTop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SubComponentId = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryTop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryTop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTelemetryTop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SensorName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceNumber", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryTop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SequenceNumber = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryTop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Timestamp = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionMajor", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryTop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VersionMajor = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionMinor", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryTop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VersionMinor = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eom", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryTop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Eom = &b
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ietf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryTop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetryTop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTelemetryTop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ietf == nil {
				m.Ietf = &IETFSensors{}
			}
			if err := m.Ietf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enterprise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryTop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetryTop
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTelemetryTop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enterprise == nil {
				m.Enterprise = &EnterpriseSensors{}
			}
			if err := m.Enterprise.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetryTop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetryTop
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTelemetryTop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("system_id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IETFSensors) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetryTop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IETFSensors: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IETFSensors: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			if (fieldNum >= 1) && (fieldNum < 536870912) {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				iNdEx -= sizeOfWire
				skippy, err := skipTelemetryTop(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthTelemetryTop
				}
				if (iNdEx + skippy) < 0 {
					return ErrInvalidLengthTelemetryTop
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				github_com_gogo_protobuf_proto.AppendExtension(m, int32(fieldNum), dAtA[iNdEx:iNdEx+skippy])
				iNdEx += skippy
			} else {
				iNdEx = preIndex
				skippy, err := skipTelemetryTop(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthTelemetryTop
				}
				if (iNdEx + skippy) < 0 {
					return ErrInvalidLengthTelemetryTop
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
				iNdEx += skippy
			}
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnterpriseSensors) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetryTop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterpriseSensors: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterpriseSensors: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			if (fieldNum >= 1) && (fieldNum < 536870912) {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				iNdEx -= sizeOfWire
				skippy, err := skipTelemetryTop(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthTelemetryTop
				}
				if (iNdEx + skippy) < 0 {
					return ErrInvalidLengthTelemetryTop
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				github_com_gogo_protobuf_proto.AppendExtension(m, int32(fieldNum), dAtA[iNdEx:iNdEx+skippy])
				iNdEx += skippy
			} else {
				iNdEx = preIndex
				skippy, err := skipTelemetryTop(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthTelemetryTop
				}
				if (iNdEx + skippy) < 0 {
					return ErrInvalidLengthTelemetryTop
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
				iNdEx += skippy
			}
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JuniperNetworksSensors) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetryTop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JuniperNetworksSensors: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JuniperNetworksSensors: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			if (fieldNum >= 1) && (fieldNum < 536870912) {
				var sizeOfWire int
				for {
					sizeOfWire++
					wire >>= 7
					if wire == 0 {
						break
					}
				}
				iNdEx -= sizeOfWire
				skippy, err := skipTelemetryTop(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthTelemetryTop
				}
				if (iNdEx + skippy) < 0 {
					return ErrInvalidLengthTelemetryTop
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				github_com_gogo_protobuf_proto.AppendExtension(m, int32(fieldNum), dAtA[iNdEx:iNdEx+skippy])
				iNdEx += skippy
			} else {
				iNdEx = preIndex
				skippy, err := skipTelemetryTop(dAtA[iNdEx:])
				if err != nil {
					return err
				}
				if skippy < 0 {
					return ErrInvalidLengthTelemetryTop
				}
				if (iNdEx + skippy) < 0 {
					return ErrInvalidLengthTelemetryTop
				}
				if (iNdEx + skippy) > l {
					return io.ErrUnexpectedEOF
				}
				m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
				iNdEx += skippy
			}
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTelemetryTop(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTelemetryTop
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTelemetryTop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTelemetryTop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTelemetryTop
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTelemetryTop
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTelemetryTop
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTelemetryTop        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTelemetryTop          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTelemetryTop = fmt.Errorf("proto: unexpected end of group")
)
