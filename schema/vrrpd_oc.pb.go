// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vrrpd_oc.proto

package schema

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InterfacesVrrp struct {
	Interface            []*InterfacesVrrpInterfaceList `protobuf:"bytes,151,rep,name=interface" json:"interface,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *InterfacesVrrp) Reset()         { *m = InterfacesVrrp{} }
func (m *InterfacesVrrp) String() string { return proto.CompactTextString(m) }
func (*InterfacesVrrp) ProtoMessage()    {}
func (*InterfacesVrrp) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf3b3d6b7c480afe, []int{0}
}
func (m *InterfacesVrrp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesVrrp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesVrrp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesVrrp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesVrrp.Merge(m, src)
}
func (m *InterfacesVrrp) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesVrrp) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesVrrp.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesVrrp proto.InternalMessageInfo

func (m *InterfacesVrrp) GetInterface() []*InterfacesVrrpInterfaceList {
	if m != nil {
		return m.Interface
	}
	return nil
}

type InterfacesVrrpInterfaceList struct {
	Name                 *string                                       `protobuf:"bytes,51,opt,name=name" json:"name,omitempty"`
	Subinterfaces        *InterfacesVrrpInterfaceListSubinterfacesType `protobuf:"bytes,151,opt,name=subinterfaces" json:"subinterfaces,omitempty"`
	RoutedVlan           *InterfacesVrrpInterfaceListRoutedVlanType    `protobuf:"bytes,152,opt,name=routed_vlan,json=routedVlan" json:"routed_vlan,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                      `json:"-"`
	XXX_unrecognized     []byte                                        `json:"-"`
	XXX_sizecache        int32                                         `json:"-"`
}

func (m *InterfacesVrrpInterfaceList) Reset()         { *m = InterfacesVrrpInterfaceList{} }
func (m *InterfacesVrrpInterfaceList) String() string { return proto.CompactTextString(m) }
func (*InterfacesVrrpInterfaceList) ProtoMessage()    {}
func (*InterfacesVrrpInterfaceList) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf3b3d6b7c480afe, []int{0, 0}
}
func (m *InterfacesVrrpInterfaceList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesVrrpInterfaceList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesVrrpInterfaceList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesVrrpInterfaceList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesVrrpInterfaceList.Merge(m, src)
}
func (m *InterfacesVrrpInterfaceList) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesVrrpInterfaceList) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesVrrpInterfaceList.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesVrrpInterfaceList proto.InternalMessageInfo

func (m *InterfacesVrrpInterfaceList) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *InterfacesVrrpInterfaceList) GetSubinterfaces() *InterfacesVrrpInterfaceListSubinterfacesType {
	if m != nil {
		return m.Subinterfaces
	}
	return nil
}

func (m *InterfacesVrrpInterfaceList) GetRoutedVlan() *InterfacesVrrpInterfaceListRoutedVlanType {
	if m != nil {
		return m.RoutedVlan
	}
	return nil
}

type InterfacesVrrpInterfaceListSubinterfacesType struct {
	Subinterface         []*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList `protobuf:"bytes,151,rep,name=subinterface" json:"subinterface,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                        `json:"-"`
	XXX_unrecognized     []byte                                                          `json:"-"`
	XXX_sizecache        int32                                                           `json:"-"`
}

func (m *InterfacesVrrpInterfaceListSubinterfacesType) Reset() {
	*m = InterfacesVrrpInterfaceListSubinterfacesType{}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesType) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesVrrpInterfaceListSubinterfacesType) ProtoMessage() {}
func (*InterfacesVrrpInterfaceListSubinterfacesType) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf3b3d6b7c480afe, []int{0, 0, 0}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesVrrpInterfaceListSubinterfacesType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesType.Merge(m, src)
}
func (m *InterfacesVrrpInterfaceListSubinterfacesType) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesVrrpInterfaceListSubinterfacesType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesType proto.InternalMessageInfo

func (m *InterfacesVrrpInterfaceListSubinterfacesType) GetSubinterface() []*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList {
	if m != nil {
		return m.Subinterface
	}
	return nil
}

type InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList struct {
	Index                *uint32                                                               `protobuf:"varint,51,opt,name=index" json:"index,omitempty"`
	Ipv4                 *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type `protobuf:"bytes,151,opt,name=ipv4" json:"ipv4,omitempty"`
	Ipv6                 *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type `protobuf:"bytes,152,opt,name=ipv6" json:"ipv6,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                              `json:"-"`
	XXX_unrecognized     []byte                                                                `json:"-"`
	XXX_sizecache        int32                                                                 `json:"-"`
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList) Reset() {
	*m = InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList{}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList) ProtoMessage() {}
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf3b3d6b7c480afe, []int{0, 0, 0, 0}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList.Merge(m, src)
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList proto.InternalMessageInfo

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList) GetIndex() uint32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList) GetIpv4() *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type {
	if m != nil {
		return m.Ipv4
	}
	return nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList) GetIpv6() *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type {
	if m != nil {
		return m.Ipv6
	}
	return nil
}

type InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type struct {
	Addresses            *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType `protobuf:"bytes,151,opt,name=addresses" json:"addresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                           `json:"-"`
	XXX_unrecognized     []byte                                                                             `json:"-"`
	XXX_sizecache        int32                                                                              `json:"-"`
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type) Reset() {
	*m = InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type{}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type) ProtoMessage() {}
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf3b3d6b7c480afe, []int{0, 0, 0, 0, 0}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type.Merge(m, src)
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type proto.InternalMessageInfo

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type) GetAddresses() *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType struct {
	Address              []*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList `protobuf:"bytes,151,rep,name=address" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                                        `json:"-"`
	XXX_unrecognized     []byte                                                                                          `json:"-"`
	XXX_sizecache        int32                                                                                           `json:"-"`
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType) Reset() {
	*m = InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType{}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType) ProtoMessage() {
}
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf3b3d6b7c480afe, []int{0, 0, 0, 0, 0, 0}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType.Merge(m, src)
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType proto.InternalMessageInfo

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType) GetAddress() []*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList {
	if m != nil {
		return m.Address
	}
	return nil
}

type InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList struct {
	Ip                   *string                                                                                               `protobuf:"bytes,51,opt,name=ip" json:"ip,omitempty"`
	Vrrp                 *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpType `protobuf:"bytes,151,opt,name=vrrp" json:"vrrp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                                              `json:"-"`
	XXX_unrecognized     []byte                                                                                                `json:"-"`
	XXX_sizecache        int32                                                                                                 `json:"-"`
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList) Reset() {
	*m = InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList{}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList) ProtoMessage() {
}
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf3b3d6b7c480afe, []int{0, 0, 0, 0, 0, 0, 0}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList.Merge(m, src)
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList proto.InternalMessageInfo

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList) GetVrrp() *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpType {
	if m != nil {
		return m.Vrrp
	}
	return nil
}

type InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpType struct {
	VrrpGroup            []*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList `protobuf:"bytes,151,rep,name=vrrp_group,json=vrrpGroup" json:"vrrp_group,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                                                             `json:"-"`
	XXX_unrecognized     []byte                                                                                                               `json:"-"`
	XXX_sizecache        int32                                                                                                                `json:"-"`
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpType) Reset() {
	*m = InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpType{}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpType) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpType) ProtoMessage() {
}
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpType) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf3b3d6b7c480afe, []int{0, 0, 0, 0, 0, 0, 0, 0}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpType.Merge(m, src)
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpType) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpType proto.InternalMessageInfo

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpType) GetVrrpGroup() []*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList {
	if m != nil {
		return m.VrrpGroup
	}
	return nil
}

type InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList struct {
	State                *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType             `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	InterfaceTracking    *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType `protobuf:"bytes,152,opt,name=interface_tracking,json=interfaceTracking" json:"interface_tracking,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                                                                                `json:"-"`
	XXX_unrecognized     []byte                                                                                                                                  `json:"-"`
	XXX_sizecache        int32                                                                                                                                   `json:"-"`
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) Reset() {
	*m = InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList{}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) ProtoMessage() {
}
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf3b3d6b7c480afe, []int{0, 0, 0, 0, 0, 0, 0, 0, 0}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList.Merge(m, src)
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList proto.InternalMessageInfo

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) GetState() *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) GetInterfaceTracking() *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType {
	if m != nil {
		return m.InterfaceTracking
	}
	return nil
}

type InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType struct {
	VirtualRouterId       *uint32  `protobuf:"varint,62,opt,name=virtual_router_id,json=virtualRouterId" json:"virtual_router_id,omitempty"`
	VirtualAddress        []string `protobuf:"bytes,63,rep,name=virtual_address,json=virtualAddress" json:"virtual_address,omitempty"`
	Priority              *uint32  `protobuf:"varint,64,opt,name=priority" json:"priority,omitempty"`
	Preempt               *bool    `protobuf:"varint,65,opt,name=preempt" json:"preempt,omitempty"`
	PreemptDelay          *uint32  `protobuf:"varint,66,opt,name=preempt_delay,json=preemptDelay" json:"preempt_delay,omitempty"`
	AcceptMode            *bool    `protobuf:"varint,67,opt,name=accept_mode,json=acceptMode" json:"accept_mode,omitempty"`
	AdvertisementInterval *uint32  `protobuf:"varint,68,opt,name=advertisement_interval,json=advertisementInterval" json:"advertisement_interval,omitempty"`
	CurrentPriority       *uint32  `protobuf:"varint,69,opt,name=current_priority,json=currentPriority" json:"current_priority,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) Reset() {
	*m = InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType{}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) ProtoMessage() {
}
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf3b3d6b7c480afe, []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType.Merge(m, src)
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType proto.InternalMessageInfo

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetVirtualRouterId() uint32 {
	if m != nil && m.VirtualRouterId != nil {
		return *m.VirtualRouterId
	}
	return 0
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetVirtualAddress() []string {
	if m != nil {
		return m.VirtualAddress
	}
	return nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetPriority() uint32 {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return 0
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetPreempt() bool {
	if m != nil && m.Preempt != nil {
		return *m.Preempt
	}
	return false
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetPreemptDelay() uint32 {
	if m != nil && m.PreemptDelay != nil {
		return *m.PreemptDelay
	}
	return 0
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetAcceptMode() bool {
	if m != nil && m.AcceptMode != nil {
		return *m.AcceptMode
	}
	return false
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetAdvertisementInterval() uint32 {
	if m != nil && m.AdvertisementInterval != nil {
		return *m.AdvertisementInterval
	}
	return 0
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetCurrentPriority() uint32 {
	if m != nil && m.CurrentPriority != nil {
		return *m.CurrentPriority
	}
	return 0
}

type InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType struct {
	State                *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                                                                                         `json:"-"`
	XXX_unrecognized     []byte                                                                                                                                           `json:"-"`
	XXX_sizecache        int32                                                                                                                                            `json:"-"`
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) Reset() {
	*m = InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType{}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) ProtoMessage() {
}
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf3b3d6b7c480afe, []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType.Merge(m, src)
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType proto.InternalMessageInfo

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) GetState() *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType {
	if m != nil {
		return m.State
	}
	return nil
}

type InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType struct {
	TrackInterface       []string `protobuf:"bytes,70,rep,name=track_interface,json=trackInterface" json:"track_interface,omitempty"`
	PriorityDecrement    *uint32  `protobuf:"varint,71,opt,name=priority_decrement,json=priorityDecrement" json:"priority_decrement,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) Reset() {
	*m = InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType{}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) ProtoMessage() {
}
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf3b3d6b7c480afe, []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType.Merge(m, src)
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType proto.InternalMessageInfo

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) GetTrackInterface() []string {
	if m != nil {
		return m.TrackInterface
	}
	return nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) GetPriorityDecrement() uint32 {
	if m != nil && m.PriorityDecrement != nil {
		return *m.PriorityDecrement
	}
	return 0
}

type InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type struct {
	Addresses            *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType `protobuf:"bytes,151,opt,name=addresses" json:"addresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                           `json:"-"`
	XXX_unrecognized     []byte                                                                             `json:"-"`
	XXX_sizecache        int32                                                                              `json:"-"`
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type) Reset() {
	*m = InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type{}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type) ProtoMessage() {}
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf3b3d6b7c480afe, []int{0, 0, 0, 0, 1}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type.Merge(m, src)
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type proto.InternalMessageInfo

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type) GetAddresses() *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType struct {
	Address              []*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList `protobuf:"bytes,151,rep,name=address" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                                        `json:"-"`
	XXX_unrecognized     []byte                                                                                          `json:"-"`
	XXX_sizecache        int32                                                                                           `json:"-"`
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType) Reset() {
	*m = InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType{}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType) ProtoMessage() {
}
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf3b3d6b7c480afe, []int{0, 0, 0, 0, 1, 0}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType.Merge(m, src)
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType proto.InternalMessageInfo

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType) GetAddress() []*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList {
	if m != nil {
		return m.Address
	}
	return nil
}

type InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList struct {
	Ip                   *string                                                                                               `protobuf:"bytes,51,opt,name=ip" json:"ip,omitempty"`
	Vrrp                 *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpType `protobuf:"bytes,151,opt,name=vrrp" json:"vrrp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                                              `json:"-"`
	XXX_unrecognized     []byte                                                                                                `json:"-"`
	XXX_sizecache        int32                                                                                                 `json:"-"`
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList) Reset() {
	*m = InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList{}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList) ProtoMessage() {
}
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf3b3d6b7c480afe, []int{0, 0, 0, 0, 1, 0, 0}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList.Merge(m, src)
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList proto.InternalMessageInfo

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList) GetVrrp() *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpType {
	if m != nil {
		return m.Vrrp
	}
	return nil
}

type InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpType struct {
	VrrpGroup            []*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList `protobuf:"bytes,151,rep,name=vrrp_group,json=vrrpGroup" json:"vrrp_group,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                                                             `json:"-"`
	XXX_unrecognized     []byte                                                                                                               `json:"-"`
	XXX_sizecache        int32                                                                                                                `json:"-"`
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpType) Reset() {
	*m = InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpType{}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpType) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpType) ProtoMessage() {
}
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpType) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf3b3d6b7c480afe, []int{0, 0, 0, 0, 1, 0, 0, 0}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpType.Merge(m, src)
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpType) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpType proto.InternalMessageInfo

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpType) GetVrrpGroup() []*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList {
	if m != nil {
		return m.VrrpGroup
	}
	return nil
}

type InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList struct {
	State                *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType             `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	InterfaceTracking    *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType `protobuf:"bytes,152,opt,name=interface_tracking,json=interfaceTracking" json:"interface_tracking,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                                                                                `json:"-"`
	XXX_unrecognized     []byte                                                                                                                                  `json:"-"`
	XXX_sizecache        int32                                                                                                                                   `json:"-"`
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) Reset() {
	*m = InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList{}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) ProtoMessage() {
}
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf3b3d6b7c480afe, []int{0, 0, 0, 0, 1, 0, 0, 0, 0}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList.Merge(m, src)
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList proto.InternalMessageInfo

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) GetState() *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) GetInterfaceTracking() *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType {
	if m != nil {
		return m.InterfaceTracking
	}
	return nil
}

type InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType struct {
	VirtualRouterId       *uint32  `protobuf:"varint,80,opt,name=virtual_router_id,json=virtualRouterId" json:"virtual_router_id,omitempty"`
	VirtualAddress        []string `protobuf:"bytes,81,rep,name=virtual_address,json=virtualAddress" json:"virtual_address,omitempty"`
	Priority              *uint32  `protobuf:"varint,82,opt,name=priority" json:"priority,omitempty"`
	Preempt               *bool    `protobuf:"varint,83,opt,name=preempt" json:"preempt,omitempty"`
	PreemptDelay          *uint32  `protobuf:"varint,84,opt,name=preempt_delay,json=preemptDelay" json:"preempt_delay,omitempty"`
	AcceptMode            *bool    `protobuf:"varint,85,opt,name=accept_mode,json=acceptMode" json:"accept_mode,omitempty"`
	AdvertisementInterval *uint32  `protobuf:"varint,86,opt,name=advertisement_interval,json=advertisementInterval" json:"advertisement_interval,omitempty"`
	CurrentPriority       *uint32  `protobuf:"varint,87,opt,name=current_priority,json=currentPriority" json:"current_priority,omitempty"`
	VirtualLinkLocal      *string  `protobuf:"bytes,88,opt,name=virtual_link_local,json=virtualLinkLocal" json:"virtual_link_local,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) Reset() {
	*m = InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType{}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) ProtoMessage() {
}
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf3b3d6b7c480afe, []int{0, 0, 0, 0, 1, 0, 0, 0, 0, 0}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType.Merge(m, src)
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType proto.InternalMessageInfo

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetVirtualRouterId() uint32 {
	if m != nil && m.VirtualRouterId != nil {
		return *m.VirtualRouterId
	}
	return 0
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetVirtualAddress() []string {
	if m != nil {
		return m.VirtualAddress
	}
	return nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetPriority() uint32 {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return 0
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetPreempt() bool {
	if m != nil && m.Preempt != nil {
		return *m.Preempt
	}
	return false
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetPreemptDelay() uint32 {
	if m != nil && m.PreemptDelay != nil {
		return *m.PreemptDelay
	}
	return 0
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetAcceptMode() bool {
	if m != nil && m.AcceptMode != nil {
		return *m.AcceptMode
	}
	return false
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetAdvertisementInterval() uint32 {
	if m != nil && m.AdvertisementInterval != nil {
		return *m.AdvertisementInterval
	}
	return 0
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetCurrentPriority() uint32 {
	if m != nil && m.CurrentPriority != nil {
		return *m.CurrentPriority
	}
	return 0
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetVirtualLinkLocal() string {
	if m != nil && m.VirtualLinkLocal != nil {
		return *m.VirtualLinkLocal
	}
	return ""
}

type InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType struct {
	State                *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                                                                                         `json:"-"`
	XXX_unrecognized     []byte                                                                                                                                           `json:"-"`
	XXX_sizecache        int32                                                                                                                                            `json:"-"`
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) Reset() {
	*m = InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType{}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) ProtoMessage() {
}
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf3b3d6b7c480afe, []int{0, 0, 0, 0, 1, 0, 0, 0, 0, 1}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType.Merge(m, src)
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType proto.InternalMessageInfo

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) GetState() *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType {
	if m != nil {
		return m.State
	}
	return nil
}

type InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType struct {
	TrackInterface       []string `protobuf:"bytes,89,rep,name=track_interface,json=trackInterface" json:"track_interface,omitempty"`
	PriorityDecrement    *uint32  `protobuf:"varint,90,opt,name=priority_decrement,json=priorityDecrement" json:"priority_decrement,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) Reset() {
	*m = InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType{}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) ProtoMessage() {
}
func (*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf3b3d6b7c480afe, []int{0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType.Merge(m, src)
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType proto.InternalMessageInfo

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) GetTrackInterface() []string {
	if m != nil {
		return m.TrackInterface
	}
	return nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) GetPriorityDecrement() uint32 {
	if m != nil && m.PriorityDecrement != nil {
		return *m.PriorityDecrement
	}
	return 0
}

type InterfacesVrrpInterfaceListRoutedVlanType struct {
	Ipv4                 *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4Type `protobuf:"bytes,151,opt,name=ipv4" json:"ipv4,omitempty"`
	Ipv6                 *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6Type `protobuf:"bytes,152,opt,name=ipv6" json:"ipv6,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_unrecognized     []byte                                             `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *InterfacesVrrpInterfaceListRoutedVlanType) Reset() {
	*m = InterfacesVrrpInterfaceListRoutedVlanType{}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanType) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesVrrpInterfaceListRoutedVlanType) ProtoMessage() {}
func (*InterfacesVrrpInterfaceListRoutedVlanType) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf3b3d6b7c480afe, []int{0, 0, 1}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesVrrpInterfaceListRoutedVlanType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanType.Merge(m, src)
}
func (m *InterfacesVrrpInterfaceListRoutedVlanType) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesVrrpInterfaceListRoutedVlanType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanType proto.InternalMessageInfo

func (m *InterfacesVrrpInterfaceListRoutedVlanType) GetIpv4() *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4Type {
	if m != nil {
		return m.Ipv4
	}
	return nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanType) GetIpv6() *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6Type {
	if m != nil {
		return m.Ipv6
	}
	return nil
}

type InterfacesVrrpInterfaceListRoutedVlanTypeIpv4Type struct {
	Addresses            *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesType `protobuf:"bytes,151,opt,name=addresses" json:"addresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                        `json:"-"`
	XXX_unrecognized     []byte                                                          `json:"-"`
	XXX_sizecache        int32                                                           `json:"-"`
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4Type) Reset() {
	*m = InterfacesVrrpInterfaceListRoutedVlanTypeIpv4Type{}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4Type) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4Type) ProtoMessage() {}
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4Type) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf3b3d6b7c480afe, []int{0, 0, 1, 0}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4Type) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4Type) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv4Type.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4Type) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv4Type.Merge(m, src)
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4Type) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4Type) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv4Type.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv4Type proto.InternalMessageInfo

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4Type) GetAddresses() *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesType {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesType struct {
	Address              []*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList `protobuf:"bytes,151,rep,name=address" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                     `json:"-"`
	XXX_unrecognized     []byte                                                                       `json:"-"`
	XXX_sizecache        int32                                                                        `json:"-"`
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesType) Reset() {
	*m = InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesType{}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesType) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesType) ProtoMessage() {}
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesType) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf3b3d6b7c480afe, []int{0, 0, 1, 0, 0}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesType.Merge(m, src)
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesType) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesType proto.InternalMessageInfo

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesType) GetAddress() []*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList {
	if m != nil {
		return m.Address
	}
	return nil
}

type InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList struct {
	Ip                   *string                                                                            `protobuf:"bytes,51,opt,name=ip" json:"ip,omitempty"`
	Vrrp                 *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpType `protobuf:"bytes,151,opt,name=vrrp" json:"vrrp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                           `json:"-"`
	XXX_unrecognized     []byte                                                                             `json:"-"`
	XXX_sizecache        int32                                                                              `json:"-"`
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList) Reset() {
	*m = InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList{}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList) ProtoMessage() {}
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf3b3d6b7c480afe, []int{0, 0, 1, 0, 0, 0}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList.Merge(m, src)
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList proto.InternalMessageInfo

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList) GetVrrp() *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpType {
	if m != nil {
		return m.Vrrp
	}
	return nil
}

type InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpType struct {
	VrrpGroup            []*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList `protobuf:"bytes,151,rep,name=vrrp_group,json=vrrpGroup" json:"vrrp_group,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                                          `json:"-"`
	XXX_unrecognized     []byte                                                                                            `json:"-"`
	XXX_sizecache        int32                                                                                             `json:"-"`
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpType) Reset() {
	*m = InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpType{}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpType) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpType) ProtoMessage() {
}
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpType) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf3b3d6b7c480afe, []int{0, 0, 1, 0, 0, 0, 0}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpType.Merge(m, src)
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpType) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpType proto.InternalMessageInfo

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpType) GetVrrpGroup() []*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList {
	if m != nil {
		return m.VrrpGroup
	}
	return nil
}

type InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList struct {
	State                *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType             `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	InterfaceTracking    *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType `protobuf:"bytes,152,opt,name=interface_tracking,json=interfaceTracking" json:"interface_tracking,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                                                             `json:"-"`
	XXX_unrecognized     []byte                                                                                                               `json:"-"`
	XXX_sizecache        int32                                                                                                                `json:"-"`
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) Reset() {
	*m = InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList{}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) ProtoMessage() {
}
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf3b3d6b7c480afe, []int{0, 0, 1, 0, 0, 0, 0, 0}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList.Merge(m, src)
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList proto.InternalMessageInfo

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) GetState() *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) GetInterfaceTracking() *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType {
	if m != nil {
		return m.InterfaceTracking
	}
	return nil
}

type InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType struct {
	VirtualRouterId       *uint32  `protobuf:"varint,62,opt,name=virtual_router_id,json=virtualRouterId" json:"virtual_router_id,omitempty"`
	VirtualAddress        []string `protobuf:"bytes,63,rep,name=virtual_address,json=virtualAddress" json:"virtual_address,omitempty"`
	Priority              *uint32  `protobuf:"varint,64,opt,name=priority" json:"priority,omitempty"`
	Preempt               *bool    `protobuf:"varint,65,opt,name=preempt" json:"preempt,omitempty"`
	PreemptDelay          *uint32  `protobuf:"varint,66,opt,name=preempt_delay,json=preemptDelay" json:"preempt_delay,omitempty"`
	AcceptMode            *bool    `protobuf:"varint,67,opt,name=accept_mode,json=acceptMode" json:"accept_mode,omitempty"`
	AdvertisementInterval *uint32  `protobuf:"varint,68,opt,name=advertisement_interval,json=advertisementInterval" json:"advertisement_interval,omitempty"`
	CurrentPriority       *uint32  `protobuf:"varint,69,opt,name=current_priority,json=currentPriority" json:"current_priority,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) Reset() {
	*m = InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType{}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) ProtoMessage() {
}
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf3b3d6b7c480afe, []int{0, 0, 1, 0, 0, 0, 0, 0, 0}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType.Merge(m, src)
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType proto.InternalMessageInfo

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetVirtualRouterId() uint32 {
	if m != nil && m.VirtualRouterId != nil {
		return *m.VirtualRouterId
	}
	return 0
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetVirtualAddress() []string {
	if m != nil {
		return m.VirtualAddress
	}
	return nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetPriority() uint32 {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return 0
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetPreempt() bool {
	if m != nil && m.Preempt != nil {
		return *m.Preempt
	}
	return false
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetPreemptDelay() uint32 {
	if m != nil && m.PreemptDelay != nil {
		return *m.PreemptDelay
	}
	return 0
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetAcceptMode() bool {
	if m != nil && m.AcceptMode != nil {
		return *m.AcceptMode
	}
	return false
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetAdvertisementInterval() uint32 {
	if m != nil && m.AdvertisementInterval != nil {
		return *m.AdvertisementInterval
	}
	return 0
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetCurrentPriority() uint32 {
	if m != nil && m.CurrentPriority != nil {
		return *m.CurrentPriority
	}
	return 0
}

type InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType struct {
	State                *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                                                                      `json:"-"`
	XXX_unrecognized     []byte                                                                                                                        `json:"-"`
	XXX_sizecache        int32                                                                                                                         `json:"-"`
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) Reset() {
	*m = InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType{}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) ProtoMessage() {
}
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf3b3d6b7c480afe, []int{0, 0, 1, 0, 0, 0, 0, 0, 1}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType.Merge(m, src)
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType proto.InternalMessageInfo

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) GetState() *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType {
	if m != nil {
		return m.State
	}
	return nil
}

type InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType struct {
	TrackInterface       []string `protobuf:"bytes,70,rep,name=track_interface,json=trackInterface" json:"track_interface,omitempty"`
	PriorityDecrement    *uint32  `protobuf:"varint,71,opt,name=priority_decrement,json=priorityDecrement" json:"priority_decrement,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) Reset() {
	*m = InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType{}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) ProtoMessage() {
}
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf3b3d6b7c480afe, []int{0, 0, 1, 0, 0, 0, 0, 0, 1, 0}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType.Merge(m, src)
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType proto.InternalMessageInfo

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) GetTrackInterface() []string {
	if m != nil {
		return m.TrackInterface
	}
	return nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) GetPriorityDecrement() uint32 {
	if m != nil && m.PriorityDecrement != nil {
		return *m.PriorityDecrement
	}
	return 0
}

type InterfacesVrrpInterfaceListRoutedVlanTypeIpv6Type struct {
	Addresses            *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesType `protobuf:"bytes,151,opt,name=addresses" json:"addresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                        `json:"-"`
	XXX_unrecognized     []byte                                                          `json:"-"`
	XXX_sizecache        int32                                                           `json:"-"`
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6Type) Reset() {
	*m = InterfacesVrrpInterfaceListRoutedVlanTypeIpv6Type{}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6Type) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6Type) ProtoMessage() {}
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6Type) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf3b3d6b7c480afe, []int{0, 0, 1, 1}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6Type) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6Type) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv6Type.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6Type) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv6Type.Merge(m, src)
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6Type) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6Type) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv6Type.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv6Type proto.InternalMessageInfo

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6Type) GetAddresses() *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesType {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesType struct {
	Address              []*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList `protobuf:"bytes,151,rep,name=address" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                     `json:"-"`
	XXX_unrecognized     []byte                                                                       `json:"-"`
	XXX_sizecache        int32                                                                        `json:"-"`
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesType) Reset() {
	*m = InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesType{}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesType) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesType) ProtoMessage() {}
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesType) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf3b3d6b7c480afe, []int{0, 0, 1, 1, 0}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesType.Merge(m, src)
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesType) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesType proto.InternalMessageInfo

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesType) GetAddress() []*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList {
	if m != nil {
		return m.Address
	}
	return nil
}

type InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList struct {
	Ip                   *string                                                                            `protobuf:"bytes,51,opt,name=ip" json:"ip,omitempty"`
	Vrrp                 *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpType `protobuf:"bytes,151,opt,name=vrrp" json:"vrrp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                           `json:"-"`
	XXX_unrecognized     []byte                                                                             `json:"-"`
	XXX_sizecache        int32                                                                              `json:"-"`
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList) Reset() {
	*m = InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList{}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList) ProtoMessage() {}
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf3b3d6b7c480afe, []int{0, 0, 1, 1, 0, 0}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList.Merge(m, src)
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList proto.InternalMessageInfo

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList) GetVrrp() *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpType {
	if m != nil {
		return m.Vrrp
	}
	return nil
}

type InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpType struct {
	VrrpGroup            []*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList `protobuf:"bytes,151,rep,name=vrrp_group,json=vrrpGroup" json:"vrrp_group,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                                          `json:"-"`
	XXX_unrecognized     []byte                                                                                            `json:"-"`
	XXX_sizecache        int32                                                                                             `json:"-"`
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpType) Reset() {
	*m = InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpType{}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpType) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpType) ProtoMessage() {
}
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpType) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf3b3d6b7c480afe, []int{0, 0, 1, 1, 0, 0, 0}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpType.Merge(m, src)
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpType) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpType proto.InternalMessageInfo

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpType) GetVrrpGroup() []*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList {
	if m != nil {
		return m.VrrpGroup
	}
	return nil
}

type InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList struct {
	State                *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType             `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	InterfaceTracking    *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType `protobuf:"bytes,152,opt,name=interface_tracking,json=interfaceTracking" json:"interface_tracking,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                                                             `json:"-"`
	XXX_unrecognized     []byte                                                                                                               `json:"-"`
	XXX_sizecache        int32                                                                                                                `json:"-"`
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) Reset() {
	*m = InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList{}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) ProtoMessage() {
}
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf3b3d6b7c480afe, []int{0, 0, 1, 1, 0, 0, 0, 0}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList.Merge(m, src)
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList proto.InternalMessageInfo

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) GetState() *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) GetInterfaceTracking() *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType {
	if m != nil {
		return m.InterfaceTracking
	}
	return nil
}

type InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType struct {
	VirtualRouterId       *uint32  `protobuf:"varint,80,opt,name=virtual_router_id,json=virtualRouterId" json:"virtual_router_id,omitempty"`
	VirtualAddress        []string `protobuf:"bytes,81,rep,name=virtual_address,json=virtualAddress" json:"virtual_address,omitempty"`
	Priority              *uint32  `protobuf:"varint,82,opt,name=priority" json:"priority,omitempty"`
	Preempt               *bool    `protobuf:"varint,83,opt,name=preempt" json:"preempt,omitempty"`
	PreemptDelay          *uint32  `protobuf:"varint,84,opt,name=preempt_delay,json=preemptDelay" json:"preempt_delay,omitempty"`
	AcceptMode            *bool    `protobuf:"varint,85,opt,name=accept_mode,json=acceptMode" json:"accept_mode,omitempty"`
	AdvertisementInterval *uint32  `protobuf:"varint,86,opt,name=advertisement_interval,json=advertisementInterval" json:"advertisement_interval,omitempty"`
	CurrentPriority       *uint32  `protobuf:"varint,87,opt,name=current_priority,json=currentPriority" json:"current_priority,omitempty"`
	VirtualLinkLocal      *string  `protobuf:"bytes,88,opt,name=virtual_link_local,json=virtualLinkLocal" json:"virtual_link_local,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) Reset() {
	*m = InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType{}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) ProtoMessage() {
}
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf3b3d6b7c480afe, []int{0, 0, 1, 1, 0, 0, 0, 0, 0}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType.Merge(m, src)
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType proto.InternalMessageInfo

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetVirtualRouterId() uint32 {
	if m != nil && m.VirtualRouterId != nil {
		return *m.VirtualRouterId
	}
	return 0
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetVirtualAddress() []string {
	if m != nil {
		return m.VirtualAddress
	}
	return nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetPriority() uint32 {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return 0
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetPreempt() bool {
	if m != nil && m.Preempt != nil {
		return *m.Preempt
	}
	return false
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetPreemptDelay() uint32 {
	if m != nil && m.PreemptDelay != nil {
		return *m.PreemptDelay
	}
	return 0
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetAcceptMode() bool {
	if m != nil && m.AcceptMode != nil {
		return *m.AcceptMode
	}
	return false
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetAdvertisementInterval() uint32 {
	if m != nil && m.AdvertisementInterval != nil {
		return *m.AdvertisementInterval
	}
	return 0
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetCurrentPriority() uint32 {
	if m != nil && m.CurrentPriority != nil {
		return *m.CurrentPriority
	}
	return 0
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) GetVirtualLinkLocal() string {
	if m != nil && m.VirtualLinkLocal != nil {
		return *m.VirtualLinkLocal
	}
	return ""
}

type InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType struct {
	State                *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType `protobuf:"bytes,151,opt,name=state" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                                                                      `json:"-"`
	XXX_unrecognized     []byte                                                                                                                        `json:"-"`
	XXX_sizecache        int32                                                                                                                         `json:"-"`
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) Reset() {
	*m = InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType{}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) ProtoMessage() {
}
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf3b3d6b7c480afe, []int{0, 0, 1, 1, 0, 0, 0, 0, 1}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType.Merge(m, src)
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType proto.InternalMessageInfo

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) GetState() *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType {
	if m != nil {
		return m.State
	}
	return nil
}

type InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType struct {
	TrackInterface       []string `protobuf:"bytes,89,rep,name=track_interface,json=trackInterface" json:"track_interface,omitempty"`
	PriorityDecrement    *uint32  `protobuf:"varint,90,opt,name=priority_decrement,json=priorityDecrement" json:"priority_decrement,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) Reset() {
	*m = InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType{}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) String() string {
	return proto.CompactTextString(m)
}
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) ProtoMessage() {
}
func (*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf3b3d6b7c480afe, []int{0, 0, 1, 1, 0, 0, 0, 0, 1, 0}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType.Merge(m, src)
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) XXX_Size() int {
	return m.Size()
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType proto.InternalMessageInfo

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) GetTrackInterface() []string {
	if m != nil {
		return m.TrackInterface
	}
	return nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) GetPriorityDecrement() uint32 {
	if m != nil && m.PriorityDecrement != nil {
		return *m.PriorityDecrement
	}
	return 0
}

var E_JnprInterfacesVrrpExt = &proto.ExtensionDesc{
	ExtendedType:  (*JuniperNetworksSensors)(nil),
	ExtensionType: (*InterfacesVrrp)(nil),
	Field:         71,
	Name:          "jnpr_interfaces_vrrp_ext",
	Tag:           "bytes,71,opt,name=jnpr_interfaces_vrrp_ext",
	Filename:      "vrrpd_oc.proto",
}

func init() {
	proto.RegisterType((*InterfacesVrrp)(nil), "interfaces_vrrp")
	proto.RegisterType((*InterfacesVrrpInterfaceList)(nil), "interfaces_vrrp.interface_list")
	proto.RegisterType((*InterfacesVrrpInterfaceListSubinterfacesType)(nil), "interfaces_vrrp.interface_list.subinterfaces_type")
	proto.RegisterType((*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList)(nil), "interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list")
	proto.RegisterType((*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type)(nil), "interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv4_type")
	proto.RegisterType((*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType)(nil), "interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv4_type.addresses_type")
	proto.RegisterType((*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList)(nil), "interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv4_type.addresses_type.address_list")
	proto.RegisterType((*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpType)(nil), "interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv4_type.addresses_type.address_list.vrrp_type")
	proto.RegisterType((*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList)(nil), "interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv4_type.addresses_type.address_list.vrrp_type.vrrp_group_list")
	proto.RegisterType((*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType)(nil), "interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv4_type.addresses_type.address_list.vrrp_type.vrrp_group_list.state_type")
	proto.RegisterType((*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType)(nil), "interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv4_type.addresses_type.address_list.vrrp_type.vrrp_group_list.interface_tracking_type")
	proto.RegisterType((*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType)(nil), "interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv4_type.addresses_type.address_list.vrrp_type.vrrp_group_list.interface_tracking_type.state_type")
	proto.RegisterType((*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type)(nil), "interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv6_type")
	proto.RegisterType((*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType)(nil), "interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv6_type.addresses_type")
	proto.RegisterType((*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList)(nil), "interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv6_type.addresses_type.address_list")
	proto.RegisterType((*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpType)(nil), "interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv6_type.addresses_type.address_list.vrrp_type")
	proto.RegisterType((*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList)(nil), "interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv6_type.addresses_type.address_list.vrrp_type.vrrp_group_list")
	proto.RegisterType((*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType)(nil), "interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv6_type.addresses_type.address_list.vrrp_type.vrrp_group_list.state_type")
	proto.RegisterType((*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType)(nil), "interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv6_type.addresses_type.address_list.vrrp_type.vrrp_group_list.interface_tracking_type")
	proto.RegisterType((*InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType)(nil), "interfaces_vrrp.interface_list.subinterfaces_type.subinterface_list.ipv6_type.addresses_type.address_list.vrrp_type.vrrp_group_list.interface_tracking_type.state_type")
	proto.RegisterType((*InterfacesVrrpInterfaceListRoutedVlanType)(nil), "interfaces_vrrp.interface_list.routed_vlan_type")
	proto.RegisterType((*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4Type)(nil), "interfaces_vrrp.interface_list.routed_vlan_type.ipv4_type")
	proto.RegisterType((*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesType)(nil), "interfaces_vrrp.interface_list.routed_vlan_type.ipv4_type.addresses_type")
	proto.RegisterType((*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList)(nil), "interfaces_vrrp.interface_list.routed_vlan_type.ipv4_type.addresses_type.address_list")
	proto.RegisterType((*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpType)(nil), "interfaces_vrrp.interface_list.routed_vlan_type.ipv4_type.addresses_type.address_list.vrrp_type")
	proto.RegisterType((*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList)(nil), "interfaces_vrrp.interface_list.routed_vlan_type.ipv4_type.addresses_type.address_list.vrrp_type.vrrp_group_list")
	proto.RegisterType((*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType)(nil), "interfaces_vrrp.interface_list.routed_vlan_type.ipv4_type.addresses_type.address_list.vrrp_type.vrrp_group_list.state_type")
	proto.RegisterType((*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType)(nil), "interfaces_vrrp.interface_list.routed_vlan_type.ipv4_type.addresses_type.address_list.vrrp_type.vrrp_group_list.interface_tracking_type")
	proto.RegisterType((*InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType)(nil), "interfaces_vrrp.interface_list.routed_vlan_type.ipv4_type.addresses_type.address_list.vrrp_type.vrrp_group_list.interface_tracking_type.state_type")
	proto.RegisterType((*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6Type)(nil), "interfaces_vrrp.interface_list.routed_vlan_type.ipv6_type")
	proto.RegisterType((*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesType)(nil), "interfaces_vrrp.interface_list.routed_vlan_type.ipv6_type.addresses_type")
	proto.RegisterType((*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList)(nil), "interfaces_vrrp.interface_list.routed_vlan_type.ipv6_type.addresses_type.address_list")
	proto.RegisterType((*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpType)(nil), "interfaces_vrrp.interface_list.routed_vlan_type.ipv6_type.addresses_type.address_list.vrrp_type")
	proto.RegisterType((*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList)(nil), "interfaces_vrrp.interface_list.routed_vlan_type.ipv6_type.addresses_type.address_list.vrrp_type.vrrp_group_list")
	proto.RegisterType((*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType)(nil), "interfaces_vrrp.interface_list.routed_vlan_type.ipv6_type.addresses_type.address_list.vrrp_type.vrrp_group_list.state_type")
	proto.RegisterType((*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType)(nil), "interfaces_vrrp.interface_list.routed_vlan_type.ipv6_type.addresses_type.address_list.vrrp_type.vrrp_group_list.interface_tracking_type")
	proto.RegisterType((*InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType)(nil), "interfaces_vrrp.interface_list.routed_vlan_type.ipv6_type.addresses_type.address_list.vrrp_type.vrrp_group_list.interface_tracking_type.state_type")
	proto.RegisterExtension(E_JnprInterfacesVrrpExt)
}

func init() { proto.RegisterFile("vrrpd_oc.proto", fileDescriptor_bf3b3d6b7c480afe) }

var fileDescriptor_bf3b3d6b7c480afe = []byte{
	// 1160 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x97, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0xb5, 0x6e, 0xa2, 0xd8, 0xcf, 0xce, 0xaf, 0x41, 0xa1, 0xcb, 0x02, 0x69, 0x04, 0x87,
	0x1a, 0x44, 0xd6, 0x28, 0xc0, 0x4a, 0xe4, 0x50, 0xda, 0x90, 0x52, 0x05, 0x95, 0xb6, 0x6c, 0x4b,
	0xa0, 0x95, 0xd0, 0x76, 0xb3, 0x3b, 0x38, 0x63, 0xaf, 0x77, 0x97, 0xd9, 0xb1, 0x49, 0x04, 0xa7,
	0x0a, 0x24, 0x90, 0x90, 0x80, 0x82, 0x00, 0x21, 0x4e, 0x20, 0x54, 0x21, 0xc4, 0x8d, 0x0b, 0xa7,
	0x00, 0x42, 0xa2, 0x17, 0xa4, 0x1e, 0xf8, 0x03, 0xaa, 0xdc, 0xb9, 0x20, 0x38, 0x71, 0x41, 0xfb,
	0x63, 0xbc, 0x5e, 0x3b, 0x89, 0xe3, 0xc8, 0xde, 0x98, 0xaa, 0x37, 0xcf, 0xf7, 0x79, 0xde, 0x7b,
	0xfb, 0xdd, 0xd9, 0xf9, 0xe8, 0xc1, 0x44, 0x83, 0x52, 0xd7, 0xd4, 0x1c, 0x43, 0x76, 0xa9, 0xc3,
	0x1c, 0xe9, 0x1e, 0x86, 0x2d, 0x5c, 0xc3, 0x8c, 0x6e, 0x6a, 0xcc, 0x71, 0x43, 0xf1, 0xa1, 0x1f,
	0x16, 0x61, 0x92, 0xd8, 0x0c, 0xd3, 0xd7, 0x74, 0x03, 0x7b, 0x9a, 0xbf, 0x05, 0x9d, 0x80, 0x5c,
	0x53, 0x12, 0x3f, 0x13, 0xe6, 0x8e, 0x14, 0xf3, 0x0b, 0xc7, 0xe4, 0xb6, 0x7f, 0xc5, 0x6b, 0xcd,
	0x22, 0x1e, 0x53, 0xe3, 0x2d, 0xd2, 0xed, 0xa7, 0x61, 0x22, 0x19, 0x45, 0xf7, 0xc1, 0x88, 0xad,
	0xd7, 0xb0, 0xf8, 0xc4, 0x9c, 0x50, 0xcc, 0x2d, 0x8d, 0x5e, 0x3b, 0x99, 0xc9, 0x0a, 0x6a, 0x20,
	0xa1, 0xcb, 0x30, 0xee, 0xd5, 0xd7, 0xe2, 0xec, 0x7e, 0x45, 0xa1, 0x98, 0x5f, 0x58, 0xe8, 0x52,
	0x51, 0x4e, 0xec, 0xd2, 0xd8, 0xa6, 0x8b, 0xd5, 0x64, 0x26, 0xa4, 0x42, 0x9e, 0x3a, 0x75, 0x86,
	0x4d, 0xad, 0x61, 0xe9, 0xb6, 0xf8, 0x79, 0x98, 0xf8, 0xf1, 0x6e, 0x89, 0x5b, 0xf6, 0x84, 0x69,
	0x21, 0x54, 0x56, 0x2d, 0xdd, 0x96, 0xfe, 0x7e, 0x10, 0x50, 0x67, 0x65, 0x44, 0xa0, 0xd0, 0xaa,
	0x72, 0xdb, 0x96, 0x7b, 0x7f, 0x88, 0x84, 0x14, 0x7a, 0x9b, 0x48, 0x2d, 0xfd, 0xf5, 0x00, 0x4c,
	0x77, 0xfc, 0x07, 0xdd, 0x0f, 0xa3, 0xc4, 0x36, 0xf1, 0x46, 0x60, 0xf1, 0x38, 0xb7, 0x38, 0xd4,
	0x90, 0x01, 0x23, 0xc4, 0x6d, 0x3c, 0xc9, 0xad, 0x3d, 0xd7, 0x8f, 0xae, 0x64, 0x3f, 0x63, 0xe8,
	0x4f, 0x90, 0x3c, 0x2a, 0xa2, 0x70, 0x9b, 0xfb, 0x56, 0x44, 0x89, 0x8b, 0x28, 0xd2, 0x57, 0xe3,
	0x90, 0x6b, 0x16, 0x46, 0x6f, 0x41, 0x4e, 0x37, 0x4d, 0x8a, 0x3d, 0x2f, 0x3e, 0x37, 0xaf, 0xf6,
	0xf7, 0xe1, 0xe4, 0x66, 0x81, 0xb0, 0x8d, 0xb8, 0xa0, 0xf4, 0x69, 0x01, 0x26, 0x92, 0x51, 0xf4,
	0x8e, 0x00, 0x63, 0x91, 0xc4, 0x8f, 0x40, 0x65, 0xa0, 0xfd, 0xf0, 0x65, 0x78, 0x50, 0x78, 0x6d,
	0xe9, 0x5f, 0x80, 0x42, 0x6b, 0x04, 0xcd, 0x40, 0x86, 0xb8, 0xc9, 0xcf, 0x2f, 0x43, 0x5c, 0xf4,
	0x9e, 0x00, 0x23, 0x7e, 0x4f, 0xdc, 0x3c, 0x96, 0x5e, 0xb3, 0xb2, 0x9f, 0x3e, 0x7a, 0xb5, 0xfe,
	0x4f, 0xe9, 0xb7, 0x1c, 0xe4, 0x9a, 0x1a, 0xfa, 0x46, 0x00, 0x08, 0x56, 0x65, 0xea, 0xd4, 0x5d,
	0x6e, 0xe6, 0xdb, 0xc2, 0x61, 0x34, 0x28, 0xc7, 0x8d, 0x44, 0x97, 0x9d, 0x2f, 0x9c, 0xf1, 0xd7,
	0xd2, 0x47, 0x59, 0x98, 0x6c, 0x0b, 0xa3, 0x1b, 0x02, 0x8c, 0x7a, 0x4c, 0x67, 0x98, 0xdb, 0xfa,
	0xc1, 0x50, 0xb4, 0x2d, 0x07, 0x3d, 0x85, 0x96, 0x87, 0xfd, 0xa1, 0xdf, 0x05, 0x40, 0x71, 0x11,
	0x46, 0x75, 0xa3, 0x4a, 0xec, 0x32, 0xff, 0x84, 0xbf, 0x1c, 0x8e, 0xb6, 0x3b, 0x1b, 0x0c, 0x9f,
	0x61, 0xba, 0x19, 0xb8, 0x14, 0xe9, 0xd2, 0x56, 0x06, 0x20, 0x7e, 0x4a, 0xf4, 0x28, 0x4c, 0x37,
	0x08, 0x65, 0x75, 0xdd, 0xd2, 0x82, 0x2b, 0x9c, 0x6a, 0xc4, 0x14, 0x4f, 0xf8, 0x17, 0xa4, 0x3a,
	0x19, 0x05, 0xd4, 0x40, 0x5f, 0x31, 0xd1, 0x71, 0xe0, 0x92, 0xc6, 0xbf, 0xe0, 0x67, 0xe6, 0x8e,
	0x14, 0x73, 0xea, 0x44, 0x24, 0x9f, 0x0a, 0x55, 0x24, 0x41, 0xd6, 0xa5, 0xc4, 0xa1, 0x84, 0x6d,
	0x8a, 0x27, 0x83, 0x5c, 0xcd, 0x35, 0x12, 0x61, 0xcc, 0xa5, 0x18, 0xd7, 0x5c, 0x26, 0x9e, 0x9a,
	0x13, 0x8a, 0x59, 0x95, 0x2f, 0xd1, 0xc3, 0x30, 0x1e, 0xfd, 0xd4, 0x4c, 0x6c, 0xe9, 0x9b, 0xe2,
	0x52, 0xb0, 0xb5, 0x10, 0x89, 0xcb, 0xbe, 0x86, 0x8e, 0x41, 0x5e, 0x37, 0x0c, 0xec, 0x32, 0xad,
	0xe6, 0x98, 0x58, 0x7c, 0x36, 0x48, 0x01, 0xa1, 0xf4, 0x82, 0x63, 0x62, 0xf4, 0x14, 0xdc, 0xab,
	0x9b, 0x0d, 0x4c, 0x19, 0xf1, 0x70, 0x0d, 0xdb, 0x4c, 0x0b, 0x2c, 0x68, 0xe8, 0x96, 0xb8, 0x1c,
	0xa4, 0x9b, 0x49, 0x44, 0x57, 0xa2, 0x20, 0x7a, 0x04, 0xa6, 0x8c, 0x3a, 0xa5, 0xfe, 0x86, 0x66,
	0xeb, 0xa7, 0x43, 0x1b, 0x22, 0xfd, 0x42, 0x24, 0x4b, 0x3f, 0x67, 0xe0, 0xe8, 0x2e, 0x86, 0xa3,
	0xad, 0xf6, 0x73, 0x7d, 0x63, 0xa8, 0x0f, 0x48, 0xe7, 0x79, 0x97, 0xcc, 0xc4, 0xf1, 0x38, 0x0e,
	0x93, 0xc1, 0x06, 0x2d, 0xe6, 0xf6, 0x73, 0xe1, 0x2b, 0x0f, 0xe4, 0x15, 0xae, 0xa2, 0x79, 0x40,
	0xdc, 0x37, 0xcd, 0xc4, 0x06, 0x0d, 0xdc, 0x15, 0xcf, 0x04, 0x0e, 0x4e, 0xf3, 0xc8, 0x32, 0x0f,
	0x48, 0xb7, 0x42, 0x48, 0x29, 0x29, 0x40, 0x4a, 0xe9, 0x06, 0xa9, 0x5f, 0xd3, 0x85, 0x94, 0xd2,
	0x03, 0xa4, 0xbe, 0xcd, 0x1f, 0x32, 0xa4, 0x94, 0xde, 0x21, 0xf5, 0x4f, 0xaa, 0x90, 0x52, 0xfa,
	0x04, 0xa9, 0xad, 0x74, 0x21, 0xa5, 0xfc, 0x3f, 0x21, 0xa5, 0xa4, 0x04, 0xa9, 0x3f, 0xf7, 0x01,
	0xa9, 0x0b, 0xfb, 0x86, 0xd4, 0x8b, 0x5d, 0x21, 0xa5, 0xee, 0x0e, 0xa9, 0x8b, 0x5d, 0x20, 0x75,
	0xa9, 0x3b, 0xa4, 0x5e, 0xea, 0x01, 0x52, 0xab, 0xbd, 0x42, 0xea, 0xe5, 0x1d, 0x21, 0x85, 0x1e,
	0x03, 0xc4, 0x6d, 0xb0, 0x88, 0x5d, 0xd5, 0x2c, 0xc7, 0xd0, 0x2d, 0xf1, 0x15, 0xff, 0xe2, 0x50,
	0xa7, 0xa2, 0xc8, 0x59, 0x62, 0x57, 0xcf, 0xfa, 0xfa, 0x61, 0x21, 0x4d, 0x19, 0x12, 0xa4, 0x5d,
	0xee, 0x01, 0x69, 0x57, 0x76, 0x43, 0xda, 0xfb, 0x12, 0x4c, 0xb5, 0xcf, 0xc5, 0xe8, 0x7c, 0x72,
	0xac, 0x5c, 0xec, 0x75, 0xb0, 0xee, 0x18, 0x21, 0xcf, 0x27, 0x47, 0xc8, 0x03, 0x25, 0x4c, 0x8c,
	0x8b, 0xd7, 0x0b, 0xad, 0xe3, 0xe2, 0xfa, 0x0e, 0x24, 0x5e, 0x39, 0x78, 0xd3, 0x7b, 0x50, 0xf7,
	0x8b, 0x7c, 0x07, 0x75, 0x5f, 0xef, 0x80, 0xee, 0x6a, 0xdf, 0x4a, 0xef, 0x02, 0xd8, 0x4f, 0xf6,
	0x39, 0x05, 0xd6, 0x93, 0x7c, 0xbd, 0x3a, 0x98, 0xbe, 0x3a, 0x59, 0x9a, 0x6d, 0x65, 0xe9, 0x87,
	0x3b, 0xb2, 0xd4, 0x1d, 0x74, 0x2f, 0x7b, 0x61, 0xf3, 0x8f, 0xb1, 0x4e, 0x6c, 0x5e, 0x6f, 0xbf,
	0x30, 0xde, 0x4c, 0xbb, 0xc3, 0x1d, 0x08, 0xf9, 0xe3, 0x9e, 0x84, 0x7c, 0x57, 0x48, 0xbd, 0xc5,
	0xbb, 0x23, 0x5b, 0x8a, 0x23, 0xdb, 0xf7, 0x7b, 0xf0, 0xed, 0xbb, 0xf6, 0xe3, 0xfa, 0xf1, 0xd0,
	0x1c, 0x86, 0x43, 0x1b, 0xcf, 0x7e, 0x2a, 0xb4, 0x8e, 0x67, 0x7d, 0x83, 0x42, 0xd7, 0x51, 0xec,
	0xe6, 0xc0, 0xa0, 0xd0, 0xcb, 0xd4, 0xf5, 0x4b, 0x8a, 0x50, 0x38, 0xc0, 0x80, 0xf5, 0x75, 0x6e,
	0x40, 0x50, 0xe8, 0xd7, 0x2c, 0x75, 0x2d, 0x3b, 0x28, 0x28, 0x28, 0xc3, 0x0f, 0x85, 0xbb, 0x23,
	0xd2, 0x9d, 0x39, 0x22, 0xa5, 0x80, 0x90, 0x3b, 0x69, 0x1c, 0x5a, 0x5c, 0x03, 0xb1, 0x62, 0xbb,
	0x54, 0x6b, 0xf3, 0x41, 0xc3, 0x1b, 0x0c, 0x1d, 0x95, 0x9f, 0xaf, 0xdb, 0xc4, 0xc5, 0xf4, 0x1c,
	0x66, 0x6f, 0x38, 0xb4, 0xea, 0x5d, 0xc4, 0xb6, 0xe7, 0x50, 0x2f, 0x00, 0x52, 0x7e, 0x61, 0xaa,
	0xdd, 0x3c, 0x75, 0xc6, 0x4f, 0xd5, 0x6c, 0xc5, 0x5b, 0xa5, 0xd4, 0x3d, 0xbd, 0xc1, 0x96, 0xae,
	0xde, 0xdc, 0x9e, 0x15, 0x6e, 0x6d, 0xcf, 0x0a, 0xb7, 0xb7, 0x67, 0x85, 0x2b, 0x6a, 0x99, 0x30,
	0xb9, 0x12, 0x26, 0x96, 0x6d, 0xcc, 0x4a, 0xc4, 0xc0, 0x6b, 0x98, 0x96, 0x4b, 0xeb, 0x58, 0xb7,
	0xd8, 0xfa, 0x9a, 0xc3, 0xe6, 0x89, 0x5d, 0xc6, 0x1e, 0x9b, 0xaf, 0x30, 0x32, 0x6f, 0xeb, 0x8c,
	0x34, 0x70, 0xc9, 0xad, 0x96, 0x4b, 0x15, 0x46, 0x4a, 0xba, 0xa9, 0xbb, 0x0c, 0x53, 0xaf, 0xa4,
	0x55, 0xea, 0xb6, 0xe3, 0x95, 0x3c, 0x63, 0x1d, 0xd7, 0xf4, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x9c, 0x64, 0xdd, 0xc7, 0x22, 0x1e, 0x00, 0x00,
}

func (m *InterfacesVrrp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesVrrp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesVrrp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Interface) > 0 {
		for iNdEx := len(m.Interface) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Interface[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVrrpdOc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesVrrpInterfaceList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesVrrpInterfaceList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesVrrpInterfaceList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoutedVlan != nil {
		{
			size, err := m.RoutedVlan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVrrpdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xc2
	}
	if m.Subinterfaces != nil {
		{
			size, err := m.Subinterfaces.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVrrpdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintVrrpdOc(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesVrrpInterfaceListSubinterfacesType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Subinterface) > 0 {
		for iNdEx := len(m.Subinterface) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subinterface[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVrrpdOc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ipv6 != nil {
		{
			size, err := m.Ipv6.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVrrpdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xc2
	}
	if m.Ipv4 != nil {
		{
			size, err := m.Ipv4.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVrrpdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	if m.Index != nil {
		i = encodeVarintVrrpdOc(dAtA, i, uint64(*m.Index))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Addresses != nil {
		{
			size, err := m.Addresses.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVrrpdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Address) > 0 {
		for iNdEx := len(m.Address) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Address[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVrrpdOc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Vrrp != nil {
		{
			size, err := m.Vrrp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVrrpdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	if m.Ip != nil {
		i -= len(*m.Ip)
		copy(dAtA[i:], *m.Ip)
		i = encodeVarintVrrpdOc(dAtA, i, uint64(len(*m.Ip)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.VrrpGroup) > 0 {
		for iNdEx := len(m.VrrpGroup) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VrrpGroup[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVrrpdOc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.InterfaceTracking != nil {
		{
			size, err := m.InterfaceTracking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVrrpdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xc2
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVrrpdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CurrentPriority != nil {
		i = encodeVarintVrrpdOc(dAtA, i, uint64(*m.CurrentPriority))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xa8
	}
	if m.AdvertisementInterval != nil {
		i = encodeVarintVrrpdOc(dAtA, i, uint64(*m.AdvertisementInterval))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xa0
	}
	if m.AcceptMode != nil {
		i--
		if *m.AcceptMode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x98
	}
	if m.PreemptDelay != nil {
		i = encodeVarintVrrpdOc(dAtA, i, uint64(*m.PreemptDelay))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x90
	}
	if m.Preempt != nil {
		i--
		if *m.Preempt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x88
	}
	if m.Priority != nil {
		i = encodeVarintVrrpdOc(dAtA, i, uint64(*m.Priority))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x80
	}
	if len(m.VirtualAddress) > 0 {
		for iNdEx := len(m.VirtualAddress) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VirtualAddress[iNdEx])
			copy(dAtA[i:], m.VirtualAddress[iNdEx])
			i = encodeVarintVrrpdOc(dAtA, i, uint64(len(m.VirtualAddress[iNdEx])))
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xfa
		}
	}
	if m.VirtualRouterId != nil {
		i = encodeVarintVrrpdOc(dAtA, i, uint64(*m.VirtualRouterId))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf0
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVrrpdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PriorityDecrement != nil {
		i = encodeVarintVrrpdOc(dAtA, i, uint64(*m.PriorityDecrement))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb8
	}
	if len(m.TrackInterface) > 0 {
		for iNdEx := len(m.TrackInterface) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TrackInterface[iNdEx])
			copy(dAtA[i:], m.TrackInterface[iNdEx])
			i = encodeVarintVrrpdOc(dAtA, i, uint64(len(m.TrackInterface[iNdEx])))
			i--
			dAtA[i] = 0x4
			i--
			dAtA[i] = 0xb2
		}
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Addresses != nil {
		{
			size, err := m.Addresses.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVrrpdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Address) > 0 {
		for iNdEx := len(m.Address) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Address[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVrrpdOc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Vrrp != nil {
		{
			size, err := m.Vrrp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVrrpdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	if m.Ip != nil {
		i -= len(*m.Ip)
		copy(dAtA[i:], *m.Ip)
		i = encodeVarintVrrpdOc(dAtA, i, uint64(len(*m.Ip)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.VrrpGroup) > 0 {
		for iNdEx := len(m.VrrpGroup) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VrrpGroup[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVrrpdOc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.InterfaceTracking != nil {
		{
			size, err := m.InterfaceTracking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVrrpdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xc2
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVrrpdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.VirtualLinkLocal != nil {
		i -= len(*m.VirtualLinkLocal)
		copy(dAtA[i:], *m.VirtualLinkLocal)
		i = encodeVarintVrrpdOc(dAtA, i, uint64(len(*m.VirtualLinkLocal)))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xc2
	}
	if m.CurrentPriority != nil {
		i = encodeVarintVrrpdOc(dAtA, i, uint64(*m.CurrentPriority))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xb8
	}
	if m.AdvertisementInterval != nil {
		i = encodeVarintVrrpdOc(dAtA, i, uint64(*m.AdvertisementInterval))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xb0
	}
	if m.AcceptMode != nil {
		i--
		if *m.AcceptMode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xa8
	}
	if m.PreemptDelay != nil {
		i = encodeVarintVrrpdOc(dAtA, i, uint64(*m.PreemptDelay))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xa0
	}
	if m.Preempt != nil {
		i--
		if *m.Preempt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x98
	}
	if m.Priority != nil {
		i = encodeVarintVrrpdOc(dAtA, i, uint64(*m.Priority))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x90
	}
	if len(m.VirtualAddress) > 0 {
		for iNdEx := len(m.VirtualAddress) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VirtualAddress[iNdEx])
			copy(dAtA[i:], m.VirtualAddress[iNdEx])
			i = encodeVarintVrrpdOc(dAtA, i, uint64(len(m.VirtualAddress[iNdEx])))
			i--
			dAtA[i] = 0x5
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.VirtualRouterId != nil {
		i = encodeVarintVrrpdOc(dAtA, i, uint64(*m.VirtualRouterId))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x80
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVrrpdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PriorityDecrement != nil {
		i = encodeVarintVrrpdOc(dAtA, i, uint64(*m.PriorityDecrement))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xd0
	}
	if len(m.TrackInterface) > 0 {
		for iNdEx := len(m.TrackInterface) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TrackInterface[iNdEx])
			copy(dAtA[i:], m.TrackInterface[iNdEx])
			i = encodeVarintVrrpdOc(dAtA, i, uint64(len(m.TrackInterface[iNdEx])))
			i--
			dAtA[i] = 0x5
			i--
			dAtA[i] = 0xca
		}
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesVrrpInterfaceListRoutedVlanType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ipv6 != nil {
		{
			size, err := m.Ipv6.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVrrpdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xc2
	}
	if m.Ipv4 != nil {
		{
			size, err := m.Ipv4.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVrrpdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4Type) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4Type) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4Type) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Addresses != nil {
		{
			size, err := m.Addresses.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVrrpdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Address) > 0 {
		for iNdEx := len(m.Address) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Address[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVrrpdOc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Vrrp != nil {
		{
			size, err := m.Vrrp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVrrpdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	if m.Ip != nil {
		i -= len(*m.Ip)
		copy(dAtA[i:], *m.Ip)
		i = encodeVarintVrrpdOc(dAtA, i, uint64(len(*m.Ip)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.VrrpGroup) > 0 {
		for iNdEx := len(m.VrrpGroup) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VrrpGroup[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVrrpdOc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.InterfaceTracking != nil {
		{
			size, err := m.InterfaceTracking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVrrpdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xc2
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVrrpdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CurrentPriority != nil {
		i = encodeVarintVrrpdOc(dAtA, i, uint64(*m.CurrentPriority))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xa8
	}
	if m.AdvertisementInterval != nil {
		i = encodeVarintVrrpdOc(dAtA, i, uint64(*m.AdvertisementInterval))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xa0
	}
	if m.AcceptMode != nil {
		i--
		if *m.AcceptMode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x98
	}
	if m.PreemptDelay != nil {
		i = encodeVarintVrrpdOc(dAtA, i, uint64(*m.PreemptDelay))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x90
	}
	if m.Preempt != nil {
		i--
		if *m.Preempt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x88
	}
	if m.Priority != nil {
		i = encodeVarintVrrpdOc(dAtA, i, uint64(*m.Priority))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x80
	}
	if len(m.VirtualAddress) > 0 {
		for iNdEx := len(m.VirtualAddress) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VirtualAddress[iNdEx])
			copy(dAtA[i:], m.VirtualAddress[iNdEx])
			i = encodeVarintVrrpdOc(dAtA, i, uint64(len(m.VirtualAddress[iNdEx])))
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xfa
		}
	}
	if m.VirtualRouterId != nil {
		i = encodeVarintVrrpdOc(dAtA, i, uint64(*m.VirtualRouterId))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf0
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVrrpdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PriorityDecrement != nil {
		i = encodeVarintVrrpdOc(dAtA, i, uint64(*m.PriorityDecrement))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb8
	}
	if len(m.TrackInterface) > 0 {
		for iNdEx := len(m.TrackInterface) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TrackInterface[iNdEx])
			copy(dAtA[i:], m.TrackInterface[iNdEx])
			i = encodeVarintVrrpdOc(dAtA, i, uint64(len(m.TrackInterface[iNdEx])))
			i--
			dAtA[i] = 0x4
			i--
			dAtA[i] = 0xb2
		}
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6Type) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6Type) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6Type) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Addresses != nil {
		{
			size, err := m.Addresses.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVrrpdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Address) > 0 {
		for iNdEx := len(m.Address) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Address[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVrrpdOc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Vrrp != nil {
		{
			size, err := m.Vrrp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVrrpdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	if m.Ip != nil {
		i -= len(*m.Ip)
		copy(dAtA[i:], *m.Ip)
		i = encodeVarintVrrpdOc(dAtA, i, uint64(len(*m.Ip)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.VrrpGroup) > 0 {
		for iNdEx := len(m.VrrpGroup) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VrrpGroup[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVrrpdOc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x9
			i--
			dAtA[i] = 0xba
		}
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.InterfaceTracking != nil {
		{
			size, err := m.InterfaceTracking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVrrpdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xc2
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVrrpdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.VirtualLinkLocal != nil {
		i -= len(*m.VirtualLinkLocal)
		copy(dAtA[i:], *m.VirtualLinkLocal)
		i = encodeVarintVrrpdOc(dAtA, i, uint64(len(*m.VirtualLinkLocal)))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xc2
	}
	if m.CurrentPriority != nil {
		i = encodeVarintVrrpdOc(dAtA, i, uint64(*m.CurrentPriority))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xb8
	}
	if m.AdvertisementInterval != nil {
		i = encodeVarintVrrpdOc(dAtA, i, uint64(*m.AdvertisementInterval))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xb0
	}
	if m.AcceptMode != nil {
		i--
		if *m.AcceptMode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xa8
	}
	if m.PreemptDelay != nil {
		i = encodeVarintVrrpdOc(dAtA, i, uint64(*m.PreemptDelay))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xa0
	}
	if m.Preempt != nil {
		i--
		if *m.Preempt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x98
	}
	if m.Priority != nil {
		i = encodeVarintVrrpdOc(dAtA, i, uint64(*m.Priority))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x90
	}
	if len(m.VirtualAddress) > 0 {
		for iNdEx := len(m.VirtualAddress) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VirtualAddress[iNdEx])
			copy(dAtA[i:], m.VirtualAddress[iNdEx])
			i = encodeVarintVrrpdOc(dAtA, i, uint64(len(m.VirtualAddress[iNdEx])))
			i--
			dAtA[i] = 0x5
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.VirtualRouterId != nil {
		i = encodeVarintVrrpdOc(dAtA, i, uint64(*m.VirtualRouterId))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x80
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVrrpdOc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PriorityDecrement != nil {
		i = encodeVarintVrrpdOc(dAtA, i, uint64(*m.PriorityDecrement))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xd0
	}
	if len(m.TrackInterface) > 0 {
		for iNdEx := len(m.TrackInterface) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TrackInterface[iNdEx])
			copy(dAtA[i:], m.TrackInterface[iNdEx])
			i = encodeVarintVrrpdOc(dAtA, i, uint64(len(m.TrackInterface[iNdEx])))
			i--
			dAtA[i] = 0x5
			i--
			dAtA[i] = 0xca
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintVrrpdOc(dAtA []byte, offset int, v uint64) int {
	offset -= sovVrrpdOc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InterfacesVrrp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Interface) > 0 {
		for _, e := range m.Interface {
			l = e.Size()
			n += 2 + l + sovVrrpdOc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesVrrpInterfaceList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 2 + l + sovVrrpdOc(uint64(l))
	}
	if m.Subinterfaces != nil {
		l = m.Subinterfaces.Size()
		n += 2 + l + sovVrrpdOc(uint64(l))
	}
	if m.RoutedVlan != nil {
		l = m.RoutedVlan.Size()
		n += 2 + l + sovVrrpdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesVrrpInterfaceListSubinterfacesType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Subinterface) > 0 {
		for _, e := range m.Subinterface {
			l = e.Size()
			n += 2 + l + sovVrrpdOc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != nil {
		n += 2 + sovVrrpdOc(uint64(*m.Index))
	}
	if m.Ipv4 != nil {
		l = m.Ipv4.Size()
		n += 2 + l + sovVrrpdOc(uint64(l))
	}
	if m.Ipv6 != nil {
		l = m.Ipv6.Size()
		n += 2 + l + sovVrrpdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Addresses != nil {
		l = m.Addresses.Size()
		n += 2 + l + sovVrrpdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Address) > 0 {
		for _, e := range m.Address {
			l = e.Size()
			n += 2 + l + sovVrrpdOc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ip != nil {
		l = len(*m.Ip)
		n += 2 + l + sovVrrpdOc(uint64(l))
	}
	if m.Vrrp != nil {
		l = m.Vrrp.Size()
		n += 2 + l + sovVrrpdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VrrpGroup) > 0 {
		for _, e := range m.VrrpGroup {
			l = e.Size()
			n += 2 + l + sovVrrpdOc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 2 + l + sovVrrpdOc(uint64(l))
	}
	if m.InterfaceTracking != nil {
		l = m.InterfaceTracking.Size()
		n += 2 + l + sovVrrpdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VirtualRouterId != nil {
		n += 2 + sovVrrpdOc(uint64(*m.VirtualRouterId))
	}
	if len(m.VirtualAddress) > 0 {
		for _, s := range m.VirtualAddress {
			l = len(s)
			n += 2 + l + sovVrrpdOc(uint64(l))
		}
	}
	if m.Priority != nil {
		n += 2 + sovVrrpdOc(uint64(*m.Priority))
	}
	if m.Preempt != nil {
		n += 3
	}
	if m.PreemptDelay != nil {
		n += 2 + sovVrrpdOc(uint64(*m.PreemptDelay))
	}
	if m.AcceptMode != nil {
		n += 3
	}
	if m.AdvertisementInterval != nil {
		n += 2 + sovVrrpdOc(uint64(*m.AdvertisementInterval))
	}
	if m.CurrentPriority != nil {
		n += 2 + sovVrrpdOc(uint64(*m.CurrentPriority))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 2 + l + sovVrrpdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TrackInterface) > 0 {
		for _, s := range m.TrackInterface {
			l = len(s)
			n += 2 + l + sovVrrpdOc(uint64(l))
		}
	}
	if m.PriorityDecrement != nil {
		n += 2 + sovVrrpdOc(uint64(*m.PriorityDecrement))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Addresses != nil {
		l = m.Addresses.Size()
		n += 2 + l + sovVrrpdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Address) > 0 {
		for _, e := range m.Address {
			l = e.Size()
			n += 2 + l + sovVrrpdOc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ip != nil {
		l = len(*m.Ip)
		n += 2 + l + sovVrrpdOc(uint64(l))
	}
	if m.Vrrp != nil {
		l = m.Vrrp.Size()
		n += 2 + l + sovVrrpdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VrrpGroup) > 0 {
		for _, e := range m.VrrpGroup {
			l = e.Size()
			n += 2 + l + sovVrrpdOc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 2 + l + sovVrrpdOc(uint64(l))
	}
	if m.InterfaceTracking != nil {
		l = m.InterfaceTracking.Size()
		n += 2 + l + sovVrrpdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VirtualRouterId != nil {
		n += 2 + sovVrrpdOc(uint64(*m.VirtualRouterId))
	}
	if len(m.VirtualAddress) > 0 {
		for _, s := range m.VirtualAddress {
			l = len(s)
			n += 2 + l + sovVrrpdOc(uint64(l))
		}
	}
	if m.Priority != nil {
		n += 2 + sovVrrpdOc(uint64(*m.Priority))
	}
	if m.Preempt != nil {
		n += 3
	}
	if m.PreemptDelay != nil {
		n += 2 + sovVrrpdOc(uint64(*m.PreemptDelay))
	}
	if m.AcceptMode != nil {
		n += 3
	}
	if m.AdvertisementInterval != nil {
		n += 2 + sovVrrpdOc(uint64(*m.AdvertisementInterval))
	}
	if m.CurrentPriority != nil {
		n += 2 + sovVrrpdOc(uint64(*m.CurrentPriority))
	}
	if m.VirtualLinkLocal != nil {
		l = len(*m.VirtualLinkLocal)
		n += 2 + l + sovVrrpdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 2 + l + sovVrrpdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TrackInterface) > 0 {
		for _, s := range m.TrackInterface {
			l = len(s)
			n += 2 + l + sovVrrpdOc(uint64(l))
		}
	}
	if m.PriorityDecrement != nil {
		n += 2 + sovVrrpdOc(uint64(*m.PriorityDecrement))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesVrrpInterfaceListRoutedVlanType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ipv4 != nil {
		l = m.Ipv4.Size()
		n += 2 + l + sovVrrpdOc(uint64(l))
	}
	if m.Ipv6 != nil {
		l = m.Ipv6.Size()
		n += 2 + l + sovVrrpdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4Type) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Addresses != nil {
		l = m.Addresses.Size()
		n += 2 + l + sovVrrpdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Address) > 0 {
		for _, e := range m.Address {
			l = e.Size()
			n += 2 + l + sovVrrpdOc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ip != nil {
		l = len(*m.Ip)
		n += 2 + l + sovVrrpdOc(uint64(l))
	}
	if m.Vrrp != nil {
		l = m.Vrrp.Size()
		n += 2 + l + sovVrrpdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VrrpGroup) > 0 {
		for _, e := range m.VrrpGroup {
			l = e.Size()
			n += 2 + l + sovVrrpdOc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 2 + l + sovVrrpdOc(uint64(l))
	}
	if m.InterfaceTracking != nil {
		l = m.InterfaceTracking.Size()
		n += 2 + l + sovVrrpdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VirtualRouterId != nil {
		n += 2 + sovVrrpdOc(uint64(*m.VirtualRouterId))
	}
	if len(m.VirtualAddress) > 0 {
		for _, s := range m.VirtualAddress {
			l = len(s)
			n += 2 + l + sovVrrpdOc(uint64(l))
		}
	}
	if m.Priority != nil {
		n += 2 + sovVrrpdOc(uint64(*m.Priority))
	}
	if m.Preempt != nil {
		n += 3
	}
	if m.PreemptDelay != nil {
		n += 2 + sovVrrpdOc(uint64(*m.PreemptDelay))
	}
	if m.AcceptMode != nil {
		n += 3
	}
	if m.AdvertisementInterval != nil {
		n += 2 + sovVrrpdOc(uint64(*m.AdvertisementInterval))
	}
	if m.CurrentPriority != nil {
		n += 2 + sovVrrpdOc(uint64(*m.CurrentPriority))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 2 + l + sovVrrpdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TrackInterface) > 0 {
		for _, s := range m.TrackInterface {
			l = len(s)
			n += 2 + l + sovVrrpdOc(uint64(l))
		}
	}
	if m.PriorityDecrement != nil {
		n += 2 + sovVrrpdOc(uint64(*m.PriorityDecrement))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6Type) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Addresses != nil {
		l = m.Addresses.Size()
		n += 2 + l + sovVrrpdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Address) > 0 {
		for _, e := range m.Address {
			l = e.Size()
			n += 2 + l + sovVrrpdOc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ip != nil {
		l = len(*m.Ip)
		n += 2 + l + sovVrrpdOc(uint64(l))
	}
	if m.Vrrp != nil {
		l = m.Vrrp.Size()
		n += 2 + l + sovVrrpdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VrrpGroup) > 0 {
		for _, e := range m.VrrpGroup {
			l = e.Size()
			n += 2 + l + sovVrrpdOc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 2 + l + sovVrrpdOc(uint64(l))
	}
	if m.InterfaceTracking != nil {
		l = m.InterfaceTracking.Size()
		n += 2 + l + sovVrrpdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VirtualRouterId != nil {
		n += 2 + sovVrrpdOc(uint64(*m.VirtualRouterId))
	}
	if len(m.VirtualAddress) > 0 {
		for _, s := range m.VirtualAddress {
			l = len(s)
			n += 2 + l + sovVrrpdOc(uint64(l))
		}
	}
	if m.Priority != nil {
		n += 2 + sovVrrpdOc(uint64(*m.Priority))
	}
	if m.Preempt != nil {
		n += 3
	}
	if m.PreemptDelay != nil {
		n += 2 + sovVrrpdOc(uint64(*m.PreemptDelay))
	}
	if m.AcceptMode != nil {
		n += 3
	}
	if m.AdvertisementInterval != nil {
		n += 2 + sovVrrpdOc(uint64(*m.AdvertisementInterval))
	}
	if m.CurrentPriority != nil {
		n += 2 + sovVrrpdOc(uint64(*m.CurrentPriority))
	}
	if m.VirtualLinkLocal != nil {
		l = len(*m.VirtualLinkLocal)
		n += 2 + l + sovVrrpdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 2 + l + sovVrrpdOc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TrackInterface) > 0 {
		for _, s := range m.TrackInterface {
			l = len(s)
			n += 2 + l + sovVrrpdOc(uint64(l))
		}
	}
	if m.PriorityDecrement != nil {
		n += 2 + sovVrrpdOc(uint64(*m.PriorityDecrement))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovVrrpdOc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVrrpdOc(x uint64) (n int) {
	return sovVrrpdOc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InterfacesVrrp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: interfaces_vrrp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: interfaces_vrrp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interface = append(m.Interface, &InterfacesVrrpInterfaceList{})
			if err := m.Interface[len(m.Interface)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrrpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesVrrpInterfaceList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: interface_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: interface_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subinterfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subinterfaces == nil {
				m.Subinterfaces = &InterfacesVrrpInterfaceListSubinterfacesType{}
			}
			if err := m.Subinterfaces.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 152:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoutedVlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoutedVlan == nil {
				m.RoutedVlan = &InterfacesVrrpInterfaceListRoutedVlanType{}
			}
			if err := m.RoutedVlan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrrpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesVrrpInterfaceListSubinterfacesType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: subinterfaces_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: subinterfaces_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subinterface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subinterface = append(m.Subinterface, &InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList{})
			if err := m.Subinterface[len(m.Subinterface)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrrpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: subinterface_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: subinterface_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Index = &v
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ipv4 == nil {
				m.Ipv4 = &InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type{}
			}
			if err := m.Ipv4.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 152:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ipv6 == nil {
				m.Ipv6 = &InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type{}
			}
			if err := m.Ipv6.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrrpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4Type) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ipv4_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ipv4_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Addresses == nil {
				m.Addresses = &InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType{}
			}
			if err := m.Addresses.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrrpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: addresses_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: addresses_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address, &InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList{})
			if err := m.Address[len(m.Address)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrrpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: address_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: address_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Ip = &s
			iNdEx = postIndex
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vrrp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vrrp == nil {
				m.Vrrp = &InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpType{}
			}
			if err := m.Vrrp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrrpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: vrrp_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: vrrp_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrrpGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VrrpGroup = append(m.VrrpGroup, &InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList{})
			if err := m.VrrpGroup[len(m.VrrpGroup)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrrpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: vrrp_group_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: vrrp_group_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 152:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceTracking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InterfaceTracking == nil {
				m.InterfaceTracking = &InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType{}
			}
			if err := m.InterfaceTracking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrrpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: state_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: state_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 62:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualRouterId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VirtualRouterId = &v
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualAddress = append(m.VirtualAddress, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 64:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Priority = &v
		case 65:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preempt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Preempt = &b
		case 66:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreemptDelay", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PreemptDelay = &v
		case 67:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptMode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.AcceptMode = &b
		case 68:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertisementInterval", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdvertisementInterval = &v
		case 69:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPriority", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurrentPriority = &v
		default:
			iNdEx = preIndex
			skippy, err := skipVrrpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: interface_tracking_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: interface_tracking_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrrpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: state_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: state_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackInterface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrackInterface = append(m.TrackInterface, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 71:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriorityDecrement", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PriorityDecrement = &v
		default:
			iNdEx = preIndex
			skippy, err := skipVrrpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6Type) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ipv6_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ipv6_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Addresses == nil {
				m.Addresses = &InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType{}
			}
			if err := m.Addresses.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrrpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: addresses_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: addresses_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address, &InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList{})
			if err := m.Address[len(m.Address)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrrpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: address_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: address_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Ip = &s
			iNdEx = postIndex
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vrrp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vrrp == nil {
				m.Vrrp = &InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpType{}
			}
			if err := m.Vrrp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrrpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: vrrp_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: vrrp_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrrpGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VrrpGroup = append(m.VrrpGroup, &InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList{})
			if err := m.VrrpGroup[len(m.VrrpGroup)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrrpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: vrrp_group_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: vrrp_group_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 152:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceTracking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InterfaceTracking == nil {
				m.InterfaceTracking = &InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType{}
			}
			if err := m.InterfaceTracking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrrpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: state_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: state_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 80:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualRouterId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VirtualRouterId = &v
		case 81:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualAddress = append(m.VirtualAddress, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 82:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Priority = &v
		case 83:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preempt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Preempt = &b
		case 84:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreemptDelay", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PreemptDelay = &v
		case 85:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptMode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.AcceptMode = &b
		case 86:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertisementInterval", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdvertisementInterval = &v
		case 87:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPriority", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurrentPriority = &v
		case 88:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualLinkLocal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VirtualLinkLocal = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrrpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: interface_tracking_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: interface_tracking_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrrpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesVrrpInterfaceListSubinterfacesTypeSubinterfaceListIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: state_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: state_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 89:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackInterface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrackInterface = append(m.TrackInterface, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 90:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriorityDecrement", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PriorityDecrement = &v
		default:
			iNdEx = preIndex
			skippy, err := skipVrrpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesVrrpInterfaceListRoutedVlanType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: routed_vlan_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: routed_vlan_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ipv4 == nil {
				m.Ipv4 = &InterfacesVrrpInterfaceListRoutedVlanTypeIpv4Type{}
			}
			if err := m.Ipv4.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 152:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ipv6 == nil {
				m.Ipv6 = &InterfacesVrrpInterfaceListRoutedVlanTypeIpv6Type{}
			}
			if err := m.Ipv6.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrrpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4Type) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ipv4_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ipv4_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Addresses == nil {
				m.Addresses = &InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesType{}
			}
			if err := m.Addresses.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrrpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: addresses_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: addresses_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address, &InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList{})
			if err := m.Address[len(m.Address)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrrpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: address_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: address_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Ip = &s
			iNdEx = postIndex
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vrrp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vrrp == nil {
				m.Vrrp = &InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpType{}
			}
			if err := m.Vrrp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrrpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: vrrp_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: vrrp_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrrpGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VrrpGroup = append(m.VrrpGroup, &InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList{})
			if err := m.VrrpGroup[len(m.VrrpGroup)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrrpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: vrrp_group_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: vrrp_group_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 152:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceTracking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InterfaceTracking == nil {
				m.InterfaceTracking = &InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType{}
			}
			if err := m.InterfaceTracking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrrpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: state_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: state_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 62:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualRouterId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VirtualRouterId = &v
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualAddress = append(m.VirtualAddress, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 64:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Priority = &v
		case 65:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preempt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Preempt = &b
		case 66:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreemptDelay", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PreemptDelay = &v
		case 67:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptMode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.AcceptMode = &b
		case 68:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertisementInterval", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdvertisementInterval = &v
		case 69:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPriority", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurrentPriority = &v
		default:
			iNdEx = preIndex
			skippy, err := skipVrrpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: interface_tracking_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: interface_tracking_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrrpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv4TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: state_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: state_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackInterface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrackInterface = append(m.TrackInterface, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 71:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriorityDecrement", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PriorityDecrement = &v
		default:
			iNdEx = preIndex
			skippy, err := skipVrrpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6Type) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ipv6_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ipv6_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Addresses == nil {
				m.Addresses = &InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesType{}
			}
			if err := m.Addresses.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrrpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: addresses_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: addresses_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address, &InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList{})
			if err := m.Address[len(m.Address)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrrpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: address_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: address_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Ip = &s
			iNdEx = postIndex
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vrrp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vrrp == nil {
				m.Vrrp = &InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpType{}
			}
			if err := m.Vrrp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrrpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: vrrp_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: vrrp_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrrpGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VrrpGroup = append(m.VrrpGroup, &InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList{})
			if err := m.VrrpGroup[len(m.VrrpGroup)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrrpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: vrrp_group_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: vrrp_group_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 152:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceTracking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InterfaceTracking == nil {
				m.InterfaceTracking = &InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType{}
			}
			if err := m.InterfaceTracking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrrpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListStateType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: state_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: state_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 80:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualRouterId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VirtualRouterId = &v
		case 81:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualAddress = append(m.VirtualAddress, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 82:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Priority = &v
		case 83:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preempt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Preempt = &b
		case 84:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreemptDelay", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PreemptDelay = &v
		case 85:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptMode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.AcceptMode = &b
		case 86:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertisementInterval", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AdvertisementInterval = &v
		case 87:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPriority", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurrentPriority = &v
		case 88:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualLinkLocal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.VirtualLinkLocal = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrrpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: interface_tracking_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: interface_tracking_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrrpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfacesVrrpInterfaceListRoutedVlanTypeIpv6TypeAddressesTypeAddressListVrrpTypeVrrpGroupListInterfaceTrackingTypeStateType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: state_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: state_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 89:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackInterface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrackInterface = append(m.TrackInterface, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 90:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriorityDecrement", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PriorityDecrement = &v
		default:
			iNdEx = preIndex
			skippy, err := skipVrrpdOc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVrrpdOc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVrrpdOc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVrrpdOc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVrrpdOc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVrrpdOc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVrrpdOc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVrrpdOc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVrrpdOc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVrrpdOc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVrrpdOc = fmt.Errorf("proto: unexpected end of group")
)
